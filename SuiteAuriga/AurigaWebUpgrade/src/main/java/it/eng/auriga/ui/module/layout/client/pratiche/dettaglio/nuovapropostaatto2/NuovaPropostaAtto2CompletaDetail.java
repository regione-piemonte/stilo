/* * SPDX-License-Identifier: AGPL-3.0-or-later * * C Copyright 2023 Regione Piemonte * */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.Scheduler;
import com.google.gwt.core.client.Scheduler.ScheduledCommand;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.NumberFormat;
import com.google.gwt.regexp.shared.RegExp;
import com.google.gwt.user.datepicker.client.CalendarUtil;
import com.smartgwt.client.data.AdvancedCriteria;
import com.smartgwt.client.data.DSCallback;
import com.smartgwt.client.data.DSRequest;
import com.smartgwt.client.data.DSResponse;
import com.smartgwt.client.data.DataSource;
import com.smartgwt.client.data.Record;
import com.smartgwt.client.data.RecordList;
import com.smartgwt.client.types.Alignment;
import com.smartgwt.client.types.BackgroundRepeat;
import com.smartgwt.client.types.DateDisplayFormat;
import com.smartgwt.client.types.FieldType;
import com.smartgwt.client.types.ListGridFieldType;
import com.smartgwt.client.types.OperatorId;
import com.smartgwt.client.types.Overflow;
import com.smartgwt.client.types.Side;
import com.smartgwt.client.types.TitleOrientation;
import com.smartgwt.client.types.VerticalAlignment;
import com.smartgwt.client.util.BooleanCallback;
import com.smartgwt.client.util.JSON;
import com.smartgwt.client.util.SC;
import com.smartgwt.client.util.StringUtil;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.Label;
import com.smartgwt.client.widgets.events.ClickEvent;
import com.smartgwt.client.widgets.events.ClickHandler;
import com.smartgwt.client.widgets.events.FetchDataEvent;
import com.smartgwt.client.widgets.events.FetchDataHandler;
import com.smartgwt.client.widgets.form.DynamicForm;
import com.smartgwt.client.widgets.form.FormItemHoverFormatter;
import com.smartgwt.client.widgets.form.FormItemIfFunction;
import com.smartgwt.client.widgets.form.FormItemInputTransformer;
import com.smartgwt.client.widgets.form.fields.CanvasItem;
import com.smartgwt.client.widgets.form.fields.FormItem;
import com.smartgwt.client.widgets.form.fields.HiddenItem;
import com.smartgwt.client.widgets.form.fields.RadioGroupItem;
import com.smartgwt.client.widgets.form.fields.SpacerItem;
import com.smartgwt.client.widgets.form.fields.events.BlurEvent;
import com.smartgwt.client.widgets.form.fields.events.BlurHandler;
import com.smartgwt.client.widgets.form.fields.events.ChangeEvent;
import com.smartgwt.client.widgets.form.fields.events.ChangeHandler;
import com.smartgwt.client.widgets.form.fields.events.ChangedEvent;
import com.smartgwt.client.widgets.form.fields.events.ChangedHandler;
import com.smartgwt.client.widgets.form.fields.events.IconClickEvent;
import com.smartgwt.client.widgets.form.fields.events.IconClickHandler;
import com.smartgwt.client.widgets.form.validator.CustomValidator;
import com.smartgwt.client.widgets.form.validator.RegExpValidator;
import com.smartgwt.client.widgets.form.validator.RequiredIfFunction;
import com.smartgwt.client.widgets.form.validator.RequiredIfValidator;
import com.smartgwt.client.widgets.grid.CellFormatter;
import com.smartgwt.client.widgets.grid.ListGrid;
import com.smartgwt.client.widgets.grid.ListGridField;
import com.smartgwt.client.widgets.grid.ListGridRecord;
import com.smartgwt.client.widgets.grid.events.CellClickEvent;
import com.smartgwt.client.widgets.grid.events.CellClickHandler;
import com.smartgwt.client.widgets.grid.events.RecordClickEvent;
import com.smartgwt.client.widgets.grid.events.RecordClickHandler;
import com.smartgwt.client.widgets.layout.VLayout;
import com.smartgwt.client.widgets.tab.Tab;
import com.smartgwt.client.widgets.tab.TabSet;
import com.smartgwt.client.widgets.tab.events.TabSelectedEvent;
import com.smartgwt.client.widgets.tab.events.TabSelectedHandler;
import com.smartgwt.client.widgets.toolbar.ToolStrip;
import com.smartgwt.client.widgets.toolbar.ToolStripButton;

import it.eng.auriga.ui.module.layout.client.AurigaLayout;
import it.eng.auriga.ui.module.layout.client.ErroreMassivoPopup;
import it.eng.auriga.ui.module.layout.client.ErroreProposteConcorrentiPopUp;
import it.eng.auriga.ui.module.layout.client.NumberFormatUtility;
import it.eng.auriga.ui.module.layout.client.RegExpUtility;
import it.eng.auriga.ui.module.layout.client.anagrafiche.LookupRubricaEmailPopup;
import it.eng.auriga.ui.module.layout.client.attributiDinamici.AttributiDinamiciDetail;
import it.eng.auriga.ui.module.layout.client.attributiDinamici.DocumentItem;
import it.eng.auriga.ui.module.layout.client.common.items.SelectItemValoriDizionario;
import it.eng.auriga.ui.module.layout.client.editor.CKEditorItem;
import it.eng.auriga.ui.module.layout.client.i18n.I18NUtil;
import it.eng.auriga.ui.module.layout.client.postaElettronica.DettaglioRegProtAssociatoWindow;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.TaskFlussoInterface;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.AltriDirRespRegTecnicaCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.AltriDirigentiProponentiCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.AssessoriItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.AttiRiferimentoItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.CIGItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.CUIItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ConsiglieriItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.CoordinatoriCompCircItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DatiContabiliStoriciWindow;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DestVantaggioItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DestinatariAttoItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DestinatariNotificaMessiItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DestinatariNotificaPECItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DirigenteAdottanteCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DirigenteRespRegTecnicaCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DirigentiConcertoCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.DirigentiProponentiCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.EstensoreCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.IstruttoreCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaBeneficiariTrasparenzaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaDatiContabiliADSPItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaDatiContabiliATERSIRItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaDatiContabiliAVBItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaDatiContabiliSIBItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaDatiLiquidazioneAVBItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaInvioDatiSpesaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaInvioMovimentiContabiliSICRAItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaMovimentiContabilia2Item;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaMovimentiContabiliaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaMovimentiGSAItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ListaProponentiItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ParereCommissioniItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ProponenteAttoConsiglioItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ProponentiItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.RespUfficioPropCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.RespVistiConformitaCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.RespVistiPerfezionamentoCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ResponsabileDiProcedimentoCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ResponsabileUnicoProvvedimentoCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ResponsabileVistoAlternativoBilancioCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ResponsabiliPEGCompletaItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.RiferimentiNormativiItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ScrivaniaDECItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.UfficioCompetenteRagItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.UfficioGareAcquistiItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.UtenteRifAttoConsiglioItem;
import it.eng.auriga.ui.module.layout.client.pratiche.dettaglio.nuovapropostaatto2.items.ValoriDizionarioItem;
import it.eng.auriga.ui.module.layout.client.protocollazione.AllegatiGridItem;
import it.eng.auriga.ui.module.layout.client.protocollazione.AllegatiItem;
import it.eng.auriga.ui.module.layout.client.protocollazione.ClassificaFascicoloItem;
import it.eng.auriga.ui.module.layout.client.protocollazione.PeriziaItem;
import it.eng.auriga.ui.module.layout.client.protocollazione.PreviewWindow;
import it.eng.auriga.ui.module.layout.client.protocollazione.PreviewWindowWithCallback;
import it.eng.auriga.ui.module.layout.client.protocollazione.ProtocollazioneDetail;
import it.eng.auriga.ui.module.layout.client.protocollazione.SaveModelloAction;
import it.eng.auriga.ui.module.layout.client.protocollazione.SaveModelloWindow;
import it.eng.auriga.ui.module.layout.client.protocollazione.SelezionaUOItem;
import it.eng.auriga.ui.module.layout.client.protocollazione.pgweb.AltreVieItem;
import it.eng.auriga.ui.module.layout.shared.util.IndirizziEmailSplitter;
import it.eng.utility.ui.module.core.client.callback.ServiceCallback;
import it.eng.utility.ui.module.core.client.datasource.GWTRestDataSource;
import it.eng.utility.ui.module.core.client.datasource.GWTRestService;
import it.eng.utility.ui.module.core.shared.message.MessageBean;
import it.eng.utility.ui.module.core.shared.message.MessageType;
import it.eng.utility.ui.module.layout.client.Layout;
import it.eng.utility.ui.module.layout.client.StringSplitterClient;
import it.eng.utility.ui.module.layout.client.common.CustomDetail;
import it.eng.utility.ui.module.layout.client.common.DetailSection;
import it.eng.utility.ui.module.layout.client.common.GridItem;
import it.eng.utility.ui.module.layout.client.common.HeaderDetailSection;
import it.eng.utility.ui.module.layout.client.common.IDatiSensibiliItem;
import it.eng.utility.ui.module.layout.client.common.IDocumentItem;
import it.eng.utility.ui.module.layout.client.common.IEditorItem;
import it.eng.utility.ui.module.layout.client.common.ReplicableItem;
import it.eng.utility.ui.module.layout.client.common.file.DownloadFile;
import it.eng.utility.ui.module.layout.client.common.file.InfoFileRecord;
import it.eng.utility.ui.module.layout.client.common.filter.item.AnnoItem;
import it.eng.utility.ui.module.layout.client.common.items.CheckboxItem;
import it.eng.utility.ui.module.layout.client.common.items.ComboBoxItem;
import it.eng.utility.ui.module.layout.client.common.items.DateItem;
import it.eng.utility.ui.module.layout.client.common.items.DateTimeItem;
import it.eng.utility.ui.module.layout.client.common.items.ExtendedDateItem;
import it.eng.utility.ui.module.layout.client.common.items.ExtendedNumericItem;
import it.eng.utility.ui.module.layout.client.common.items.ExtendedTextAreaItem;
import it.eng.utility.ui.module.layout.client.common.items.ExtendedTextItem;
import it.eng.utility.ui.module.layout.client.common.items.FilteredSelectItem;
import it.eng.utility.ui.module.layout.client.common.items.ImgButtonItem;
import it.eng.utility.ui.module.layout.client.common.items.ImgItem;
import it.eng.utility.ui.module.layout.client.common.items.NumericItem;
import it.eng.utility.ui.module.layout.client.common.items.SelectItem;
import it.eng.utility.ui.module.layout.client.common.items.StaticTextItem;
import it.eng.utility.ui.module.layout.client.common.items.TextAreaItem;
import it.eng.utility.ui.module.layout.client.common.items.TextItem;
import it.eng.utility.ui.module.layout.client.common.items.TitleItem;
import it.eng.utility.ui.module.layout.shared.util.FrontendUtil;

public class NuovaPropostaAtto2CompletaDetail extends CustomDetail {
		
	private final static String SEPARATORE_FILE_DA_INIETTARE = "##@@FILE_DA_INIETTARE@@##";
	
	public static final String _TAB_DATI_SCHEDA_ID = "DATI_SCHEDA";
	public static final String _TAB_DATI_DISPOSITIVO_ID = "DATI_DISPOSITIVO"; 
	public static final String _TAB_DATI_DISPOSITIVO_2_ID = "DATI_DISPOSITIVO_2"; 
	public static final String _TAB_ALLEGATI_ID = "ALLEGATI";
	public static final String _TAB_DOC_FASC_ID = "DOC_FASC";	
	public static final String _TAB_DATI_PUBBL_ID = "DATI_PUBBL"; 
	public static final String _TAB_MOVIMENTI_CONTABILI_ID = "MOVIMENTI_CONTABILI"; 
	public static final String _TAB_DATI_GSA_ID = "DATI_GSA"; 
	public static final String _TAB_DATI_SPESA_CORRENTE_ID = "DATI_SPESA_CORRENTE";
	public static final String _TAB_DATI_SPESA_CONTO_CAPITALE_ID = "DATI_SPESA_CONTO_CAPITALE";
	public static final String _TAB_AGGREGATO_SMISTAMENTO_ACTA_ID = "AGGREGATO_SMISTAMENTO_ACTA"; 
	public static final String _TAB_OPERE_ADSP_ID = "OPERE_ADSP";
	public static final String _TAB_DATI_CONTABILI_ATERSIR_ID = "DATI_CONTABILI_ATERSIR";
	public static final String _TAB_DATI_CONTABILI_ADSP_ID = "DATI_CONTABILI_ADSP";
	public static final String _TAB_DATI_CONTABILI_AVB_ID = "DATI_CONTABILI_AVB";
	public static final String _TAB_DATI_TRASP_AVB_ID = "DATI_TRASP_AVB";
	public static final String _TAB_DATI_LIQUIDAZIONE_AVB_ID = "DATI-CONT-LIQ-AVB";
	
	public static final String _FLG_SI = "SI";
//	public static final String _FLG_SI_SENZA_VLD_RIL_IMP = "SI, ma senza movimenti contabili";
	public static final String _FLG_NO = "NO";
	public static final String _FLG_OP_COMMERCIALE_NA = "N.A.";
	public static final String _FLG_ALTRO = "altro";
	
	public static final String _PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_A = "uff. competente per la definizione della spesa";
	public static final String _PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B = "uff. Bilancio Centrale (Ragioneria)";
	public static final String _MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1 = "compilazione griglia";
	public static final String _MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B2 = "xls importabile in SIB";
	public static final String _MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B3 = "associazione impegni su SIB a cura del proponente";
	public static final String _MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B4 = "registrazione su SIB";
	
	public static final String _MANDATORY = "mandatory"; 
	public static final String _OPTIONAL = "optional";
	
	public static final String _DECORR_PUBBL_STD = "standard";
	public static final String _DECORR_PUBBL_POST = "posticipata";
	
	public static final String _FLG_EMENDAMENTO_SU_FILE_D = "D";
	public static final String _FLG_EMENDAMENTO_SU_FILE_A = "A";	
	
	public static final String _STRUTT_COMP_DEF_DATI_CONT_SEMPRE_UGUALE_UO_PROPONENTE = "sempre_uguale_uo_proponente";
	public static final String _STRUTT_COMP_DEF_DATI_CONT_DEFAULT_UGUALE_UO_PROPONENTE = "default_uguale_uo_proponente";
	
	public static final String _PERMANENTE = "permanente";
	public static final String _TEMPORANEA = "temporanea";
	
	public static final String _TIPO_LUOGO_DA_TOPONOMASTICA = "da toponomastica";
	public static final String _TIPO_LUOGO_TESTO_LIBERO = "testo libero";
	
	public static final String _DURATA_RAPP_GIURID_NUM_MESI = "In numero mesi";
	public static final String _DURATA_RAPP_GIURID_DA_AL = "dal / al";
	public static final String _DURATA_RAPP_GIURID_NON_APPLICABILE = "non applicabile";
	
	public static final String _TIPO_INTERPELLANZA_RISP_SCRITTA = "risposta scritta";
	
	private final int ALT_POPUP_ERR_MASS = 375;
	private final int LARG_POPUP_ERR_MASS = 620;
	
	protected NuovaPropostaAtto2CompletaDetail instance;
	
	protected String tipoDocumento;
	protected String rowidDoc;
	protected Record recordFromLoadDett;
	
	protected VLayout mainLayout;
	protected ToolStrip mainToolStrip;
	protected GWTRestDataSource modelliDS;
	protected SelectItem modelliSelectItem;
	protected ListGrid modelliPickListProperties;
	protected SaveModelloWindow saveModelloWindow;
	protected ToolStripButton salvaComeModelloButton;

	protected TabSet tabSet;
	protected Tab tabDatiScheda;
	protected Tab tabDatiDispositivo;
	protected Tab tabDatiDispositivo2;
	protected Tab tabAllegati;
	protected Tab tabDocFasc;
	protected Tab tabPubblicazioneNotifiche;
	protected Tab tabMovimentiContabili;
	protected Tab tabDatiGSA;
	protected Tab tabDatiSpesaCorrente;
	protected Tab tabDatiSpesaContoCapitale;
	protected Tab tabAggregatoSmistamentoACTA;
	protected Tab tabOpereADSP;
	protected Tab tabDatiContabiliATERSIR;
	protected Tab tabDatiContabiliADSP;
	protected Tab tabDatiContabiliAVB;
	protected Tab tabTrasparenzaAVB;
	protected Tab tabDatiLiquidazioneAVB;
	
//	protected boolean toSaveAndReloadTask;
	
	protected Record recordParametriTipoAtto;
	protected Boolean flgPubblicazioneAllegatiUguale;
	protected Boolean flgAvvioLiquidazioneContabilia;
	protected Boolean flgSoloPreparazioneVersPubblicazione;
	protected Boolean flgSoloOmissisModProprietaFile;
	protected Boolean flgCtrlMimeTypeAllegPI;
	protected Boolean flgProtocollazioneProsa;
	protected Boolean flgFirmaVersPubblAggiornata;
	protected HashMap<String, Record> attributiCustomCablati;
	protected LinkedHashMap<String, String> ufficioProponenteValueMap;
	protected LinkedHashMap<String, String> flgUfficioProponenteGareMap;	
	protected Boolean flgAllegAttoParteIntDefaultXTipoAtto;
	protected Boolean flgAllegAttoParteIntDefaultOrdPermanente;
	protected Boolean flgAllegAttoParteIntDefaultOrdTemporanea;
	protected Boolean flgAllegAttoPubblSepDefaultXTipoAtto;
	protected Boolean flgAttivaSceltaPosizioneAllegatiUniti;
	protected List<String> elencoCampiConGestioneOmissisDaIgnorare;
	
	/*******************
	 * TAB DATI SCHEDA *
	 *******************/

	/* Hidden */
	protected DynamicForm hiddenForm;
	protected HiddenItem idUdHiddenItem; 
	protected HiddenItem idUdNuovoComeCopiaHiddenItem;
	protected HiddenItem derivaDaRdAHiddenItem;
	protected HiddenItem prefKeyModelloHiddenItem;
	protected HiddenItem prefNameModelloHiddenItem;
	protected HiddenItem useridModelloHiddenItem;
	protected HiddenItem idUoModelloHiddenItem;
	protected HiddenItem flgTipoDocDiversoHiddenItem;
	protected HiddenItem idTipoDocDaCopiareHiddenItem;
	protected HiddenItem tipoDocumentoHiddenItem; 
	protected HiddenItem nomeTipoDocumentoHiddenItem; 
	protected HiddenItem rowidDocHiddenItem;
	protected HiddenItem idDocPrimarioHiddenItem; 
	protected HiddenItem nomeFilePrimarioHiddenItem;
	protected HiddenItem uriFilePrimarioHiddenItem;
	protected HiddenItem remoteUriFilePrimarioHiddenItem;
	protected HiddenItem infoFilePrimarioHiddenItem;
	protected HiddenItem isChangedFilePrimarioHiddenItem;
	protected HiddenItem idDocPrimarioOmissisHiddenItem; 
	protected HiddenItem nomeFilePrimarioOmissisHiddenItem;
	protected HiddenItem uriFilePrimarioOmissisHiddenItem;
	protected HiddenItem remoteUriFilePrimarioOmissisHiddenItem;
	protected HiddenItem infoFilePrimarioOmissisHiddenItem;		
	protected HiddenItem isChangedFilePrimarioOmissisHiddenItem;
	protected HiddenItem flgAggiornataVersDaPubblicareHiddenItem;
	protected HiddenItem idPropostaAMCHiddenItem;
	protected HiddenItem listaEmendamentiItem;
	protected HiddenItem listaEmendamentiBloccoRiordinoAutItem;
	protected HiddenItem uriDocGeneratoFormatoOdtItem;
	protected HiddenItem flgForzataModificaAttoItem;
	protected HiddenItem codAOOXSelNodoACTAItem;
	protected HiddenItem codStrutturaXSelNodoACTAItem;
	protected HiddenItem timestampGetDataItem;
	
	/* Dati scheda - Registrazione */
	protected HeaderNuovaPropostaAtto2CompletaDetailSection detailSectionRegistrazione;
	protected DynamicForm registrazioneForm;
	protected ImgItem iconaTipoRegistrazioneItem; 
	protected TextItem siglaRegistrazioneItem;
	protected NumericItem numeroRegistrazioneItem;
	protected DateTimeItem dataRegistrazioneItem;
	protected TextItem desUserRegistrazioneItem;
	protected TextItem desUORegistrazioneItem;
	protected TextItem estremiRepertorioPerStrutturaItem;
	protected ImgItem iconaTipoRegProvvisoriaItem; 
	protected TextItem siglaRegProvvisoriaItem;
	protected NumericItem numeroRegProvvisoriaItem;
	protected DateTimeItem dataRegProvvisoriaItem;
	protected TextItem desUserRegProvvisoriaItem;
	protected TextItem desUORegProvvisoriaItem;
	protected DynamicForm invioACTAForm;
	protected StaticTextItem esitoInvioACTASerieAttiIntegraliItem;
	protected StaticTextItem esitoInvioACTASeriePubblItem;
	protected DynamicForm attoLiquidazioneForm;
	protected HiddenItem idUdLiquidazioneItem; 
	protected TextItem estremiAttoLiquidazioneItem;
	
	/* Dati scheda - Pubblicazione */
//	protected HeaderNuovaPropostaAtto2CompletaDetailSection detailSectionPubblicazione;
//	protected DynamicForm pubblicazioneForm;
//	protected DateItem dataInizioPubblicazioneItem;
//	protected NumericItem giorniPubblicazioneItem;
    	
	/* Dati scheda - Emenda */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionEmendamento;
	protected DynamicForm emendamentoForm1;
	protected SelectItem tipoAttoEmendamentoItem;
	protected TextItem siglaAttoEmendamentoItem;
	protected NumericItem numeroAttoEmendamentoItem;
	protected AnnoItem annoAttoEmendamentoItem;
	protected NumericItem idEmendamentoItem;
	protected NumericItem numeroEmendamentoItem;
	protected DynamicForm emendamentoForm2;
	protected RadioGroupItem flgEmendamentoSuFileItem;
	protected NumericItem numeroAllegatoEmendamentoItem;
	protected CheckboxItem flgEmendamentoIntegraleAllegatoItem;
	protected NumericItem numeroPaginaEmendamentoItem;
	protected NumericItem numeroRigaEmendamentoItem;
	protected SelectItem effettoEmendamentoItem;
	
	/* Dati scheda - Destinatari */
	
	protected DynamicForm attivaDestinatariForm;
	protected CheckboxItem flgAttivaDestinatariItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDestinatariAtto;
	protected DynamicForm destinatariAttoForm;
	protected DestinatariAttoItem listaDestinatariAttoItem;	
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDestinatariPCAtto;
	protected DynamicForm destinatariPCAttoForm;
	protected DestinatariAttoItem listaDestinatariPCAttoItem;
		
	/* Dati scheda - Tipo proposta */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionTipoProposta;
	protected DynamicForm tipoPropostaForm;
	protected SelectItem iniziativaPropostaItem;
	protected CheckboxItem flgAttoMeroIndirizzoItem;
	protected CheckboxItem flgAttoCommissarioItem;
	protected CheckboxItem flgModificaRegolamentoItem;	
	protected CheckboxItem flgModificaStatutoItem;
	protected CheckboxItem flgNominaItem;
	protected CheckboxItem flgRatificaDeliberaUrgenzaItem;
	protected CheckboxItem flgAttoUrgenteItem;		
	protected CheckboxItem flgCommissioniTipoPropostaItem;		
	
	/* Dati scheda - Circoscrizioni proponenti delibera */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionCircoscrizioni;
	protected DynamicForm circoscrizioniForm;
	protected ValoriDizionarioItem listaCircoscrizioniItem;
	
	/* Dati scheda - Interpellanza */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionInterpellanza;
	protected DynamicForm interpellanzaForm;
	protected SelectItem tipoInterpellanzaItem;
	protected TextAreaItem motivazioneInterpellanzaRispScrittaItem;
	
	/* Dati scheda - Ordinanza di mobilità */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOrdMobilita;
	protected DynamicForm ordMobilitaForm1;
	protected SelectItem tipoOrdMobilitaItem;
	protected DateItem dataInizioVldOrdinanzaItem;
	protected DateItem dataFineVldOrdinanzaItem;
	protected DynamicForm ordMobilitaForm2;
	protected RadioGroupItem tipoLuogoOrdMobilitaItem;
	protected AltreVieItem listaIndirizziOrdMobilitaItem;
	protected DynamicForm ordMobilitaForm3;
	protected CKEditorItem luogoOrdMobilitaItem;
	protected DynamicForm ordMobilitaForm4;
	protected ValoriDizionarioItem listaCircoscrizioniOrdMobilitaItem;
	protected DynamicForm ordMobilitaForm5;
	protected CKEditorItem descrizioneOrdMobilitaItem;
	
	/* Dati scheda - Ruoli */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionRuoli;
	protected DynamicForm ruoliForm;
	protected FormItem listaProponentiItem;	
	protected SelezionaUOItem listaUfficioProponenteItem;
	protected HiddenItem codUfficioProponenteItem;
	protected HiddenItem desUfficioProponenteItem;
	protected HiddenItem flgUfficioProponenteGareItem;
	protected SelectItem ufficioProponenteItem;	
	protected RadioGroupItem tipoProvvedimentoItem;	
	protected SelectItem sottotipoDeliberaItem;			
//	protected SelectItem ufficioGareAcquistiItem;
	protected UfficioGareAcquistiItem listaUfficioGareAcquistiItem;	
	protected RadioGroupItem flgProcExCodAppaltiItem;	
	protected HiddenItem codUfficioCompetenteItem;	
	protected HiddenItem desUfficioCompetenteItem;		
	protected HiddenItem cdrUOCompetenteItem;
	protected HiddenItem opzUOCompetenteItem;
	protected SelezionaUOItem listaUfficioCompetenteItem;	
	protected ResponsabileUnicoProvvedimentoCompletaItem listaRUPCodAppaltiItem;
	protected DirigenteAdottanteCompletaItem listaAdottanteItem;
	protected ResponsabileDiProcedimentoCompletaItem listaRdPCodAppaltiItem;
	protected SelectItem codProcedimentoRdPUgualeAdottanteItem;
	protected SelectItem centroDiCostoItem;
	protected DirigentiConcertoCompletaItem listaDirigentiConcertoItem;
	protected DirigenteRespRegTecnicaCompletaItem listaDirRespRegTecnicaItem;
	protected AltriDirRespRegTecnicaCompletaItem listaAltriDirRespRegTecnicaItem;
	protected ResponsabileDiProcedimentoCompletaItem listaRdPItem;
	protected SelectItem codProcedimentoRdPItem;
	protected HiddenItem desProcedimentoItem;
	protected ResponsabileUnicoProvvedimentoCompletaItem listaRUPItem;
	protected ScrivaniaDECItem listaScrivaniaDECItem;	
	protected AssessoriItem listaAssessoriItem;
	protected AssessoriItem listaAltriAssessoriItem;
	protected UfficioCompetenteRagItem listaUfficiCompetentiRagItem;
	protected ProponenteAttoConsiglioItem listaProponenteAttoConsiglioItem;
	protected ConsiglieriItem listaConsiglieriItem;
	protected ConsiglieriItem listaAltriConsiglieriItem;
	protected DateItem dataTermFirmeConsiglieriItem;
	protected DirigentiProponentiCompletaItem listaDirigentiProponentiItem;
	protected AltriDirigentiProponentiCompletaItem listaAltriDirigentiProponentiItem;
	protected CoordinatoriCompCircItem listaCoordinatoriCompCircItem;	
	protected CheckboxItem flgRichiediVistoDirettoreItem;
	protected RespVistiConformitaCompletaItem listaRespVistiConformitaItem;
	protected RespUfficioPropCompletaItem listaRespUfficioPropItem;
	protected RespVistiPerfezionamentoCompletaItem listaRespVistiPerfezionamentoItem;	
	protected RadioGroupItem flgVistoBilancioItem;
	protected ResponsabileVistoAlternativoBilancioCompletaItem listaRespVisAltBilancioItem;	
	protected TextAreaItem tipoVistoBilancioItem;	
	protected CheckboxItem flgVistoSGItem;	
	protected CheckboxItem flgVistoPresidenteItem;	
	protected EstensoreCompletaItem listaEstensoriItem;
	protected EstensoreCompletaItem listaAltriEstensoriItem;
	protected IstruttoreCompletaItem listaIstruttoriItem;
	protected IstruttoreCompletaItem listaAltriIstruttoriItem;
	protected UtenteRifAttoConsiglioItem listaUtenteRifAttoConsiglioItem;
	protected CheckboxItem flgSenzaValidazionePOItem;
	
	/* Dati scheda - Visti dir. superiori */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionVistiDirSuperiori;
	protected DynamicForm vistiDirSuperioriForm;
	protected CheckboxItem flgVistoRespUffItem;
	protected CheckboxItem flgVistoDirSup1Item;
	protected CheckboxItem flgVistoDirSup2Item;
	protected SelectItem idScrivaniaVistoRespUffItem;
	protected SelectItem idScrivaniaVistoDirSup1Item;
	protected SelectItem idScrivaniaVistoDirSup2Item;
	
	/* Dati scheda - Parere della/e circoscrizioni */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionParereCircoscrizioni;
	protected DynamicForm parereCircoscrizioniForm;
	protected ValoriDizionarioItem listaParereCircoscrizioniItem;
	
	/* Dati scheda - Parere della/e commissioni */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionParereCommissioni;
	protected DynamicForm parereCommissioniForm;
	protected CheckboxItem flgCommissioniItem;
	protected ParereCommissioniItem listaParereCommissioniItem;	
	
	/* Dati scheda - Oggetto */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDesOgg;
	protected DynamicForm desOggForm;
	protected ExtendedTextAreaItem desOggItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOggetto;
	protected DynamicForm oggettoForm;
	protected HiddenItem oggettoItem;
	protected CKEditorItem oggettoHtmlItem;
	
	/* Dati scheda - Atto di riferimento */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionAttoRiferimento;
	protected DynamicForm attoRiferimentoForm;
	protected AttiRiferimentoItem listaAttiRiferimentoItem;
//	protected RadioGroupItem flgAttoRifASistemaItem;
//	protected HiddenItem idUdAttoDeterminaAContrarreItem;
//	protected SelectItem categoriaRegAttoDeterminaAContrarreItem;
//	protected ExtendedTextItem siglaAttoDeterminaAContrarreItem;
//	protected ExtendedNumericItem numeroAttoDeterminaAContrarreItem;
//	protected AnnoItem annoAttoDeterminaAContrarreItem;		
//	protected ImgButtonItem lookupArchivioAttoDeterminaAContrarreButton;
	
	/* Dati scheda - Specificità del provvedimento */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionCaratteristicheProvvedimento;
	protected DynamicForm caratteristicheProvvedimentoForm;
	protected SelectItem oggLiquidazioneItem; 
	protected ImgButtonItem showInfoOggLiquidazioneButton;
	protected DateItem dataScadenzaLiquidazioneItem; 
	protected SelectItem urgenzaLiquidazioneItem;
	protected CheckboxItem flgLiqXUffCassaItem; 
	protected ExtendedNumericItem importoAnticipoCassaItem;
	protected DateItem dataDecorrenzaContrattoItem; 
	protected NumericItem anniDurataContrattoItem;
	protected CheckboxItem flgAffidamentoItem;
	protected CheckboxItem flgDeterminaAContrarreTramiteProceduraGaraItem;
	protected CheckboxItem flgDeterminaAggiudicaProceduraGaraItem;
	protected CheckboxItem flgDeterminaRimodulazioneSpesaGaraAggiudicataItem;
	protected CheckboxItem flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem;
	protected CheckboxItem flgDeterminaRiaccertamentoItem;
	protected CheckboxItem flgDeterminaAccertRadiazItem;
	protected CheckboxItem flgDeterminaVariazBilItem;
	protected CheckboxItem flgVantaggiEconomiciItem;
	protected CheckboxItem flgDecretoReggioItem;
	protected CheckboxItem flgAvvocaturaItem;
	protected CheckboxItem flgDeterminaArchiviazioneItem;
	protected CheckboxItem flgContributiItem; // il check "contributi" non è esclusivo come gli altri sopra
	protected RadioGroupItem flgSpesaItem;
	protected RadioGroupItem flgDatiRilevantiGSAItem;
	protected ImgButtonItem infoDatiRilevantiGSAButton;
	protected SelectItem annoContabileCompetenzaItem;		
	protected CheckboxItem flgCorteContiItem;
	protected CheckboxItem flgLiqContestualeImpegnoItem; 
	protected CheckboxItem flgLiqContestualeAltriAspettiRilContItem;
	protected CheckboxItem flgDetConLiquidazioneItem;
	protected CheckboxItem flgCompQuadroFinRagDecItem;
	protected CheckboxItem flgNuoviImpAccItem;
	protected CheckboxItem flgImpSuAnnoCorrenteItem;
	protected CheckboxItem flgInsMovARagioneriaItem;
	protected CheckboxItem flgPresaVisioneContabilitaItem;		
	protected SelectItem tipoAttoInDeliberaPEGItem;
	protected SelectItem tipoAffidamentoItem; 
	protected SelectItem normRifAffidamentoItem; 
	protected TextItem respAffidamentoItem;
	protected FilteredSelectItem materiaTipoAttoItem;
	protected HiddenItem desMateriaTipoAttoItem;	 
	protected SelectItem tipoFinanziamentoPNRRItem;
	protected RadioGroupItem flgSottotipoAttoItem;
	protected RadioGroupItem flgTipoIterItem;
	protected CheckboxItem flgFondiEuropeiPONItem;
	protected RadioGroupItem flgFondiPNRRRadioItem;	
	protected CheckboxItem flgFondiPNRRItem;
	protected CheckboxItem flgFondiPNRRRigenItem;
	protected CheckboxItem flgFondiPRUItem;
	protected CheckboxItem flgVistoUtenzeItem;
	protected CheckboxItem flgVistoCapitolatiSottoSogliaItem;
	protected CheckboxItem flgVistoCapitolatiSopraSogliaItem;
	protected CheckboxItem flgVistoPar117_2013Item;
	protected CheckboxItem flgNotificaDaMessiItem;
	protected CheckboxItem flgSenzaImpegniContItem;
	protected RadioGroupItem flgMEPACONSIPItem;
	protected RadioGroupItem flgServeDUVRIItem;
	protected ExtendedNumericItem imponibileComplessivoItem;
	protected ExtendedNumericItem importoOneriSicurezzaItem;
	protected RadioGroupItem flgLLPPItem;
	protected AnnoItem annoProgettoLLPPItem;
	protected TextItem numProgettoLLPPItem;
	protected RadioGroupItem flgBeniServiziItem;
	protected AnnoItem annoProgettoBeniServiziItem;
	protected TextItem numProgettoBeniServiziItem;
	protected RadioGroupItem flgProgrammazioneAcquistiItem;
	protected RadioGroupItem flgPrivacyItem;
	protected CheckboxItem flgDatiProtettiTipo1Item;
	protected CheckboxItem flgDatiProtettiTipo2Item;
	protected CheckboxItem flgDatiProtettiTipo3Item;
	protected CheckboxItem flgDatiProtettiTipo4Item;
	protected TextItem numGaraItem;
	protected RadioGroupItem flgControlloLegittimitaItem;
	protected TextAreaItem motivazioniEsclControlloLegittimitaItem;
	
	/* Dati scheda - Dest. vantaggio */
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDestVantaggio;
	protected DynamicForm destVantaggioForm;
	protected DestVantaggioItem listaDestVantaggioItem;	
		
	/* Dati scheda - Ruoli e visti per dati contabili */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionRuoliEVistiXDatiContabili;
	protected DynamicForm ruoliXDatiContabiliForm1;
	protected HiddenItem codUfficioDefinizioneSpesaItem;
	protected HiddenItem desUfficioDefinizioneSpesaItem;
	protected SelezionaUOItem listaUfficioDefinizioneSpesaItem;
	protected RadioGroupItem opzAssCompSpesaItem;
	protected DynamicForm ruoliXDatiContabiliForm2;
	protected CheckboxItem flgAdottanteUnicoRespPEGItem;	
	protected CheckboxItem flgDirRespRegTecnicaUnicoRespSpesaItem;	
	protected ResponsabiliPEGCompletaItem listaResponsabiliPEGItem;	
	protected DynamicForm opzioniSpesaForm;	
	protected CheckboxItem flgSpesaCorrenteItem;
	protected CheckboxItem flgImpegniCorrenteGiaValidatiItem;
	protected CheckboxItem flgSpesaContoCapitaleItem;
	protected CheckboxItem flgImpegniContoCapitaleGiaRilasciatiItem;
	protected CheckboxItem flgSoloSubImpSubCronoItem;
	protected CheckboxItem flgConVerificaContabilitaItem;
	protected CheckboxItem flgRichiediParereRevisoriContabiliItem;
	protected DynamicForm vistiXDatiContabiliForm;		
	protected CheckboxItem flgRichVerificaDiBilancioCorrenteItem; 
	protected CheckboxItem flgRichVerificaDiBilancioContoCapitaleItem; 
	protected CheckboxItem flgRichVerificaDiContabilitaItem;
	
	/* Dati sched - Nel sotto-fascicolo RdA*/
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionSubfolderRda;
	protected DynamicForm subfolderRdaForm;
	protected SelectItem subfolderRdaItem;	
	
	/* Dati scheda - CIG */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionCIG;
	protected DynamicForm CIGForm;
	protected RadioGroupItem flgOpCommercialeItem;
	protected CheckboxItem flgEscludiCIGItem;
	protected CheckboxItem flgCIGDaAcquisireItem;
	protected SelectItemValoriDizionario motivoEsclusioneCIGItem;
	protected TextItem codiceCIGPadreItem;
	protected CIGItem listaCIGItem;
	
	/* Dati scheda - CUI */
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionCUI;
	protected DynamicForm CUIForm;
	protected CUIItem listaCUIItem;
	
	/* Dati scheda - Categoria di rischio (se è visibile il tab trasparenza di AVB il campo compare lì, per primo, altrimenti resta sul primo tab) */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionCategoriaRischio;
	protected DynamicForm categoriaRischioForm;
	protected SelectItem categoriaRischioItem;
	
	/* Dati scheda - Classificazione e fascicolazione */
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionClassFasc;
	protected DynamicForm classFascForm;
	protected ClassificaFascicoloItem listaClassFascItem;;
	
	/************************
	 * TAB DATI DISPOSITIVO *
	 ************************/
	
	/* Dati dispositivo - Upload pdf atto */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionUploadPdfAtto;
	protected DynamicForm uploadPdfAttoForm;
	protected DocumentItem filePdfAttoItem;
	protected DocumentItem filePdfAttoOmissisItem;
	
	/* Dati dispositivo - Riferimenti normativi */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionRiferimentiNormativi;
	protected DynamicForm riferimentiNormativiForm;
	protected RiferimentiNormativiItem listaRiferimentiNormativiItem;
	
	/* Dati dispositivo - Atti presupposti */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionAttiPresupposti;
	protected DynamicForm attiPresuppostiForm;
//	protected AttiPresuppostiItem listaAttiPresuppostiItem;
	protected CKEditorItem attiPresuppostiItem;
		
	/* Dati dispositivo - Motivazioni */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionMotivazioni;
	protected DynamicForm motivazioniForm;
	protected CKEditorItem motivazioniItem;
	
	/* Dati dispositivo - Premessa */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionPremessa;
	protected DynamicForm premessaForm;
	protected CKEditorItem premessaItem;
	
	/* Dati dispositivo - Riferimenti normativi */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionRifNormativiLiberi;
	protected DynamicForm rifNormativiLiberiForm;
	protected CKEditorItem rifNormativiLiberiItem;
	
	/* Dati dispositivo - Dispositivo */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDispositivo;
	protected DynamicForm dispositivoForm;
	protected CKEditorItem dispositivoItem;
	protected SelectItemValoriDizionario loghiAggiuntiviDispositivoItem;
	
	/**************************
	 * TAB DATI DISPOSITIVO 2 *
	 **************************/
	
	/* Dati dispositivo 2 - Premessa 2 */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionPremessa2;
	protected DynamicForm premessa2Form;
	protected CKEditorItem premessa2Item;
	
	/* Dati dispositivo 2 - Dispositivo 2 */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDispositivo2;
	protected DynamicForm dispositivo2Form;
	protected CKEditorItem dispositivo2Item;
	
	/****************
	 * TAB ALLEGATI *
	 ****************/
	
	/* Allegati */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionAllegati;	
	protected DynamicForm allegatiForm;
	protected CanvasItem listaAllegatiItem;
	
	
	/***************************
	 * TAB DOCUMENTI FASCICOLO *
	 ***************************/
	
	/* Documenti fascicolo */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDocFasc;	
	protected DynamicForm docFascForm;
	protected CanvasItem listaDocFascItem;	
	
	/*******************************
	 * TAB PUBBLICAZIONE/NOTIFICHE *
	 *******************************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpzioniTesto;
	protected DynamicForm opzioniTestoForm;
	protected CheckboxItem flgEscludiPremesseFisseDaTestoAttoItem;
	protected CheckboxItem flgEscludiOggettoDaTestoAttoItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpzioniAvanzateTesto;
	protected DynamicForm opzioniAvanzateTestoForm;
	protected TextItem scrittaTraPremessaEDispositivoAttoItem;
	protected NumericItem numRighePreScrittaTraPremessaEDispositivoAttoItem;
	protected NumericItem numRighePostScrittaTraPremessaEDispositivoAttoItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpzioniIter;
	protected DynamicForm opzioniIterForm;
	protected CheckboxItem flgAcquisitiVistiTornaVerificaUoPropItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpzioniVisibilita;
	protected DynamicForm opzioniVisibilitaForm;
	protected CheckboxItem flgVisibilitaPubblPostAdozioneItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionPubblAlbo;
	protected DynamicForm pubblAlboForm;
	protected RadioGroupItem flgPubblAlboItem;
	protected SelectItem tipoDecorrenzaPubblAlboItem;
	protected ExtendedDateItem dataPubblAlboDalItem;
	protected ExtendedNumericItem numGiorniPubblAlboItem;
	protected ExtendedDateItem dataPubblAlboAlItem;
	protected CheckboxItem flgUrgentePubblAlboItem;
	protected DateItem dataPubblAlboEntroItem;
	protected ExtendedDateItem dataRipubblAlboDalItem;
	protected ExtendedNumericItem numGiorniRipubblAlboItem;
	protected ExtendedDateItem dataRipubblAlboAlItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionPubblAmmTrasp;
	protected DynamicForm pubblAmmTraspForm;
	protected RadioGroupItem flgPubblAmmTraspItem;
	protected AnnoItem annoTerminePubblAmmTraspItem;	
	protected SelectItem sezionePubblAmmTraspItem;
	protected SelectItem sottoSezionePubblAmmTraspItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionPubblBUR;
	protected DynamicForm pubblBURForm;	
	protected RadioGroupItem flgPubblBURItem;
	protected AnnoItem annoTerminePubblBURItem;
	protected SelectItem tipoDecorrenzaPubblBURItem;
	protected DateItem dataPubblBURDalItem;
	protected CheckboxItem flgUrgentePubblBURItem;
	protected DateItem dataPubblBUREntroItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionPubblNotiziario;
	protected DynamicForm pubblNotiziarioForm;	
	protected RadioGroupItem flgPubblNotiziarioItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionEsecutivita;
	protected DynamicForm esecutivitaForm1;	
	protected DateItem dataEsecutivitaDalItem;
	protected CheckboxItem flgImmediatamenteEseguibileItem;
	protected DynamicForm esecutivitaForm2;	
	protected CKEditorItem motiviImmediatamenteEseguibileItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionNotifiche;
	protected DynamicForm notificheForm;
	private ComboBoxItem listaDestNotificaAttoItem;
	private ImgButtonItem lookupRubricaEmailDestinatariButton;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionNotificaMessi;
	protected DynamicForm notificaMessiForm;
	protected CheckboxItem flgMessiNotificatoriItem;
	protected DestinatariNotificaMessiItem listaDestinatariNotificaMessiItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionNotificaPEC;
	protected DynamicForm notificaPECForm;
	protected CheckboxItem flgNotificaPECItem;
	protected DestinatariNotificaPECItem listaDestinatariNotificaPECItem;
	
	protected DynamicForm visibPubblicaPostAdozioneForm;
	protected CheckboxItem flgVisibPubblicaPostAdozioneItem;
	
	/***************************
	 * TAB MOVIMENTI CONTABILI *
	 ***************************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionMovimentiContabili;
	protected DynamicForm movimentiContabiliForm;
	protected GridItem listaMovimentiContabiliaItem;
	protected ListaInvioMovimentiContabiliSICRAItem listaInvioMovimentiContabiliSICRAItem;
	
	protected HashSet<String> vociPEGNoVerifDisp = new HashSet<String>();
	
	/****************
	 * TAB DATI GSA *
	 ****************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionMovimentiGSA;
	protected DynamicForm movimentiGSAForm;
	protected ListaMovimentiGSAItem listaMovimentiGSAItem;
	
	/***************************
	 * TAB DATI SPESA CORRENTE *
	 ***************************/

	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpzioniSpesaCorrente;	
	protected DynamicForm opzioniSpesaCorrenteForm1;
	protected CheckboxItem flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem;
	protected DynamicForm opzioniSpesaCorrenteForm2;
	protected RadioGroupItem prenotazioneSpesaSIBDiCorrenteItem;
	protected RadioGroupItem modalitaInvioDatiSpesaARagioneriaCorrenteItem;
	
	/* Dati spesa corrente - Impegni e accertamenti */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDatiContabiliSIBCorrente;	
	protected DynamicForm datiContabiliSIBCorrenteForm;
	protected ListaDatiContabiliSIBItem listaDatiContabiliSIBCorrenteItem;
	
	/* Dati spesa corrente - Compilazione griglia */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionInvioDatiSpesaCorrente;	
	protected DynamicForm invioDatiSpesaCorrenteForm;
	protected ListaInvioDatiSpesaItem listaInvioDatiSpesaCorrenteItem;
	
	/* Dati spesa corrente - Upload xls importabile in SIB */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionFileXlsCorrente;	
	protected DynamicForm fileXlsCorrenteForm;
	protected DocumentItem fileXlsCorrenteItem;
	protected HiddenItem nomeFileTracciatoXlsCorrenteItem;
	protected HiddenItem uriFileTracciatoXlsCorrenteItem;
	protected ImgButtonItem scaricaTracciatoXlsCorrenteButton;
	
	/* Dati spesa corrente - Note */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionNoteCorrente;	
	protected DynamicForm noteCorrenteForm;
	protected CKEditorItem noteCorrenteItem;
		
	/*********************************
	 * TAB DATI SPESA CONTO CAPITALE *
	 *********************************/

	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpzioniSpesaContoCapitale;	
	protected DynamicForm opzioniSpesaContoCapitaleForm1;	
	protected CheckboxItem flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem;
	protected DynamicForm opzioniSpesaContoCapitaleForm2;	
	protected RadioGroupItem modalitaInvioDatiSpesaARagioneriaContoCapitaleItem;
	
	/* Dati spesa conto capitale - Impegni e accertamenti */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDatiContabiliSIBContoCapitale;	
	protected DynamicForm datiContabiliSIBContoCapitaleForm;
	protected ListaDatiContabiliSIBItem listaDatiContabiliSIBContoCapitaleItem;
	
	/* Dati spesa conto capitale - Compilazione griglia */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionInvioDatiSpesaContoCapitale;	
	protected DynamicForm invioDatiSpesaContoCapitaleForm;
	protected ListaInvioDatiSpesaItem listaInvioDatiSpesaContoCapitaleItem;
	
	/* Dati spesa conto capitale - Upload xls importabile in SIB */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionFileXlsContoCapitale;	
	protected DynamicForm fileXlsContoCapitaleForm;
	protected DocumentItem fileXlsContoCapitaleItem;
	protected HiddenItem nomeFileTracciatoXlsContoCapitaleItem;
	protected HiddenItem uriFileTracciatoXlsContoCapitaleItem;
	protected ImgButtonItem scaricaTracciatoXlsContoCapitaleButton;
	
	/* Dati spesa conto capitale - Note */
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionNoteContoCapitale;	
	protected DynamicForm noteContoCapitaleForm;
	protected CKEditorItem noteContoCapitaleItem;
	
	/**********************************
	 * TAB AGGREGATO/SMISTAMENTO ACTA *
	 **********************************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionAggregatoSmistamentoACTA;
	protected DynamicForm flgAggregatoACTAForm;
	protected CheckboxItem flgAggregatoACTAItem;
	protected DynamicForm aggregatoACTAForm;
	protected CheckboxItem flgIndiceClassificazioneACTAItem;
	protected ExtendedTextItem codIndiceClassificazioneACTAItem;
	protected HiddenItem flgPresenzaClassificazioneACTAItem;
	protected CheckboxItem flgFascicoloACTAItem;
	protected ExtendedTextItem codVoceTitolarioACTAItem;
	protected ExtendedTextItem codFascicoloACTAItem;
	protected ExtendedTextItem suffissoCodFascicoloACTAItem;
	protected ExtendedNumericItem codSottofascicoloACTAItem;
	protected HiddenItem idFascicoloACTAItem;
	protected DynamicForm flgSmistamentoACTAForm;
	protected CheckboxItem flgSmistamentoACTAItem;
	protected DynamicForm smistamentoACTAForm;
	protected SelectItem idNodoSmistamentoACTAItem;
	protected HiddenItem desNodoSmistamentoACTAItem;
	protected DynamicForm visualizzaScaricaFileACTAForm;
	protected ImgButtonItem visualizzaPdfCompilazioneTabACTAButton;
	protected ImgButtonItem scaricaXlsElencoFascSottofascButton;
	
	/******************
	 * TAB OPERE ADSP *
	 ******************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionOpereADSP;
	protected DynamicForm opereADSPForm;
	protected PeriziaItem listaOpereADSPItem;
	
	
	/******************************
	 * TAB DATI CONTABILI ATERSIR *
	 ******************************/
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDatiContabiliATERSIR;
	protected DynamicForm datiContabiliATERSIRForm;
	protected ListaDatiContabiliATERSIRItem listaDatiContabiliATERSIRItem;
	
	/***************************
	 * TAB DATI CONTABILI ADSP *
	 ***************************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDatiContabiliADSP;
	protected DynamicForm datiContabiliADSPForm;
//	protected DatiContabiliADSPItem listaDatiContabiliADSPItem; 
	protected ListaDatiContabiliADSPItem listaDatiContabiliADSPItem;
	protected HiddenItem flgSavedAttoSuSistemaContabileItem;
	protected HiddenItem statoAttoContabilitaItem;
	
	/**************************
	 * TAB DATI CONTABILI AVB *
	 **************************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionImpegniAVB;
	protected DynamicForm impegniAVBForm;
	protected ListaDatiContabiliAVBItem listaImpegniAVBItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionAccertamentiAVB;
	protected DynamicForm accertamentiAVBForm;
	protected ListaDatiContabiliAVBItem listaAccertamentiAVBItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionLiquidazioniAVB;
	protected DynamicForm liquidazioniAVBForm;
	protected ListaDatiContabiliAVBItem listaLiquidazioniAVBItem;
	
	/*********************** 
	 * TAB TRASPARENZA AVB *
	 ***********************/		
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionErogVantaggiEconomiciTrasp;
	protected DynamicForm erogVantaggiEconomiciTraspForm;
	protected RadioGroupItem flgErogVantaggiEconomiciItem;
	protected GWTRestDataSource  tipoTrasparenzaVantEconDataSource;
	protected SelectItem tipoTrasparenzaVantEconItem;
	protected HiddenItem flgBeneficiariObbligXTipoTraspVantEconItem;
	protected GWTRestDataSource  sottotipoTrasparenzaVantEconDataSource;
	protected SelectItem sottotipoTrasparenzaVantEconItem;
	protected HiddenItem flgBeneficiariObbligXSottotipoTraspVantEconItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionInterventiTrasp;
	protected DynamicForm interventiTraspForm;
	protected RadioGroupItem flgInterventiItem;
	protected GWTRestDataSource  tipoInterventiDataSource;
	protected SelectItem tipoInterventiItem;
	protected HiddenItem flgBeneficiariObbligXTipoInterventiItem;
	protected GWTRestDataSource  sottotipoInterventiDataSource;
	protected SelectItem sottotipoInterventiItem;
	protected HiddenItem flgBeneficiariObbligXSottotipoInterventiItem;

	protected NuovaPropostaAtto2CompletaDetailSection detailSectionAltriProvvedimentiTrasp;
	protected DynamicForm altriProvvedimentiTraspForm;
	protected RadioGroupItem flgAltriProvvedimentiItem;
	protected GWTRestDataSource  tipoAltriProvvedimentiDataSource;
	protected SelectItem tipoAltriProvvedimentiItem;
	protected HiddenItem flgBeneficiariObbligXTipoAltriProvvedimentiItem;
	protected GWTRestDataSource  sottotipoAltriProvvedimentiDataSource;
	protected SelectItem sottotipoAltriProvvedimentiItem;
	protected HiddenItem flgBeneficiariObbligXSottotipoAltriProvvedimentiItem;

	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDettaglioTrasparenza;
	protected DynamicForm dettaglioTrasparenzaForm;
	protected GWTRestDataSource normaTrasparenzaVantEconDataSource;	
	protected SelectItem normaTrasparenzaVantEconItem;
	protected GWTRestDataSource modalitaIndividuazioneBeneficiarioDataSource;
	protected SelectItem modalitaIndividuazioneBeneficiarioItem;
	protected TextItem estremiDocumentiPrincipaliFascicoloItem;
	protected GWTRestDataSource avvisiPerLaCompilazioneDataSource;
	protected TextItem avvisiPerLaCompilazioneItem;
	protected TextItem ufficioCompetenteTabTraspItem;
	protected TextItem responsabileProcedimentoTabTraspItem;
	protected DateItem dataAvvioProcedimentoTabTraspItem;	
	protected TextItem oggettoProvvedimentoItem;
	protected RadioGroupItem durataRapportoGiuridicoItem;	
	protected NumericItem numeroMesiDurataRapportoItem;
	protected DateItem dalDurataRapportoItem;
	protected DateItem alDurataRapportoItem;
	protected GWTRestDataSource elencoAllegatiDataSource;
	protected TextItem listaAllegatiObbligatoriTrasparenzaItem;
	protected HiddenItem listaIdAllegatiObbligatoriTrasparenzaItem;
	protected TextItem listaAllegatiNonObbligatoriTrasparenzaItem;
	protected HiddenItem listaIdAllegatiNonObbligatoriTrasparenzaItem;
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionBeneficiariTrasparenza;
	protected DynamicForm beneficiariTrasparenzaForm;
//	protected DestVantaggioItem listaBeneficiariTrasparenzaItem;
	protected ListaBeneficiariTrasparenzaItem listaBeneficiariTrasparenzaItem;
	
	/*****************************
	 * TAB DATI LIQUIDAZIONE AVB *
	 *****************************/
	
	protected NuovaPropostaAtto2CompletaDetailSection detailSectionDatiLiquidazioneAVB;
	protected DynamicForm datiLiquidazioneAVBForm;
	protected ListaDatiLiquidazioneAVBItem datiLiquidazioneAVBItem;
	protected HiddenItem listaUriExcelToDeleteItem;
	
	/******************************
	 * TAB ATTRIBUTI DINAMICI DOC *
	 ******************************/

	protected LinkedHashMap<String, String> attributiAddDocTabs;
	protected HashMap<String, VLayout> attributiAddDocLayouts;
	protected HashMap<String, AttributiDinamiciDetail> attributiAddDocDetails;
	protected Map<String, Object> attributiDinamiciDocDaCopiare;
	
	/***************
	 * EMENDAMENTI *
	 ***************/
	
	protected EmendamentiWindow emendamentiWindow;
	protected ListaEmendamentiPopup listaEmendamentiPopup;	
	
	
	protected String start;
	
	public NuovaPropostaAtto2CompletaDetail(String nomeEntita, LinkedHashMap<String, String> attributiAddDocTabs) {
		this(nomeEntita, attributiAddDocTabs, null);
	}
	
	public NuovaPropostaAtto2CompletaDetail(String nomeEntita, LinkedHashMap<String, String> attributiAddDocTabs, String idTipoDoc) {
		
		super(nomeEntita);
		
		instance = this;
		this.attributiAddDocTabs = attributiAddDocTabs != null ? attributiAddDocTabs : new LinkedHashMap<String, String>();
		this.tipoDocumento = idTipoDoc;
		
		setPaddingAsLayoutMargin(false);		
		setStyleName(it.eng.utility.Styles.detailLayoutWithTabSet);
		
		if(!skipSuperBuild()) {
			build();
		}
		
		/****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******
	    setCanDragResize(false); 
	    ****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******/
	}
	
	public boolean skipSuperBuild() {
		return false;
	}
	
	public void build() {
		
		String start = DateTimeFormat.getFormat("HH:mm:ss").format(new Date());
		
		if(!(this instanceof TaskFlussoInterface)) {
			Record recordEvento = getRecordEventoXInfoModelli();
			if(recordEvento != null) {
				this.recordParametriTipoAtto = recordEvento != null ? recordEvento.getAttributeAsRecord("parametriTipoAtto") : null;
				this.flgPubblicazioneAllegatiUguale = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgPubblicazioneAllegatiUguale") : null;
				this.flgAvvioLiquidazioneContabilia = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAvvioLiquidazioneContabilia") : null;
				this.flgSoloPreparazioneVersPubblicazione = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgSoloPreparazioneVersPubblicazione") : null;
				this.flgSoloOmissisModProprietaFile = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgSoloOmissisModProprietaFile") : null;
				this.flgCtrlMimeTypeAllegPI = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgCtrlMimeTypeAllegPI") : null;
				this.flgProtocollazioneProsa = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgProtocollazioneProsa") : null;
				this.flgFirmaVersPubblAggiornata = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgFirmaVersPubblAggiornata") : null;
			}
		}
		
		// lista di definizione degli attributi custom cablati a maschera (label, obbligatorietà ecc..)
		RecordList listaAttributiCustomCablati = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsRecordList("attributiCustomCablati") : null;
		if(listaAttributiCustomCablati != null) {
			attributiCustomCablati = new HashMap<String, Record>();
			for(int i = 0; i < listaAttributiCustomCablati.getLength(); i++) {				
				attributiCustomCablati.put(listaAttributiCustomCablati.get(i).getAttribute("attrName"), listaAttributiCustomCablati.get(i));
			}			
		}
		
		// Verifico la presenza di campi CKEditor dove ignorare la gestione deli omissis
		this.elencoCampiConGestioneOmissisDaIgnorare = new ArrayList<String>();
		if (attributiCustomCablati != null) {
			for (String key : attributiCustomCablati.keySet()) {
				Record attributoCustomCablato = attributiCustomCablati.get(key);
				String flgIgnoraGestioneOmissis = attributoCustomCablato.getAttribute("flgIgnoraGestioneOmissis");
				if (flgIgnoraGestioneOmissis != null && "1".equalsIgnoreCase(flgIgnoraGestioneOmissis)) {
					elencoCampiConGestioneOmissisDaIgnorare.add(attributoCustomCablato.getAttribute("attrName"));
				}
			}
		}
		
		//TODO qui non usa la mappa delle UO collegate che viene usata nella nuova proposta atto 2 di Milano
		// e non fa l'intersezione con la UO di lavoro per preimpostare direttamente quella
		RecordList listaValoriUfficioProponente = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsRecordList("valoriUfficioProponente") : null;
		if(listaValoriUfficioProponente != null) {
			ufficioProponenteValueMap = new LinkedHashMap<String, String>();
			flgUfficioProponenteGareMap = new LinkedHashMap<String, String>();
			for(int i = 0; i < listaValoriUfficioProponente.getLength(); i++) {				
				ufficioProponenteValueMap.put(listaValoriUfficioProponente.get(i).getAttribute("idUo"), listaValoriUfficioProponente.get(i).getAttribute("descrizione"));
				flgUfficioProponenteGareMap.put(listaValoriUfficioProponente.get(i).getAttribute("idUo"), listaValoriUfficioProponente.get(i).getAttribute("flgUfficioGare"));
			}			
		}
		
		flgAllegAttoParteIntDefaultXTipoAtto = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsBoolean("flgAllegAttoParteIntDefaultXTipoAtto") : null;
		flgAllegAttoParteIntDefaultOrdPermanente = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsBoolean("flgAllegAttoParteIntDefaultOrdPermanente") : null;
		flgAllegAttoParteIntDefaultOrdTemporanea = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsBoolean("flgAllegAttoParteIntDefaultOrdTemporanea") : null;
		
		flgAllegAttoPubblSepDefaultXTipoAtto = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsBoolean("flgAllegAttoPubblSepDefaultXTipoAtto") : null;
		
		flgAttivaSceltaPosizioneAllegatiUniti = recordParametriTipoAtto != null ? recordParametriTipoAtto.getAttributeAsBoolean("flgAttivaSceltaPosizioneAllegatiUniti") : null;
		
		createMainLayout();
		setMembers(mainLayout);

		redrawCKEditorItems();
		enableDisableTabs();
		showHideSections();		
		openSections();
		
		/****** [EMEND] ELIMINA RIGA PER EMENDAMENTI] ******
		createEmendamentiWindows(); 
		****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******/
		
		GWT.log("buildLayout() started at " + start + " ended at " + DateTimeFormat.getFormat("HH:mm:ss").format(new Date()));
	}
	
	public HashMap<String, Record> recuperaAttributiCustomCablati() {
		return null;
	}
	
	public boolean isAvvioPropostaAtto() {
		return false;
	}	
	
	public boolean isAttivaRequestMovimentiDaAMC() {
		return false;
	}
	
	public boolean isAttivaSalvataggioMovimentiDaAMC() {
		return false;
	}		
	
	public boolean isEseguibile() {
		return editing;
	}
	
	public boolean isDatiSpesaEditabili() {
		return false;
	}
	
	/*
	public boolean isEsitoTaskSelezionatoOk() {
		return false;
	}
	*/
	
	public String getMessaggioTab(String tabID) {
		return null;
	}

	/**
	 * Metodo per costruire il layout della maschera
	 * 
	 */
	protected void createMainLayout() {
		
		createMainToolStrip();
		createTabSet();
		
		mainLayout = new VLayout();
		mainLayout.setHeight100();
		mainLayout.setWidth100();		
		mainLayout.addMember(mainToolStrip);		
		mainLayout.addMember(tabSet);
		
		if (!showMainToolStrip()) {
			mainToolStrip.hide();
		}
	}
	
	/**
	 * Metodo che indica se mostrare o meno la barra superiore
	 * 
	 */
	public boolean showMainToolStrip() {
		return showModelliSelectItem() || showSalvaModello();
	}
	
	/**
	 * Metodo per costruire la barra superiore contenente la select dei modelli
	 * 
	 */
	protected void createMainToolStrip() {

		createModelliSelectItem();
		createSalvaComeModelloButton();
		
		mainToolStrip = new ToolStrip();
		mainToolStrip.setBackgroundColor("transparent");
		mainToolStrip.setBackgroundImage("blank.png");
		mainToolStrip.setBackgroundRepeat(BackgroundRepeat.REPEAT_X);
		mainToolStrip.setBorder("0px");
		mainToolStrip.setWidth100();
		mainToolStrip.setHeight(30);
		mainToolStrip.setRedrawOnResize(true);
			
		modelliSelectItem.setVisible(showModelliSelectItem());
		salvaComeModelloButton.setVisible(showSalvaModello());
		
		if (!showModelliSelectItem() && showSalvaModello()) {
			mainToolStrip.addButton(salvaComeModelloButton);
			mainToolStrip.addFormItem(modelliSelectItem);
		} else {
			mainToolStrip.addFormItem(modelliSelectItem);
			mainToolStrip.addButton(salvaComeModelloButton);
		}		
		
		mainToolStrip.addFill();
	}
	
	/**
	 * Metodo che indica se mostrare o meno la select dei modelli
	 * 
	 */
	public boolean showModelliSelectItem() {
		return isAvvioPropostaAtto();
	}
	
	/**
	 * Metodo che indica se mostrare o meno il pulsante di salvataggio del modello
	 * 
	 */
	public boolean showSalvaModello() {
		return false;
	}
	
	/**
	 * Metodo che indica se è possibile rimuovere il modello dalla select
	 * 
	 */
	public boolean isAbilToRemoveModello(Record record) {
		return (record.getAttribute("key") != null && !"".equals(record.getAttributeAsString("key"))) && 
			   (record.getAttributeAsBoolean("flgAbilDel") != null && record.getAttributeAsBoolean("flgAbilDel"));
	}

	/**
	 * Metodo per costruire la select dei modelli (per il settaggio dei valori
	 * dei campi a maschera)
	 * 
	 */
	protected void createModelliSelectItem() throws IllegalStateException {

		modelliDS = new GWTRestDataSource("ModelliDataSource", "key", FieldType.TEXT);
		modelliDS.addParam("prefKey", getPrefKeyModelliDSprefix() + ".modelli");
		modelliDS.addParam("isAbilToPublic", Layout.isPrivilegioAttivo("MRP") ? "1" : "0");

		modelliSelectItem = new SelectItem("modelli");
		modelliSelectItem.setValueField("key");
		modelliSelectItem.setDisplayField("displayValue");
		modelliSelectItem.setTitle("<b>" + I18NUtil.getMessages().protocollazione_detail_modelliSelectItem_title() + "</b>");
		modelliSelectItem.setCachePickListResults(false);
		modelliSelectItem.setRedrawOnChange(true);
		modelliSelectItem.setShowOptionsFromDataSource(true);
		modelliSelectItem.setOptionDataSource(modelliDS);
		modelliSelectItem.setAllowEmptyValue(true);

		ListGridField modelliRemoveField = new ListGridField("remove");
		modelliRemoveField.setType(ListGridFieldType.ICON);
		modelliRemoveField.setWidth(18);
		modelliRemoveField.setCellFormatter(new CellFormatter() {

			@Override
			public String format(Object value, ListGridRecord record, int rowNum, int colNum) {
				if (isAbilToRemoveModello(record)) {
					return "<img src=\"images/buttons/remove.png\" height=\"16\" width=\"16\" align=MIDDLE/>";
				}
				return null;
			}
		});
		modelliRemoveField.addRecordClickHandler(new RecordClickHandler() {

			@Override
			public void onRecordClick(final RecordClickEvent event) {
				if (isAbilToRemoveModello(event.getRecord())) {
					SC.ask(I18NUtil.getMessages().gestioneModelli_cancellazione_ask(), new BooleanCallback() {
						
						@Override
						public void execute(Boolean value) {
							if(value) {
								final String key = event.getRecord().getAttribute("key");
								modelliDS.removeData(event.getRecord(), new DSCallback() {

									@Override
									public void execute(DSResponse response, Object rawData, DSRequest request) {
										String value = (String) modelliSelectItem.getValue();
										if (key != null && value != null && key.equals(value)) {
											modelliSelectItem.setValue((String) null);
										}
									} 
								});
							}
						}
					});
				}		
			}   
		});
		ListGridField modelliKeyField = new ListGridField("key");
		modelliKeyField.setHidden(true);
		ListGridField modelliDisplayValueField = new ListGridField("displayValue");
		modelliDisplayValueField.setWidth("100%");
		modelliSelectItem.setPickListFields(modelliRemoveField, modelliKeyField, modelliDisplayValueField);

		modelliPickListProperties = new ListGrid();
		modelliPickListProperties.setEmptyMessage(I18NUtil.getMessages().list_emptyMessage());
		modelliPickListProperties.setShowHeader(false);
		// apply the selected preference from the SelectItem
		modelliPickListProperties.addCellClickHandler(new CellClickHandler() {

			@Override
			public void onCellClick(CellClickEvent event) {				
				boolean isRemoveField = isAbilToRemoveModello(event.getRecord()) && event.getColNum() == 0;
				if(!isRemoveField) {									
					String userid = (String) event.getRecord().getAttribute("userid");
					String prefName = (String) event.getRecord().getAttribute("prefName");
					if (prefName != null && !"".equals(prefName)) {
						AdvancedCriteria criteria = new AdvancedCriteria();
						criteria.addCriteria("prefName", OperatorId.EQUALS, prefName);
						criteria.addCriteria("flgIncludiPubbl", userid.startsWith("PUBLIC.") ? "1" : "0");
						if (userid.startsWith("UO.")) {
							String idUo = (String) event.getRecord().getAttribute("idUo");
							criteria.addCriteria("idUo", idUo);
						}
						modelliDS.addParam("isControllaValiditaIndirizzoMezzoTrasm",  "1"); 					
						modelliDS.fetchData(criteria, new DSCallback() {
							@Override
							public void execute(DSResponse response, Object rawData, DSRequest request) {
								if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
									Record[] data = response.getData();
									if (data.length != 0) {
										final Record recordModello = data[0];
										Record record = new Record(JSON.decode(recordModello.getAttribute("value")));
										editNewRecordFromModello(record.toMap(), recordModello);
										setAttributiDinamiciDocDaCopiare(record.getAttributeAsMap("valori")); //TODO non funziona, non carica correttamente gli attributi dinamici a maschera
										newMode();
									}
								}
							}
						});
					}					
				}
			}
		});

		modelliSelectItem.setPickListProperties(modelliPickListProperties);
	}
	
	public String getPrefKeyModelliDSprefix() {
		return "";
	}
	
	public List<String> getElencoCampiConGestioneOmissisDaIgnorare() {
		return this.elencoCampiConGestioneOmissisDaIgnorare;
	}

	public void editNewRecordFromModello(Map valuesFromModello, Record recordModello) {
		if(recordModello != null) {
			valuesFromModello.put("prefKeyModello", recordModello.getAttribute("prefKey"));
			valuesFromModello.put("prefNameModello", recordModello.getAttribute("prefName"));
			valuesFromModello.put("useridModello", recordModello.getAttribute("userid"));
			valuesFromModello.put("idUoModello", recordModello.getAttribute("idUo"));
		}		
//		if(showProponentiItem()) {
//			RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
//			valuesFromModello.put("listaProponenti", listaProponenti);			
//		} else {
//			if (isAbilToSelUffPropEsteso()) {		
//				RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
//				valuesFromModello.put("listaUfficioProponente", listaUfficioProponente);	
//			} else {
//				valuesFromModello.put("ufficioProponente", getValueAsString("ufficioProponente"));
//				valuesFromModello.put("codUfficioProponente", getValueAsString("codUfficioProponente"));
//				valuesFromModello.put("desUfficioProponente", getValueAsString("desUfficioProponente"));	
//				valuesFromModello.put("flgUfficioProponenteGare", getValueAsString("flgUfficioProponenteGare"));			
//			}
//		}		
		editNewRecord(valuesFromModello);
		if(!showProponentiItem()) {
//			if (isAbilToSelUffPropEsteso()) {
//				listaUfficioProponenteItem.manageChangedUoSelezionata();
//			} else if(ufficioProponenteItem != null) {
//				ufficioProponenteItem.fireEvent(new ChangedEvent(ufficioProponenteItem.getJsObj()));
//			}
			if (isAbilToSelUffPropEsteso()) {	
				//TODO se il valore non è più selezionabile nella select lo sbianco
			} else if(ufficioProponenteItem != null) {
				if(getUfficioProponenteValueMap().size() == 1) {
					String key = getUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
					String value = getUfficioProponenteValueMap().get(key);
					ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
					if(value != null && !"".equals(value)) {
						codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
						desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));					
					}		
					flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
					afterSelezioneUoProponente();
				} else if (valuesFromModello.get("ufficioProponente") != null && !getUfficioProponenteValueMap().containsKey(valuesFromModello.get("ufficioProponente"))) {		
					ufficioProponenteItem.setValue("");
					codUfficioProponenteItem.setValue("");
					desUfficioProponenteItem.setValue("");
					flgUfficioProponenteGareItem.setValue("");
					afterSelezioneUoProponente();
				} else if (getSelezioneUfficioProponenteValueMap().size() == 1) {
					String key = getSelezioneUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
					String value = getSelezioneUfficioProponenteValueMap().get(key);
					ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
					if(value != null && !"".equals(value)) {
						codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
						desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));				
					}
					flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
					afterSelezioneUoProponente();
				}
			}
		}
	}

	/**
	 * Metodo per costruire la finestra di salvataggio del modello
	 * 
	 */
	protected void createSaveModelloWindow(String nomeEntita) {

		if (saveModelloWindow == null) {
			SaveModelloAction saveModelloAction = new SaveModelloAction(modelliDS, modelliSelectItem) {

				@Override
				public Map getMapValuesForAdd() {
					Record lRecordToSave = getRecordToSave();
					Map values = lRecordToSave != null ? lRecordToSave.toMap() : vm.getValues();
					removeValuesToSkipInModello(values);		
					if (attributiAddDocDetails != null) {
						Map<String, Object> valori = getAttributiDinamiciDocForLoad();
						if(valori != null) {
							valori.remove("ORDINATIVI_SICRA");
						}
						values.put("valori", valori);
					}
					return values;
				}

				@Override
				public Map getMapValuesForUpdate() {
					Record lRecordToSave = getRecordToSave();
					Map values = lRecordToSave != null ? lRecordToSave.toMap() : vm.getValues();
					removeValuesToSkipInModello(values); 
					if (attributiAddDocDetails != null) {
						Map<String, Object> valori = getAttributiDinamiciDocForLoad(); 
						if(valori != null) {
							valori.remove("ORDINATIVI_SICRA");
						}
						values.put("valori", valori);
					}
					return values;
				}
			};
			saveModelloWindow = new SaveModelloWindow(
					I18NUtil.getMessages().protocollazione_detail_salvaComeModelloButton_prompt(), getPrefKeyModelliDSprefix(),
					saveModelloAction) {

				@Override
				public boolean isAbilToSavePublic() {
					return Layout.isPrivilegioAttivo("MRP");
				}
				
				@Override
				public boolean isTrasmissioneAtti() {
					return false;
				}
			};
		}
	}
	
	public void removeValuesToSkipInModello(Map<String, Object> values) {
		removeValuesToSkipInCopia(values, false);
	}
	
	public void removeValuesToSkipInNuovoComeCopia(Map<String, Object> values) {
		values.put("idUdNuovoComeCopia", values.get("idUd"));
		removeValuesToSkipInCopia(values, true);
	}
	
	public void removeValuesToSkipInCopia(Map<String, Object> values, boolean isNuovoComeCopia) {
		// per quanto riguarda gli attributi dei tab dinamici lo skip dei valori nei modelli e nel nuovo come copia va' gestito in maniera diversa (vedi ORDINATIVI_SICRA)
		values.remove("idUd");
		values.remove("rowidDoc");
		values.remove("idDocPrimario");		
		values.remove("nomeFilePrimario");
		values.remove("uriFilePrimario");
		values.remove("remoteUriFilePrimario");
		values.remove("infoFilePrimario");
		values.remove("isChangedFilePrimario");
		values.remove("idDocPrimarioOmissis");
		values.remove("nomeFilePrimarioOmissis");
		values.remove("uriFilePrimarioOmissis");
		values.remove("remoteUriFilePrimarioOmissis");
		values.remove("infoFilePrimarioOmissis");
		values.remove("isChangedFilePrimarioOmissis");
		values.remove("flgAggiornataVersDaPubblicare");
		values.remove("idPropostaAMC");
		values.remove("listaEmendamenti");
		values.remove("uriDocGeneratoFormatoOdt");
		values.remove("flgForzataModificaAtto");
		values.remove("codAOOXSelNodoACTA");
		values.remove("codStrutturaXSelNodoACTA");		
		values.remove("siglaRegistrazione");
		values.remove("numeroRegistrazione");
		values.remove("dataRegistrazione");
		values.remove("desUserRegistrazione");		
		values.remove("desUORegistrazione");		
		values.remove("estremiRepertorioPerStruttura");	
		values.remove("siglaRegProvvisoria");		
		values.remove("numeroRegProvvisoria");		
		values.remove("dataRegProvvisoria");		
		values.remove("desUserRegProvvisoria");		
		values.remove("desUORegProvvisoria");
		values.remove("esitoInvioACTASerieAttiIntegrali");
		values.remove("esitoInvioACTASeriePubbl");
		values.remove("idUdLiquidazione");
		values.remove("estremiAttoLiquidazione");
//		values.remove("listaUfficioProponente");
//		values.remove("codUfficioProponente");
//		values.remove("desUfficioProponente");
//		values.remove("flgUfficioProponenteGare");
//		values.remove("ufficioProponente");
		if (!(isNuovoComeCopia && values.get("flgCopiaAllegatiPareri") != null && (Boolean) values.get("flgCopiaAllegatiPareri"))) {
			values.remove("listaAllegati");
		}
		values.remove("listaMovimentiContabilia");
		values.remove("listaInvioMovimentiContabiliSICRA");				
		values.remove("listaDatiContabiliSIBCorrente");
		values.remove("listaInvioDatiSpesaCorrente");
		values.remove("listaDatiContabiliSIBContoCapitale");
		values.remove("listaInvioDatiSpesaContoCapitale");
		values.remove("listaDatiContabiliADSP");
		values.remove("flgSavedAttoSuSistemaContabile");
		values.remove("statoAttoContabilita");
		values.remove("listaImpegniAVB");
		values.remove("listaAccertamentiAVB");
		values.remove("listaLiquidazioniAVB");
		if(isNuovoComeCopia) {
			values.remove("flgAggregatoACTA");
			values.remove("flgIndiceClassificazioneACTA");
			values.remove("codIndiceClassificazioneACTA");
			values.remove("flgPresenzaClassificazioneACTA");
			values.remove("flgFascicoloACTA");
			values.remove("codVoceTitolarioACTA");
			values.remove("codFascicoloACTA");
			values.remove("suffissoCodFascicoloACTA");	
			values.remove("codSottofascicoloACTA");				
			values.remove("idFascicoloACTA");
			values.remove("flgSmistamentoACTA");
			values.remove("idNodoSmistamentoACTA");
			values.remove("desNodoSmistamentoACTA");
		}
	}

	/**
	 * Metodo per costruire il bottone "Salva come modello"
	 * 
	 */
	protected void createSalvaComeModelloButton() {
		
		salvaComeModelloButton = new ToolStripButton(
				I18NUtil.getMessages().protocollazione_detail_salvaComeModelloButton_prompt(),
				"buttons/template_save.png");
		salvaComeModelloButton.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				clickSalvaComeModello();
			}
		});
	}

	/**
	 * Metodo che implementa l'azione del bottone "Salva come modello"
	 * 
	 */
	public void clickSalvaComeModello() {

		createSaveModelloWindow(nomeEntita);
		if ((!saveModelloWindow.isDrawn()) || (!saveModelloWindow.isVisible())) {
			saveModelloWindow.clearValues();
			saveModelloWindow.selezionaModello(modelliSelectItem.getSelectedRecord());
			saveModelloWindow.redrawForms();
			saveModelloWindow.redraw();
			saveModelloWindow.show();
		}
	}
	
	/**
	 * Metodo per costruire il TabSet
	 * 
	 */
	protected void createTabSet() throws IllegalStateException {
		
		tabSet = new TabSet();
		tabSet.setTabBarPosition(Side.TOP);
		tabSet.setTabBarAlign(Side.LEFT);
		tabSet.setWidth100();
		tabSet.setBorder("0px");
		tabSet.setCanFocus(false);
		tabSet.setTabIndex(-1);
		tabSet.setPaneMargin(0);
		tabSet.addTabSelectedHandler(new TabSelectedHandler() {
			
			@Override
			public void onTabSelected(TabSelectedEvent event) {
				final List<ReplicableItem> listaReplicableItemWithError = new ArrayList<ReplicableItem>();
				final String tabID = event.getTab().getAttribute("tabID");
				for(DynamicForm form : getTabForms(tabID)) {
					for (FormItem item : form.getFields()) {
						if (item != null) {
							if (item instanceof ReplicableItem) {
								ReplicableItem lReplicableItem = (ReplicableItem) item;
								if (lReplicableItem.getMapErrors() != null && lReplicableItem.getMapErrors().size() > 0) {
									listaReplicableItemWithError.add(lReplicableItem);	
								}																				
							} 
						}
					}
				}
				Scheduler.get().scheduleDeferred(new ScheduledCommand() {

					@Override
					public void execute() {
						for(ReplicableItem lReplicableItem : listaReplicableItemWithError) {
							if (lReplicableItem.getMapErrors() == null || lReplicableItem.getMapErrors().size() == 0) {
								lReplicableItem.validate();
							}
						}
						for(DynamicForm form : getTabForms(tabID)) {
							if(form.getDetailSection() != null) {
								form.getDetailSection().open();
							}
						}
					}
				});				
			}
		});
		
		createTabDatiScheda();
		
		createTabDatiDispositivo();
		
		createTabDatiDispositivo2();
		
		createTabAllegati();
		
		createTabDocFasc();
			
		createTabPubblicazioneNotifiche();
		
		createTabMovimentiContabili();
		
		createTabDatiGSA();

		if(!isAvvioPropostaAtto() && isAttivoSIB()) {
			
			createTabDatiSpesaCorrente();
		
			createTabDatiSpesaContoCapitale();
		}
		
		createTabAggregatoSmistamentoACTA();
		
		createTabOpereADSP();
		
		createTabDatiContabiliADSP();
		
		createTabDatiContabiliAVB();
			
		createTabDatiContabiliATERSIR();
			
		createTabTrasparenzaAVB();
		
		createTabDatiLiquidazioneAVB();		
	}

	/**
	 * Metodo per costruire il pane associato ad un tab generico
	 * 
	 */
	protected VLayout createTabPane(VLayout layout) {

		VLayout spacerLayout = new VLayout();
		spacerLayout.setHeight100();
		spacerLayout.setWidth100();
		
		VLayout layoutTab = new VLayout();
		layoutTab.setWidth100();
		layoutTab.setHeight100();
		layoutTab.addMember(layout);
		layoutTab.addMember(spacerLayout);
		layoutTab.setRedrawOnResize(true);
		
		return layoutTab;
	}

	/******************* 
	 * TAB DATI SCHEDA *
	 *******************/
	
	public boolean showTabDatiScheda() {
		return show_TAB_DATI_SCHEDA();
	}

	/**
	 * Metodo per costruire il tab "Dati scheda"
	 * 
	 */
	protected void createTabDatiScheda() {

		tabDatiScheda = new Tab("<b>" + I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabDatiScheda_prompt() + "</b>");
		tabDatiScheda.setAttribute("tabID", _TAB_DATI_SCHEDA_ID);
		tabDatiScheda.setPrompt(I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabDatiScheda_prompt());
		tabDatiScheda.setPane(createTabPane(getLayoutDatiScheda()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Dati scheda"
	 * 
	 */
	public VLayout getLayoutDatiScheda() {

		VLayout layoutDatiScheda = new VLayout(5);
		
		createHiddenForm();
		layoutDatiScheda.addMember(hiddenForm);
		
		createDetailSectionRegistrazione();
		detailSectionRegistrazione.setVisible(false);
		layoutDatiScheda.addMember(detailSectionRegistrazione);
		
		createDetailSectionEmendamento();
		layoutDatiScheda.addMember(detailSectionEmendamento);
		
		createAttivaDestinatariForm();
		layoutDatiScheda.addMember(attivaDestinatariForm);
		
		createDetailSectionDestinatariAtto();
		layoutDatiScheda.addMember(detailSectionDestinatariAtto);
		
		createDetailSectionDestinatariPCAtto();
		layoutDatiScheda.addMember(detailSectionDestinatariPCAtto);
		
		createDetailSectionTipoProposta();
		layoutDatiScheda.addMember(detailSectionTipoProposta);
		
		createDetailSectionCircoscrizioni();
		layoutDatiScheda.addMember(detailSectionCircoscrizioni);
		
		createDetailSectionInterpellanza();
		layoutDatiScheda.addMember(detailSectionInterpellanza);
		
		createDetailSectionOrdMobilita();
		layoutDatiScheda.addMember(detailSectionOrdMobilita);
		
		createDetailSectionRuoli();
		layoutDatiScheda.addMember(detailSectionRuoli);
		
		createDetailSectionVistiDirSuperiori();
		layoutDatiScheda.addMember(detailSectionVistiDirSuperiori);
				
		createDetailSectionParereCircoscrizioni();
		layoutDatiScheda.addMember(detailSectionParereCircoscrizioni);
		
		createDetailSectionParereCommissioni();
		layoutDatiScheda.addMember(detailSectionParereCommissioni);
		
		createDetailSectionDesOgg();
		layoutDatiScheda.addMember(detailSectionDesOgg);
		
		createDetailSectionOggetto();
		layoutDatiScheda.addMember(detailSectionOggetto);
		
		createDetailSectionAttoRiferimento();
		layoutDatiScheda.addMember(detailSectionAttoRiferimento);
		
		createDetailSectionCaratteristicheProvvedimento();
		layoutDatiScheda.addMember(detailSectionCaratteristicheProvvedimento);
		
		createDetailSectionDestVantaggio();
		layoutDatiScheda.addMember(detailSectionDestVantaggio);
		
		createDetailSectionRuoliEVistiXDatiContabili();
		layoutDatiScheda.addMember(detailSectionRuoliEVistiXDatiContabili);
		
		createDetailSectionCIG();
		layoutDatiScheda.addMember(detailSectionCIG);
		
		createDetailSectionCUI();
		layoutDatiScheda.addMember(detailSectionCUI);
		
		/* Se è visibile il tab trasparenza di AVB il campo CATEGORIA_RISCHIO deve comparire lì, per primo, altrimenti resta sul primo tab */
		if(!showTabTrasparenzaAVB()) {
			createDetailSectionCategoriaRischio();
			layoutDatiScheda.addMember(detailSectionCategoriaRischio);
		}
		
		createDetailSectionSubfolderRda();
		layoutDatiScheda.addMember(detailSectionSubfolderRda);
		
		createDetailSectionClassFasc();
		layoutDatiScheda.addMember(detailSectionClassFasc);
		
		return layoutDatiScheda;
	}
	
	protected void createHiddenForm() {
		
		hiddenForm = new DynamicForm();
		hiddenForm.setValuesManager(vm);
		hiddenForm.setOverflow(Overflow.HIDDEN);
		hiddenForm.setTabSet(tabSet);
		hiddenForm.setTabID(_TAB_DATI_SCHEDA_ID);
//		hiddenForm.setHeight(0);
		
		idUdHiddenItem = new HiddenItem("idUd");
		idUdNuovoComeCopiaHiddenItem = new HiddenItem("idUdNuovoComeCopia");
		derivaDaRdAHiddenItem = new HiddenItem("derivaDaRdA");
		prefKeyModelloHiddenItem = new HiddenItem("prefKeyModello");
		prefNameModelloHiddenItem = new HiddenItem("prefNameModello");
		useridModelloHiddenItem = new HiddenItem("useridModello");
		idUoModelloHiddenItem = new HiddenItem("idUoModello");
		flgTipoDocDiversoHiddenItem = new HiddenItem("flgTipoDocDiverso");
		idTipoDocDaCopiareHiddenItem = new HiddenItem("idTipoDocDaCopiare");		
		tipoDocumentoHiddenItem = new HiddenItem("tipoDocumento");
		nomeTipoDocumentoHiddenItem = new HiddenItem("nomeTipoDocumento");
		rowidDocHiddenItem = new HiddenItem("rowidDoc");
		idDocPrimarioHiddenItem = new HiddenItem("idDocPrimario");		
		nomeFilePrimarioHiddenItem = new HiddenItem("nomeFilePrimario");
		uriFilePrimarioHiddenItem = new HiddenItem("uriFilePrimario");
		remoteUriFilePrimarioHiddenItem = new HiddenItem("remoteUriFilePrimario");
		infoFilePrimarioHiddenItem = new HiddenItem("infoFilePrimario");
		isChangedFilePrimarioHiddenItem = new HiddenItem("isChangedFilePrimario");
		idDocPrimarioOmissisHiddenItem = new HiddenItem("idDocPrimarioOmissis");
		nomeFilePrimarioOmissisHiddenItem = new HiddenItem("nomeFilePrimarioOmissis");
		uriFilePrimarioOmissisHiddenItem = new HiddenItem("uriFilePrimarioOmissis");
		remoteUriFilePrimarioOmissisHiddenItem = new HiddenItem("remoteUriFilePrimarioOmissis");
		infoFilePrimarioOmissisHiddenItem = new HiddenItem("infoFilePrimarioOmissis");
		isChangedFilePrimarioOmissisHiddenItem = new HiddenItem("isChangedFilePrimarioOmissis");
		flgAggiornataVersDaPubblicareHiddenItem = new HiddenItem("flgAggiornataVersDaPubblicare");
		idPropostaAMCHiddenItem = new HiddenItem("idPropostaAMC");
		listaEmendamentiItem = new HiddenItem("listaEmendamenti");
		listaEmendamentiBloccoRiordinoAutItem = new HiddenItem("listaEmendamentiBloccoRiordinoAut");
		uriDocGeneratoFormatoOdtItem = new HiddenItem("uriDocGeneratoFormatoOdt");
		flgForzataModificaAttoItem = new HiddenItem("flgForzataModificaAtto");		
		codAOOXSelNodoACTAItem = new HiddenItem("codAOOXSelNodoACTA");
		codStrutturaXSelNodoACTAItem = new HiddenItem("codStrutturaXSelNodoACTA");
		timestampGetDataItem = new HiddenItem("timestampGetData");
		
		hiddenForm.setFields(
			idUdHiddenItem,
			idUdNuovoComeCopiaHiddenItem,
			derivaDaRdAHiddenItem,
			prefKeyModelloHiddenItem,
			prefNameModelloHiddenItem,
			useridModelloHiddenItem,
			idUoModelloHiddenItem,
			flgTipoDocDiversoHiddenItem, 
			idTipoDocDaCopiareHiddenItem, 
			tipoDocumentoHiddenItem, 
			nomeTipoDocumentoHiddenItem, 
			rowidDocHiddenItem,
			idDocPrimarioHiddenItem, 
			nomeFilePrimarioHiddenItem,
			uriFilePrimarioHiddenItem,
			remoteUriFilePrimarioHiddenItem,
			infoFilePrimarioHiddenItem,
			isChangedFilePrimarioHiddenItem,
			idDocPrimarioOmissisHiddenItem, 
			nomeFilePrimarioOmissisHiddenItem,
			uriFilePrimarioOmissisHiddenItem,
			remoteUriFilePrimarioOmissisHiddenItem,
			infoFilePrimarioOmissisHiddenItem,		
			isChangedFilePrimarioOmissisHiddenItem,
			flgAggiornataVersDaPubblicareHiddenItem,
			idPropostaAMCHiddenItem,
			listaEmendamentiItem,
			listaEmendamentiBloccoRiordinoAutItem,
			uriDocGeneratoFormatoOdtItem,
			flgForzataModificaAttoItem,
			codAOOXSelNodoACTAItem,
			codStrutturaXSelNodoACTAItem,
			timestampGetDataItem
		);
	}
	
	/******************************* 
	 * DATI SCHEDA - REGISTRAZIONE *
	 *******************************/
		
	public boolean showDetailSectionRegistrazione() {
		return show_DETAIL_SECTION_REGISTRAZIONE() && ( !"".equals(getValueAsString("numeroRegistrazione")) || !"".equals(getValueAsString("numeroRegProvvisoria"))) ;
	}
	
	public String getTitleDetailSectionRegistrazione() {
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionRegistrazione_title();
	}
	
	public boolean isRequiredDetailSectionRegistrazione() {
		return false;
	}
	
	protected void createDetailSectionRegistrazione() {
		
		createRegistrazioneForm();
		
		detailSectionRegistrazione = new HeaderNuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionRegistrazione(), true, true, isRequiredDetailSectionRegistrazione(), registrazioneForm, invioACTAForm, attoLiquidazioneForm);
	}
	
	public boolean showDesUORegistrazioneItem() {
		return true;
	}
	
	protected void createRegistrazioneForm() {

		registrazioneForm = new DynamicForm() {

			@Override
			public void setFields(FormItem... fields) {
				super.setFields(fields);
				for (FormItem item : fields) {
					item.setTitleStyle(it.eng.utility.Styles.formTitleBold);
				}
			}
		};
		registrazioneForm.setValuesManager(vm);
		registrazioneForm.setWidth100();
		registrazioneForm.setPadding(5);
		registrazioneForm.setWrapItemTitles(false);
		registrazioneForm.setNumCols(20);
		registrazioneForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		registrazioneForm.setTabSet(tabSet);
		registrazioneForm.setTabID(_TAB_DATI_SCHEDA_ID);
		registrazioneForm.setHeight(1);
		
		//Numerazione atto
		
		iconaTipoRegistrazioneItem = new ImgItem("iconaTipoRegistrazione", "menu/iter_atti.png", I18NUtil.getMessages().nuovaPropostaAtto2_detail_iconaTipoRegistrazione_prompt());
		iconaTipoRegistrazioneItem.setColSpan(1);
		iconaTipoRegistrazioneItem.setIconWidth(16);
		iconaTipoRegistrazioneItem.setIconHeight(16);
		iconaTipoRegistrazioneItem.setIconVAlign(VerticalAlignment.BOTTOM);
		iconaTipoRegistrazioneItem.setAlign(Alignment.LEFT);
		iconaTipoRegistrazioneItem.setWidth(16);
		iconaTipoRegistrazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegistrazione"));
			}
		});

		siglaRegistrazioneItem = new TextItem("siglaRegistrazione",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_siglaRegistrazione_title());
		siglaRegistrazioneItem.setWidth(100);
		siglaRegistrazioneItem.setColSpan(1);
		siglaRegistrazioneItem.setShowTitle(false);
		siglaRegistrazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegistrazione"));
			}
		});

		numeroRegistrazioneItem = new NumericItem("numeroRegistrazione",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_numeroRegistrazione_title());
		numeroRegistrazioneItem.setColSpan(1);
		numeroRegistrazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegistrazione"));
			}
		});
		
		dataRegistrazioneItem = new DateTimeItem("dataRegistrazione",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_dataRegistrazione_title());
		dataRegistrazioneItem.setColSpan(1);
		dataRegistrazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegistrazione"));
			}
		});

		desUserRegistrazioneItem = new TextItem("desUserRegistrazione",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_desUserRegistrazione_title());
		desUserRegistrazioneItem.setWidth(200);
		desUserRegistrazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegistrazione")) && !"".equals(getValueAsString("desUserRegistrazione"));
			}
		});

		desUORegistrazioneItem = new TextItem("desUORegistrazione",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_desUORegistrazione_title());
		desUORegistrazioneItem.setWidth(200);
		desUORegistrazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegistrazione")) && !"".equals(getValueAsString("desUORegistrazione")) && showDesUORegistrazioneItem();				 
			}
		});
		
		// Numero per struttura
		
		estremiRepertorioPerStrutturaItem = new TextItem("estremiRepertorioPerStruttura", "N° per struttura");
		estremiRepertorioPerStrutturaItem.setWidth(200);
		estremiRepertorioPerStrutturaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("estremiRepertorioPerStruttura"));		 
			}
		});

		// Numerazione provvisoria di proposta atto
		
		iconaTipoRegProvvisoriaItem = new ImgItem("iconaTipoRegProvvisoria", "protocollazione/provvisoria.png", I18NUtil.getMessages().nuovaPropostaAtto2_detail_iconaTipoRegProvvisoria_prompt());
		iconaTipoRegProvvisoriaItem.setColSpan(1);
		iconaTipoRegProvvisoriaItem.setIconWidth(16);
		iconaTipoRegProvvisoriaItem.setIconHeight(16);
		iconaTipoRegProvvisoriaItem.setIconVAlign(VerticalAlignment.BOTTOM);
		iconaTipoRegProvvisoriaItem.setAlign(Alignment.LEFT);
		iconaTipoRegProvvisoriaItem.setWidth(16);
		iconaTipoRegProvvisoriaItem.setStartRow(true);		
		iconaTipoRegProvvisoriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegProvvisoria"));
			}
		});

		siglaRegProvvisoriaItem = new TextItem("siglaRegProvvisoria",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_siglaRegProvvisoria_title());
		siglaRegProvvisoriaItem.setWidth(100);
		siglaRegProvvisoriaItem.setColSpan(1);
		siglaRegProvvisoriaItem.setShowTitle(false);
		siglaRegProvvisoriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegProvvisoria"));
			}
		});

		numeroRegProvvisoriaItem = new NumericItem("numeroRegProvvisoria",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_numeroRegProvvisoria_title());
		numeroRegProvvisoriaItem.setColSpan(1);
		numeroRegProvvisoriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegProvvisoria"));
			}
		});

		dataRegProvvisoriaItem = new DateTimeItem("dataRegProvvisoria",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_dataRegProvvisoria_title());
		dataRegProvvisoriaItem.setColSpan(1);
		dataRegProvvisoriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegProvvisoria"));
			}
		});

		desUserRegProvvisoriaItem = new TextItem("desUserRegProvvisoria",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_desUserRegProvvisoria_title());
		desUserRegProvvisoriaItem.setWidth(250);
		desUserRegProvvisoriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegProvvisoria")) && !"".equals(getValueAsString("desUserRegProvvisoria")) && "".equals(getValueAsString("numeroRegistrazione"));				
			}
		});

		desUORegProvvisoriaItem = new TextItem("desUORegProvvisoria",
				I18NUtil.getMessages().nuovaPropostaAtto2_detail_desUORegProvvisoria_title());
		desUORegProvvisoriaItem.setWidth(250);
		desUORegProvvisoriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("numeroRegProvvisoria")) && !"".equals(getValueAsString("desUORegProvvisoria")) && "".equals(getValueAsString("numeroRegistrazione")) && showDesUORegistrazioneItem();				
			}
		});	

		/****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******
		ImgButtonItem visualizzaEmendamentiButton = new ImgButtonItem("visualizzaEmendamentiButton", "opener_closed.png", "Visualizza emendamenti");
		visualizzaEmendamentiButton.setAlwaysEnabled(true);
		visualizzaEmendamentiButton.setEndRow(false);
		visualizzaEmendamentiButton.setColSpan(1);
		visualizzaEmendamentiButton.addIconClickHandler(new IconClickHandler() {
			
			@Override
			public void onIconClick(IconClickEvent event) {
				// emendamentiFloatPanel.animateShow(AnimationEffect.SLIDE);
				emendamentiPanel.show();
				
			}
		});
		****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******/

		registrazioneForm.setFields(
			// Numerazione atto
			iconaTipoRegistrazioneItem, 
			siglaRegistrazioneItem,
			numeroRegistrazioneItem,
			dataRegistrazioneItem,
			desUserRegistrazioneItem,
			desUORegistrazioneItem,
			// Numero per struttura
			estremiRepertorioPerStrutturaItem,
			// Numerazione provvisoria di proposta atto
			iconaTipoRegProvvisoriaItem, 
			siglaRegProvvisoriaItem,
			numeroRegProvvisoriaItem,
			dataRegProvvisoriaItem,
			desUserRegProvvisoriaItem,
			desUORegProvvisoriaItem
			/****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******
			visualizzaEmendamentiButton
			****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******/
		);
		
		invioACTAForm = new DynamicForm() {

			@Override
			public void setFields(FormItem... fields) {
				super.setFields(fields);
				for (FormItem item : fields) {
					item.setTitleStyle(it.eng.utility.Styles.formTitleBold);
				}
			}
		};
		invioACTAForm.setValuesManager(vm);
		invioACTAForm.setWidth100();
		invioACTAForm.setPadding(5);
		invioACTAForm.setWrapItemTitles(false);
		invioACTAForm.setNumCols(20);
		invioACTAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		invioACTAForm.setTabSet(tabSet);
		invioACTAForm.setTabID(_TAB_DATI_SCHEDA_ID);
		invioACTAForm.setHeight(1);
		
		TitleItem esitoInvioACTATitleItem = new TitleItem("Esito archiviazione in ACTA");
		esitoInvioACTATitleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				String fascSmistACTA = AurigaLayout.getParametroDB("FASC_SMIST_ACTA");
				if(fascSmistACTA != null && (NuovaPropostaAtto2CompletaDetail._MANDATORY.equalsIgnoreCase(fascSmistACTA) || NuovaPropostaAtto2CompletaDetail._OPTIONAL.equalsIgnoreCase(fascSmistACTA))) {
					return !"".equals(getValueAsString("esitoInvioACTASerieAttiIntegrali")) || !"".equals(getValueAsString("esitoInvioACTASeriePubbl"));
				}
				return false;
			}
		});
		
		esitoInvioACTASerieAttiIntegraliItem = new StaticTextItem("esitoInvioACTASerieAttiIntegrali");
		esitoInvioACTASerieAttiIntegraliItem.setShowTitle(false);
		esitoInvioACTASerieAttiIntegraliItem.setShowValueIconOnly(true);
		esitoInvioACTASerieAttiIntegraliItem.setHint("(serie atti in vers. integrale)&nbsp;&nbsp;");
		esitoInvioACTASerieAttiIntegraliItem.setWrapHintText(false);
		esitoInvioACTASerieAttiIntegraliItem.setHintStyle(it.eng.utility.Styles.formTitle);
		esitoInvioACTASerieAttiIntegraliItem.setWidth(16);
		esitoInvioACTASerieAttiIntegraliItem.setHeight(16);
		esitoInvioACTASerieAttiIntegraliItem.setColSpan(1);
		esitoInvioACTASerieAttiIntegraliItem.setValueIconSize(16);
		esitoInvioACTASerieAttiIntegraliItem.setVAlign(VerticalAlignment.CENTER);
		esitoInvioACTASerieAttiIntegraliItem.setCellStyle(it.eng.utility.Styles.staticTextItem);
		esitoInvioACTASerieAttiIntegraliItem.setAlign(Alignment.LEFT);
		Map<String, String> esitoInvioACTASerieAttiIntegraliValueIcons = new HashMap<String, String>();
		esitoInvioACTASerieAttiIntegraliValueIcons.put("OK", "ok.png");
		esitoInvioACTASerieAttiIntegraliValueIcons.put("KO", "ko.png");
		esitoInvioACTASerieAttiIntegraliValueIcons.put("", "blank.png");
		esitoInvioACTASerieAttiIntegraliItem.setValueIcons(esitoInvioACTASerieAttiIntegraliValueIcons);
		esitoInvioACTASerieAttiIntegraliItem.setItemHoverFormatter(new FormItemHoverFormatter() {

			@Override
			public String getHoverHTML(FormItem item, DynamicForm form) {
				if("OK".equals(getValueAsString("esitoInvioACTASerieAttiIntegrali"))) {
					return "archiviato in ACTA nella serie degli atti in versione integrale";
				} else if("KO".equals(getValueAsString("esitoInvioACTASerieAttiIntegrali"))) {
					return "fallita archiviazione in ACTA nella serie degli atti in versione integrale";				
				}
				return null;
			}
		});
		esitoInvioACTASerieAttiIntegraliItem.setShowIfCondition(new FormItemIfFunction() {

			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String fascSmistACTA = AurigaLayout.getParametroDB("FASC_SMIST_ACTA");
				if(fascSmistACTA != null && (NuovaPropostaAtto2CompletaDetail._MANDATORY.equalsIgnoreCase(fascSmistACTA) || NuovaPropostaAtto2CompletaDetail._OPTIONAL.equalsIgnoreCase(fascSmistACTA))) {
					return !"".equals(getValueAsString("esitoInvioACTASerieAttiIntegrali"));
				}
				return false;
			}
		});
		
		esitoInvioACTASeriePubblItem = new StaticTextItem("esitoInvioACTASeriePubbl");
		esitoInvioACTASeriePubblItem.setShowTitle(false);
		esitoInvioACTASeriePubblItem.setShowValueIconOnly(true);
		esitoInvioACTASeriePubblItem.setHint("(serie di pubbl.)&nbsp;&nbsp;");
		esitoInvioACTASeriePubblItem.setWrapHintText(false);
		esitoInvioACTASeriePubblItem.setHintStyle(it.eng.utility.Styles.formTitle);
		esitoInvioACTASeriePubblItem.setWidth(16);
		esitoInvioACTASeriePubblItem.setHeight(16);
		esitoInvioACTASeriePubblItem.setColSpan(1);
		esitoInvioACTASeriePubblItem.setValueIconSize(16);
		esitoInvioACTASeriePubblItem.setVAlign(VerticalAlignment.CENTER);
		esitoInvioACTASeriePubblItem.setCellStyle(it.eng.utility.Styles.staticTextItem);
		esitoInvioACTASeriePubblItem.setAlign(Alignment.LEFT);
		Map<String, String> esitoInvioACTASeriePubblValueIcons = new HashMap<String, String>();
		esitoInvioACTASeriePubblValueIcons.put("OK", "ok.png");
		esitoInvioACTASeriePubblValueIcons.put("KO", "ko.png");
		esitoInvioACTASeriePubblValueIcons.put("", "blank.png");
		esitoInvioACTASeriePubblItem.setValueIcons(esitoInvioACTASeriePubblValueIcons);
		esitoInvioACTASeriePubblItem.setItemHoverFormatter(new FormItemHoverFormatter() {

			@Override
			public String getHoverHTML(FormItem item, DynamicForm form) {
				if("OK".equals(getValueAsString("esitoInvioACTASeriePubbl"))) {
					return "archiviato in ACTA nella serie di pubblicazione";
				} else if("KO".equals(getValueAsString("esitoInvioACTASeriePubbl"))) {
					return "fallita archiviazione in ACTA nella serie di pubblicazione";				
				}
				return null;
			}
		});
		esitoInvioACTASeriePubblItem.setShowIfCondition(new FormItemIfFunction() {

			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String fascSmistACTA = AurigaLayout.getParametroDB("FASC_SMIST_ACTA");
				if(fascSmistACTA != null && (NuovaPropostaAtto2CompletaDetail._MANDATORY.equalsIgnoreCase(fascSmistACTA) || NuovaPropostaAtto2CompletaDetail._OPTIONAL.equalsIgnoreCase(fascSmistACTA))) {
					return !"".equals(getValueAsString("esitoInvioACTASeriePubbl"));
				}
				return false;
			}
		});		
					
		invioACTAForm.setFields(
			esitoInvioACTATitleItem,
			esitoInvioACTASerieAttiIntegraliItem,
			esitoInvioACTASeriePubblItem
		);
		
		attoLiquidazioneForm = new DynamicForm() {

			@Override
			public void setFields(FormItem... fields) {
				super.setFields(fields);
				for (FormItem item : fields) {
					item.setTitleStyle(it.eng.utility.Styles.formTitleBold);
				}
			}
		};
		attoLiquidazioneForm.setValuesManager(vm);
		attoLiquidazioneForm.setWidth100();
		attoLiquidazioneForm.setPadding(5);
		attoLiquidazioneForm.setWrapItemTitles(false);
		attoLiquidazioneForm.setNumCols(20);
		attoLiquidazioneForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		attoLiquidazioneForm.setTabSet(tabSet);
		attoLiquidazioneForm.setTabID(_TAB_DATI_SCHEDA_ID);
		attoLiquidazioneForm.setHeight(1);
	
		// Atto di liquidazione
		
		idUdLiquidazioneItem = new HiddenItem("idUdLiquidazione");

		estremiAttoLiquidazioneItem = new TextItem("estremiAttoLiquidazione", "Atto liquidazione");
		estremiAttoLiquidazioneItem.setWidth(250);
		estremiAttoLiquidazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("estremiAttoLiquidazione"));		 
			}
		});
		
		ImgButtonItem dettaglioUdAttoLiquidazioneButton = new ImgButtonItem("dettaglioUdAttoLiquidazioneButton", "buttons/detail.png", "Visualizza dettaglio atto liquidazione");
		dettaglioUdAttoLiquidazioneButton.setColSpan(1);
		dettaglioUdAttoLiquidazioneButton.setAlwaysEnabled(true);
		dettaglioUdAttoLiquidazioneButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {				
				Record record = new Record();
				record.setAttribute("idUd", getValueAsString("idUdLiquidazione"));
				new DettaglioRegProtAssociatoWindow(record, "Dettaglio atto liquidazione " + getValueAsString("estremiAttoLiquidazione"));									
			}
		});
		dettaglioUdAttoLiquidazioneButton.setShowIfCondition(new FormItemIfFunction() {

			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("estremiAttoLiquidazione")) && !"".equals(getValueAsString("idUdLiquidazione"));
			}
		});
				
		attoLiquidazioneForm.setFields(
			// Atto di liquidazione
			idUdLiquidazioneItem,
			estremiAttoLiquidazioneItem,
			dettaglioUdAttoLiquidazioneButton
		);
	}
	
	/************************ 
	 * DATI SCHEDA - EMENDA *
	 ************************/
	
	public boolean showDetailSectionEmendamento() {
		return showAttributoCustomCablato("DATI_EMANDAMENTO");
	}
	
	public String getTitleDetailSectionEmendamento() {
		String label = getLabelAttributoCustomCablato("DATI_EMANDAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Emenda"; 
	}
	
	public boolean isRequiredDetailSectionEmendamento() {
		return false;
	}
	
	protected void createDetailSectionEmendamento() {
		
		createEmendamentoForm();
		
		detailSectionEmendamento = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionEmendamento(), true, true, isRequiredDetailSectionEmendamento(), emendamentoForm1, emendamentoForm2);
	}
	
	public boolean showTipoAttoEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_SU_TIPO_ATTO");
	}
	
	public String getTitleTipoAttoEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_TIPO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo atto"; 
	}
	
	public boolean isRequiredTipoAttoEmendamentoItem() {
		return showTipoAttoEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_TIPO_ATTO");
	}	
	
	public String getAltriParamLoadComboTipoAttoEmendamentoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("EMENDAMENTO_SU_TIPO_ATTO");
	}
	
	public boolean showSiglaAttoEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_SU_ATTO_SIGLA_REG");
	}
	
	public String getTitleSiglaAttoEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_ATTO_SIGLA_REG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sigla"; 
	}
	
	public boolean isRequiredSiglaAttoEmendamentoItem() {
		return showSiglaAttoEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_ATTO_SIGLA_REG");
	}	
	
	public boolean showNumeroAttoEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_SU_ATTO_NRO");
	}
	
	public String getTitleNumeroAttoEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_ATTO_NRO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N°"; 
	}
	
	public boolean isRequiredNumeroAttoEmendamentoItem() {
		return showNumeroAttoEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_ATTO_NRO");
	}	
	
	public boolean showAnnoAttoEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_SU_ATTO_ANNO");
	}
	
	public String getTitleAnnoAttoEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_ATTO_ANNO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anno"; 
	}
	
	public boolean isRequiredAnnoAttoEmendamentoItem() {
		return showAnnoAttoEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_ATTO_ANNO");
	}	
	
	public boolean showIdEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_ID");
	} 
	
	public String getTitleIdEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_ID");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Id."; 
	}
	
	public boolean isRequiredIdEmendamentoItem() {
		return showIdEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_ID");
	}	
	
	public boolean showNumeroEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_SUB_SU_EM_NRO");
	}
	
	public String getTitleNumeroEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SUB_SU_EM_NRO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Emendamento N°";
	}
	
	public boolean isRequiredNumeroEmendamentoItem() {
		return showNumeroEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SUB_SU_EM_NRO");
	}	
	
	public boolean showFlgEmendamentoSuFileItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_SU_FILE");
	}
	
	public String getTitleFlgEmendamentoSuFileItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_FILE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "su"; 
	}
	
	public boolean isRequiredFlgEmendamentoSuFileItem() {
		return showFlgEmendamentoSuFileItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_FILE");
	}
	
	public String getDefaultValueFlgEmendamentoSuFileItem() {
		return getValoreFissoAttributoCustomCablato("EMENDAMENTO_SU_FILE");
	}
	
	public boolean showNumeroAllegatoEmendamentoItem() {
		return showDetailSectionEmendamento() && isEmendamentoSuFileAllegato() && showAttributoCustomCablato("EMENDAMENTO_SU_ALLEGATO_NRO");
	}
	
	public String getTitleNumeroAllegatoEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_ALLEGATO_NRO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Alleg. N°";
	}
	
	public boolean isRequiredNumeroAllegatoEmendamentoItem() {
		return showNumeroAllegatoEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_ALLEGATO_NRO");
	}	
	
	public boolean showFlgEmendamentoIntegraleAllegatoItem() {
		return showDetailSectionEmendamento() && isEmendamentoSuFileAllegato() && showAttributoCustomCablato("EMENDAMENTO_INTEGRALE_ALLEGATO");
	}
	
	public String getTitleFlgEmendamentoIntegraleAllegatoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_INTEGRALE_ALLEGATO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "relativo a intero documento"; 
	}
	
	public boolean showNumeroPaginaEmendamentoItem() {
		return showDetailSectionEmendamento() && (!showFlgEmendamentoIntegraleAllegatoItem() || !isEmendamentoIntegraleAllegato()) && showAttributoCustomCablato("EMENDAMENTO_SU_PAGINA") ;
	}
	
	public String getTitleNumeroPaginaEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_PAGINA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "su pag. N°";
	}
	
	public boolean isRequiredNumeroPaginaEmendamentoItem() {
		return showNumeroPaginaEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_PAGINA");
	}	
	
	public boolean showNumeroRigaEmendamentoItem() {
		return showDetailSectionEmendamento() && (!showFlgEmendamentoIntegraleAllegatoItem() || !isEmendamentoIntegraleAllegato()) && showAttributoCustomCablato("EMENDAMENTO_SU_RIGA") ;
	}
	
	public String getTitleNumeroRigaEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_SU_RIGA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "su riga N°";
	}
	
	public boolean isRequiredNumeroRigaEmendamentoItem() {
		return showNumeroRigaEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_SU_RIGA");
	}
	
	public boolean showEffettoEmendamentoItem() {
		return showDetailSectionEmendamento() && showAttributoCustomCablato("EMENDAMENTO_EFFETTO");
	}
	
	public String getTitleEffettoEmendamentoItem() {
		String label = getLabelAttributoCustomCablato("EMENDAMENTO_EFFETTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "effetto"; 
	}
	
	public boolean isRequiredEffettoEmendamentoItem() {
		return showEffettoEmendamentoItem() && getFlgObbligatorioAttributoCustomCablato("EMENDAMENTO_EFFETTO");
	}	
	
	public String[] getValoriPossibiliEffettoEmendamentoItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("EMENDAMENTO_EFFETTO");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {"aggiunta", "eliminazione", "sostituzione"};
		}
	} 
	
	protected void createEmendamentoForm() {
		
		emendamentoForm1 = new DynamicForm();
		emendamentoForm1.setValuesManager(vm);
		emendamentoForm1.setWidth100();
		emendamentoForm1.setPadding(5);
		emendamentoForm1.setWrapItemTitles(false);
		emendamentoForm1.setNumCols(20);
		emendamentoForm1.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		emendamentoForm1.setTabSet(tabSet);
		emendamentoForm1.setTabID(_TAB_DATI_SCHEDA_ID);
		emendamentoForm1.setHeight(1);
		
		GWTRestDataSource tipoAttoEmendamentoDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		tipoAttoEmendamentoDS.addParam("altriParamLoadCombo", getAltriParamLoadComboTipoAttoEmendamentoItem());
		 		
		tipoAttoEmendamentoItem = new SelectItem("tipoAttoEmendamento", getTitleTipoAttoEmendamentoItem());
//		tipoAttoEmendamentoItem.setTitleOrientation(TitleOrientation.TOP);		
		tipoAttoEmendamentoItem.setWidth(200);
		tipoAttoEmendamentoItem.setStartRow(true);
		tipoAttoEmendamentoItem.setValueField("key");
		tipoAttoEmendamentoItem.setDisplayField("value");
		tipoAttoEmendamentoItem.setOptionDataSource(tipoAttoEmendamentoDS);		
		if(isRequiredTipoAttoEmendamentoItem()) {
			tipoAttoEmendamentoItem.setAttribute("obbligatorio", true);
		} else {
			tipoAttoEmendamentoItem.setAllowEmptyValue(true);			
		}
		tipoAttoEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoAttoEmendamentoItem();
			}
		}));
		tipoAttoEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoAttoEmendamentoItem();
			}
		});
		
		siglaAttoEmendamentoItem = new TextItem("siglaAttoEmendamento", getTitleSiglaAttoEmendamentoItem());
		siglaAttoEmendamentoItem.setWidth(100);
		siglaAttoEmendamentoItem.setColSpan(1);
		siglaAttoEmendamentoItem.setLength(10);
		if(isRequiredSiglaAttoEmendamentoItem()) {
			siglaAttoEmendamentoItem.setAttribute("obbligatorio", true);
		}
		siglaAttoEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredSiglaAttoEmendamentoItem();
			}
		}));
		siglaAttoEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showSiglaAttoEmendamentoItem();
			}
		});
		
		numeroAttoEmendamentoItem = new NumericItem("numeroAttoEmendamento", getTitleNumeroAttoEmendamentoItem(), false);
		numeroAttoEmendamentoItem.setColSpan(1);
		numeroAttoEmendamentoItem.setLength(7);
		if(isRequiredNumeroAttoEmendamentoItem()) {
			numeroAttoEmendamentoItem.setAttribute("obbligatorio", true);
		}
		numeroAttoEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumeroAttoEmendamentoItem();
			}
		}));
		numeroAttoEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumeroAttoEmendamentoItem();
			}
		});
				
		annoAttoEmendamentoItem = new AnnoItem("annoAttoEmendamento", getTitleAnnoAttoEmendamentoItem());
		annoAttoEmendamentoItem.setColSpan(1);
		if(isRequiredAnnoAttoEmendamentoItem()) {
			annoAttoEmendamentoItem.setAttribute("obbligatorio", true);
		}
		annoAttoEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnnoAttoEmendamentoItem();
			}
		}));
		annoAttoEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAnnoAttoEmendamentoItem();
			}
		});
		
		idEmendamentoItem = new NumericItem("idEmendamento", getTitleIdEmendamentoItem(), false);
		idEmendamentoItem.setWidth(100);
		idEmendamentoItem.setColSpan(1);
		if(isRequiredIdEmendamentoItem()) {
			idEmendamentoItem.setAttribute("obbligatorio", true);
		}
		idEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredIdEmendamentoItem();
			}
		}));
		idEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showIdEmendamentoItem();
			}
		});
		
		numeroEmendamentoItem = new NumericItem("numeroEmendamento", getTitleNumeroEmendamentoItem(), false);
		numeroEmendamentoItem.setWidth(50);
		numeroEmendamentoItem.setColSpan(1);
		numeroEmendamentoItem.setLength(3);
		if(isRequiredNumeroEmendamentoItem()) {
			numeroEmendamentoItem.setAttribute("obbligatorio", true);
		}
		numeroEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumeroEmendamentoItem();
			}
		}));
		numeroEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumeroEmendamentoItem();
			}
		});
		
		emendamentoForm1.setFields(tipoAttoEmendamentoItem, siglaAttoEmendamentoItem, numeroAttoEmendamentoItem, annoAttoEmendamentoItem, idEmendamentoItem, numeroEmendamentoItem);	
		
		emendamentoForm2 = new DynamicForm();
		emendamentoForm2.setValuesManager(vm);
		emendamentoForm2.setWidth100();
		emendamentoForm2.setPadding(5);
		emendamentoForm2.setWrapItemTitles(false);
		emendamentoForm2.setNumCols(20);
		emendamentoForm2.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		emendamentoForm2.setTabSet(tabSet);
		emendamentoForm2.setTabID(_TAB_DATI_SCHEDA_ID);
		emendamentoForm2.setHeight(1);		
		
		flgEmendamentoSuFileItem = new RadioGroupItem("flgEmendamentoSuFile", getTitleFlgEmendamentoSuFileItem());
		Map<String, String> flgEmendamentoSuFileValueMap = new HashMap<String, String>();
		flgEmendamentoSuFileValueMap.put(_FLG_EMENDAMENTO_SU_FILE_D, "testo");
		flgEmendamentoSuFileValueMap.put(_FLG_EMENDAMENTO_SU_FILE_A, "allegato");
		flgEmendamentoSuFileItem.setValueMap(flgEmendamentoSuFileValueMap);
		flgEmendamentoSuFileItem.setDefaultValue(getDefaultValueFlgEmendamentoSuFileItem());
		flgEmendamentoSuFileItem.setVertical(false);
		flgEmendamentoSuFileItem.setWrap(false);
		flgEmendamentoSuFileItem.setShowDisabled(false);
		if(isRequiredFlgEmendamentoSuFileItem()) {
			flgEmendamentoSuFileItem.setAttribute("obbligatorio", true);
		}
		flgEmendamentoSuFileItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgEmendamentoSuFileItem();
			}
		}));
		flgEmendamentoSuFileItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgEmendamentoSuFileItem();
			}
		});			
		flgEmendamentoSuFileItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				emendamentoForm2.markForRedraw();
			}
		});
		
		numeroAllegatoEmendamentoItem = new NumericItem("numeroAllegatoEmendamento", getTitleNumeroAllegatoEmendamentoItem(), false);
		numeroAllegatoEmendamentoItem.setWidth(50);
		numeroAllegatoEmendamentoItem.setColSpan(1);
		numeroAllegatoEmendamentoItem.setLength(3);
		if(isRequiredNumeroAllegatoEmendamentoItem()) {
			numeroAllegatoEmendamentoItem.setAttribute("obbligatorio", true);
		}
		numeroAllegatoEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumeroAllegatoEmendamentoItem();
			}
		}));
		numeroAllegatoEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumeroAllegatoEmendamentoItem();
			}
		});
		
		flgEmendamentoIntegraleAllegatoItem = new CheckboxItem("flgEmendamentoIntegraleAllegato", getTitleFlgEmendamentoIntegraleAllegatoItem());
		flgEmendamentoIntegraleAllegatoItem.setDefaultValue(false);
		flgEmendamentoIntegraleAllegatoItem.setColSpan(1);
		flgEmendamentoIntegraleAllegatoItem.setWidth("*");
		flgEmendamentoIntegraleAllegatoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {		
				emendamentoForm2.markForRedraw();
			}
		});
		flgEmendamentoIntegraleAllegatoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgEmendamentoIntegraleAllegatoItem();
			}
		});
		
		numeroPaginaEmendamentoItem = new NumericItem("numeroPaginaEmendamento", getTitleNumeroPaginaEmendamentoItem(), false);
		numeroPaginaEmendamentoItem.setWidth(50);
		numeroPaginaEmendamentoItem.setColSpan(1);
		numeroPaginaEmendamentoItem.setLength(3);
		if(isRequiredNumeroPaginaEmendamentoItem()) {
			numeroPaginaEmendamentoItem.setAttribute("obbligatorio", true);
		}
		numeroPaginaEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumeroPaginaEmendamentoItem();
			}
		}));
		numeroPaginaEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumeroPaginaEmendamentoItem();
			}
		});
		
		numeroRigaEmendamentoItem = new NumericItem("numeroRigaEmendamento", getTitleNumeroRigaEmendamentoItem(), false);
		numeroRigaEmendamentoItem.setWidth(50);
		numeroRigaEmendamentoItem.setColSpan(1);
		numeroRigaEmendamentoItem.setLength(3);
		if(isRequiredNumeroRigaEmendamentoItem()) {
			numeroRigaEmendamentoItem.setAttribute("obbligatorio", true);
		}
		numeroRigaEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumeroRigaEmendamentoItem();
			}
		}));
		numeroRigaEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumeroRigaEmendamentoItem();
			}
		});
		
		effettoEmendamentoItem = new SelectItem("effettoEmendamento", getTitleEffettoEmendamentoItem());
		effettoEmendamentoItem.setWidth(200);
		effettoEmendamentoItem.setValueMap(getValoriPossibiliEffettoEmendamentoItem());					
		if(isRequiredEffettoEmendamentoItem()) {
			effettoEmendamentoItem.setAttribute("obbligatorio", true);
		} else {
			effettoEmendamentoItem.setAllowEmptyValue(true);			
		}
		effettoEmendamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredEffettoEmendamentoItem();
			}
		}));
		effettoEmendamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showEffettoEmendamentoItem();
			}
		});
		
		emendamentoForm2.setFields(flgEmendamentoSuFileItem, numeroAllegatoEmendamentoItem, flgEmendamentoIntegraleAllegatoItem, numeroPaginaEmendamentoItem, numeroRigaEmendamentoItem, effettoEmendamentoItem);			
	}
	
	/***************************** 
	 * DATI SCHEDA - DESTINATARI *
	 *****************************/
	
	public boolean showFlgAttivaDestinatariItem() {
		return showAttributoCustomCablato("ATTIVA_SEZIONE_DESTINATARI");
	}
	
	public String getTitleFlgAttivaDestinatariItem() {
		String label = getLabelAttributoCustomCablato("ATTIVA_SEZIONE_DESTINATARI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "attiva sezione destinatari"; 
	}
	
	public boolean getDefaultValueAsBooleanFlgAttivaDestinatariItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("ATTIVA_SEZIONE_DESTINATARI");
	}
	
	protected void createAttivaDestinatariForm() {
		
		attivaDestinatariForm = new DynamicForm();
		attivaDestinatariForm.setValuesManager(vm);
		attivaDestinatariForm.setWidth100();
		attivaDestinatariForm.setPadding(5);
		attivaDestinatariForm.setWrapItemTitles(false);
		attivaDestinatariForm.setNumCols(20);
		attivaDestinatariForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		attivaDestinatariForm.setTabSet(tabSet);
		attivaDestinatariForm.setTabID(_TAB_DATI_SCHEDA_ID);
		attivaDestinatariForm.setHeight(1);
		
		flgAttivaDestinatariItem = new CheckboxItem("flgAttivaDestinatari", getTitleFlgAttivaDestinatariItem());
		flgAttivaDestinatariItem.setDefaultValue(getDefaultValueAsBooleanFlgAttivaDestinatariItem());
		flgAttivaDestinatariItem.setColSpan(1);
		flgAttivaDestinatariItem.setWidth("*");
		flgAttivaDestinatariItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
				redrawTabForms(_TAB_DATI_SCHEDA_ID);
				showHideSections();
			}
		});
		flgAttivaDestinatariItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgAttivaDestinatariItem();
			}
		});		
			
		attivaDestinatariForm.setFields(
			flgAttivaDestinatariItem
		);			
	}
	
	public boolean showDetailSectionDestinatariAtto() {
		return showDestinatariAttoItem();
	}
	
	public String getTitleDetailSectionDestinatariAtto() {
		return getTitleDestinatariAttoItem();
	}
	
	public boolean isRequiredDetailSectionDestinatariAtto() {
		return isRequiredDestinatariAttoItem();
	}		
	
	protected void createDetailSectionDestinatariAtto() {
		
		createDestinatariAttoForm();
		
		detailSectionDestinatariAtto = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDestinatariAtto(), true, true, isRequiredDetailSectionDestinatariAtto(), destinatariAttoForm);
	}
	
	public boolean showDestinatariAttoItem() {
		return showAttributoCustomCablato("DESTINATARI_ATTO") && (!showFlgAttivaDestinatariItem() || getValueAsBoolean("flgAttivaDestinatari"));
	}
	
	public String getTitleDestinatariAttoItem() {
		String label = getLabelAttributoCustomCablato("DESTINATARI_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Destinatari"; 
	}
	
	public boolean isRequiredDestinatariAttoItem() {
		return showDestinatariAttoItem() && getFlgObbligatorioAttributoCustomCablato("DESTINATARI_ATTO");
	}
	
	protected void createDestinatariAttoForm() {
		
		destinatariAttoForm = new DynamicForm();
		destinatariAttoForm.setValuesManager(vm);
		destinatariAttoForm.setWidth100();
		destinatariAttoForm.setPadding(5);
		destinatariAttoForm.setWrapItemTitles(false);
		destinatariAttoForm.setNumCols(20);
		destinatariAttoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		destinatariAttoForm.setTabSet(tabSet);
		destinatariAttoForm.setTabID(_TAB_DATI_SCHEDA_ID);
		destinatariAttoForm.setHeight(1);
		
		listaDestinatariAttoItem = new DestinatariAttoItem() {
			
			@Override
			public boolean skipValidation() {
				if(showDestinatariAttoItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
			
			@Override
			public String getIdDocTypeAtto() {
				return tipoDocumento;
			}
			
			@Override
			public boolean showPrefisso() {
				return showAttributoCustomCablato("DESTINATARI_ATTO_PREFISSO");
			}
			
			@Override
			public String getTitlePrefisso() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_ATTO_PREFISSO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Prefisso";
			}
			
			@Override
			public boolean isRequiredPrefisso() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_ATTO_PREFISSO");
			}
			
			@Override
			public boolean isEditablePrefisso() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_ATTO_PREFISSO");
			}
			
			@Override
			public String getTitleDenominazione() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_ATTO_NOME");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Nome";
			}
			
			@Override
			public boolean isRequiredDenominazione() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_ATTO_NOME");
			}
			
			@Override
			public boolean isEditableDenominazione() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_ATTO_NOME");
			}
			
			@Override
			public boolean showIndirizzo() {
				return showAttributoCustomCablato("DESTINATARI_ATTO_INDIRIZZO");
			}
			
			@Override
			public String getTitleIndirizzo() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_ATTO_INDIRIZZO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Sede/indirizzo";
			}
			
			@Override
			public boolean isRequiredIndirizzo() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_ATTO_INDIRIZZO");
			}
			
			@Override
			public boolean isEditableIndirizzo() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_ATTO_INDIRIZZO");
			}
			
			@Override
			public boolean showCorteseAttenzione() {
				return showAttributoCustomCablato("DESTINATARI_ATTO_CA");
			}
			
			@Override
			public String getTitleCorteseAttenzione() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_ATTO_CA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "C.A.";
			}
			
			@Override
			public boolean isRequiredCorteseAttenzione() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_ATTO_CA");
			}
			
			@Override
			public boolean isEditableCorteseAttenzione() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_ATTO_CA");
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaDestinatariAttoItem.setName("listaDestinatariAtto");
		listaDestinatariAttoItem.setStartRow(true);
		listaDestinatariAttoItem.setShowTitle(false);
		listaDestinatariAttoItem.setColSpan(20);
		if(isRequiredDestinatariAttoItem()) {
			listaDestinatariAttoItem.setAttribute("obbligatorio", true);
		}
		listaDestinatariAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDestinatariAttoItem();
			}
		});
			
		destinatariAttoForm.setFields(
			listaDestinatariAttoItem
		);			
	}
	
	public boolean showDetailSectionDestinatariPCAtto() {
		return showDestinatariPCAttoItem();
	}
	
	public String getTitleDetailSectionDestinatariPCAtto() {
		return getTitleDestinatariPCAttoItem();
	}
	
	public boolean isRequiredDetailSectionDestinatariPCAtto() {
		return isRequiredDestinatariPCAttoItem();
	}		
	
	protected void createDetailSectionDestinatariPCAtto() {
		
		createDestinatariPCAttoForm();
		
		detailSectionDestinatariPCAtto = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDestinatariPCAtto(), true, true, isRequiredDetailSectionDestinatariPCAtto(), destinatariPCAttoForm);
	}
	
	public boolean showDestinatariPCAttoItem() {
		return showAttributoCustomCablato("DESTINATARI_PC_ATTO") && (!showFlgAttivaDestinatariItem() || getValueAsBoolean("flgAttivaDestinatari"));
	}
	
	public String getTitleDestinatariPCAttoItem() {
		String label = getLabelAttributoCustomCablato("DESTINATARI_PC_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Destinatari P.C."; 
	}
	
	public boolean isRequiredDestinatariPCAttoItem() {
		return showDestinatariPCAttoItem() && getFlgObbligatorioAttributoCustomCablato("DESTINATARI_PC_ATTO");
	}
	
	protected void createDestinatariPCAttoForm() {
		
		destinatariPCAttoForm = new DynamicForm();
		destinatariPCAttoForm.setValuesManager(vm);
		destinatariPCAttoForm.setWidth100();
		destinatariPCAttoForm.setPadding(5);
		destinatariPCAttoForm.setWrapItemTitles(false);
		destinatariPCAttoForm.setNumCols(20);
		destinatariPCAttoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		destinatariPCAttoForm.setTabSet(tabSet);
		destinatariPCAttoForm.setTabID(_TAB_DATI_SCHEDA_ID);
		destinatariPCAttoForm.setHeight(1);
		
		listaDestinatariPCAttoItem = new DestinatariAttoItem() {
			
			@Override
			public boolean skipValidation() {
				if(showDestinatariPCAttoItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
			
			@Override
			public String getIdDocTypeAtto() {
				return tipoDocumento;
			}
			
			@Override
			public boolean showPrefisso() {
				return showAttributoCustomCablato("DESTINATARI_PC_ATTO_PREFISSO");
			}
			
			@Override
			public String getTitlePrefisso() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_PC_ATTO_PREFISSO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Prefisso";
			}
			
			@Override
			public boolean isRequiredPrefisso() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_PC_ATTO_PREFISSO");
			}
			
			@Override
			public boolean isEditablePrefisso() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_PC_ATTO_PREFISSO");
			}
			
			@Override
			public String getTitleDenominazione() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_PC_ATTO_NOME");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Nome";
			}
			
			@Override
			public boolean isRequiredDenominazione() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_PC_ATTO_NOME");
			}
			
			@Override
			public boolean isEditableDenominazione() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_PC_ATTO_NOME");
			}
			
			@Override
			public boolean showIndirizzo() {
				return showAttributoCustomCablato("DESTINATARI_PC_ATTO_INDIRIZZO");
			}
			
			@Override
			public String getTitleIndirizzo() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_PC_ATTO_INDIRIZZO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Sede/indirizzo";
			}
			
			@Override
			public boolean isRequiredIndirizzo() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_PC_ATTO_INDIRIZZO");
			}
			
			@Override
			public boolean isEditableIndirizzo() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_PC_ATTO_INDIRIZZO");
			}
			
			@Override
			public boolean showCorteseAttenzione() {
				return showAttributoCustomCablato("DESTINATARI_PC_ATTO_CA");
			}
			
			@Override
			public String getTitleCorteseAttenzione() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_PC_ATTO_CA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "C.A.";
			}
			
			@Override
			public boolean isRequiredCorteseAttenzione() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_PC_ATTO_CA");
			}
			
			@Override
			public boolean isEditableCorteseAttenzione() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_PC_ATTO_CA");
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaDestinatariPCAttoItem.setName("listaDestinatariPCAtto");
		listaDestinatariPCAttoItem.setStartRow(true);
		listaDestinatariPCAttoItem.setShowTitle(false);
		listaDestinatariPCAttoItem.setColSpan(20);
		if(isRequiredDestinatariPCAttoItem()) {
			listaDestinatariPCAttoItem.setAttribute("obbligatorio", true);
		}
		listaDestinatariPCAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDestinatariPCAttoItem();
			}
		});
			
		destinatariPCAttoForm.setFields(
			listaDestinatariPCAttoItem
		);			
	}
	
	/******************************* 
	 * DATI SCHEDA - TIPO PROPOSTA *
	 *******************************/
	
	public boolean showDetailSectionTipoProposta() {
		return showIniziativaPropostaItem() ||
			   showFlgAttoMeroIndirizzoItem() ||
			   showFlgAttoCommissarioItem() ||
			   showFlgModificaRegolamentoItem() ||
			   showFlgModificaStatutoItem() ||
			   showFlgNominaItem() ||
			   showFlgRatificaDeliberaUrgenzaItem() ||
			   showFlgAttoUrgenteItem() ||
			   showFlgCommissioniTipoPropostaItem();
	}
	
	public String getTitleDetailSectionTipoProposta() {
		String label = getLabelAttributoCustomCablato("DETT_TIPO_PROPOSTA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo proposta"; 
	}
	
	public boolean isRequiredDetailSectionTipoProposta() {
		return isRequiredIniziativaPropostaItem();
	}	
	
	protected void createDetailSectionTipoProposta() {
		
		createTipoPropostaForm();
		
		detailSectionTipoProposta = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionTipoProposta(), true, true, isRequiredDetailSectionTipoProposta(), tipoPropostaForm);
	}
	
	public boolean showIniziativaPropostaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_INIZIATIVA_PROP_ATTO");
	}
	
	public String getTitleIniziativaPropostaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_INIZIATIVA_PROP_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Iniziativa proposta"; 
	}
	
	public boolean isRequiredIniziativaPropostaItem() {
		return showIniziativaPropostaItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_INIZIATIVA_PROP_ATTO");
	}	
	
	public String[] getValoriPossibiliIniziativaPropostaItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("TASK_RESULT_2_INIZIATIVA_PROP_ATTO");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {"popolare", "circoscrizione"};
		}		
	}
	
	public boolean showFlgAttoMeroIndirizzoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_ATTO_MERO_INDIRIZZO");
	}
	
	public String getTitleFlgAttoMeroIndirizzoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_ATTO_MERO_INDIRIZZO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "atto di mero indirizzo"; 
	}
	
	public boolean showFlgAttoCommissarioItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_ATTO_COMMISSARIO");
	}
	
	public String getTitleFlgAttoCommissarioItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_ATTO_COMMISSARIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "atto del Commissario"; 
	}
	
	public boolean getDefaultValueAsBooleanFlgAttoCommissarioItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_ATTO_COMMISSARIO");
	}
	
	public boolean showFlgModificaRegolamentoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_MODIFICA_REGOLAMENTO");
	}
	
	public String getTitleFlgModificaRegolamentoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_MODIFICA_REGOLAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "modifica regolamento"; 
	}
	
	public boolean showFlgModificaStatutoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_MODIFICA_STATUTO");
	}
	
	public String getTitleFlgModificaStatutoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_MODIFICA_STATUTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "modifica statuto"; 
	}
	
	public boolean showFlgNominaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DEL_NOMINA");
	}
	
	public String getTitleFlgNominaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DEL_NOMINA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "nomina"; 
	}
	
	public boolean showFlgRatificaDeliberaUrgenzaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_RATIFICA_DEL_URGENZA");
	}
	
	public String getTitleFlgRatificaDeliberaUrgenzaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RATIFICA_DEL_URGENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "ratifica delibera d'urgenza"; 
	}
	
	
	public boolean showFlgAttoUrgenteItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_ATTO_URGENTE");
	}
	
	public String getTitleFlgAttoUrgenteItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_ATTO_URGENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "atto urgente"; 
	}
	
	public boolean showFlgCommissioniTipoPropostaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI") && !showFlgCommissioniItemInSezCommissioni();
	}
	
	public String getTitleFlgCommissioniTipoPropostaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "per commissioni"; 
	}
	
	public boolean getDefaultValueAsBooleanFlgCommissioniTipoPropostaItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI");
	}
	
	protected void createTipoPropostaForm() {
		
		tipoPropostaForm = new DynamicForm();
		tipoPropostaForm.setValuesManager(vm);
		tipoPropostaForm.setWidth100();
		tipoPropostaForm.setPadding(5);
		tipoPropostaForm.setWrapItemTitles(false);
		tipoPropostaForm.setNumCols(20);
		tipoPropostaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		tipoPropostaForm.setTabSet(tabSet);
		tipoPropostaForm.setTabID(_TAB_DATI_SCHEDA_ID);
		tipoPropostaForm.setHeight(1);
		
		iniziativaPropostaItem = new SelectItem("iniziativaProposta", getTitleIniziativaPropostaItem());
		iniziativaPropostaItem.setWidth(500);
		iniziativaPropostaItem.setColSpan(20);
		iniziativaPropostaItem.setEndRow(true);
		iniziativaPropostaItem.setValueMap(getValoriPossibiliIniziativaPropostaItem());	
		iniziativaPropostaItem.setClearable(true);
		if(isRequiredIniziativaPropostaItem()) {
			iniziativaPropostaItem.setAttribute("obbligatorio", true);
		}
		iniziativaPropostaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredIniziativaPropostaItem();
			}
		}));
		iniziativaPropostaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showIniziativaPropostaItem();
			}
		});
		iniziativaPropostaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
			}
		});
		
		SpacerItem spacerCheckboxTipoPropostaItem = new SpacerItem();
		spacerCheckboxTipoPropostaItem.setColSpan(1);
		spacerCheckboxTipoPropostaItem.setStartRow(true);
		spacerCheckboxTipoPropostaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return showFlgAttoMeroIndirizzoItem() ||
					   showFlgAttoCommissarioItem() ||
					   showFlgModificaRegolamentoItem() ||
					   showFlgModificaStatutoItem() ||
					   showFlgNominaItem() ||
					   showFlgRatificaDeliberaUrgenzaItem() ||
					   showFlgAttoUrgenteItem() ||
					   showFlgCommissioniTipoPropostaItem();
			}
		});
		
		flgAttoMeroIndirizzoItem = new CheckboxItem("flgAttoMeroIndirizzo", getTitleFlgAttoMeroIndirizzoItem());
		flgAttoMeroIndirizzoItem.setDefaultValue(false);
		flgAttoMeroIndirizzoItem.setColSpan(1);
		flgAttoMeroIndirizzoItem.setWidth("*");
		flgAttoMeroIndirizzoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
				afterChangedFlgAttoMeroIndirizzo();
			}
		});
		flgAttoMeroIndirizzoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgAttoMeroIndirizzoItem();
			}
		});		
		
		flgAttoCommissarioItem = new CheckboxItem("flgAttoCommissario", getTitleFlgAttoCommissarioItem());
		flgAttoCommissarioItem.setDefaultValue(getDefaultValueAsBooleanFlgAttoCommissarioItem());
		flgAttoCommissarioItem.setColSpan(1);
		flgAttoCommissarioItem.setWidth("*");		
		flgAttoCommissarioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgAttoCommissarioItem();
			}
		});		
		
		flgModificaRegolamentoItem = new CheckboxItem("flgModificaRegolamento", getTitleFlgModificaRegolamentoItem());
		flgModificaRegolamentoItem.setDefaultValue(false);
		flgModificaRegolamentoItem.setColSpan(1);
		flgModificaRegolamentoItem.setWidth("*");
		flgModificaRegolamentoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
			}
		});
		flgModificaRegolamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgModificaRegolamentoItem();
			}
		});
		
		flgModificaStatutoItem = new CheckboxItem("flgModificaStatuto", getTitleFlgModificaStatutoItem());
		flgModificaStatutoItem.setDefaultValue(false);
		flgModificaStatutoItem.setColSpan(1);
		flgModificaStatutoItem.setWidth("*");
		flgModificaStatutoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
			}
		});
		flgModificaStatutoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgModificaStatutoItem();
			}
		});
		
		flgNominaItem = new CheckboxItem("flgNomina", getTitleFlgNominaItem());
		flgNominaItem.setDefaultValue(false);
		flgNominaItem.setColSpan(1);
		flgNominaItem.setWidth("*");
		flgNominaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
			}
		});
		flgNominaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgNominaItem();
			}
		});
		
		flgRatificaDeliberaUrgenzaItem = new CheckboxItem("flgRatificaDeliberaUrgenza", getTitleFlgRatificaDeliberaUrgenzaItem());
		flgRatificaDeliberaUrgenzaItem.setDefaultValue(false);
		flgRatificaDeliberaUrgenzaItem.setColSpan(1);
		flgRatificaDeliberaUrgenzaItem.setWidth("*");
		flgRatificaDeliberaUrgenzaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
			}
		});
		flgRatificaDeliberaUrgenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgRatificaDeliberaUrgenzaItem();
			}
		});
		
		flgAttoUrgenteItem = new CheckboxItem("flgAttoUrgente", getTitleFlgAttoUrgenteItem());
		flgAttoUrgenteItem.setDefaultValue(false);
		flgAttoUrgenteItem.setColSpan(1);
		flgAttoUrgenteItem.setWidth("*");
		flgAttoUrgenteItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
			}
		});
		flgAttoUrgenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgAttoUrgenteItem();
			}
		});
		
		flgCommissioniTipoPropostaItem = new CheckboxItem("flgCommissioniTipoProposta", getTitleFlgCommissioniTipoPropostaItem());
		flgCommissioniTipoPropostaItem.setDefaultValue(getDefaultValueAsBooleanFlgCommissioniTipoPropostaItem());
		flgCommissioniTipoPropostaItem.setColSpan(1);
		flgCommissioniTipoPropostaItem.setWidth("*");
		flgCommissioniTipoPropostaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
			}
		});
		flgCommissioniTipoPropostaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgCommissioniTipoPropostaItem();
			}
		});
		
		tipoPropostaForm.setFields(
			iniziativaPropostaItem, spacerCheckboxTipoPropostaItem, flgAttoMeroIndirizzoItem, flgAttoCommissarioItem, flgModificaRegolamentoItem, flgModificaStatutoItem, flgNominaItem, flgRatificaDeliberaUrgenzaItem, flgAttoUrgenteItem, flgCommissioniTipoPropostaItem
		);			
	}
	
	/**************************************************** 
	 * DATI SCHEDA - CIRCOSCRIZIONI PROPONENTI DELIBERA *
	 ****************************************************/
	
	public boolean showDetailSectionCircoscrizioni() {
		return showCircoscrizioniItem();
	}
	
	public String getTitleDetailSectionCircoscrizioni() {
		return getTitleCircoscrizioniItem();
	}
	
	public boolean isRequiredDetailSectionCircoscrizioni() {
		return isRequiredCircoscrizioniItem();
	}		
	
	protected void createDetailSectionCircoscrizioni() {
		
		createCircoscrizioniForm();
		
		detailSectionCircoscrizioni = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionCircoscrizioni(), true, true, isRequiredDetailSectionCircoscrizioni(), circoscrizioniForm);
	}
	
	public boolean showCircoscrizioniItem() {
		return showIniziativaPropostaItem() && "CIRCOSCRIZIONE".equalsIgnoreCase(getValueAsString("iniziativaProposta")) && showAttributoCustomCablato("CIRCOSCRIZIONE_PROPONENTE");
	}
	
	public String getTitleCircoscrizioniItem() {
		String label = getLabelAttributoCustomCablato("CIRCOSCRIZIONE_PROPONENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Circoscrizioni proponenti delibera";
	}
	
	public boolean isRequiredCircoscrizioniItem() {
		return showCircoscrizioniItem() && getFlgObbligatorioAttributoCustomCablato("CIRCOSCRIZIONE_PROPONENTE");
	}	
	
	public String getAltriParamLoadComboCircoscrizioniItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("CIRCOSCRIZIONE_PROPONENTE");
	}
	
	protected void createCircoscrizioniForm() {
		
		circoscrizioniForm = new DynamicForm();
		circoscrizioniForm.setValuesManager(vm);
		circoscrizioniForm.setWidth100();
		circoscrizioniForm.setPadding(5);
		circoscrizioniForm.setWrapItemTitles(false);
		circoscrizioniForm.setNumCols(20);
		circoscrizioniForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		circoscrizioniForm.setTabSet(tabSet);
		circoscrizioniForm.setTabID(_TAB_DATI_SCHEDA_ID);
		circoscrizioniForm.setHeight(1);
		
		listaCircoscrizioniItem = new ValoriDizionarioItem() {
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboCircoscrizioniItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredCircoscrizioniItem()) {
					listaCircoscrizioniItem.setAttribute("obbligatorio", true);
				} else {
					listaCircoscrizioniItem.setAttribute("obbligatorio", false);
				}
				listaCircoscrizioniItem.storeValue(circoscrizioniForm.getValueAsRecordList(listaCircoscrizioniItem.getName()));		
				return super.validate();
			}					
			
			@Override
			public boolean skipValidation() {
				if(showCircoscrizioniItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
		};
		listaCircoscrizioniItem.setName("listaCircoscrizioni");
		listaCircoscrizioniItem.setStartRow(true);
		listaCircoscrizioniItem.setShowTitle(false);
		listaCircoscrizioniItem.setColSpan(20);
//		if(getFlgObbligatorioAttributoCustomCablato("CIRCOSCRIZIONE_PROPONENTE")) {
//			listaCircoscrizioniItem.setAttribute("obbligatorio", true);
//		}
		listaCircoscrizioniItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredCircoscrizioniItem()) {
					listaCircoscrizioniItem.setAttribute("obbligatorio", true);
				} else {
					listaCircoscrizioniItem.setAttribute("obbligatorio", false);
				}
				listaCircoscrizioniItem.storeValue(form.getValueAsRecordList(listaCircoscrizioniItem.getName()));		
				return showCircoscrizioniItem();
			}
		});
		
		circoscrizioniForm.setFields(listaCircoscrizioniItem);			
	}
	
	/************************************ 
	 * DATI SCHEDA - TIPO INTERPELLANZA *
	 ************************************/
	
	public boolean showDetailSectionInterpellanza() {
		return showTipoInterpellanzaItem();
	}
	
	public String getTitleDetailSectionInterpellanza() {
		return getTitleTipoInterpellanzaItem();
	}
	
	public boolean isRequiredDetailSectionInterpellanza() {
		return isRequiredTipoInterpellanzaItem();
	}		
	
	protected void createDetailSectionInterpellanza() {
		
		createInterpellanzaForm();
		
		detailSectionInterpellanza = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionInterpellanza(), true, true, isRequiredDetailSectionInterpellanza(), interpellanzaForm);
	}
	
	public boolean showTipoInterpellanzaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_TIPO_INTERPELLANZA");
	}
	
	public String getTitleTipoInterpellanzaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_TIPO_INTERPELLANZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo interpellanza"; 
	}
	
	public boolean isRequiredTipoInterpellanzaItem() {
		return showTipoInterpellanzaItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_TIPO_INTERPELLANZA");
	}
	
	public String getAltriParamLoadComboTipoInterpellanzaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("TASK_RESULT_2_TIPO_INTERPELLANZA");
	}
	
	public boolean showMotivazioneInterpellanzaRispScrittaItem() {
		return (showTipoInterpellanzaItem() && getValueAsString("tipoInterpellanza").toLowerCase().contains(_TIPO_INTERPELLANZA_RISP_SCRITTA)) && showAttributoCustomCablato("MOTIVAZIONE_INT_RISP_SCRITTA");
	}
	
	public void manageShowMotivazioneInterpellanzaRispScrittaItem(String value) {
		if(value.contains(_TIPO_INTERPELLANZA_RISP_SCRITTA) && showAttributoCustomCablato("MOTIVAZIONE_INT_RISP_SCRITTA")) {
			motivazioneInterpellanzaRispScrittaItem.clearValue();
			motivazioneInterpellanzaRispScrittaItem.show();
		} else {
			motivazioneInterpellanzaRispScrittaItem.clearValue();
			motivazioneInterpellanzaRispScrittaItem.hide();
		}
	}
		
	public String getTitleMotivazioneInterpellanzaRispScrittaItem() {
		String label = getLabelAttributoCustomCablato("MOTIVAZIONE_INT_RISP_SCRITTA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Motivazione"; 
	}
	
	public int getAltezzaMotivazioneInterpellanzaRispScrittaItem() {
		Integer altezza = getAltezzaInRigheAttributoCustomCablato("MOTIVAZIONE_INT_RISP_SCRITTA");
		return altezza != null ? altezza.intValue() : 50;
	}
	
	public boolean isRequiredMotivazioneInterpellanzaRispScrittaItem() {
		return showMotivazioneInterpellanzaRispScrittaItem() && getFlgObbligatorioAttributoCustomCablato("MOTIVAZIONE_INT_RISP_SCRITTA");
	}
	
	protected void createInterpellanzaForm() {
		
		interpellanzaForm = new DynamicForm();
		interpellanzaForm.setValuesManager(vm);
		interpellanzaForm.setWidth100();
		interpellanzaForm.setPadding(5);
		interpellanzaForm.setWrapItemTitles(false);
		interpellanzaForm.setNumCols(20);
		interpellanzaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		interpellanzaForm.setTabSet(tabSet);
		interpellanzaForm.setTabID(_TAB_DATI_SCHEDA_ID);
		interpellanzaForm.setHeight(1);
		
		GWTRestDataSource tipoInterpellanzaDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		tipoInterpellanzaDS.addParam("altriParamLoadCombo", getAltriParamLoadComboTipoInterpellanzaItem());
		
		tipoInterpellanzaItem = new SelectItem("tipoInterpellanza", getTitleTipoInterpellanzaItem()) {
			@Override
			protected void clearSelect() {
				super.clearSelect();
				manageShowMotivazioneInterpellanzaRispScrittaItem(tipoInterpellanzaItem.getDisplayValue());
			}
		};
		tipoInterpellanzaItem.setShowTitle(false);
		tipoInterpellanzaItem.setWidth(500);
		tipoInterpellanzaItem.setValueField("key");
		tipoInterpellanzaItem.setDisplayField("value");
		tipoInterpellanzaItem.setOptionDataSource(tipoInterpellanzaDS);
		tipoInterpellanzaItem.setClearable(true);	
		tipoInterpellanzaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				manageShowMotivazioneInterpellanzaRispScrittaItem(tipoInterpellanzaItem.getDisplayValue());
			}
		});
		if(isRequiredTipoInterpellanzaItem()) {
			tipoInterpellanzaItem.setAttribute("obbligatorio", true);
		}
		tipoInterpellanzaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoInterpellanzaItem();
			}
		}));
		tipoInterpellanzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoInterpellanzaItem();
			}
		});
		
		motivazioneInterpellanzaRispScrittaItem = new TextAreaItem("motivazioneInterpellanzaRispScritta", getTitleMotivazioneInterpellanzaRispScrittaItem());
		motivazioneInterpellanzaRispScrittaItem.setWidth(481);
		motivazioneInterpellanzaRispScrittaItem.setHeight(getAltezzaMotivazioneInterpellanzaRispScrittaItem());
//		motivazioneInterpellanzaRispScrittaItem.setColSpan(18);		
		motivazioneInterpellanzaRispScrittaItem.setShowTitle(true);
		motivazioneInterpellanzaRispScrittaItem.setTitleOrientation(TitleOrientation.TOP);
		motivazioneInterpellanzaRispScrittaItem.setStartRow(true);
		motivazioneInterpellanzaRispScrittaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredMotivazioneInterpellanzaRispScrittaItem();
			}
		}));
		motivazioneInterpellanzaRispScrittaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredMotivazioneInterpellanzaRispScrittaItem()) {
					motivazioneInterpellanzaRispScrittaItem.setAttribute("obbligatorio", true);
					motivazioneInterpellanzaRispScrittaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleMotivazioneInterpellanzaRispScrittaItem()));
				} else {
					motivazioneInterpellanzaRispScrittaItem.setAttribute("obbligatorio", false);
					motivazioneInterpellanzaRispScrittaItem.setTitle(getTitleMotivazioneInterpellanzaRispScrittaItem());
				}
				return showMotivazioneInterpellanzaRispScrittaItem();
			}
		});
		
		interpellanzaForm.setFields(tipoInterpellanzaItem, motivazioneInterpellanzaRispScrittaItem);			
	}
	
	/**************************************** 
	 * DATI SCHEDA - ORDINANZA DI MOBILITA' *
	 ****************************************/
	
	public boolean showDetailSectionOrdMobilita() {
		return showAttributoCustomCablato("SEZ_DATI_ORDINANZA") ||
			   showTipoOrdMobilitaItem() ||
			   showDataInizioVldOrdinanzaItem() ||
			   showDataFineVldOrdinanzaItem() ||
			   showTipoLuogoOrdMobilitaItem() ||
			   showIndirizziOrdMobilitaItem() ||
			   showLuogoOrdMobilitaItem() ||
			   showCircoscrizioniOrdMobilitaItem() ||
			   showDescrizioneOrdMobilitaItem();		
	}
		
	public String getTitleDetailSectionOrdMobilita() {
		String label = getLabelAttributoCustomCablato("SEZ_DATI_ORDINANZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati ordinanza";
	}
	
	public boolean isRequiredDetailSectionOrdMobilita() {
		return isRequiredTipoOrdMobilitaItem() ||
			   isRequiredDataInizioVldOrdinanzaItem() ||
			   isRequiredDataFineVldOrdinanzaItem() ||
		       isRequiredTipoLuogoOrdMobilitaItem() ||
			   isRequiredIndirizziOrdMobilitaItem() ||
			   isRequiredLuogoOrdMobilitaItem() ||
			   isRequiredCircoscrizioniOrdMobilitaItem() ||
			   isRequiredDescrizioneOrdMobilitaItem();	
	}
	
	protected void createDetailSectionOrdMobilita() {
		
		createOrdMobilitaForm();
		
		detailSectionOrdMobilita = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOrdMobilita(), true, true, isRequiredDetailSectionOrdMobilita(), ordMobilitaForm1, ordMobilitaForm2, ordMobilitaForm3, ordMobilitaForm4, ordMobilitaForm5);
	}
	
	public boolean showTipoOrdMobilitaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_TIPO_ORD_MOBILITA");
	}
	
	public String getTitleTipoOrdMobilitaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_TIPO_ORD_MOBILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return null;
	}
	
	public boolean isRequiredTipoOrdMobilitaItem() {
		return showTipoOrdMobilitaItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_TIPO_ORD_MOBILITA");
	}
	
	public HashMap<String, String> getValueMapTipoOrdMobilitaItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_TIPO_ORD_MOBILITA");
	}
	
	public String getDefaultValueTipoOrdMobilitaItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_TIPO_ORD_MOBILITA");
	}
	
	public boolean showDataInizioVldOrdinanzaItem() {
		return showAttributoCustomCablato("INIZIO_VLD_ORDINANZA");
	}
	
	public String getTitleDataInizioVldOrdinanzaItem() {
		String label = getLabelAttributoCustomCablato("INIZIO_VLD_ORDINANZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "dal";
	}
	
	public boolean isRequiredDataInizioVldOrdinanzaItem() {
		if(showDataInizioVldOrdinanzaItem()) {
//			if(showTipoOrdMobilitaItem() && _TEMPORANEA.equalsIgnoreCase(getValueAsString("tipoOrdMobilita"))) {
//				return true;
//			}
			return getFlgObbligatorioAttributoCustomCablato("INIZIO_VLD_ORDINANZA");
		}
		return false;
	}
	
	public boolean showDataFineVldOrdinanzaItem() {
		return showAttributoCustomCablato("FINE_VLD_ORDINANZA");
	}
	
	public String getTitleDataFineVldOrdinanzaItem() {
		String label = getLabelAttributoCustomCablato("FINE_VLD_ORDINANZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "al";
	}
	
	public boolean isRequiredDataFineVldOrdinanzaItem() {
		if(showDataFineVldOrdinanzaItem()) {
//			if(showTipoOrdMobilitaItem() && _TEMPORANEA.equalsIgnoreCase(getValueAsString("tipoOrdMobilita"))) {
//				return true;
//			}
			return getFlgObbligatorioAttributoCustomCablato("FINE_VLD_ORDINANZA");
		}
		return false;
	}
	
	public boolean showTipoLuogoOrdMobilitaItem() {
		return showAttributoCustomCablato("TIPO_LUOGO_ORD_MOBILITA");
	}
	
	public String getTitleTipoLuogoOrdMobilitaItem() {
		String label = getLabelAttributoCustomCablato("TIPO_LUOGO_ORD_MOBILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return null;
	}
	
	public boolean isRequiredTipoLuogoOrdMobilitaItem() {
		return showTipoLuogoOrdMobilitaItem() && getFlgObbligatorioAttributoCustomCablato("TIPO_LUOGO_ORD_MOBILITA");
	}
	
	public String getDefaultValueTipoLuogoOrdMobilitaItem() {
		return getValoreFissoAttributoCustomCablato("TIPO_LUOGO_ORD_MOBILITA");
	}
	
	public boolean showIndirizziOrdMobilitaItem() {
		return (showTipoLuogoOrdMobilitaItem() && _TIPO_LUOGO_DA_TOPONOMASTICA.equalsIgnoreCase(getValueAsString("tipoLuogoOrdMobilita"))) && showAttributoCustomCablato("ALTRE_UBICAZIONI");
	}

	public String getTitleIndirizziOrdMobilitaItem() {
		String label = getLabelAttributoCustomCablato("ALTRE_UBICAZIONI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Ubicazione/i";
	}
	
	public boolean isRequiredIndirizziOrdMobilitaItem() {
		return showIndirizziOrdMobilitaItem() && getFlgObbligatorioAttributoCustomCablato("ALTRE_UBICAZIONI");
	}	
	
	public String getAltriParamLoadComboIndirizziOrdMobilitaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ALTRE_UBICAZIONI");
	}
	
	public boolean showLuogoOrdMobilitaItem() {
		boolean isTipoLuogoTestoLibero = showTipoLuogoOrdMobilitaItem() && _TIPO_LUOGO_TESTO_LIBERO.equalsIgnoreCase(getValueAsString("tipoLuogoOrdMobilita"));
		return isTipoLuogoTestoLibero && showAttributoCustomCablato("LUOGO_ORD_MOBILITA");
	}
	
	public String getTitleLuogoOrdMobilitaItem() {
		String label = getLabelAttributoCustomCablato("LUOGO_ORD_MOBILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Ubicazione/i";
	}
	
	public boolean isRequiredLuogoOrdMobilitaItem() {
		return showLuogoOrdMobilitaItem() && getFlgObbligatorioAttributoCustomCablato("LUOGO_ORD_MOBILITA");
	}
	
	public int getAltezzaInRigheLuogoOrdMobilitaItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("LUOGO_ORD_MOBILITA");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileLuogoOrdMobilitaItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("LUOGO_ORD_MOBILITA");
	}
	
	public boolean getFlgIgnoraGestioneOmissisLuogoOrdMobilitaItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("LUOGO_ORD_MOBILITA");
	}
	
	public boolean showCircoscrizioniOrdMobilitaItem() {
		return showAttributoCustomCablato("CIRCOSCRIZIONE_ORD_MOBILITA");
	}
	
	public String getTitleCircoscrizioniOrdMobilitaItem() {
		String label = getLabelAttributoCustomCablato("CIRCOSCRIZIONE_ORD_MOBILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Circoscrizioni";
	}
	
	public boolean isRequiredCircoscrizioniOrdMobilitaItem() {
		return showCircoscrizioniOrdMobilitaItem() && getFlgObbligatorioAttributoCustomCablato("CIRCOSCRIZIONE_ORD_MOBILITA");
	}	
		
	public String getAltriParamLoadComboCircoscrizioniOrdMobilitaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("CIRCOSCRIZIONE_ORD_MOBILITA");
	}
	
	public boolean showDescrizioneOrdMobilitaItem() {
		return showAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA");
	}
	
	public String getTitleDescrizioneOrdMobilitaItem() {
		String label = getLabelAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Descrizione";
	}
	
	public boolean isRequiredDescrizioneOrdMobilitaItem() {
		return showDescrizioneOrdMobilitaItem() && getFlgObbligatorioAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA");
	}
	
	public int getAltezzaInRigheDescrizioneOrdMobilitaItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileDescrizioneOrdMobilitaItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA");
	}

 	public boolean getFlgIgnoraGestioneOmissisDescrizioneOrdMobilitaItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA");
	}

	protected void createOrdMobilitaForm() {
		
		ordMobilitaForm1 = new DynamicForm();
		ordMobilitaForm1.setValuesManager(vm);
		ordMobilitaForm1.setWidth100();
		ordMobilitaForm1.setPadding(5);
		ordMobilitaForm1.setWrapItemTitles(false);
		ordMobilitaForm1.setNumCols(20);
		ordMobilitaForm1.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ordMobilitaForm1.setTabSet(tabSet);
		ordMobilitaForm1.setTabID(_TAB_DATI_SCHEDA_ID);
		ordMobilitaForm1.setHeight(1);
		
		tipoOrdMobilitaItem = new SelectItem("tipoOrdMobilita");
		tipoOrdMobilitaItem.setWidth(200);
		String titleTipoOrdMobilita = getTitleTipoOrdMobilitaItem();
		if(titleTipoOrdMobilita != null) {
			tipoOrdMobilitaItem.setTitle(titleTipoOrdMobilita);
		} else {			
			tipoOrdMobilitaItem.setShowTitle(false);
		}
		Map<String, String> tipoOrdMobilitaValueMap = getValueMapTipoOrdMobilitaItem();
		if(tipoOrdMobilitaValueMap != null && tipoOrdMobilitaValueMap.keySet().size() > 0) {
			tipoOrdMobilitaItem.setValueMap(tipoOrdMobilitaValueMap);			
		} else {			
			tipoOrdMobilitaItem.setValueMap(_PERMANENTE, _TEMPORANEA);	
		}		
		tipoOrdMobilitaItem.setDefaultValue(getDefaultValueTipoOrdMobilitaItem());		
		if(isRequiredTipoOrdMobilitaItem()) {
			tipoOrdMobilitaItem.setAttribute("obbligatorio", true);
		} else {
			tipoOrdMobilitaItem.setAllowEmptyValue(true);			
		}
		tipoOrdMobilitaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoOrdMobilitaItem();
			}
		}));
		tipoOrdMobilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoOrdMobilitaItem();
			}
		});
		tipoOrdMobilitaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_SCHEDA_ID);
			}
		});
		
		dataInizioVldOrdinanzaItem = new DateItem("dataInizioVldOrdinanza", getTitleDataInizioVldOrdinanzaItem());
		dataInizioVldOrdinanzaItem.setColSpan(1);
		dataInizioVldOrdinanzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataInizioVldOrdinanzaItem()) {
					dataInizioVldOrdinanzaItem.setAttribute("obbligatorio", true);
					dataInizioVldOrdinanzaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataInizioVldOrdinanzaItem()));
				} else {
					dataInizioVldOrdinanzaItem.setAttribute("obbligatorio", false);
					dataInizioVldOrdinanzaItem.setTitle(getTitleDataInizioVldOrdinanzaItem());
				}
				return showDataInizioVldOrdinanzaItem();
			}
		});
		dataInizioVldOrdinanzaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataInizioVldOrdinanzaItem();
			}
		}));
		
		dataFineVldOrdinanzaItem = new DateItem("dataFineVldOrdinanza", getTitleDataFineVldOrdinanzaItem());
		dataFineVldOrdinanzaItem.setColSpan(1);
		dataFineVldOrdinanzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataFineVldOrdinanzaItem()) {
					dataFineVldOrdinanzaItem.setAttribute("obbligatorio", true);
					dataFineVldOrdinanzaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataFineVldOrdinanzaItem()));
				} else {
					dataFineVldOrdinanzaItem.setAttribute("obbligatorio", false);
					dataFineVldOrdinanzaItem.setTitle(getTitleDataFineVldOrdinanzaItem());
				}
				return showDataFineVldOrdinanzaItem();
			}
		});
		dataFineVldOrdinanzaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataFineVldOrdinanzaItem();
			}
		}));
		
		ordMobilitaForm1.setFields(tipoOrdMobilitaItem, dataInizioVldOrdinanzaItem, dataFineVldOrdinanzaItem);	
		
		ordMobilitaForm2 = new DynamicForm();
		ordMobilitaForm2.setValuesManager(vm);
		ordMobilitaForm2.setWidth100();
		ordMobilitaForm2.setPadding(5);
		ordMobilitaForm2.setWrapItemTitles(false);
		ordMobilitaForm2.setNumCols(20);
		ordMobilitaForm2.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ordMobilitaForm2.setTabSet(tabSet);
		ordMobilitaForm2.setTabID(_TAB_DATI_SCHEDA_ID);
		ordMobilitaForm2.setHeight(1);
		
		tipoLuogoOrdMobilitaItem = new RadioGroupItem("tipoLuogoOrdMobilita");
		String titleTipoLuogoOrdMobilita = getTitleTipoLuogoOrdMobilitaItem();
		if(titleTipoLuogoOrdMobilita != null) {
			tipoLuogoOrdMobilitaItem.setTitle(titleTipoLuogoOrdMobilita);
		} else {			
			tipoLuogoOrdMobilitaItem.setShowTitle(false);
		}
		tipoLuogoOrdMobilitaItem.setValueMap(_TIPO_LUOGO_DA_TOPONOMASTICA, _TIPO_LUOGO_TESTO_LIBERO);		
		tipoLuogoOrdMobilitaItem.setDefaultValue(getDefaultValueTipoLuogoOrdMobilitaItem());
		tipoLuogoOrdMobilitaItem.setVertical(false);
		tipoLuogoOrdMobilitaItem.setWrap(false);
		tipoLuogoOrdMobilitaItem.setShowDisabled(false);
		if(isRequiredTipoLuogoOrdMobilitaItem()) {
			tipoLuogoOrdMobilitaItem.setAttribute("obbligatorio", true);
		}
		tipoLuogoOrdMobilitaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoLuogoOrdMobilitaItem();
			}
		}));
		tipoLuogoOrdMobilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoLuogoOrdMobilitaItem();
			}
		});			
		tipoLuogoOrdMobilitaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_SCHEDA_ID);	
				luogoOrdMobilitaItem.redraw();
				if(showLuogoOrdMobilitaItem()) {
					createLuogoOrdMobilitaItem();
					ordMobilitaForm3.setFields(luogoOrdMobilitaItem);
				} else {
					ordMobilitaForm3.setFields(new FormItem[0]);
				}
			}
		});
		
		listaIndirizziOrdMobilitaItem = new AltreVieItem() {
			
			@Override
			public boolean showFlgFuoriComune() {
				return false;
			}
	
			@Override
			public boolean getFlgFuoriComune() {
				return false;
			}
			
			@Override
			public boolean isIndirizzoObbligatorioInCanvas() {
//				return isIndirizzoObbligatorioInPropostaAtto();
				return true;
			}			
			
//			@Override
//			public boolean isCivicoObbligatorioInCanvas() {
//				return isCivicoObbligatorioInPropostaAtto();
//			}
						
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredIndirizziOrdMobilitaItem()) {
					listaIndirizziOrdMobilitaItem.setAttribute("obbligatorio", true);				
				} else {
					listaIndirizziOrdMobilitaItem.setAttribute("obbligatorio", false);
				}	
				listaIndirizziOrdMobilitaItem.storeValue(ordMobilitaForm2.getValueAsRecordList(listaIndirizziOrdMobilitaItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showIndirizziOrdMobilitaItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}			

			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(getFlgObbligatorioAttributoCustomCablato("ALTRE_UBICAZIONI")) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleIndirizziOrdMobilitaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleIndirizziOrdMobilitaItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		listaIndirizziOrdMobilitaItem.setName("listaIndirizziOrdMobilita");
		listaIndirizziOrdMobilitaItem.setStartRow(true);
		listaIndirizziOrdMobilitaItem.setShowTitle(false);
		listaIndirizziOrdMobilitaItem.setColSpan(20);		
//		if(getFlgObbligatorioAttributoCustomCablato("ALTRE_UBICAZIONI")) {
//			listaIndirizziOrdMobilitaItem.setAttribute("obbligatorio", true);
//		}
		listaIndirizziOrdMobilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredIndirizziOrdMobilitaItem()) {
					listaIndirizziOrdMobilitaItem.setAttribute("obbligatorio", true);				
				} else {
					listaIndirizziOrdMobilitaItem.setAttribute("obbligatorio", false);
				}	
				listaIndirizziOrdMobilitaItem.storeValue(form.getValueAsRecordList(listaIndirizziOrdMobilitaItem.getName()));
				return showIndirizziOrdMobilitaItem();
			}
		});
		
		ordMobilitaForm2.setFields(tipoLuogoOrdMobilitaItem, listaIndirizziOrdMobilitaItem);
		
		ordMobilitaForm3 = new DynamicForm();
		ordMobilitaForm3.setValuesManager(vm);
		ordMobilitaForm3.setWidth100();
		ordMobilitaForm3.setPadding(5);
		ordMobilitaForm3.setWrapItemTitles(false);
		ordMobilitaForm3.setNumCols(20);
		ordMobilitaForm3.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ordMobilitaForm3.setTabSet(tabSet);
		ordMobilitaForm3.setTabID(_TAB_DATI_SCHEDA_ID);
		ordMobilitaForm3.setHeight(1);		
			
//		if(showLuogoOrdMobilitaItem()) {
			createLuogoOrdMobilitaItem();
			ordMobilitaForm3.setFields(luogoOrdMobilitaItem);	
//		} else {
//			ordMobilitaForm3.setFields(new FormItem[0]);
//		}
		
		ordMobilitaForm4 = new DynamicForm();
		ordMobilitaForm4.setValuesManager(vm);
		ordMobilitaForm4.setWidth100();
		ordMobilitaForm4.setPadding(5);
		ordMobilitaForm4.setWrapItemTitles(false);
		ordMobilitaForm4.setNumCols(20);
		ordMobilitaForm4.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ordMobilitaForm4.setTabSet(tabSet);
		ordMobilitaForm4.setTabID(_TAB_DATI_SCHEDA_ID);
		ordMobilitaForm4.setHeight(1);
			
		listaCircoscrizioniOrdMobilitaItem = new ValoriDizionarioItem() {
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboCircoscrizioniOrdMobilitaItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showCircoscrizioniOrdMobilitaItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredCircoscrizioniOrdMobilitaItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleCircoscrizioniOrdMobilitaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleCircoscrizioniOrdMobilitaItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		listaCircoscrizioniOrdMobilitaItem.setName("listaCircoscrizioniOrdMobilita");
		listaCircoscrizioniOrdMobilitaItem.setStartRow(true);
		listaCircoscrizioniOrdMobilitaItem.setShowTitle(false);
		listaCircoscrizioniOrdMobilitaItem.setColSpan(20);
		if(isRequiredCircoscrizioniOrdMobilitaItem()) {
			listaCircoscrizioniOrdMobilitaItem.setAttribute("obbligatorio", true);
		}
		listaCircoscrizioniOrdMobilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showCircoscrizioniOrdMobilitaItem();
			}
		});
		
		ordMobilitaForm4.setFields(listaCircoscrizioniOrdMobilitaItem);		
		
		ordMobilitaForm5 = new DynamicForm();
		ordMobilitaForm5.setValuesManager(vm);
		ordMobilitaForm5.setWidth100();
		ordMobilitaForm5.setPadding(5);
		ordMobilitaForm5.setWrapItemTitles(false);
		ordMobilitaForm5.setNumCols(20);
		ordMobilitaForm5.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ordMobilitaForm5.setTabSet(tabSet);
		ordMobilitaForm5.setTabID(_TAB_DATI_SCHEDA_ID);
		ordMobilitaForm5.setHeight(1);		
			
		descrizioneOrdMobilitaItem = new CKEditorItem("descrizioneOrdMobilita", -1, "STANDARD", getAltezzaInRigheDescrizioneOrdMobilitaItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileDescrizioneOrdMobilitaItem(), getFlgIgnoraGestioneOmissisDescrizioneOrdMobilitaItem()) {
			
			@Override
			public Boolean validate() {
				if(showDescrizioneOrdMobilitaItem()) {
					return super.validate();				
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredDescrizioneOrdMobilitaItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDescrizioneOrdMobilitaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDescrizioneOrdMobilitaItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		descrizioneOrdMobilitaItem.setShowTitle(false);
		descrizioneOrdMobilitaItem.setColSpan(20);
		descrizioneOrdMobilitaItem.setWidth("100%");
		descrizioneOrdMobilitaItem.setRequired(isRequiredDescrizioneOrdMobilitaItem());
		descrizioneOrdMobilitaItem.setVisible(showDescrizioneOrdMobilitaItem());
		
		ordMobilitaForm5.setFields(descrizioneOrdMobilitaItem);	
	}
	
	public void createLuogoOrdMobilitaItem() {
		luogoOrdMobilitaItem = new CKEditorItem("luogoOrdMobilita", -1, "STANDARD", getAltezzaInRigheLuogoOrdMobilitaItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileLuogoOrdMobilitaItem(), getFlgIgnoraGestioneOmissisLuogoOrdMobilitaItem()) {
			
			@Override
			public Boolean validate() {
				if(showLuogoOrdMobilitaItem()) {
					return super.validate();				
				}
				return true;
			}
			
			@Override
			public void redraw() {
				luogoOrdMobilitaItem.setTitle(isRequiredLuogoOrdMobilitaItem() ? FrontendUtil.getRequiredFormItemTitle(getTitleLuogoOrdMobilitaItem()) : getTitleLuogoOrdMobilitaItem());
				luogoOrdMobilitaItem.setRequired(isRequiredLuogoOrdMobilitaItem());
				luogoOrdMobilitaItem.setVisible(showLuogoOrdMobilitaItem());
				super.redraw();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredLuogoOrdMobilitaItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleLuogoOrdMobilitaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleLuogoOrdMobilitaItem() + "</span>");
				}				
				return lVLayout;
			}
		};
//		luogoOrdMobilitaItem.setShowTitle(true);
//		luogoOrdMobilitaItem.setTitleOrientation(TitleOrientation.TOP);
		luogoOrdMobilitaItem.setColSpan(20);
		luogoOrdMobilitaItem.setWidth("100%");				
//		luogoOrdMobilitaItem.setTitle(isRequiredLuogoOrdMobilitaItem() ? FrontendUtil.getRequiredFormItemTitle(getTitleLuogoOrdMobilitaItem()) : getTitleLuogoOrdMobilitaItem());
//		luogoOrdMobilitaItem.setRequired(isRequiredLuogoOrdMobilitaItem());
//		luogoOrdMobilitaItem.setVisible(showLuogoOrdMobilitaItem());		
		luogoOrdMobilitaItem.setShowIfCondition(new FormItemIfFunction() {
		
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredLuogoOrdMobilitaItem()) {
					luogoOrdMobilitaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleLuogoOrdMobilitaItem()));
					luogoOrdMobilitaItem.setRequired(true);
				} else {
					luogoOrdMobilitaItem.setTitle(getTitleLuogoOrdMobilitaItem());
					luogoOrdMobilitaItem.setRequired(false);
				}
				return showLuogoOrdMobilitaItem();
			}
		});
	}
	
	/*********************** 
	 * DATI SCHEDA - RUOLI *
	 ***********************/
	
	public boolean showDetailSectionRuoli() {
		return showProponentiItem() ||
			   showUfficioProponenteItem() || 
			   showUfficioProponenteEstesoItem() ||
			   showTipoProvvedimentoItem() ||	
			   showSottotipoDeliberaItem() ||
			   showUfficioGareAcquistiItem() ||
			   showFlgProcExCodAppaltiItem() ||			   
			   showRUPCodAppaltiItem() ||			   
			   showAdottanteItem() ||			   
			   showRdPCodAppaltiItem() ||			   
			   showCentroDiCostoItem() ||
			   showDirigentiConcertoItem() ||
			   showDirRespRegTecnicaItem() ||
			   showAltriDirRespRegTecnicaItem() ||
			   showRdPItem() ||
			   showRUPItem() ||
			   showScrivaniaDECItem() ||
			   showAssessoriItem() ||	
			   showAltriAssessoriItem() ||
			   showProponenteAttoConsiglioItem() ||
			   showConsiglieriItem() ||
			   showAltriConsiglieriItem() ||
			   showDataTermFirmeConsiglieriItem() ||
			   showDirigentiProponentiItem() ||
			   showAltriDirigentiProponentiItem() ||
			   showCoordinatoriCompCircItem() ||
			   showFlgRichiediVistoDirettoreItem() ||
			   showRespVistiConformitaItem() ||
			   showRespUfficioPropItem() ||
			   showRespVistiPerfezionamentoItem() ||
			   showFlgVistoBilancioItem() ||
			   showRespVisAltBilancioItem() ||
			   showTipoVistoBilancioItem() ||
			   showFlgVistoSGItem() ||
			   showFlgVistoPresidenteItem() ||
			   showEstensoriItem() ||
			   showAltriEstensoriItem() ||
			   showIstruttoriItem() ||
			   showAltriIstruttoriItem() ||
			   showUtenteRifAttoConsiglioItem() ||
			   showFlgSenzaValidazionePOItem();	
	}
	
	public String getTitleDetailSectionRuoli() {
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionRuoli_title();
	}
	
	public boolean isRequiredDetailSectionRuoli() {
		return true; // l'ufficio proponente è sempre obbligatorio
	}
	
	protected void createDetailSectionRuoli() {
		
		createRuoliForm();
		
		detailSectionRuoli = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionRuoli(), true, true, isRequiredDetailSectionRuoli(), ruoliForm);
	}
		
	public boolean isAbilToSelProponentiEstesi() {
		if(isAvvioPropostaAtto()) {
			return Layout.isPrivilegioAttivo("ATT/SPE");
		} else {
			Record recordEvento = getRecordEventoXInfoModelli();
			boolean flgAbilToSelProponentiEstesi = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAbilToSelProponentiEstesi") : false;		
			return flgAbilToSelProponentiEstesi;
		}
	}
	
	public boolean showProponentiItem() {
		return showAttributoCustomCablato("PROPONENTI");
	}
	
	public String getTitleProponentiItem() {
		String label = getLabelAttributoCustomCablato("PROPONENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Proponenti";
	}
	
	public boolean isNotReplicableProponentiItem() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("PROPONENTI");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}
		
	public boolean isAbilToSelUffPropEsteso() {
		return Layout.isPrivilegioAttivo("APE");
	}
		
	public boolean showUfficioProponenteEstesoItem() {
		return isAvvioPropostaAtto() && showAttributoCustomCablato("ID_UO_PROPONENTE_ESTESA");
	}
	
	public String getTitleUfficioProponenteEstesoItem() {
		String label = getLabelAttributoCustomCablato("ID_UO_PROPONENTE_ESTESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Struttura proponente";
	}
	
	public String getAltriParamLoadComboUfficioProponenteEstesoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_UO_PROPONENTE_ESTESA");
	}
	
	public boolean showUfficioProponenteItem() {
		return isAvvioPropostaAtto() && showAttributoCustomCablato("ID_UO_PROPONENTE");
	}
	
	public String getTitleUfficioProponenteItem() {
		String label = getLabelAttributoCustomCablato("ID_UO_PROPONENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Struttura proponente";
	}
	
//	public String getAltriParamLoadComboUfficioProponenteItem() {
//		return getAltriParametriLoadComboAttributoCustomCablato("ID_UO_PROPONENTE");
//	}
	
	public LinkedHashMap<String, String> getUfficioProponenteValueMap() {
//		LinkedHashMap<String, String> uoProponenteAttiValueMap = AurigaLayout.getUoProponenteAttiValueMap();
//		LinkedHashMap<String, String> ufficioProponenteValueMap = new LinkedHashMap<String, String>();
//		for (String key : uoProponenteAttiValueMap.keySet()) {	
//			String idUoProponente = (key != null && key.startsWith("UO")) ? key.substring(2) : key;
//			ufficioProponenteValueMap.put(idUoProponente, uoProponenteAttiValueMap.get(key));			
//		}
		return ufficioProponenteValueMap;
	}
	
	protected DataSource getUfficioProponenteDS() {
		DataSource lUfficioProponenteDS = new DataSource();
		lUfficioProponenteDS.setClientOnly(true);		
		if(getUfficioProponenteValueMap() != null) {
			Record[] lUfficioProponenteRecords = new Record[getUfficioProponenteValueMap().size()];			
			int count = 0;
			for(String key : getUfficioProponenteValueMap().keySet()) {
				String value = getUfficioProponenteValueMap().get(key);				
				Record lRecord = new Record();
				lRecord.setAttribute("idUo", key);
				lRecord.setAttribute("descrizione", value);
				lUfficioProponenteRecords[count++] = lRecord;				
			}
			lUfficioProponenteDS.setTestData(lUfficioProponenteRecords);	
		}
		return lUfficioProponenteDS;
	}
	
	public LinkedHashMap<String, String> getSelezioneUfficioProponenteValueMap() {
		final String idUoLavoro = AurigaLayout.getIdUoLavoro();	
		LinkedHashMap<String, String> ret = new LinkedHashMap<String, String>();
		if (idUoLavoro != null && !"".equals(idUoLavoro) && ufficioProponenteValueMap.get(idUoLavoro) != null) {
			ret.put(idUoLavoro, ufficioProponenteValueMap.get(idUoLavoro));
		} else {
			ret.putAll(ufficioProponenteValueMap);
		}
		return ret;	
	}
	
	public LinkedHashMap<String, String> getFlgUfficioProponenteGareMap() {
		return flgUfficioProponenteGareMap;
	}
	
	public void afterSelezioneUoProponente() {		
		afterSelezioneUoProponente(false);
	}
	
	public void afterSelezioneUoProponente(boolean isChanged) {
		// prima setto ufficio definizione spesa e ufficio competente a partire dalla UO proponente selezionata
		setUfficioDefinizioneSpesaFromUoProponente();
		setUfficioCompetenteFromUoProponente();	
		if(isChanged) {
			resetUfficioCompetenteProcExCodAppaltiAfterChangedUoProponente();
		}
		// ricarico le select che dipendono dalla UO proponente		
		if(listaUfficioGareAcquistiItem != null) {
			listaUfficioGareAcquistiItem.resetAfterChangedUoProponente();
		}		
		if(listaRUPCodAppaltiItem != null) {
			listaRUPCodAppaltiItem.resetAfterChangedUoProponente();
		}
		if(listaAdottanteItem != null) {
			listaAdottanteItem.resetAfterChangedUoProponente();
		}
		if(listaRdPCodAppaltiItem != null) {
			listaRdPCodAppaltiItem.resetAfterChangedUoProponente();
		}
		if(listaDirRespRegTecnicaItem != null) {
			listaDirRespRegTecnicaItem.resetAfterChangedUoProponente();
		}
		if(listaRdPItem != null) {
			listaRdPItem.resetAfterChangedUoProponente();
		}
		if(listaRUPItem != null) {
			listaRUPItem.resetAfterChangedUoProponente();
		}			
		if(listaScrivaniaDECItem != null) {
			listaScrivaniaDECItem.resetAfterChangedUoProponente();
		}		
		if(listaAssessoriItem != null) {
			listaAssessoriItem.resetAfterChangedUoProponente();
		}
		if(listaAltriAssessoriItem != null) {
			listaAltriAssessoriItem.resetAfterChangedUoProponente();
		}
		if(listaDirigentiProponentiItem != null) {
			listaDirigentiProponentiItem.resetAfterChangedUoProponente();
		}
		if(listaCoordinatoriCompCircItem != null) {
			listaCoordinatoriCompCircItem.resetAfterChangedUoProponente();
		}					
		if(listaRespUfficioPropItem != null) {
			listaRespUfficioPropItem.resetAfterChangedUoProponente();
		}		
		if(listaRespVisAltBilancioItem != null) {
			listaRespVisAltBilancioItem.resetAfterChangedUoProponente();
		}
		if(listaEstensoriItem != null) {
			listaEstensoriItem.resetAfterChangedUoProponente();
		}
		if(listaAltriEstensoriItem != null) {
			listaAltriEstensoriItem.resetAfterChangedUoProponente();
		}					
		if(listaIstruttoriItem != null) {
			listaIstruttoriItem.resetAfterChangedUoProponente();
		}
		if(listaAltriIstruttoriItem != null) {
			listaAltriIstruttoriItem.resetAfterChangedUoProponente();
		}									
		if(listaParereCommissioniItem != null) {
			listaParereCommissioniItem.resetAfterChangedUoProponente();
		}
		if(sezionePubblAmmTraspItem != null) {
			resetSezionePubblAmmTraspAfterChangedUoProponente();
		}
		if(sottoSezionePubblAmmTraspItem != null) {
			resetSottoSezionePubblAmmTraspAfterChangedUoProponente();
		}
		ruoliForm.markForRedraw();
		if(!showUfficioCompetenteItem()) {	
			recuperaOpzioniUoCompetenteAfterChanged();
		}
	}
	
	public void afterSelezioneUoCompetente(boolean afterSelezioneUoProponente) {
		// se afterSelezioneUoProponente è true non serve che ricarico le select perchè è già stato fatto prima
		if(!afterSelezioneUoProponente) {
			// ricarico le select che dipendono dalla UO competente
			if(listaAdottanteItem != null) {
				listaAdottanteItem.resetAfterChangedUoCompetente();
			}
			if(listaRdPCodAppaltiItem != null) {
				listaRdPCodAppaltiItem.resetAfterChangedUoCompetente();
			}		
			if(listaRdPItem != null) {
				listaRdPItem.resetAfterChangedUoCompetente();
			}
		}
		ruoliForm.markForRedraw();
		if(showUfficioCompetenteItem()) {	
			recuperaOpzioniUoCompetenteAfterChanged();
		}
	}
	
	public void afterChangedFlgAttoMeroIndirizzo() {
		if(listaIstruttoriItem != null) {
			listaIstruttoriItem.resetAfterChangedFlgMeroIndirizzo();
		}
	}
	
	public boolean isUfficioCompetenteAncheDiversoDaUfficioProponente() {
		//ADSP se è selezionato un ufficio gare la scelta UO competente può essere diversa dalla proponente (anche se non è selezionato il flag appalti)
		return /*isProcExCodAppalti() &&*/ isUfficioProponenteGare();
	}
	
	public boolean showTipoProvvedimentoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_TIPO_PROVVEDIMENTO");
	}
	
	public boolean isRequiredTipoProvvedimentoItem() {
		return showTipoProvvedimentoItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_TIPO_PROVVEDIMENTO");
	}
		
	public String getTitleTipoProvvedimentoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_TIPO_PROVVEDIMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo provvedimento";	
	}
	
	public HashMap<String, String> getValueMapTipoProvvedimentoItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_TIPO_PROVVEDIMENTO");
	}
	
	public String getDefaultValueTipoProvvedimentoItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_TIPO_PROVVEDIMENTO");
	}
	
	public boolean showSottotipoDeliberaItem() {
		boolean isTipoProvvedimentoDelibera = showTipoProvvedimentoItem() && "delibera".equalsIgnoreCase(getValueAsString("tipoProvvedimento"));
		return isTipoProvvedimentoDelibera && showAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_DELIBERA");
	}
	
	public boolean isRequiredSottotipoDeliberaItem() {
		return showSottotipoDeliberaItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_DELIBERA");
	}
		
	public String getTitleSottotipoDeliberaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_DELIBERA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sotto-tipo delibera";	
	}
	
	public HashMap<String, String> getValueMapSottotipoDeliberaItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_DELIBERA");
	}
	
	public String getDefaultValueSottotipoDeliberaItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_DELIBERA");
	}
		
	public boolean showUfficioGareAcquistiItem() {
		return showAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
	}
	
	public String getTitleUfficioGareAcquistiItem() {
		String label = getLabelAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Ufficio gare acquisti";
	}
	
	public boolean isRequiredUfficioGareAcquistiItem() {
		return showUfficioGareAcquistiItem() && getFlgObbligatorioAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueUfficioGareAcquistiItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
	}
		
	public String getDefaultValueUfficioGareAcquistiItem() {
		return getValoreFissoAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
	}
	
	public String getTipoLoadComboUfficioGareAcquistiItem() {
		return getTipoLoadComboAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
	}
	
	public String getAltriParamLoadComboUfficioGareAcquistiItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_UO_GARE_ACQUISTI");
	}
	
	public boolean showFlgProcExCodAppaltiItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_PROC_EX_COD_APPALTI");
	}
	
	public String getTitleFlgProcExCodAppaltiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_PROC_EX_COD_APPALTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Inerente il cod. appalti";
	}
	
	public boolean isRequiredFlgProcExCodAppaltiItem() {
		return showFlgProcExCodAppaltiItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_FLG_PROC_EX_COD_APPALTI");
	}
	
	public String getDefaultValueFlgProcExCodAppaltiItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_FLG_PROC_EX_COD_APPALTI");
	}
		
	public boolean showUfficioCompetenteItem() {		
		if(showAttributoCustomCablato("ID_UO_COMPETENTE") && showFlgProcExCodAppaltiItem()) {
			if(isUfficioCompetenteAncheDiversoDaUfficioProponente()) {
				return true;
			} else {
				String idUoProponente = getIdUoProponente();
				return idUoProponente != null && !"".equals(idUoProponente);
			}
		}
		return false;
	}
	
	protected void setUfficioCompetenteFromUoProponente() {
		if(showUfficioCompetenteItem() && showFlgProcExCodAppaltiItem()) {
			if(!isUfficioCompetenteAncheDiversoDaUfficioProponente()) {				
				if(showProponentiItem()) {
					if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
						Record lRecordUfficioCompetente = new Record();						
						RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
						if(listaProponenti != null && listaProponenti.getLength() > 0) {
							if(listaProponenti.get(0).getAttribute("idUo") != null && !"".equals(listaProponenti.get(0).getAttribute("idUo"))) {
								lRecordUfficioCompetente.setAttribute("idUo", listaProponenti.get(0).getAttribute("idUo"));
								lRecordUfficioCompetente.setAttribute("codRapido", listaProponenti.get(0).getAttribute("codRapido"));
								lRecordUfficioCompetente.setAttribute("descrizione", listaProponenti.get(0).getAttribute("descrizione"));
								lRecordUfficioCompetente.setAttribute("descrizioneEstesa", listaProponenti.get(0).getAttribute("descrizione"));
								lRecordUfficioCompetente.setAttribute("organigramma", listaProponenti.get(0).getAttribute("organigramma"));			
							}		
						}
						codUfficioCompetenteItem.setValue(lRecordUfficioCompetente.getAttribute("codRapido"));
						desUfficioCompetenteItem.setValue(lRecordUfficioCompetente.getAttribute("descrizione"));
						RecordList listaUfficioCompetente = new RecordList();
						listaUfficioCompetente.add(lRecordUfficioCompetente);
						listaUfficioCompetenteItem.drawAndSetValue(listaUfficioCompetente);
						afterSelezioneUoCompetente(true);
					}
				} else {
					Record lRecordUfficioCompetente = new Record();
					if(isAbilToSelUffPropEsteso()) {
						RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
						if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
							if(listaUfficioProponente.get(0).getAttribute("idUo") != null && !"".equals(listaUfficioProponente.get(0).getAttribute("idUo"))) {
								lRecordUfficioCompetente.setAttribute("idUo", listaUfficioProponente.get(0).getAttribute("idUo"));
								lRecordUfficioCompetente.setAttribute("codRapido", listaUfficioProponente.get(0).getAttribute("codRapido"));
								lRecordUfficioCompetente.setAttribute("descrizione", listaUfficioProponente.get(0).getAttribute("descrizione"));
								lRecordUfficioCompetente.setAttribute("descrizioneEstesa", listaUfficioProponente.get(0).getAttribute("descrizione"));
								lRecordUfficioCompetente.setAttribute("organigramma", listaUfficioProponente.get(0).getAttribute("organigramma"));			
							}
						}
					} else if (getValueAsString("ufficioProponente") != null && !"".equals(getValueAsString("ufficioProponente"))) {
						lRecordUfficioCompetente.setAttribute("idUo", getValueAsString("ufficioProponente"));
						lRecordUfficioCompetente.setAttribute("codRapido", getValueAsString("codUfficioProponente"));
						lRecordUfficioCompetente.setAttribute("descrizione", getValueAsString("desUfficioProponente"));
						lRecordUfficioCompetente.setAttribute("descrizioneEstesa", getValueAsString("desUfficioProponente"));						
						lRecordUfficioCompetente.setAttribute("organigramma", "UO" + getValueAsString("ufficioProponente"));
					}
					codUfficioCompetenteItem.setValue(lRecordUfficioCompetente.getAttribute("codRapido"));
					desUfficioCompetenteItem.setValue(lRecordUfficioCompetente.getAttribute("descrizione"));
					RecordList listaUfficioCompetente = new RecordList();
					listaUfficioCompetente.add(lRecordUfficioCompetente);
					listaUfficioCompetenteItem.drawAndSetValue(listaUfficioCompetente);
					afterSelezioneUoCompetente(true);
				}
			}
		}
	}

	protected void resetUfficioCompetenteProcExCodAppaltiAfterChangedUoProponente() {
		if(showUfficioCompetenteItem() && showFlgProcExCodAppaltiItem()) {
			if(isUfficioCompetenteAncheDiversoDaUfficioProponente()) {
				codUfficioCompetenteItem.setValue("");
				desUfficioCompetenteItem.setValue("");
				RecordList listaUfficioCompetente = new RecordList();
				listaUfficioCompetente.add(new Record());
				listaUfficioCompetenteItem.drawAndSetValue(listaUfficioCompetente);
				afterSelezioneUoCompetente(true);
			}
		}
	}

	protected void recuperaOpzioniUoCompetenteAfterChanged() {
		if(ruoliForm != null) {
			ruoliForm.clearValue("opzUOCompetente");
		}
		String idUoCompetenteProponente = null;
		// Se NON c'è a maschera la UO competente passa la proponente
		if(showUfficioCompetenteItem()) {			
			RecordList listaUfficioCompetente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioCompetente") : null;
			if(listaUfficioCompetente != null && listaUfficioCompetente.getLength() > 0) {
				String idUoCompetente = listaUfficioCompetente.get(0).getAttribute("idUo");
				if(idUoCompetente != null && !"".equals(idUoCompetente)) {
					idUoCompetenteProponente = idUoCompetente;				
				}
			}
		} else {
			idUoCompetenteProponente = getIdUoProponente();
		}		
		if(idUoCompetenteProponente != null && !"".equals(idUoCompetenteProponente)) {			
			Record lRecord = new Record();
			lRecord.setAttribute("idUo", idUoCompetenteProponente);
			final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
			lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("recuperaOpzUOInDettAtto", lRecord, new DSCallback() {							
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
						Record recordOpzUOCompetente = response.getData()[0];
						if(ruoliForm != null) {
							ruoliForm.setValue("opzUOCompetente", recordOpzUOCompetente);
						}
						redrawVistiAfterChangedOpzioniUoCompetente(recordOpzUOCompetente);
					}
				}
			});
		} else {
			redrawVistiAfterChangedOpzioniUoCompetente(null);
		}
	}
	
	public void redrawVistiAfterChangedOpzioniUoCompetente(Record recordOpzUOCompetente) {
		if(recordOpzUOCompetente != null) {
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoRespUffValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie").get(i);
					idScrivaniaVistoRespUffValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoRespUffItem.setValueMap(idScrivaniaVistoRespUffValueMap);
				vistiDirSuperioriForm.setValue("idScrivaniaVistoRespUff", recordOpzUOCompetente.getAttribute("flgVistoRespUffValoreDefaultSelectScrivanie"));
			} else {
				vistiDirSuperioriForm.setValue("flgVistoRespUff", recordOpzUOCompetente.getAttributeAsBoolean("flgVistoRespUffValoreDefault"));
			}
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoDirSup1ValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie").get(i);
					idScrivaniaVistoDirSup1ValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoDirSup1Item.setValueMap(idScrivaniaVistoDirSup1ValueMap);
				vistiDirSuperioriForm.setValue("idScrivaniaVistoDirSup1", recordOpzUOCompetente.getAttribute("flgVistoDirSup1ValoreDefaultSelectScrivanie"));
			} else {
				vistiDirSuperioriForm.setValue("flgVistoDirSup1", recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup1ValoreDefault"));
			}
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoDirSup2ValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie").get(i);
					idScrivaniaVistoDirSup2ValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoDirSup2Item.setValueMap(idScrivaniaVistoDirSup2ValueMap);									
				vistiDirSuperioriForm.setValue("idScrivaniaVistoDirSup2", recordOpzUOCompetente.getAttribute("flgVistoDirSup2ValoreDefaultSelectScrivanie"));
			} else {
				vistiDirSuperioriForm.setValue("flgVistoDirSup2", recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup2ValoreDefault"));									
			}
		} else {
			idScrivaniaVistoRespUffItem.setValueMap();
			vistiDirSuperioriForm.clearValue("idScrivaniaVistoRespUff");
			vistiDirSuperioriForm.clearValue("flgVistoRespUff");	
			idScrivaniaVistoDirSup1Item.setValueMap();
			vistiDirSuperioriForm.clearValue("idScrivaniaVistoDirSup1");	
			vistiDirSuperioriForm.clearValue("flgVistoDirSup1");
			idScrivaniaVistoDirSup2Item.setValueMap();									
			vistiDirSuperioriForm.clearValue("idScrivaniaVistoDirSup2");
			vistiDirSuperioriForm.clearValue("flgVistoDirSup2");
		}
		if(vistiDirSuperioriForm != null) {
			vistiDirSuperioriForm.markForRedraw();
		}
		showHideSections();
	}
	
	public String getTitleUfficioCompetenteItem() {
		String label = getLabelAttributoCustomCablato("ID_UO_COMPETENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Struttura competente";
	}
	
	public boolean isRequiredUfficioCompetenteItem() {
		return showUfficioCompetenteItem() && getFlgObbligatorioAttributoCustomCablato("ID_UO_COMPETENTE");
	}
	
	public boolean showRUPCodAppaltiItem() {
		if(showFlgProcExCodAppaltiItem()) {
			return showRUPItem(false) && isProcExCodAppalti();
		}
		return false;
	}
	
	public boolean isRequiredRUPCodAppaltiItem() {
		return true;
	}
	
	public boolean showAdottanteItem() {
		return showAdottanteItem(false);		
	}
		
	public boolean showAdottanteItem(boolean skipFlgAncheAdottante) {
		boolean flgRUPCodAppaltiAncheAdottante = false;
		RecordList listaRUPCodAppalti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaRUPCodAppalti") : null;
		if(listaRUPCodAppalti != null && listaRUPCodAppalti.getLength() > 0) {
			flgRUPCodAppaltiAncheAdottante = listaRUPCodAppalti.get(0).getAttributeAsBoolean("flgRUPAncheAdottante") != null && listaRUPCodAppalti.get(0).getAttributeAsBoolean("flgRUPAncheAdottante");
		}
		return (skipFlgAncheAdottante || !flgRUPCodAppaltiAncheAdottante) && showAttributoCustomCablato("ID_SV_ADOTTANTE");
	}
	
	public boolean isRequiredAdottanteItem() {
		return showAdottanteItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ADOTTANTE");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueAdottanteItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_ADOTTANTE");
	}
	
	public String getTitleAdottanteItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ADOTTANTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dir. adottante";
	}
	
	public String getAltriParamLoadComboAdottanteItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ADOTTANTE");
	}
	
	public void afterSelezioneScrivaniaAdottante() {		
		if(centroDiCostoItem != null) {
			resetCentroDiCostoAfterChangedAdottante();
		}
		if(isRdPUgualeAdottante()) {
			resetCodProcedimentoAfterChangedRdP(true);
			ruoliForm.markForRedraw();
		}
	}
	
	public boolean isRdPUgualeAdottante() {
		boolean isRdPUgualeAdottante = false;
		if(AurigaLayout.getParametroDBAsBoolean("FORZA_RDP_UGUALE_ADOTTANTE")) {
			isRdPUgualeAdottante = true;
		} else {
			RecordList listaAdottante = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaAdottante") : null;
			if(listaAdottante != null && listaAdottante.getLength() > 0) {
				isRdPUgualeAdottante = listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRdP") != null && listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRdP");
			}			
		}	
		return isRdPUgualeAdottante;
	}
	
	public boolean showRdPCodAppaltiItem() {
		if(showFlgProcExCodAppaltiItem()) {
			if(isProcExCodAppalti()) {
				// se radio button "Inerente il codice appalti" appare e ha valore SI, l'RdP NON deve mai apparire né essere obbligatorio
				// prima se UO proponente <> UO competente appariva
//				String idUoProponente = getIdUoProponente();
//				String idUoCompetente = showUfficioCompetenteItem() ? getIdUoCompetente() : null;
//				if(idUoProponente != null  && idUoCompetente != null && idUoProponente.equals(idUoCompetente)) {
					return false;
//				}					
			} 
			return showRdPItem(false);
		}
		return false;
	}
	
	public boolean isRequiredRdPCodAppaltiItem() {
		return showRdPCodAppaltiItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_PROC");
	}
	
	public boolean showCodProcedimentoRdPUgualeAdottanteItem() {
		String responsabileDiProcedimento = getResponsabileDiProcedimento(true);
		if(responsabileDiProcedimento == null || "".equals(responsabileDiProcedimento)) {
			return false;
		}
		return showAttributoCustomCablato("ID_SV_RESP_PROC") && isRdPUgualeAdottante() && showAttributoCustomCablato("COD_PROCEDIMENTO");
	}
	
	public boolean showCodProcedimentoRdPItem() {
		String responsabileDiProcedimento = getResponsabileDiProcedimento(false);
		if(responsabileDiProcedimento == null || "".equals(responsabileDiProcedimento)) {
			return false;
		}
		return showAttributoCustomCablato("ID_SV_RESP_PROC") && !isRdPUgualeAdottante() && showAttributoCustomCablato("COD_PROCEDIMENTO");
	}
	
	public String getTitleCodProcedimentoItem() {
		String label = getLabelAttributoCustomCablato("COD_PROCEDIMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Procedimento";
	}
	
	public boolean isRequiredCodProcedimentoRdPUgualeAdottanteItem() {
		String responsabileDiProcedimento = getResponsabileDiProcedimento(true);
		if(responsabileDiProcedimento == null || "".equals(responsabileDiProcedimento)) {
			return false;
		}
//		return showCodProcedimentoRdPUgualeAdottanteItem() && getFlgObbligatorioAttributoCustomCablato("COD_PROCEDIMENTO");
		return false;
	}
	
	public boolean isRequiredCodProcedimentoRdPItem() {
		String responsabileDiProcedimento = getResponsabileDiProcedimento(false);
		if(responsabileDiProcedimento == null || "".equals(responsabileDiProcedimento)) {
			return false;
		}
		return showCodProcedimentoRdPItem() && getFlgObbligatorioAttributoCustomCablato("COD_PROCEDIMENTO");
	}
	
	public boolean showCentroDiCostoItem() {
		if(isDeterminaSenzaSpesa()) {
			return false;
		}
		return showAttributoCustomCablato("CDC_ATTO");
	}
	
	public String getTitleCentroDiCostoItem() {
		String label = getLabelAttributoCustomCablato("CDC_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Centro di Costo";
	}
	
	public boolean isRequiredCentroDiCostoItem() {
		return showCentroDiCostoItem() && getFlgObbligatorioAttributoCustomCablato("CDC_ATTO");
	}
	
	public void resetCentroDiCostoAfterChangedAdottante() {
		if(centroDiCostoItem != null) {
			final String value = centroDiCostoItem.getValueAsString();
			centroDiCostoItem.fetchData(new DSCallback() {
	
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					RecordList data = response.getDataAsRecordList();
					if (data.getLength() == 1) {
						centroDiCostoItem.setValue(data.get(0).getAttribute("key"));
						centroDiCostoItem.fireEvent(new ChangedEvent(centroDiCostoItem.getJsObj()));
					} else if(value != null && !"".equals(value)) {
						boolean trovato = false;
						if (data.getLength() > 0) {						
							for (int i = 0; i < data.getLength(); i++) {
								String key = data.get(i).getAttribute("key");
								if (value.equals(key)) {
									trovato = true;
									break;
								}
							}
						}
						if (!trovato) {
							centroDiCostoItem.setValue("");
							centroDiCostoItem.fireEvent(new ChangedEvent(centroDiCostoItem.getJsObj()));
						}
					}
				}
			});
		}
	}
	
	public boolean showDirigentiConcertoItem() {
		return showAttributoCustomCablato("ID_SV_RESP_DI_CONCERTO");
	}
	
	public boolean isRequiredDirigentiConcertoItem() {
		return showDirigentiConcertoItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_DI_CONCERTO");
	}
	
	public String getTitleDirigentiConcertoItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_DI_CONCERTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Adottanti di concerto";	
	}

	public String getAltriParamLoadComboDirigentiConcertoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_DI_CONCERTO");
	}
	
	public boolean showFlgFirmatarioDirigentiConcertoItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_SV_RESP_DI_CONCERTO");
	}
	
	public boolean showDirRespRegTecnicaItem() {
		if(isAttoMeroIndirizzo()) {
			return false;
		}
		return showAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA");
	}	
	
	public boolean isRequiredDirRespRegTecnicaItem() {
		return showDirRespRegTecnicaItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueDirRespRegTecnicaItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA");
	}
	
	public boolean skipObbligForEmptySelectDirRespRegTecnicaItem() {
		return skipObbligForEmptySelectAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA");
	}
	
	
	public String getTitleDirRespRegTecnicaItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dir. resp reg. tecnica";
	}
	
	public String getAltriParamLoadComboDirRespRegTecnicaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA");
	}
	
	public boolean showAltriDirRespRegTecnicaItem() {
		if(isAttoMeroIndirizzo()) {
			return false;
		}
		return showAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA");
	}
	
	public boolean isRequiredAltriDirRespRegTecnicaItem() {
		return showAltriDirRespRegTecnicaItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA");
	}
	
	public String getTitleAltriDirRespRegTecnicaItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri pareri reg. tecnica";		
	}
	
	public String getAltriParamLoadComboAltriDirRespRegTecnicaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA");
	}
	
	public boolean showFlgFirmatarioAltriDirRespRegTecnicaItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA");
	}
	
	public boolean showRdPItem() {
		if(!showFlgProcExCodAppaltiItem()) {
			return showRdPItem(false);
		}
		return false;
	}
	
	public boolean showRdPItem(boolean skipFlgAncheRdP) {
		if(AurigaLayout.getParametroDBAsBoolean("FORZA_RDP_UGUALE_ADOTTANTE")) {
			return false;
		}
		if(AurigaLayout.getParametroDBAsBoolean("FORZA_RDP_UGUALE_DIR")) {
			return false;
		}				
		boolean flgAdottanteAncheRdP = false;
		RecordList listaAdottante = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaAdottante") : null;
		if(listaAdottante != null && listaAdottante.getLength() > 0) {
			flgAdottanteAncheRdP = listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRdP") != null && listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRdP");
		}
		boolean flgDirRespRegTecnicaAncheRdP = false;
		RecordList listaDirRespRegTecnica = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaDirRespRegTecnica") : null;
		if(listaDirRespRegTecnica != null && listaDirRespRegTecnica.getLength() > 0) {
			flgDirRespRegTecnicaAncheRdP = listaDirRespRegTecnica.get(0).getAttributeAsBoolean("flgDirRespRegTecnicaAncheRdP") != null && listaDirRespRegTecnica.get(0).getAttributeAsBoolean("flgDirRespRegTecnicaAncheRdP");
		}	
		return (skipFlgAncheRdP || (!flgAdottanteAncheRdP && !flgDirRespRegTecnicaAncheRdP)) && showAttributoCustomCablato("ID_SV_RESP_PROC");
	}
	
	public boolean isRequiredRdPItem() {
		return showRdPItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_PROC");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueRdPItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_RESP_PROC");
	}
	
	public String getTitleRdPItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_PROC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "RdP (Resp. di Procedimento)";	
	}
	
	public String getAltriParamLoadComboRdPItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_PROC");
	}
	
	public void afterSelezioneScrivaniaRdP() {		
		if(!isRdPUgualeAdottante()) {
			resetCodProcedimentoAfterChangedRdP(false);
			ruoliForm.markForRedraw();
		}
	}
	
	public void resetCodProcedimentoAfterChangedRdP(boolean isRdPUgualeAdottante) {
		if(showAttributoCustomCablato("ID_SV_RESP_PROC")) {
			if(isRdPUgualeAdottante) {
				if(codProcedimentoRdPUgualeAdottanteItem != null) {
					final String value = codProcedimentoRdPUgualeAdottanteItem.getValueAsString();
					codProcedimentoRdPUgualeAdottanteItem.fetchData(new DSCallback() {
			
						@Override
						public void execute(DSResponse response, Object rawData, DSRequest request) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() == 1) {
								codProcedimentoRdPUgualeAdottanteItem.setValue(data.get(0).getAttribute("key"));
								codProcedimentoRdPUgualeAdottanteItem.fireEvent(new ChangedEvent(codProcedimentoRdPUgualeAdottanteItem.getJsObj()));
							} else if(value != null && !"".equals(value)) {
								boolean trovato = false;
								if (data.getLength() > 0) {						
									for (int i = 0; i < data.getLength(); i++) {
										String key = data.get(i).getAttribute("key");
										if (value.equals(key)) {
											trovato = true;
											break;
										}
									}
								}
								if (!trovato) {
									codProcedimentoRdPUgualeAdottanteItem.setValue("");
									codProcedimentoRdPUgualeAdottanteItem.fireEvent(new ChangedEvent(codProcedimentoRdPUgualeAdottanteItem.getJsObj()));
								}
							}
						}
					});
				}
			} else {
				if(codProcedimentoRdPItem != null) {
					final String value = codProcedimentoRdPItem.getValueAsString();
					codProcedimentoRdPItem.fetchData(new DSCallback() {
			
						@Override
						public void execute(DSResponse response, Object rawData, DSRequest request) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() == 1) {
								codProcedimentoRdPItem.setValue(data.get(0).getAttribute("key"));
								codProcedimentoRdPItem.fireEvent(new ChangedEvent(codProcedimentoRdPItem.getJsObj()));
							} else if(value != null && !"".equals(value)) {
								boolean trovato = false;
								if (data.getLength() > 0) {						
									for (int i = 0; i < data.getLength(); i++) {
										String key = data.get(i).getAttribute("key");
										if (value.equals(key)) {
											trovato = true;
											break;
										}
									}
								}
								if (!trovato) {
									codProcedimentoRdPItem.setValue("");
									codProcedimentoRdPItem.fireEvent(new ChangedEvent(codProcedimentoRdPItem.getJsObj()));
								}
							}
						}
					});
				}
			}
		}
	}
	
	public boolean showRUPItem() {
		if(!showFlgProcExCodAppaltiItem()) {	
			return showRUPItem(false);
		}
		return false;
	}
	
	public boolean showRUPItem(boolean skipFlgAncheRUP) {
		if(AurigaLayout.getParametroDBAsBoolean("FORZA_RUP_UGUALE_ADOTTANTE")) {
			return false;
		}
		if(AurigaLayout.getParametroDBAsBoolean("FORZA_RUP_UGUALE_DIR")) {
			return false;
		}				
		boolean flgAdottanteAncheRdP = false;
		boolean flgAdottanteAncheRUP = false;
		RecordList listaAdottante = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaAdottante") : null;
		if(listaAdottante != null && listaAdottante.getLength() > 0) {
			flgAdottanteAncheRdP = listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRdP") != null && listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRdP");
			flgAdottanteAncheRUP = listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRUP") != null && listaAdottante.get(0).getAttributeAsBoolean("flgAdottanteAncheRUP");
		}				
		boolean flgDirRespRegTecnicaAncheRdP = false;
		boolean flgDirRespRegTecnicaAncheRUP = false;
		RecordList listaDirRespRegTecnica = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaDirRespRegTecnica") : null;
		if(listaDirRespRegTecnica != null && listaDirRespRegTecnica.getLength() > 0) {
			flgDirRespRegTecnicaAncheRdP = listaDirRespRegTecnica.get(0).getAttributeAsBoolean("flgDirRespRegTecnicaAncheRdP") != null && listaDirRespRegTecnica.get(0).getAttributeAsBoolean("flgDirRespRegTecnicaAncheRdP");
			flgDirRespRegTecnicaAncheRUP = listaDirRespRegTecnica.get(0).getAttributeAsBoolean("flgDirRespRegTecnicaAncheRUP") != null && listaDirRespRegTecnica.get(0).getAttributeAsBoolean("flgDirRespRegTecnicaAncheRUP");					
		}				
		boolean flgRdPAncheRUP = false;
		if(!flgAdottanteAncheRdP && !flgDirRespRegTecnicaAncheRdP) {
			RecordList listaRdP = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaRdP") : null;
			if(listaRdP != null && listaRdP.getLength() > 0) {
				flgRdPAncheRUP = listaRdP.get(0).getAttributeAsBoolean("flgRdPAncheRUP") != null && listaRdP.get(0).getAttributeAsBoolean("flgRdPAncheRUP");
			}
		}
		return (skipFlgAncheRUP || (!flgAdottanteAncheRUP && !flgDirRespRegTecnicaAncheRUP && !flgRdPAncheRUP)) && showAttributoCustomCablato("ID_SV_RUP");
	}
	
	public boolean isRequiredRUPItem() {
		return showRUPItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RUP");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueRUPItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_RUP");
	}
	
	public String getTitleRUPItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RUP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "RUP";
	}
	
	public String getAltriParamLoadComboRUPItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RUP");
	}
	
	public boolean showScrivaniaDECItem() {
		return showAttributoCustomCablato("ID_SV_DEC");
	}
	
	public String getTitleScrivaniaDECItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_DEC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "DEC";
	}
	
	public boolean isRequiredScrivaniaDECItem() {
		return showScrivaniaDECItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_DEC");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueScrivaniaDECItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_DEC");
	}
	
	public String getAltriParamLoadComboScrivaniaDECItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_DEC");
	}
	
	public boolean showAssessoriItem() {
		return showAttributoCustomCablato("ID_ASSESSORE_PROPONENTE");
	}
	
	public boolean isRequiredAssessoriItem() {
		return showAssessoriItem() && getFlgObbligatorioAttributoCustomCablato("ID_ASSESSORE_PROPONENTE");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueAssessoriItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_ASSESSORE_PROPONENTE");
	}
	
	public String getTitleAssessoriItem() {
		String label = getLabelAttributoCustomCablato("ID_ASSESSORE_PROPONENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Assessore proponente";	
	}
	
	public String getAltriParamLoadComboAssessoriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_ASSESSORE_PROPONENTE");
	}
	
	public boolean showAltriAssessoriItem() {
		return showAttributoCustomCablato("ID_ALTRI_ASSESSORI");
	}
	
	public boolean isRequiredAltriAssessoriItem() {
		return showAltriAssessoriItem() && getFlgObbligatorioAttributoCustomCablato("ID_ALTRI_ASSESSORI");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueAltriAssessoriItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_ALTRI_ASSESSORI");
	}
	
	public String getTitleAltriAssessoriItem() {
		String label = getLabelAttributoCustomCablato("ID_ALTRI_ASSESSORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri assessori";
	}
	
	public String getAltriParamLoadComboAltriAssessoriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_ALTRI_ASSESSORI");
	}
	
	public boolean showFlgFirmatarioAltriAssessoriItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_ALTRI_ASSESSORI");
	}
	public boolean showUfficiCompetentiRagItem() {
		return (isDeterminaConSpesa() || isDeterminaConSpesaSenzaImpegni()) && showAttributoCustomCablato("UFF_COMPETENTE_RAG");
	}
	public boolean isRequiredUfficiCompetentiRagItem() {
		return showUfficiCompetentiRagItem() && getFlgObbligatorioAttributoCustomCablato("UFF_COMPETENTE_RAG");
	}
	
	public String getTitleUfficiCompetentiRagItem() {
		String label = getLabelAttributoCustomCablato("UFF_COMPETENTE_RAG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Uffici competenti ragioneria";
	}
	
	public String getAltriParamLoadComboUfficiCompetentiRagItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("UFF_COMPETENTE_RAG");
	}
	
	public String getDefaultValueUfficiCompetentiRagItem() {
		return getValoreFissoAttributoCustomCablato("UFF_COMPETENTE_RAG");
	}
	
	public boolean isEditableUfficiCompetentiRagItem() {
		if(isPresenteAttributoCustomCablato("UFF_COMPETENTE_RAG")) {			
			return getFlgEditabileAttributoCustomCablato("UFF_COMPETENTE_RAG");
		}
		return true;
	} 
	
	public boolean isNotReplicableUfficiCompetentiRagItem() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("UFF_COMPETENTE_RAG");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}
	
	public boolean showProponenteAttoConsiglioItem() {
		return showAttributoCustomCablato("ID_PROPONENTE_ATTO_CONSIGLIO");
	}
	
	public boolean isRequiredProponenteAttoConsiglioItem() {
		return showProponenteAttoConsiglioItem() && getFlgObbligatorioAttributoCustomCablato("ID_PROPONENTE_ATTO_CONSIGLIO");
	}
	
	public String getTitleProponenteAttoConsiglioItem() {
		String label = getLabelAttributoCustomCablato("ID_PROPONENTE_ATTO_CONSIGLIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Proponente";
	}
	
	public String getAltriParamLoadComboProponenteAttoConsiglioItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_PROPONENTE_ATTO_CONSIGLIO");
	}
	
	public boolean showConsiglieriItem() {
		if(showIniziativaPropostaItem() && ("POPOLARE".equalsIgnoreCase(getValueAsString("iniziativaProposta")) || "CIRCOSCRIZIONE".equalsIgnoreCase(getValueAsString("iniziativaProposta")))) {
			return false;
		}
		return showAttributoCustomCablato("ID_CONSIGLIERE_PROPONENTE");
	}
	
	public boolean isRequiredConsiglieriItem() {
		return showConsiglieriItem() && getFlgObbligatorioAttributoCustomCablato("ID_CONSIGLIERE_PROPONENTE");
	}
	
	public String getTitleConsiglieriItem() {
		String label = getLabelAttributoCustomCablato("ID_CONSIGLIERE_PROPONENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Consigliere proponente";
	}
	
	public String getAltriParamLoadComboConsiglieriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_CONSIGLIERE_PROPONENTE");
	}
	
	public boolean showAltriConsiglieriItem() {
		if(showIniziativaPropostaItem() && ("POPOLARE".equalsIgnoreCase(getValueAsString("iniziativaProposta")) || "CIRCOSCRIZIONE".equalsIgnoreCase(getValueAsString("iniziativaProposta")))) {
			return false;
		}
		return showAttributoCustomCablato("ID_ALTRI_CONSIGLIERI");
	}
	
	public boolean isRequiredAltriConsiglieriItem() {
		return showAltriConsiglieriItem() && getFlgObbligatorioAttributoCustomCablato("ID_ALTRI_CONSIGLIERI");
	}
	
	public String getTitleAltriConsiglieriItem() {
		String label = getLabelAttributoCustomCablato("ID_ALTRI_CONSIGLIERI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri consiglieri";
	}
	
	public String getAltriParamLoadComboAltriConsiglieriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_ALTRI_CONSIGLIERI");
	}
	
	public boolean showFlgFirmatarioAltriConsiglieriItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_ALTRI_CONSIGLIERI");
	}
	
	public boolean showDataTermFirmeConsiglieriItem() {
		return showAttributoCustomCablato("DT_TERM_FIRME_CONSIGLIERI_COPROP");
	}
	
	public boolean isRequiredDataTermFirmeConsiglieriItem() {
		return showDataTermFirmeConsiglieriItem() && getFlgObbligatorioAttributoCustomCablato("DT_TERM_FIRME_CONSIGLIERI_COPROP");
	}
	
	public String getTitleDataTermFirmeConsiglieriItem() {
		String label = getLabelAttributoCustomCablato("DT_TERM_FIRME_CONSIGLIERI_COPROP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Termine raccolta sottoscrizioni co-proponenti";
	}
	
	public boolean showDirigentiProponentiItem() {
		// Se è visibile campo TASK_RESULT_2_ATTO_MERO_INDIRIZZO & se sono visibili in base a xml sia ID_SV_DIR_RESP_REG_TECNICA che ID_SV_DIR_PROPONENTE, quando TASK_RESULT_2_ATTO_MERO_INDIRIZZO è despuntato (NON è mero indirizzo) deve sparire ID_SV_DIR_PROPONENTE, quando lo si spunta deve riapparire		
		if(showFlgAttoMeroIndirizzoItem() && showAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA") && showAttributoCustomCablato("ID_SV_DIR_PROPONENTE")) {
			if(getValueAsBoolean("flgAttoMeroIndirizzo")) {
				return true;
			} else {
				return false;
			}
		}
		return showAttributoCustomCablato("ID_SV_DIR_PROPONENTE");
	}
	
	public boolean isRequiredDirigentiProponentiItem() {
		return showDirigentiProponentiItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_DIR_PROPONENTE");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueDirigentiProponentiItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_DIR_PROPONENTE");
	}
	
	public boolean skipObbligForEmptySelectDirigentiProponentiItem() {
		return skipObbligForEmptySelectAttributoCustomCablato("ID_SV_DIR_PROPONENTE");
	}
	
	public String getTitleDirigentiProponentiItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_DIR_PROPONENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dirigente proponente";
	}
	
	public String getAltriParamLoadComboDirigentiProponentiItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_DIR_PROPONENTE");
	}
		
	public boolean showAltriDirigentiProponentiItem() {
	    // Lo tolgo perchè dal documento delle specifiche non risulta che dovrebbero sparire. Se spunto mero indirizzo dovrebbero sparire solo ID_SV_DIR_RESP_REG_TECNICA e ID_SV_ALTRI_DIR_REG_TECNICA
//		if(isAttoMeroIndirizzo()) {
//			return false;
//		}		
		// Se è visibile campo TASK_RESULT_2_ATTO_MERO_INDIRIZZO & se sono visibili in base a xml sia ID_SV_ALTRI_DIR_REG_TECNICA che ID_SV_ALTRI_DIR_PROPONENTI, quando TASK_RESULT_2_ATTO_MERO_INDIRIZZO è despuntato (NON è mero indirizzo) deve sparire ID_SV_ALTRI_DIR_PROPONENTI, quando lo si spunta deve riapparire
//		if(showFlgAttoMeroIndirizzoItem() && showAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA") && showAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI")) {
//			if(getValueAsBoolean("flgAttoMeroIndirizzo")) {
//				return true;
//			} else {
//				return false;
//			}
//		}
		return showAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
	}
	
	public boolean isRequiredAltriDirigentiProponentiItem() {
		return showAltriDirigentiProponentiItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
	}
	
	public String getTitleAltriDirigentiProponentiItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri dirigenti proponenti";		
	}
	
	public String getAltriParamLoadComboAltriDirigentiProponentiItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
	}
	
	public boolean showFlgFirmatarioAltriDirigentiProponentiItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
	}
	
	public boolean showMotiviAltriDirigentiProponentiItem() {
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
		return flgMostraMotivi != null && !"".equals(flgMostraMotivi);				
	}
	
	public boolean isRequiredMotiviAltriDirigentiProponentiItem() {
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_ALTRI_DIR_PROPONENTI");
		return flgMostraMotivi != null && _MANDATORY.equalsIgnoreCase(flgMostraMotivi);		
	}
	
	public boolean showCoordinatoriCompCircItem() {
		return showAttributoCustomCablato("ID_COORDINATORE_COMP_CIRC");
	}
	
	public boolean isRequiredCoordinatoriCompCircItem() {
		return showCoordinatoriCompCircItem() && getFlgObbligatorioAttributoCustomCablato("ID_COORDINATORE_COMP_CIRC");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueCoordinatoriCompCircItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_COORDINATORE_COMP_CIRC");
	}
	
	public String getTitleCoordinatoriCompCircItem() {
		String label = getLabelAttributoCustomCablato("ID_COORDINATORE_COMP_CIRC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Coordinatore competente per materia";
	}
	
	public String getAltriParamLoadComboCoordinatoriCompCircItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_COORDINATORE_COMP_CIRC");
	}
	
	public boolean showFlgRichiediVistoDirettoreItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP");
	}
		
	public String getTitleFlgRichiediVistoDirettoreItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Richiesto visto Dir. sovraordinato";	
	}
	
	public boolean showRespVistiConformitaItem() {
		return showAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
	}
	
	public boolean isRequiredRespVistiConformitaItem() {
		return showRespVistiConformitaItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
	}
	
	public String getTitleRespVistiConformitaItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Visti di conformità";		
	}
	
	public String getAltriParamLoadComboRespVistiConformitaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
	}
	
	public boolean isEditableScrivaniaRespVistiConformitaItem() {
		if(isPresenteAttributoCustomCablato("NO_EDIT_RESP_VISTI_CONFORMITA")) {
			return false;
		}
		return true;
	}
	
	public boolean showFlgFirmatarioRespVistiConformitaItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
	}
	
	public boolean showFlgRiacqVistoInRitornoIterRespVistiConformitaItem() {
		return getFlgMostraVistoInRitornoIterAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
	}	
	
	public boolean showMotiviRespVistiConformitaItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA")) {
			return showAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA");
		}
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
		return flgMostraMotivi != null && !"".equals(flgMostraMotivi);		
	}

	public String getTitleMotiviRespVistiConformitaItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA")) {
			String label = getLabelAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA");
			if(label != null && !"".equals(label)) {
				return label;
			}
		}		
		return "Motivo/i";
	}
	
	public boolean isRequiredMotiviRespVistiConformitaItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA")) {
			return getFlgObbligatorioAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA");
		}
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_RESP_VISTI_CONFORMITA");
		return flgMostraMotivi != null && _MANDATORY.equalsIgnoreCase(flgMostraMotivi);		
	}
	
	public boolean isEditableMotiviRespVistiConformitaItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA")) {			
			return getFlgEditabileAttributoCustomCablato("MOTIVI_RESP_VISTI_CONFORMITA");
		}
		return true;
	}

	public boolean showRespUfficioPropItem() {
//		String idUoProponente = getIdUoProponente();
//		String idUoCompetente = showUfficioCompetenteItem() ? getIdUoCompetente() : null;
//		if(idUoProponente != null  && idUoCompetente != null && !idUoProponente.equals(idUoCompetente)) {
//			return false;
//		} 
		return showAttributoCustomCablato("ID_SV_RESP_UO_PROP");
	}
	
	public boolean isRequiredRespUfficioPropItem() {
		return showRespUfficioPropItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_UO_PROP");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueRespUfficioPropItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_RESP_UO_PROP");
	}
	
	public String getTitleRespUfficioPropItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_UO_PROP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Visto responsabile struttura";		
	}
	
	public String getAltriParamLoadComboRespUfficioPropItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_UO_PROP");
	}
	
	public boolean showFlgFirmatarioRespUfficioPropItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_SV_RESP_UO_PROP");
	}
	
	public boolean showFlgRiacqVistoInRitornoIterRespUfficioPropItem() {
		return getFlgMostraVistoInRitornoIterAttributoCustomCablato("ID_SV_RESP_UO_PROP");
	}	
	
	public boolean showMotiviRespUfficioPropItem() {
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_RESP_UO_PROP");
		return flgMostraMotivi != null && !"".equals(flgMostraMotivi);				
	}
	
	public boolean isRequiredMotiviRespUfficioPropItem() {
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_RESP_UO_PROP");
		return flgMostraMotivi != null && _MANDATORY.equalsIgnoreCase(flgMostraMotivi);		
	}
	
	public boolean showRespVistiPerfezionamentoItem() {
		return showAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
	}
	
	public boolean isRequiredRespVistiPerfezionamentoItem() {
		return showRespVistiPerfezionamentoItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
	}
	
	public String getTitleRespVistiPerfezionamentoItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Visti di perfezionamento";		
	}
	
	public String getAltriParamLoadComboRespVistiPerfezionamentoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
	}
	
	public boolean isEditableScrivaniaRespVistiPerfezionamentoItem() {
		if(isPresenteAttributoCustomCablato("NO_EDIT_RESP_VISTI_PERFEZIONAMENTO")) {
			return false;
		}
		return true;
	}
	
	public boolean showFlgFirmatarioRespVistiPerfezionamentoItem() {
		return getFlgMostraFirmatarioAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
	}
	
	public boolean showFlgRiacqVistoInRitornoIterRespVistiPerfezionamentoItem() {
		return getFlgMostraVistoInRitornoIterAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
	}	
	
	public boolean showMotiviRespVistiPerfezionamentoItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO")) {
			return showAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO");
		}
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
		return flgMostraMotivi != null && !"".equals(flgMostraMotivi);			
	}

	public String getTitleMotiviRespVistiPerfezionamentoItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO")) {
			String label = getLabelAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO");
			if(label != null && !"".equals(label)) {
				return label;
			}
		}
		return "Motivo/i";
	}
	
	public boolean isRequiredMotiviRespVistiPerfezionamentoItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO")) {
			return getFlgObbligatorioAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO");
		}
		String flgMostraMotivi = getFlgMostraMotiviAttributoCustomCablato("ID_SV_RESP_VISTI_PERFEZIONAMENTO");
		return flgMostraMotivi != null && _MANDATORY.equalsIgnoreCase(flgMostraMotivi);		
	}
	
	public boolean isEditableMotiviRespVistiPerfezionamentoItem() {
		if(isPresenteAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO")) {			
			return getFlgEditabileAttributoCustomCablato("MOTIVI_RESP_VISTI_PERFEZIONAMENTO");
		}
		return true;
	}
	
	public boolean showFlgVistoBilancioItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_VISTO_BILANCIO");
	}
	
	public boolean isRequiredFlgVistoBilancioItem() {
		return showFlgVistoBilancioItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_VISTO_BILANCIO");
	}
		
	public String getTitleFlgVistoBilancioItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_BILANCIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Visto bilancio";	
	}
	
	public HashMap<String, String> getValueMapFlgVistoBilancioItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_VISTO_BILANCIO");
	}
	
	public String getDefaultValueFlgVistoBilancioItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_VISTO_BILANCIO");
	}
	
	public boolean showRespVisAltBilancioItem() {
		boolean isVistoBilancioAltro = showFlgVistoBilancioItem() && _FLG_ALTRO.equalsIgnoreCase(getValueAsString("flgVistoBilancio"));
		return isVistoBilancioAltro && showAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO");
	}
	
	public boolean isRequiredRespVisAltBilancioItem() {
		return showRespVisAltBilancioItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueRespVisAltBilancioItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO");
	}
	
	public boolean skipObbligForEmptySelectDirRespVisAltBilancio() {
		return skipObbligForEmptySelectAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO");
	}
	
	public String getTitleRespVisAltBilancioItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto di";
	}
	
	public String getAltriParamLoadComboRespVisAltBilancioItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO");
	}
	
	public boolean showTipoVistoBilancioItem() {
		boolean isVistoBilancioAltro = showFlgVistoBilancioItem() && _FLG_ALTRO.equalsIgnoreCase(getValueAsString("flgVistoBilancio"));
		return isVistoBilancioAltro && showAttributoCustomCablato("TIPO_VISTO_BILANCIO");
	}	
	
	public boolean isRequiredTipoVistoBilancioItem() {
		return showTipoVistoBilancioItem() && getFlgObbligatorioAttributoCustomCablato("TIPO_VISTO_BILANCIO");
	}
	
	public String getTitleTipoVistoBilancioItem() {
		String label = getLabelAttributoCustomCablato("TIPO_VISTO_BILANCIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo visto bilancio";	
	}
	 
	public String getDefaultValueTipoVistoBilancioItem() {
		return getValoreFissoAttributoCustomCablato("TIPO_VISTO_BILANCIO");
	}
	
	public int getAltezzaTipoVistoBilancioItem() {
		Integer altezza = getAltezzaInRigheAttributoCustomCablato("TIPO_VISTO_BILANCIO");
		return altezza != null ? altezza.intValue() : 50;
	}	
	
	public boolean showFlgVistoSGItem() {
		boolean isSottotipoDeliberaNominaSG = showSottotipoDeliberaItem() && "nomina_sg".equalsIgnoreCase(getValueAsString("sottotipoDelibera"));
		return !isSottotipoDeliberaNominaSG && showAttributoCustomCablato("TASK_RESULT_2_VISTO_SG");
	}
		
	public String getTitleFlgVistoSGItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_SG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto SG";	
	}
	 
	public boolean getDefaultValueAsBooleanFlgVistoSGItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_SG");
	}
	
	public boolean showFlgVistoPresidenteItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_VISTO_PRESIDENTE");
	}
		
	public String getTitleFlgVistoPresidenteItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_PRESIDENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto presidente";	
	}
	 
	public boolean getDefaultValueAsBooleanFlgVistoPresidenteItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_PRESIDENTE");
	}
	
	public boolean showEstensoriItem() {
		return showAttributoCustomCablato("ID_SV_ESTENSORE_MAIN");
	}
	
	public boolean isRequiredEstensoriItem() {
		return showEstensoriItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ESTENSORE_MAIN");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueEstensoriItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_ESTENSORE_MAIN");
	}
	
	public String getTitleEstensoriItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ESTENSORE_MAIN");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Estensore principale";
	}
	
	public String getAltriParamLoadComboEstensoriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ESTENSORE_MAIN");
	}
	
	public boolean showAltriEstensoriItem() {
		return showAttributoCustomCablato("ID_SV_ALTRI_ESTENSORI");
	}
	
	public boolean isRequiredAltriEstensoriItem() {
		return showAltriEstensoriItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_ESTENSORI");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueAltriEstensoriItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_ALTRI_ESTENSORI");
	}
	
	public String getTitleAltriEstensoriItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ALTRI_ESTENSORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri estensori";
	}
	
	public String getAltriParamLoadComboAltriEstensoriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ALTRI_ESTENSORI");
	}
	
	public boolean showIstruttoriItem() {
		return showAttributoCustomCablato("ID_SV_ISTRUTTORE_MAIN");
	}
	
	public boolean isRequiredIstruttoriItem() {
		return showIstruttoriItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ISTRUTTORE_MAIN");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueIstruttoriItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_ISTRUTTORE_MAIN");
	}
	
	public String getTitleIstruttoriItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ISTRUTTORE_MAIN");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Resp. istruttoria";
	}
	
	public String getAltriParamLoadComboIstruttoriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ISTRUTTORE_MAIN");
	}
	
	public boolean showAltriIstruttoriItem() {
		return showAttributoCustomCablato("ID_SV_ALTRI_ISTRUTTORI");
	}
	
	public boolean isRequiredAltriIstruttoriItem() {
		return showAltriIstruttoriItem() && getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_ISTRUTTORI");
	}
	
	public boolean getFlgAbilitaSelectUniqueValueAltriIstruttoriItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("ID_SV_ALTRI_ISTRUTTORI");
	}
	
	public String getTitleAltriIstruttoriItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_ALTRI_ISTRUTTORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri istruttori";
	}
	
	public String getAltriParamLoadComboAltriIstruttoriItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_ALTRI_ISTRUTTORI");
	}	
	
	public boolean showUtenteRifAttoConsiglioItem() {
		return showAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO");
	}
	
	public boolean isRequiredUtenteRifAttoConsiglioItem() {
		return showUtenteRifAttoConsiglioItem() && getFlgObbligatorioAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO");
	}
	
	public String getTitleUtenteRifAttoConsiglioItem() {
		String label = getLabelAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Assessore/consigliere di riferimento";
	}
	
	public String getAltriParamLoadComboUtenteRifAttoConsiglioItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO");
	}
	
	public boolean isNotReplicableUtenteRifAttoConsiglioItem() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}
	
	public boolean showFlgSenzaValidazionePOItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_NO_VALIDAZIONE_PO");
	}
		
	public String getTitleFlgSenzaValidazionePOItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_NO_VALIDAZIONE_PO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "senza validazione PO";	
	}
	 
	public boolean getDefaultValueAsBooleanFlgSenzaValidazionePOItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_NO_VALIDAZIONE_PO");
	}
		
	protected void createRuoliForm() {
		
		ruoliForm = new DynamicForm();
		ruoliForm.setValuesManager(vm);
		ruoliForm.setWidth100();
		ruoliForm.setPadding(5);
		ruoliForm.setWrapItemTitles(false);
		ruoliForm.setNumCols(20);
		ruoliForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ruoliForm.setTabSet(tabSet);
		ruoliForm.setTabID(_TAB_DATI_SCHEDA_ID);
		ruoliForm.setHeight(1);
		
		if(showProponentiItem()) {
			
			if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
			
				listaProponentiItem = new ProponentiItem() {
					
					@Override
					public boolean isAbilSelezioneProponentiEstesa() {
						return isAbilToSelProponentiEstesi();
					}
								
					@Override
					public LinkedHashMap<String, String> getProponentiValueMap() {
						return getUfficioProponenteValueMap();
					}
					
					@Override
					public String getIdTipoDocProposta() {
						return tipoDocumento;
					}
					
					@Override
					public LinkedHashMap<String, String> getSelezioneProponentiValueMap() {
						return getSelezioneUfficioProponenteValueMap();	
					}
					
					@Override
					public LinkedHashMap<String, String> getFlgUfficioGareProponentiMap() {
						return getFlgUfficioProponenteGareMap();
					}
					
					@Override
					public boolean showIdUo() {
						return showAttributoCustomCablato("PROPONENTI_ID_UO");
					}
					
					@Override
					public String getTitleIdUo() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_UO");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Struttura";
					}
					
					@Override
					public boolean isRequiredIdUo() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_UO");
					}
					
					@Override
					public String getAltriParamLoadComboIdUo() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_UO");
					}
					
					@Override
					public boolean isEditableIdUo() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_UO");
					}
							
					@Override
					public boolean showIdScrivaniaRdP() {
						return showAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}
					
					@Override
					public String getTitleIdScrivaniaRdP() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Firma RdP";
					}
					
					@Override
					public boolean isRequiredIdScrivaniaRdP() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}
					
					@Override
					public String getAltriParamLoadComboIdScrivaniaRdP() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}		
					
					@Override
					public boolean isEditableIdScrivaniaRdP() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}
					
					@Override
					public boolean showIdScrivaniaDirigente() {
						return showAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public String getTitleIdScrivaniaDirigente() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Firma dirigente";
					}
					
					@Override
					public boolean isRequiredIdScrivaniaDirigente() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public String getAltriParamLoadComboIdScrivaniaDirigente() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public boolean isEditableIdScrivaniaDirigente() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public boolean showIdScrivaniaDirettore() {
						return showAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public String getTitleIdScrivaniaDirettore() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Firma direttore";
					}
					
					@Override
					public boolean isRequiredIdScrivaniaDirettore() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public String getAltriParamLoadComboIdScrivaniaDirettore() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public boolean isEditableIdScrivaniaDirettore() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public boolean showTipoVistoScrivaniaDirigente() {
						return showAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRIGENTE");
					}
					
					@Override
					public boolean isRequiredTipoVistoScrivaniaDirigente() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRIGENTE");
					}
					
					@Override
					public boolean showTipoVistoScrivaniaDirettore() {
						return showAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRETTORE");
					}
					
					@Override
					public boolean isRequiredTipoVistoScrivaniaDirettore() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRETTORE");
					}
					
					@Override
					public int getSelectItemOrganigrammaWidth() {
						return 650;
					}
					
					@Override
					public boolean skipValidation() {
						if(showProponentiItem()) {
							return super.skipValidation();
						}
						return true;
					}
					
					@Override
					protected VLayout creaVLayout() {
						VLayout lVLayout = super.creaVLayout();
						lVLayout.setWidth100();
						lVLayout.setPadding(11);
						lVLayout.setMargin(4);
						lVLayout.setIsGroup(true);
						lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleProponentiItem()) + "</span>");
						return lVLayout;
					}
					
					@Override
					public Boolean getShowRemoveButton() {
						return true;
					}
					
					@Override
					public void manageChangedUoSelezionata() {						
						
					}
				};
				listaProponentiItem.setName("listaProponenti");
				listaProponentiItem.setShowTitle(false);
				listaProponentiItem.setColSpan(20);
				((ProponentiItem) listaProponentiItem).setNotReplicable(true);
				listaProponentiItem.setAttribute("obbligatorio", true);
				listaProponentiItem.setShowIfCondition(new FormItemIfFunction() {
					
					@Override
					public boolean execute(FormItem item, Object value, DynamicForm form) {
						return showProponentiItem();
					}
				});
			
			} else {
			
				listaProponentiItem = new ListaProponentiItem("listaProponenti") {
					
					@Override
					public boolean isAbilSelezioneProponentiEstesa() {
						return isAbilToSelProponentiEstesi();
					}
					
					@Override
					public String getIdTipoDocProposta() {
						return tipoDocumento;
					}
								
					@Override
					public LinkedHashMap<String, String> getProponentiValueMap() {
						return getUfficioProponenteValueMap();
					}
					
					@Override
					public LinkedHashMap<String, String> getSelezioneProponentiValueMap() {
						return getSelezioneUfficioProponenteValueMap();	
					}
					
					@Override
					public LinkedHashMap<String, String> getFlgUfficioGareProponentiMap() {
						return getFlgUfficioProponenteGareMap();
					}
					
					@Override
					public boolean showIdUo() {
						return showAttributoCustomCablato("PROPONENTI_ID_UO");
					}
					
					@Override
					public String getTitleIdUo() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_UO");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Struttura";
					}
					
					@Override
					public boolean isRequiredIdUo() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_UO");
					}
					
					@Override
					public String getAltriParamLoadComboIdUo() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_UO");
					}
					
					@Override
					public boolean isEditableIdUo() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_UO");
					}
							
					@Override
					public boolean showIdScrivaniaRdP() {
						return showAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}
					
					@Override
					public String getTitleIdScrivaniaRdP() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Firma RdP";
					}
					
					@Override
					public boolean isRequiredIdScrivaniaRdP() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}
					
					@Override
					public String getAltriParamLoadComboIdScrivaniaRdP() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}		
					
					@Override
					public boolean isEditableIdScrivaniaRdP() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_SV_RDP");
					}
					
					@Override
					public boolean showIdScrivaniaDirigente() {
						return showAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public String getTitleIdScrivaniaDirigente() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Firma dirigente";
					}
					
					@Override
					public boolean isRequiredIdScrivaniaDirigente() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public String getAltriParamLoadComboIdScrivaniaDirigente() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public boolean isEditableIdScrivaniaDirigente() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_SV_DIRIGENTE");
					}
					
					@Override
					public boolean showIdScrivaniaDirettore() {
						return showAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public String getTitleIdScrivaniaDirettore() {
						String label = getLabelAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Firma direttore";
					}
					
					@Override
					public boolean isRequiredIdScrivaniaDirettore() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public String getAltriParamLoadComboIdScrivaniaDirettore() {
						return getAltriParametriLoadComboAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public boolean isEditableIdScrivaniaDirettore() {
						return getFlgEditabileAttributoCustomCablato("PROPONENTI_ID_SV_DIRETTORE");
					}
					
					@Override
					public boolean showTipoVistoScrivaniaDirigente() {
						return showAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRIGENTE");
					}
					
					@Override
					public boolean isRequiredTipoVistoScrivaniaDirigente() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRIGENTE");
					}
					
					@Override
					public boolean showTipoVistoScrivaniaDirettore() {
						return showAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRETTORE");
					}
					
					@Override
					public boolean isRequiredTipoVistoScrivaniaDirettore() {
						return getFlgObbligatorioAttributoCustomCablato("PROPONENTI_TIPO_VISTO_DIRETTORE");
					}
					
					@Override
					public int getSelectItemOrganigrammaWidth() {
						return 650;
					}
					
					@Override
					public Boolean validate() {
						if(showProponentiItem()) {
							return super.validate();
						} else {
							return true;
						}
					}		
					
					@Override
					public void manageChangedUoSelezionata() {						
						
					}
					
					@Override
					public boolean isGrigliaEditabile() {
						return true;
					}
					
					@Override
					protected VLayout buildLayout() {
						VLayout lVLayout = super.buildLayout();
						lVLayout.setWidth100();
						lVLayout.setPadding(11);
						lVLayout.setMargin(4);
						lVLayout.setIsGroup(true);
						lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleProponentiItem()) + "</span>");
						return lVLayout;
					}
				};
				listaProponentiItem.setStartRow(true);
				listaProponentiItem.setShowTitle(false);
				listaProponentiItem.setColSpan(20);
				listaProponentiItem.setHeight(245);
				listaProponentiItem.setShowIfCondition(new FormItemIfFunction() {
					
					@Override
					public boolean execute(FormItem item, Object value, DynamicForm form) {
						return showProponentiItem();
					}
				});				
			}
					
		} else {
		
			if (isAbilToSelUffPropEsteso()) {	
				
				listaUfficioProponenteItem = new SelezionaUOItem() {
					
					@Override
					public String getAltriParamLoadCombo() {
						return getAltriParamLoadComboUfficioProponenteEstesoItem();
					}
					
					@Override
					public int getSelectItemOrganigrammaWidth() {
						return 650;
					}
					
					@Override
					public boolean skipValidation() {
						if(showUfficioProponenteEstesoItem()) {
							return super.skipValidation();
						}
						return true;
					}
					
					@Override
					protected VLayout creaVLayout() {
						VLayout lVLayout = super.creaVLayout();
						lVLayout.setWidth100();
						lVLayout.setPadding(11);
						lVLayout.setMargin(4);
						lVLayout.setIsGroup(true);
						lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUfficioProponenteEstesoItem()) + "</span>");
						return lVLayout;
					}
					
					@Override
					public Boolean getShowRemoveButton() {
						return true;
					}
					
					@Override
					public void manageChangedUoSelezionata() {						
						afterSelezioneUoProponente(true);
					}
				};
				listaUfficioProponenteItem.setName("listaUfficioProponente");
				listaUfficioProponenteItem.setShowTitle(false);
				listaUfficioProponenteItem.setColSpan(20);
				listaUfficioProponenteItem.setNotReplicable(true);
				listaUfficioProponenteItem.setAttribute("obbligatorio", true);
				listaUfficioProponenteItem.setShowIfCondition(new FormItemIfFunction() {
					
					@Override
					public boolean execute(FormItem item, Object value, DynamicForm form) {
						return showUfficioProponenteEstesoItem();
					}
				});
				
			} else {
			
				codUfficioProponenteItem = new HiddenItem("codUfficioProponente");
				desUfficioProponenteItem = new HiddenItem("desUfficioProponente");
				flgUfficioProponenteGareItem = new HiddenItem("flgUfficioProponenteGare");						
				
				ufficioProponenteItem = new SelectItem("ufficioProponente", getTitleUfficioProponenteItem()) {
					
					@Override
					public void onOptionClick(Record record) {
						super.onOptionClick(record);
						String idUo = record.getAttribute("idUo");
						String descrizione = record.getAttribute("descrizione");
						if(descrizione != null && !"".equals(descrizione)) {
							ruoliForm.setValue("codUfficioProponente", descrizione.substring(0, descrizione.indexOf(" - ")));
							ruoliForm.setValue("desUfficioProponente", descrizione.substring(descrizione.indexOf(" - ") + 3));						
						} else {
							ruoliForm.setValue("codUfficioProponente", "");
							ruoliForm.setValue("desUfficioProponente", "");						
						}
						if(idUo != null && !"".equals(idUo)) {
							ruoliForm.setValue("flgUfficioProponenteGare", getFlgUfficioProponenteGareMap().get(idUo));
						} else {
							ruoliForm.setValue("flgUfficioProponenteGare", "");	
						}
					}
					
					@Override
					protected void clearSelect() {
						super.clearSelect();
						ruoliForm.setValue("codUfficioProponente", "");
						ruoliForm.setValue("desUfficioProponente", "");
						ruoliForm.setValue("flgUfficioProponenteGare", "");	
					}
					
					@Override
					public void setValue(String value) {
						super.setValue(value);
						if (value == null || "".equals(value)) {
							ruoliForm.setValue("codUfficioProponente", "");
							ruoliForm.setValue("desUfficioProponente", "");
							ruoliForm.setValue("flgUfficioProponenteGare", "");	
						}
		            }
				};
//				ufficioProponenteItem.setTitleOrientation(TitleOrientation.TOP);
				ufficioProponenteItem.setWidth(650);
				ufficioProponenteItem.setColSpan(3);
				ufficioProponenteItem.setDisplayField("descrizione");
				ufficioProponenteItem.setValueField("idUo");
//				ufficioProponenteItem.setOptionDataSource(ufficioProponenteDS);
//				ufficioProponenteItem.setAutoFetchData(true);
//				ufficioProponenteItem.addDataArrivedHandler(new DataArrivedHandler() {			
//					@Override
//					public void onDataArrived(DataArrivedEvent event) {					
//						RecordList data = event.getData();
//						if(data != null && data.getLength() > 0) {
//							ufficioProponenteValueMap = new LinkedHashMap<String, String>();
//							for (int i = 0; i < data.getLength(); i++) {	
//								ufficioProponenteValueMap.put(data.get(i).getAttribute("idUo"), data.get(i).getAttribute("descrizione"));			
//							}
//							if(data.getLength() == 1) {
//								Record record = data.get(0);
//								String key = record.getAttribute("idUo");
//								String value = record.getAttribute("descrizione");
//								ruoliForm.setValue("ufficioProponente", (key != null && key.startsWith("UO")) ? key.substring(2) : key);
//								if(value != null && !"".equals(value)) {
//									ruoliForm.setValue("codUfficioProponente", value.substring(0, value.indexOf(" - ")));
//									ruoliForm.setValue("desUfficioProponente", value.substring(value.indexOf(" - ") + 3));			
//								}
//								if(key != null && !"".equals(key)) {
//									ruoliForm.setValue("flgUfficioProponenteGare", getFlgUfficioProponenteGareMap().get(key));
//								}
//								afterSelezioneUoProponente();
//							}
//						}				
//					};
//				});
				// devo usare il dataSource clientOnly altrimenti con il valueMap non mi mantiene l'ordine della store
//				ufficioProponenteItem.setValueMap(getUfficioProponenteValueMap());
				ufficioProponenteItem.setOptionDataSource(getUfficioProponenteDS());
				ufficioProponenteItem.setAttribute("obbligatorio", true);
				ufficioProponenteItem.setAllowEmptyValue(false);
				ufficioProponenteItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
					
					@Override
					public boolean execute(FormItem formItem, Object value) {
						return showUfficioProponenteItem();
					}
				}));
				ufficioProponenteItem.setShowIfCondition(new FormItemIfFunction() {
					
					@Override
					public boolean execute(FormItem item, Object value, DynamicForm form) {
						return showUfficioProponenteItem();
					}
				});
				ufficioProponenteItem.addChangedHandler(new ChangedHandler() {
	
					@Override
					public void onChanged(ChangedEvent event) {					
						afterSelezioneUoProponente(true);
					}
				});		
				if(ufficioProponenteItem != null) {
					if (getUfficioProponenteValueMap().size() == 1) {
						String key = getUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
						String value = getUfficioProponenteValueMap().get(key);
						ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
						if(value != null && !"".equals(value)) {
							codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
							desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));				
						}
						flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
					} else if (getSelezioneUfficioProponenteValueMap().size() == 1) {
						String key = getSelezioneUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
						String value = getSelezioneUfficioProponenteValueMap().get(key);
						ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
						if(value != null && !"".equals(value)) {
							codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
							desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));				
						}
						flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
					}
				}
			} 	
						
		}
				
		tipoProvvedimentoItem = new RadioGroupItem("tipoProvvedimento", getTitleTipoProvvedimentoItem());
		tipoProvvedimentoItem.setStartRow(true);
		tipoProvvedimentoItem.setColSpan(3);		
		Map<String, String> tipoProvvedimentoValueMap = getValueMapTipoProvvedimentoItem();
		if(tipoProvvedimentoValueMap != null && tipoProvvedimentoValueMap.keySet().size() > 0) {
			tipoProvvedimentoItem.setValueMap(tipoProvvedimentoValueMap);			
		} else {
			tipoProvvedimentoValueMap = new HashMap<String, String>();
			tipoProvvedimentoValueMap.put("delibera", "provvedimento (delibera)");
			tipoProvvedimentoValueMap.put("comunicazione", "comunicazione");
			tipoProvvedimentoItem.setValueMap(tipoProvvedimentoValueMap);
		}
		tipoProvvedimentoItem.setDefaultValue(getDefaultValueTipoProvvedimentoItem());
		tipoProvvedimentoItem.setVertical(false);
		tipoProvvedimentoItem.setWrap(false);
		tipoProvvedimentoItem.setShowDisabled(false);
		if(isRequiredTipoProvvedimentoItem()) {
			tipoProvvedimentoItem.setAttribute("obbligatorio", true);
		}
		tipoProvvedimentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoProvvedimentoItem();
			}
		}));
		tipoProvvedimentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoProvvedimentoItem();
			}
		});			
		tipoProvvedimentoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				ruoliForm.markForRedraw();
			}
		});
		
		sottotipoDeliberaItem = new SelectItem("sottotipoDelibera", getTitleSottotipoDeliberaItem());
		sottotipoDeliberaItem.setStartRow(true);
		sottotipoDeliberaItem.setColSpan(3);
		sottotipoDeliberaItem.setWidth(300);		
		Map<String, String> sottotipoDeliberaValueMap = getValueMapSottotipoDeliberaItem();
		if(sottotipoDeliberaValueMap != null && sottotipoDeliberaValueMap.keySet().size() > 0) {
			sottotipoDeliberaItem.setValueMap(sottotipoDeliberaValueMap);			
		} else {
			sottotipoDeliberaValueMap = new HashMap<String, String>();
			sottotipoDeliberaValueMap.put("parere", "parere");
			sottotipoDeliberaValueMap.put("nomina_sg", "nomina Segretario Generale");
			sottotipoDeliberaValueMap.put("approvazione_verbale_seduta", "approvazione del verbale di precedente seduta");
			sottotipoDeliberaItem.setValueMap(sottotipoDeliberaValueMap);
		}
		sottotipoDeliberaItem.setDefaultValue(getDefaultValueSottotipoDeliberaItem());
		if(isRequiredSottotipoDeliberaItem()) {
			sottotipoDeliberaItem.setAttribute("obbligatorio", true);
		} else {
			sottotipoDeliberaItem.setAllowEmptyValue(true);			
		}
		sottotipoDeliberaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredSottotipoDeliberaItem();
			}
		}));
		sottotipoDeliberaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showSottotipoDeliberaItem();
			}
		});			
		sottotipoDeliberaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				ruoliForm.markForRedraw();
			}
		});
				
		/*
		GWTRestDataSource ufficioGareAcquistiDS = new GWTRestDataSource("LoadComboUfficioGareAcquistiDataSource", "key", FieldType.TEXT);
		ufficioGareAcquistiDS.addParam("tipoLoadCombo", getTipoLoadComboUfficioGareAcquistiItem());
		ufficioGareAcquistiDS.addParam("altriParamLoadCombo", getAltriParamLoadComboUfficioGareAcquistiItem());
		
		ufficioGareAcquistiItem = new SelectItem("ufficioGareAcquisti", getTitleUfficioGareAcquistiItem()) {

//			@Override
//			protected ListGrid builPickListProperties() {
//				ListGrid ufficioGareAcquistiPickListProperties = super.builPickListProperties();	
//				ufficioGareAcquistiPickListProperties.addFetchDataHandler(new FetchDataHandler() {
//
//					@Override
//					public void onFilterData(FetchDataEvent event) {
//						String responsabileDiProcedimento = getResponsabileDiProcedimento(true);
//						GWTRestDataSource ufficioGareAcquistiDS = (GWTRestDataSource) ufficioGareAcquistiItem.getOptionDataSource();	
//						ufficioGareAcquistiDS.addParam("uoProponente", getIdUoProponente());
//						ufficioGareAcquistiItem.setOptionDataSource(ufficioGareAcquistiDS);
//						ufficioGareAcquistiItem.invalidateDisplayValueCache();						
//					}
//				});
//				return ufficioGareAcquistiPickListProperties;
//			}
		};
//		ufficioGareAcquistiItem.setTitleOrientation(TitleOrientation.TOP);		
		ufficioGareAcquistiItem.setWidth(669); // setto la larghezza a 650 + 19 o rimane disallineato rispetto alle motivazioni sotto		
		ufficioGareAcquistiItem.setStartRow(true);
		ufficioGareAcquistiItem.setValueField("key");
		ufficioGareAcquistiItem.setDisplayField("value");
		ufficioGareAcquistiItem.setDefaultValue(getDefaultValueUfficioGareAcquistiItem());
		ufficioGareAcquistiItem.setOptionDataSource(ufficioGareAcquistiDS);	
//		ufficioGareAcquistiItem.setAllowEmptyValue(false);
//		ufficioGareAcquistiItem.setAutoFetchData(false);
//		ufficioGareAcquistiItem.setAlwaysFetchMissingValues(true);
//		ufficioGareAcquistiItem.setFetchMissingValues(true);		
//		if(isRequiredUfficioGareAcquistiItem()) {
//			ufficioGareAcquistiItem.setAttribute("obbligatorio", true);
//		} else {
//			ufficioGareAcquistiItem.setAllowEmptyValue(true);
//		}
		ufficioGareAcquistiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredUfficioGareAcquistiItem();
			}
		}));
		ufficioGareAcquistiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredUfficioGareAcquistiItem()) {
					ufficioGareAcquistiItem.setAttribute("obbligatorio", true);
					ufficioGareAcquistiItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleUfficioGareAcquistiItem()));
					ufficioGareAcquistiItem.setAllowEmptyValue(false);
				} else {
					ufficioGareAcquistiItem.setAttribute("obbligatorio", false);
					ufficioGareAcquistiItem.setTitle(getTitleUfficioGareAcquistiItem());
					ufficioGareAcquistiItem.setAllowEmptyValue(true);
				}								
				return showUfficioGareAcquistiItem();
			}
		});	
		*/
		
		String titleUfficioGareAcquistiItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleUfficioGareAcquistiItem() + "</span>";
		if(getFlgObbligatorioAttributoCustomCablato("ID_UO_GARE_ACQUISTI")) {
			titleUfficioGareAcquistiItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUfficioGareAcquistiItem()) + "</span>";
		}
		listaUfficioGareAcquistiItem = new UfficioGareAcquistiItem(titleUfficioGareAcquistiItem) {
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_UO_GARE_ACQUISTI") && getFlgAbilitaSelectUniqueValueUfficioGareAcquistiItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredUfficioGareAcquistiItem() && getFlgAbilitaSelectUniqueValueUfficioGareAcquistiItem();
			}
			
			@Override
			public String getDefaultValue() {
				return getDefaultValueUfficioGareAcquistiItem();
			}
			
			@Override
			public String getTipoLoadCombo() {
				return getTipoLoadComboUfficioGareAcquistiItem();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboUfficioGareAcquistiItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredUfficioGareAcquistiItem()) {
					listaUfficioGareAcquistiItem.setAttribute("obbligatorio", true);
				} else {
					listaUfficioGareAcquistiItem.setAttribute("obbligatorio", false);
				}
				listaUfficioGareAcquistiItem.storeValue(ruoliForm.getValueAsRecordList(listaUfficioGareAcquistiItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showUfficioGareAcquistiItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaUfficioGareAcquistiItem.setName("listaUfficioGareAcquisti");
		listaUfficioGareAcquistiItem.setShowTitle(false);
		listaUfficioGareAcquistiItem.setColSpan(20);
		listaUfficioGareAcquistiItem.setNotReplicable(true);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_UO_GARE_ACQUISTI")) {
//			listaUfficioGareAcquistiItem.setAttribute("obbligatorio", true);
//		}
		listaUfficioGareAcquistiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredUfficioGareAcquistiItem()) {
					listaUfficioGareAcquistiItem.setAttribute("obbligatorio", true);
				} else {
					listaUfficioGareAcquistiItem.setAttribute("obbligatorio", false);
				}
				listaUfficioGareAcquistiItem.storeValue(form.getValueAsRecordList(listaUfficioGareAcquistiItem.getName()));
				return showUfficioGareAcquistiItem();
			}
		});	
				
		flgProcExCodAppaltiItem = new RadioGroupItem("flgProcExCodAppalti", getTitleFlgProcExCodAppaltiItem());
		flgProcExCodAppaltiItem.setStartRow(true);
		flgProcExCodAppaltiItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgProcExCodAppaltiItem.setDefaultValue(getDefaultValueFlgProcExCodAppaltiItem());
		flgProcExCodAppaltiItem.setVertical(false);
		flgProcExCodAppaltiItem.setWrap(false);
		flgProcExCodAppaltiItem.setShowDisabled(false);
		if(isRequiredFlgProcExCodAppaltiItem()) {
			flgProcExCodAppaltiItem.setAttribute("obbligatorio", true);
		}
		flgProcExCodAppaltiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgProcExCodAppaltiItem();
			}
		}));
		flgProcExCodAppaltiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgProcExCodAppaltiItem();
			}
		});			
		flgProcExCodAppaltiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if(showFlgOpCommercialeItem() && showFlgProcExCodAppaltiItem()) {					
					flgOpCommercialeItem.setValue(getValueAsString("flgProcExCodAppalti"));							
				}	
				setUfficioCompetenteFromUoProponente();
				resetUfficioCompetenteProcExCodAppaltiAfterChangedUoProponente();
				redrawTabForms(_TAB_DATI_SCHEDA_ID);	
				showHideSections();			
			}
		});
		
		codUfficioCompetenteItem = new HiddenItem("codUfficioCompetente");
		desUfficioCompetenteItem = new HiddenItem("desUfficioCompetente");
		cdrUOCompetenteItem = new HiddenItem("cdrUOCompetente");
		opzUOCompetenteItem = new HiddenItem("opzUOCompetente");
				
		listaUfficioCompetenteItem = new SelezionaUOItem() {
			
			@Override
			public int getSelectItemOrganigrammaWidth() {
				return 650;
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredUfficioCompetenteItem()) {
					listaUfficioCompetenteItem.setAttribute("obbligatorio", true);
				} else {
					listaUfficioCompetenteItem.setAttribute("obbligatorio", false);
				}
				listaUfficioCompetenteItem.storeValue(ruoliForm.getValueAsRecordList(listaUfficioCompetenteItem.getName()));		
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showUfficioCompetenteItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredUfficioCompetenteItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUfficioCompetenteItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleUfficioCompetenteItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
			
			@Override
			public void manageChangedUoSelezionata() {						
				afterSelezioneUoCompetente(false);
			}					
		};
		listaUfficioCompetenteItem.setName("listaUfficioCompetente");
		listaUfficioCompetenteItem.setShowTitle(false);
		listaUfficioCompetenteItem.setColSpan(20);
		listaUfficioCompetenteItem.setNotReplicable(true);		
//		if(getFlgObbligatorioAttributoCustomCablato("ID_UO_COMPETENTE")) {
//			listaUfficioCompetenteItem.setAttribute("obbligatorio", true);
//		}
		listaUfficioCompetenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(showUfficioCompetenteItem() && showFlgProcExCodAppaltiItem()) {					
					if(isUfficioCompetenteAncheDiversoDaUfficioProponente()) {
						listaUfficioCompetenteItem.setCanEditCanvas(getFlgEditabileAttributoCustomCablato("ID_UO_COMPETENTE") ? editing : false);
					} else {
						listaUfficioCompetenteItem.setCanEditCanvas(false);						
					}
				}
				if(isRequiredUfficioCompetenteItem()) {
					listaUfficioCompetenteItem.setAttribute("obbligatorio", true);
				} else {
					listaUfficioCompetenteItem.setAttribute("obbligatorio", false);
				}
				listaUfficioCompetenteItem.storeValue(form.getValueAsRecordList(listaUfficioCompetenteItem.getName()));				
				return showUfficioCompetenteItem();	
			}
		});
		
		listaRUPCodAppaltiItem = new ResponsabileUnicoProvvedimentoCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean hideNriLivelliUo() {
				return AurigaLayout.isAttivoClienteADSP();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRUPItem();
			}
			
			@Override
			public boolean showFlgAncheAdottante() {
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_RUP_ANCHE_ADOTTANTE") && showAdottanteItem(true);
			}
			
			@Override
			public void manageOnChangedFlgRUPAncheAdottante(boolean value) {
				ruoliForm.markForRedraw();
			}
			
			@Override
			public boolean skipValidation() {
				if(showRUPCodAppaltiItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgAbilitaSelectUniqueValueRUPItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredRUPCodAppaltiItem() && getFlgAbilitaSelectUniqueValueRUPItem();
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);				
				if(isRequiredRUPCodAppaltiItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRUPItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRUPItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		listaRUPCodAppaltiItem.setName("listaRUPCodAppalti");
		listaRUPCodAppaltiItem.setShowTitle(false);
		listaRUPCodAppaltiItem.setColSpan(20);
		listaRUPCodAppaltiItem.setNotReplicable(true);
		if(isRequiredRUPCodAppaltiItem()) {
			listaRUPCodAppaltiItem.setAttribute("obbligatorio", true);
		}		
		listaRUPCodAppaltiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showRUPCodAppaltiItem();		
			}
		});
		
		listaAdottanteItem = new DirigenteAdottanteCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAdottanteItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAdottanteItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getIdUdAttoDaAnn() {
				return getIdUdAttoDaAnnullare();
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_ADOTTANTE") && getFlgAbilitaSelectUniqueValueAdottanteItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredAdottanteItem() && getFlgAbilitaSelectUniqueValueAdottanteItem();
			}
			
			@Override
			public boolean showFlgAncheRdP() {				
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_ANCHE_RDP") && showRdPItem(true);
			}
			
			@Override
			public boolean showFlgAncheRUP() {				
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_ANCHE_RUP") && showRUPItem(true);
			}
		
			@Override
			public void manageOnChangedFlgAdottanteAncheRdP(boolean value) {
				resetCodProcedimentoAfterChangedRdP(value); // se da qui chiamo isRdPUgualeAdottante() non mi torna il valore appena cambiato, quindi passo value come parametro in input
				ruoliForm.markForRedraw();
			}
		
			@Override
			public void manageOnChangedFlgAdottanteAncheRUP(boolean value) {
				if(value) {
					listaRdPItem.clearFlgRdPAncheRUP();
				}
				ruoliForm.markForRedraw();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);		
				if(isRequiredAdottanteItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAdottanteItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAdottanteItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
			
			@Override
			public void manageChangedScrivaniaSelezionata() {	
				afterSelezioneScrivaniaAdottante();
			}
		};
		listaAdottanteItem.setName("listaAdottante");
		listaAdottanteItem.setShowTitle(false);
		listaAdottanteItem.setColSpan(20);
		listaAdottanteItem.setNotReplicable(true);
		if(isRequiredAdottanteItem()) {
			listaAdottanteItem.setAttribute("obbligatorio", true);	
		}
		listaAdottanteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAdottanteItem();
			}
		});
		
		listaRdPCodAppaltiItem = new ResponsabileDiProcedimentoCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean showFlgAncheRUP() {				
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_RDP_ANCHE_RUP") && showRUPItem(true);
			}			
			
			@Override
			public void manageOnChangedFlgRdPAncheRUP(boolean value) {
				if(value) {
					listaAdottanteItem.clearFlgAdottanteAncheRUP();
				}
				ruoliForm.markForRedraw();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRdPItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
			}
			
			@Override
			public String getTitleFlgFirmatario() {
				String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return I18NUtil.getMessages().nuovaPropostaAtto2_detail_flgFirmatario_title();
			}
			
			@Override
			public boolean getDefaultValueAsBooleanFlgFirmatario() {
				return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
			}
			
			@Override
			public boolean isEditableFlgFirmatario() {
				return getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredRdPCodAppaltiItem()) {
					listaRdPCodAppaltiItem.setAttribute("obbligatorio", true);
				} else {
					listaRdPCodAppaltiItem.setAttribute("obbligatorio", false);
				}
				listaRdPCodAppaltiItem.storeValue(ruoliForm.getValueAsRecordList(listaRdPCodAppaltiItem.getName()));				
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showRdPCodAppaltiItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public String getUoCompetenteCorrente() {
				return getIdUoCompetente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_PROC") && getFlgAbilitaSelectUniqueValueRdPItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredRdPCodAppaltiItem() && getFlgAbilitaSelectUniqueValueRdPItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);					
				if(isRequiredRdPCodAppaltiItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRdPItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRdPItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
			
			@Override
			public void manageChangedScrivaniaSelezionata() {	
				afterSelezioneScrivaniaRdP();
			}
		};
		listaRdPCodAppaltiItem.setName("listaRdPCodAppalti");
		listaRdPCodAppaltiItem.setShowTitle(false);
		listaRdPCodAppaltiItem.setColSpan(20);
		listaRdPCodAppaltiItem.setNotReplicable(true);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_PROC")) {
//			listaRdPCodAppaltiItem.setAttribute("obbligatorio", true);
//		}
		listaRdPCodAppaltiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredRdPCodAppaltiItem()) {
					listaRdPCodAppaltiItem.setAttribute("obbligatorio", true);
				} else {
					listaRdPCodAppaltiItem.setAttribute("obbligatorio", false);
				}
				listaRdPCodAppaltiItem.storeValue(form.getValueAsRecordList(listaRdPCodAppaltiItem.getName()));				
				return showRdPCodAppaltiItem();
			}
		});	
		
		GWTRestDataSource codProcedimentoRdPUgualeAdottanteDS = new GWTRestDataSource("LoadComboCodProcedimentoDataSource", "key", FieldType.TEXT);
 		
		codProcedimentoRdPUgualeAdottanteItem = new SelectItem("codProcedimentoRdPUgualeAdottante", getTitleCodProcedimentoItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);	
				ruoliForm.setValue("desProcedimento", record.getAttributeAsString("value"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				ruoliForm.setValue("codProcedimentoRdPUgualeAdottante", "");	
				ruoliForm.setValue("desProcedimento", "");	
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					ruoliForm.setValue("codProcedimentoRdPUgualeAdottante", "");
					ruoliForm.setValue("desProcedimento", "");
				}
			}

			@Override
			protected ListGrid builPickListProperties() {
				ListGrid codProcedimentoRdPUgualeAdottantePickListProperties = super.builPickListProperties();	
				codProcedimentoRdPUgualeAdottantePickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						String responsabileDiProcedimento = getResponsabileDiProcedimento(true);
						GWTRestDataSource codProcedimentoRdPUgualeAdottanteDS = (GWTRestDataSource) codProcedimentoRdPUgualeAdottanteItem.getOptionDataSource();		
						codProcedimentoRdPUgualeAdottanteDS.addParam("responsabileDiProcedimento", responsabileDiProcedimento);				
						codProcedimentoRdPUgualeAdottanteItem.setOptionDataSource(codProcedimentoRdPUgualeAdottanteDS);
						codProcedimentoRdPUgualeAdottanteItem.invalidateDisplayValueCache();						
					}
				});
				return codProcedimentoRdPUgualeAdottantePickListProperties;
			}
		};
//		codProcedimentoRdPUgualeAdottanteItem.setTitleOrientation(TitleOrientation.TOP);		
		codProcedimentoRdPUgualeAdottanteItem.setWidth(669); // setto la larghezza a 650 + 19 o rimane disallineato rispetto alle motivazioni sotto
		codProcedimentoRdPUgualeAdottanteItem.setColSpan(3);
		codProcedimentoRdPUgualeAdottanteItem.setStartRow(true);
		codProcedimentoRdPUgualeAdottanteItem.setValueField("key");
		codProcedimentoRdPUgualeAdottanteItem.setDisplayField("value");
		codProcedimentoRdPUgualeAdottanteItem.setOptionDataSource(codProcedimentoRdPUgualeAdottanteDS);		
//		if(isRequiredCodProcedimentoRdPUgualeAdottanteItem()) {
//			codProcedimentoRdPUgualeAdottanteItem.setAttribute("obbligatorio", true);
//		} else {
//			codProcedimentoRdPUgualeAdottanteItem.setAllowEmptyValue(true);
//		}
		codProcedimentoRdPUgualeAdottanteItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredCodProcedimentoRdPUgualeAdottanteItem();
			}
		}));
		codProcedimentoRdPUgualeAdottanteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredCodProcedimentoRdPUgualeAdottanteItem()) {
					codProcedimentoRdPUgualeAdottanteItem.setAttribute("obbligatorio", true);
					codProcedimentoRdPUgualeAdottanteItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleCodProcedimentoItem()));
					codProcedimentoRdPUgualeAdottanteItem.setAllowEmptyValue(false);
				} else {
					codProcedimentoRdPUgualeAdottanteItem.setAttribute("obbligatorio", false);
					codProcedimentoRdPUgualeAdottanteItem.setTitle(getTitleCodProcedimentoItem());
					codProcedimentoRdPUgualeAdottanteItem.setAllowEmptyValue(true);
				}								
				return showCodProcedimentoRdPUgualeAdottanteItem();
			}
		});	
		
		GWTRestDataSource centroDiCostoDS = new GWTRestDataSource("LoadComboCdCAdottanteDataSource", "key", FieldType.TEXT);
		 		
		centroDiCostoItem = new SelectItem("centroDiCosto", getTitleCentroDiCostoItem()) {
			
			@Override
			protected ListGrid builPickListProperties() {
				ListGrid centroDiCostoPickListProperties = super.builPickListProperties();	
				centroDiCostoPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						GWTRestDataSource centroDiCostoDS = (GWTRestDataSource) centroDiCostoItem.getOptionDataSource();		
						centroDiCostoDS.addParam("adottante", getDirigenteAdottante());				
						centroDiCostoItem.setOptionDataSource(centroDiCostoDS);
						centroDiCostoItem.invalidateDisplayValueCache();
					}
				});
				return centroDiCostoPickListProperties;
			}
		};
//		centroDiCostoItem.setTitleOrientation(TitleOrientation.TOP);		
		centroDiCostoItem.setWidth(160);
		centroDiCostoItem.setStartRow(true);
		centroDiCostoItem.setValueField("key");
		centroDiCostoItem.setDisplayField("value");
		centroDiCostoItem.setOptionDataSource(centroDiCostoDS);		
		if(isRequiredCentroDiCostoItem()) {
			centroDiCostoItem.setAttribute("obbligatorio", true);
		} else {
			centroDiCostoItem.setAllowEmptyValue(true);
		}
		centroDiCostoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredCentroDiCostoItem();
			}
		}));
		centroDiCostoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showCentroDiCostoItem();
			}
		});	
		
		listaDirigentiConcertoItem = new DirigentiConcertoCompletaItem()  {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboDirigentiConcertoItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioDirigentiConcertoItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showDirigentiConcertoItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredDirigentiConcertoItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDirigentiConcertoItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDirigentiConcertoItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		listaDirigentiConcertoItem.setName("listaDirigentiConcerto");
		listaDirigentiConcertoItem.setStartRow(true);
		listaDirigentiConcertoItem.setShowTitle(false);
		listaDirigentiConcertoItem.setColSpan(20);	
		if(isRequiredDirigentiConcertoItem()) {
			listaDirigentiConcertoItem.setAttribute("obbligatorio", true);	
		}
		listaDirigentiConcertoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDirigentiConcertoItem();
			}
		});

		listaDirRespRegTecnicaItem = new DirigenteRespRegTecnicaCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean skipObbligForEmptySelect() {
				return skipObbligForEmptySelectDirRespRegTecnicaItem();
			}
			
			@Override
			public void manageAfterReloadSelectInNotReplicableCanvas(boolean empty) {
				if(skipObbligForEmptySelect()) {
					VLayout lVLayout = getVLayout();
					if(lVLayout != null) {
						if(isRequiredDirRespRegTecnicaItem() && !empty) {
							lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDirRespRegTecnicaItem()) + "</span>");
						} else {
							lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDirRespRegTecnicaItem() + "</span>");
						}
					}					
				}
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showDirRespRegTecnicaItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getIdUdAttoDaAnn() {
				return getIdUdAttoDaAnnullare();
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_DIR_RESP_REG_TECNICA") && getFlgAbilitaSelectUniqueValueDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredDirRespRegTecnicaItem() && getFlgAbilitaSelectUniqueValueDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean showFlgAncheRdP() {				
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_ANCHE_RDP") && showRdPItem(true);
			}			
			
			@Override
			public boolean showFlgAncheRUP() {				
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_ANCHE_RUP") && showRUPItem(true);
			}			
		
			@Override
			public void manageOnChangedFlgDirRespRegTecnicaAncheRdP(boolean value) {
				ruoliForm.markForRedraw();
			}
		
			@Override
			public void manageOnChangedFlgDirRespRegTecnicaAncheRUP(boolean value) {
				if(value) {
					listaRdPItem.clearFlgRdPAncheRUP();
				}
				ruoliForm.markForRedraw();
			}
			
			@Override
			public boolean showSostitutoRespRegTecnicaItem() {
				return showAttributoCustomCablato("ID_SV_SOSTITUTO_DIR_RESP_REG_TECNICA") && showDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean isEditableSostitutoItem() {
				return getFlgEditabileAttributoCustomCablato("ID_SV_SOSTITUTO_DIR_RESP_REG_TECNICA");
			}
			
			@Override
			public boolean isRequiredSostitutoItem() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_SOSTITUTO_DIR_RESP_REG_TECNICA");
			}
			
			@Override
			public String getAltriParamLoadComboSostituto() {
				return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_SOSTITUTO_DIR_RESP_REG_TECNICA");
			}
			
			@Override
			public String getTitleSostitutoDirRespRegTecnicaItem() {
				return getLabelAttributoCustomCablato("ID_SV_SOSTITUTO_DIR_RESP_REG_TECNICA");
			}
			
			@Override
			public boolean showProvvedimentoSostitutoRespRegTecnicaItem() {
				return showAttributoCustomCablato("PROVV_SOSTITUZIONE_DIR_RESP_REG_TECNICA") && showDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean isEditableProvvedimentoSostitutoItem() {
				return getFlgEditabileAttributoCustomCablato("PROVV_SOSTITUZIONE_DIR_RESP_REG_TECNICA");
			}
			
			@Override
			public boolean isRequiredProvvedimentoSostitutoItem() {
				return getFlgObbligatorioAttributoCustomCablato("PROVV_SOSTITUZIONE_DIR_RESP_REG_TECNICA");
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredDirRespRegTecnicaItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDirRespRegTecnicaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDirRespRegTecnicaItem() + "</span>");
				}				
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaDirRespRegTecnicaItem.setName("listaDirRespRegTecnica");
		listaDirRespRegTecnicaItem.setShowTitle(false);
		listaDirRespRegTecnicaItem.setColSpan(20);
		listaDirRespRegTecnicaItem.setNotReplicable(true);
		if(isRequiredDirRespRegTecnicaItem()) {
			listaDirRespRegTecnicaItem.setAttribute("obbligatorio", true);
		}
		listaDirRespRegTecnicaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDirRespRegTecnicaItem();
			}
		});
		
		
		listaAltriDirRespRegTecnicaItem = new AltriDirRespRegTecnicaCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAltriDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioAltriDirRespRegTecnicaItem(); 
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredAltriDirRespRegTecnicaItem()) {
					listaAltriDirRespRegTecnicaItem.setAttribute("obbligatorio", true);
				} else {
					listaAltriDirRespRegTecnicaItem.setAttribute("obbligatorio", false);
				}
				listaAltriDirRespRegTecnicaItem.storeValue(ruoliForm.getValueAsRecordList(listaAltriDirRespRegTecnicaItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAltriDirRespRegTecnicaItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);	
				if(getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA")) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAltriDirRespRegTecnicaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAltriDirRespRegTecnicaItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public boolean showSostitutoRespRegTecnicaItem() {
				return showAttributoCustomCablato("ID_SV_SOSTITUTO_ALTRI_DIR_REG_TECNICA") && showAltriDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean isEditableSostitutoItem() {
				return getFlgEditabileAttributoCustomCablato("ID_SV_SOSTITUTO_ALTRI_DIR_REG_TECNICA");
			}
			
			@Override
			public boolean isRequiredSostitutoItem() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_SOSTITUTO_ALTRI_DIR_REG_TECNICA");
			}
			
			@Override
			public String getAltriParamLoadComboSostituto() {
				return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_SOSTITUTO_ALTRI_DIR_REG_TECNICA");
			}
			
			@Override
			public String getTitleSostitutoDirRespRegTecnicaItem() {
				return getLabelAttributoCustomCablato("ID_SV_SOSTITUTO_ALTRI_DIR_REG_TECNICA");
			}
			
			@Override
			public boolean showProvvedimentoSostitutoRespRegTecnicaItem() {
				return showAttributoCustomCablato("PROVV_SOSTITUZIONE_ALTRI_DIR_REG_TECNICA") && showAltriDirRespRegTecnicaItem();
			}
			
			@Override
			public boolean isEditableProvvedimentoSostitutoItem() {
				return getFlgEditabileAttributoCustomCablato("PROVV_SOSTITUZIONE_ALTRI_DIR_REG_TECNICA");
			}
			
			@Override
			public boolean isRequiredProvvedimentoSostitutoItem() {
				return getFlgObbligatorioAttributoCustomCablato("PROVV_SOSTITUZIONE_ALTRI_DIR_REG_TECNICA");
			}
		};
		listaAltriDirRespRegTecnicaItem.setName("listaAltriDirRespRegTecnica");
		listaAltriDirRespRegTecnicaItem.setStartRow(true);
		listaAltriDirRespRegTecnicaItem.setShowTitle(false);
		listaAltriDirRespRegTecnicaItem.setColSpan(20);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_DIR_REG_TECNICA")) {
//			listaAltriDirRespRegTecnicaItem.setAttribute("obbligatorio", true);
//		}
		listaAltriDirRespRegTecnicaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredAltriDirRespRegTecnicaItem()) {
					listaAltriDirRespRegTecnicaItem.setAttribute("obbligatorio", true);
				} else {
					listaAltriDirRespRegTecnicaItem.setAttribute("obbligatorio", false);
				}
				listaAltriDirRespRegTecnicaItem.storeValue(form.getValueAsRecordList(listaAltriDirRespRegTecnicaItem.getName()));
				return showAltriDirRespRegTecnicaItem();
			}
		});
		
		listaRdPItem = new ResponsabileDiProcedimentoCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean showFlgAncheRUP() {				
				return showAttributoCustomCablato("TASK_RESULT_2_FLG_RDP_ANCHE_RUP") && showRUPItem(true);
			}			
			
			@Override
			public void manageOnChangedFlgRdPAncheRUP(boolean value) {
				if(value) {
					listaAdottanteItem.clearFlgAdottanteAncheRUP();
				}
				ruoliForm.markForRedraw();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRdPItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
			}
			
			@Override
			public String getTitleFlgFirmatario() {
				String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return I18NUtil.getMessages().nuovaPropostaAtto2_detail_flgFirmatario_title();
			}
			
			@Override
			public boolean getDefaultValueAsBooleanFlgFirmatario() {
				return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
			}
			
			@Override
			public boolean isEditableFlgFirmatario() {
				return getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RICH_FIRMA_RDP");
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredRdPItem()) {
					listaRdPItem.setAttribute("obbligatorio", true);
				} else {
					listaRdPItem.setAttribute("obbligatorio", false);
				}
				listaRdPItem.storeValue(ruoliForm.getValueAsRecordList(listaRdPItem.getName()));	
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showRdPItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public String getUoCompetenteCorrente() {
				return getIdUoCompetente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_PROC") && getFlgAbilitaSelectUniqueValueRdPItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredRdPItem() && getFlgAbilitaSelectUniqueValueRdPItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);					
				if(isRequiredRdPItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRdPItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRdPItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
			
			@Override
			public void manageChangedScrivaniaSelezionata() {	
				afterSelezioneScrivaniaRdP();
			}
		};
		listaRdPItem.setName("listaRdP");
		listaRdPItem.setShowTitle(false);
		listaRdPItem.setColSpan(20);
		listaRdPItem.setNotReplicable(true);		
//		if(getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_PROC")) {
//			listaRdPItem.setAttribute("obbligatorio", true);
//		}
		listaRdPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredRdPItem()) {
					listaRdPItem.setAttribute("obbligatorio", true);
				} else {
					listaRdPItem.setAttribute("obbligatorio", false);
				}
				listaRdPItem.storeValue(form.getValueAsRecordList(listaRdPItem.getName()));
				return showRdPItem();
			}
		});	
		
		GWTRestDataSource codProcedimentoRdPDS = new GWTRestDataSource("LoadComboCodProcedimentoDataSource", "key", FieldType.TEXT);
 		
		codProcedimentoRdPItem = new SelectItem("codProcedimentoRdP", getTitleCodProcedimentoItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);	
				ruoliForm.setValue("desProcedimento", record.getAttributeAsString("value"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				ruoliForm.setValue("codProcedimentoRdP", "");	
				ruoliForm.setValue("desProcedimento", "");	
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					ruoliForm.setValue("codProcedimentoRdP", "");
					ruoliForm.setValue("desProcedimento", "");
				}
			}

			@Override
			protected ListGrid builPickListProperties() {
				ListGrid codProcedimentoRdPPickListProperties = super.builPickListProperties();	
				codProcedimentoRdPPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						String responsabileDiProcedimento = getResponsabileDiProcedimento(false);
						GWTRestDataSource codProcedimentoRdPDS = (GWTRestDataSource) codProcedimentoRdPItem.getOptionDataSource();		
						codProcedimentoRdPDS.addParam("responsabileDiProcedimento", responsabileDiProcedimento);				
						codProcedimentoRdPItem.setOptionDataSource(codProcedimentoRdPDS);
						codProcedimentoRdPItem.invalidateDisplayValueCache();						
					}
				});
				return codProcedimentoRdPPickListProperties;
			}
		};
//		codProcedimentoRdPItem.setTitleOrientation(TitleOrientation.TOP);		
		codProcedimentoRdPItem.setWidth(669);
		codProcedimentoRdPItem.setColSpan(3);
		codProcedimentoRdPItem.setStartRow(true);
		codProcedimentoRdPItem.setValueField("key");
		codProcedimentoRdPItem.setDisplayField("value");
		codProcedimentoRdPItem.setOptionDataSource(codProcedimentoRdPDS);		
//		if(isRequiredCodProcedimentoRdPItem()) {
//			codProcedimentoRdPItem.setAttribute("obbligatorio", true);
//		} else {
//			codProcedimentoRdPItem.setAllowEmptyValue(true);
//		}
		codProcedimentoRdPItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredCodProcedimentoRdPItem();
			}
		}));
		codProcedimentoRdPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredCodProcedimentoRdPItem()) {
					codProcedimentoRdPItem.setAttribute("obbligatorio", true);
					codProcedimentoRdPItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleCodProcedimentoItem()));
					codProcedimentoRdPItem.setAllowEmptyValue(false);
				} else {
					codProcedimentoRdPItem.setAttribute("obbligatorio", false);
					codProcedimentoRdPItem.setTitle(getTitleCodProcedimentoItem());
					codProcedimentoRdPItem.setAllowEmptyValue(true);
				}											
				return showCodProcedimentoRdPItem();
			}
		});	
		
		desProcedimentoItem = new HiddenItem("desProcedimento");
		
		listaRUPItem = new ResponsabileUnicoProvvedimentoCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean hideNriLivelliUo() {
				return AurigaLayout.isAttivoClienteADSP();
			}
						
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRUPItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showRUPItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_RUP") && getFlgAbilitaSelectUniqueValueRUPItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredRUPItem() && getFlgAbilitaSelectUniqueValueRUPItem();
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredRUPItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRUPItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRUPItem() + "</span>");
				}
				return lVLayout;
			}
		};
		listaRUPItem.setName("listaRUP");
		listaRUPItem.setShowTitle(false);
		listaRUPItem.setColSpan(20);
		listaRUPItem.setNotReplicable(true);
		if(isRequiredRUPItem()) {
			listaRUPItem.setAttribute("obbligatorio", true);
		}
		listaRUPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showRUPItem();		
			}
		});
		
		listaScrivaniaDECItem = new ScrivaniaDECItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean hideNriLivelliUo() {
				return AurigaLayout.isAttivoClienteADSP();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboScrivaniaDECItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredScrivaniaDECItem()) {
					listaScrivaniaDECItem.setAttribute("obbligatorio", true);
				} else {
					listaScrivaniaDECItem.setAttribute("obbligatorio", false);
				}
				listaScrivaniaDECItem.storeValue(ruoliForm.getValueAsRecordList(listaScrivaniaDECItem.getName()));	
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showScrivaniaDECItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_DEC") && getFlgAbilitaSelectUniqueValueScrivaniaDECItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredScrivaniaDECItem() && getFlgAbilitaSelectUniqueValueScrivaniaDECItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);					
				if(isRequiredScrivaniaDECItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleScrivaniaDECItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleScrivaniaDECItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaScrivaniaDECItem.setName("listaScrivaniaDEC");
		listaScrivaniaDECItem.setShowTitle(false);
		listaScrivaniaDECItem.setColSpan(20);
		listaScrivaniaDECItem.setNotReplicable(true);		
//		if(getFlgObbligatorioAttributoCustomCablato("ID_SV_DEC")) {
//			listaScrivaniaDECItem.setAttribute("obbligatorio", true);
//		}
		listaScrivaniaDECItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredScrivaniaDECItem()) {
					listaScrivaniaDECItem.setAttribute("obbligatorio", true);
				} else {
					listaScrivaniaDECItem.setAttribute("obbligatorio", false);
				}
				listaScrivaniaDECItem.storeValue(form.getValueAsRecordList(listaScrivaniaDECItem.getName()));
				return showScrivaniaDECItem();
			}
		});	
		
		String titleAssessoriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAssessoriItem() + "</span>";
		if(isRequiredAssessoriItem()) {
			titleAssessoriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAssessoriItem()) + "</span>";
		}
		listaAssessoriItem = new AssessoriItem(titleAssessoriItem) {
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAssessoriItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAssessoriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_ASSESSORE_PROPONENTE") && getFlgAbilitaSelectUniqueValueAssessoriItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredAssessoriItem() && getFlgAbilitaSelectUniqueValueAssessoriItem();
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaAssessoriItem.setName("listaAssessori");
		listaAssessoriItem.setShowTitle(false);
		listaAssessoriItem.setColSpan(20);
		listaAssessoriItem.setNotReplicable(true);
		if(isRequiredAssessoriItem()) {
			listaAssessoriItem.setAttribute("obbligatorio", true);
		}
		listaAssessoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAssessoriItem();
			}
		});
		
		String titleAltriAssessoriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAltriAssessoriItem() + "</span>";
		if(isRequiredAltriAssessoriItem()) {
			titleAltriAssessoriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAltriAssessoriItem()) + "</span>";
		}
		listaAltriAssessoriItem = new AssessoriItem(titleAltriAssessoriItem) {
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAltriAssessoriItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioAltriAssessoriItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAltriAssessoriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_ALTRI_ASSESSORI") && getFlgAbilitaSelectUniqueValueAltriAssessoriItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredAltriAssessoriItem() && getFlgAbilitaSelectUniqueValueAltriAssessoriItem();
			}
		};
		listaAltriAssessoriItem.setName("listaAltriAssessori");
		listaAltriAssessoriItem.setShowTitle(false);
		listaAltriAssessoriItem.setColSpan(20);
		if(isRequiredAltriAssessoriItem()) {
			listaAltriAssessoriItem.setAttribute("obbligatorio", true);
		}
		listaAltriAssessoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAltriAssessoriItem();
			}
		});
		
		String titleProponenteAttoConsiglioItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleProponenteAttoConsiglioItem() + "</span>";
		if(getFlgObbligatorioAttributoCustomCablato("ID_PROPONENTE_ATTO_CONSIGLIO")) {
			titleProponenteAttoConsiglioItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleProponenteAttoConsiglioItem()) + "</span>";
		}
		listaProponenteAttoConsiglioItem = new ProponenteAttoConsiglioItem(titleProponenteAttoConsiglioItem) {
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboProponenteAttoConsiglioItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredProponenteAttoConsiglioItem()) {
					listaProponenteAttoConsiglioItem.setAttribute("obbligatorio", true);
				} else {
					listaProponenteAttoConsiglioItem.setAttribute("obbligatorio", false);
				}
				listaProponenteAttoConsiglioItem.storeValue(ruoliForm.getValueAsRecordList(listaProponenteAttoConsiglioItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showProponenteAttoConsiglioItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaProponenteAttoConsiglioItem.setName("listaProponenteAttoConsiglio");
		listaProponenteAttoConsiglioItem.setShowTitle(false);
		listaProponenteAttoConsiglioItem.setColSpan(20);
		listaProponenteAttoConsiglioItem.setNotReplicable(true);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_PROPONENTE_ATTO_CONSIGLIO")) {
//			listaProponenteAttoConsiglioItem.setAttribute("obbligatorio", true);
//		}
		listaProponenteAttoConsiglioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredProponenteAttoConsiglioItem()) {
					listaProponenteAttoConsiglioItem.setAttribute("obbligatorio", true);
				} else {
					listaProponenteAttoConsiglioItem.setAttribute("obbligatorio", false);
				}
				listaProponenteAttoConsiglioItem.storeValue(form.getValueAsRecordList(listaProponenteAttoConsiglioItem.getName()));
				return showProponenteAttoConsiglioItem();
			}
		});
		
		String titleConsiglieriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleConsiglieriItem() + "</span>";
		if(getFlgObbligatorioAttributoCustomCablato("ID_CONSIGLIERE_PROPONENTE")) {
			titleConsiglieriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleConsiglieriItem()) + "</span>";
		}
		listaConsiglieriItem = new ConsiglieriItem(titleConsiglieriItem) {
			
			@Override
			public boolean showFlgFirmaInSostSindaco() {
				return showAttributoCustomCablato("TASK_RESULT_2_FIRMA_IN_SOST_SINDACO");
			}
			
			@Override
			public String getTitleFlgFirmaInSostSindaco() {
				return getLabelAttributoCustomCablato("TASK_RESULT_2_FIRMA_IN_SOST_SINDACO");
			}
						
			@Override
			public boolean getDefaultValueAsBooleanFlgFirmaInSostSindaco() {
				return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FIRMA_IN_SOST_SINDACO");
			}
			
			@Override
			public boolean isEditableFlgFirmaInSostSindaco() {
				return getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FIRMA_IN_SOST_SINDACO");
			}
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboConsiglieriItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredConsiglieriItem()) {
					listaConsiglieriItem.setAttribute("obbligatorio", true);
				} else {
					listaConsiglieriItem.setAttribute("obbligatorio", false);
				}
				listaConsiglieriItem.storeValue(ruoliForm.getValueAsRecordList(listaConsiglieriItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showConsiglieriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaConsiglieriItem.setName("listaConsiglieri");
		listaConsiglieriItem.setShowTitle(false);
		listaConsiglieriItem.setColSpan(20);
		listaConsiglieriItem.setNotReplicable(true);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_CONSIGLIERE_PROPONENTE")) {
//			listaConsiglieriItem.setAttribute("obbligatorio", true);
//		}
		listaConsiglieriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredConsiglieriItem()) {
					listaConsiglieriItem.setAttribute("obbligatorio", true);
				} else {
					listaConsiglieriItem.setAttribute("obbligatorio", false);
				}
				listaConsiglieriItem.storeValue(form.getValueAsRecordList(listaConsiglieriItem.getName()));
				return showConsiglieriItem();
			}
		});	
		
		String titleAltriConsiglieriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAltriConsiglieriItem() + "</span>";
		if(getFlgObbligatorioAttributoCustomCablato("ID_ALTRI_CONSIGLIERI")) {
			titleAltriConsiglieriItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAltriConsiglieriItem()) + "</span>";
		}
		listaAltriConsiglieriItem = new ConsiglieriItem(titleAltriConsiglieriItem) {
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAltriConsiglieriItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioAltriConsiglieriItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredAltriConsiglieriItem()) {
					listaAltriConsiglieriItem.setAttribute("obbligatorio", true);
				} else {
					listaAltriConsiglieriItem.setAttribute("obbligatorio", false);
				}
				listaAltriConsiglieriItem.storeValue(ruoliForm.getValueAsRecordList(listaAltriConsiglieriItem.getName()));	
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAltriConsiglieriItem()) {
					return super.skipValidation();
				}
				return true;
			}
		};
		listaAltriConsiglieriItem.setName("listaAltriConsiglieri");
		listaAltriConsiglieriItem.setShowTitle(false);
		listaAltriConsiglieriItem.setColSpan(20);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_ALTRI_CONSIGLIERI")) {
//			listaAltriConsiglieriItem.setAttribute("obbligatorio", true);
//		}
		listaAltriConsiglieriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredAltriConsiglieriItem()) {
					listaAltriConsiglieriItem.setAttribute("obbligatorio", true);
				} else {
					listaAltriConsiglieriItem.setAttribute("obbligatorio", false);
				}
				listaAltriConsiglieriItem.storeValue(form.getValueAsRecordList(listaAltriConsiglieriItem.getName()));	
				return showAltriConsiglieriItem();
			}
		});	
		
		dataTermFirmeConsiglieriItem = new DateItem("dataTermFirmeConsiglieri", getTitleDataTermFirmeConsiglieriItem());
		dataTermFirmeConsiglieriItem.setColSpan(1);
		dataTermFirmeConsiglieriItem.setStartRow(true);
		dataTermFirmeConsiglieriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDataTermFirmeConsiglieriItem();
			}
		});
		if(isRequiredDataTermFirmeConsiglieriItem()) {
			dataTermFirmeConsiglieriItem.setAttribute("obbligatorio", true);
		}
		dataTermFirmeConsiglieriItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataTermFirmeConsiglieriItem();
			}
		}));
		
		listaDirigentiProponentiItem = new DirigentiProponentiCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean skipObbligForEmptySelect() {
				return skipObbligForEmptySelectDirigentiProponentiItem();
			}
			
			@Override
			public void manageAfterChangedRequired() {
				VLayout lVLayout = getVLayout();
				if(lVLayout != null) {
					if(isRequiredDirigentiProponentiItem()) {
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDirigentiProponentiItem()) + "</span>");
					} else {
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDirigentiProponentiItem() + "</span>");
					}
				}
			}
			
			@Override
			public void manageAfterReloadSelectInNotReplicableCanvas(boolean empty) {				
				if(skipObbligForEmptySelect()) {
					VLayout lVLayout = getVLayout();
					if(lVLayout != null) {
						if(isRequiredDirigentiProponentiItem() && !empty) {
							lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDirigentiProponentiItem()) + "</span>");
						} else {
							lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDirigentiProponentiItem() + "</span>");
						}
					}			
				}
 			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboDirigentiProponentiItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredDirigentiProponentiItem()) {
					listaDirigentiProponentiItem.setAttribute("obbligatorio", true);
				} else {
					listaDirigentiProponentiItem.setAttribute("obbligatorio", false);
				}
				listaDirigentiProponentiItem.storeValue(ruoliForm.getValueAsRecordList(listaDirigentiProponentiItem.getName()));
				listaDirigentiProponentiItem.manageAfterChangedRequired();
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showDirigentiProponentiItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_DIR_PROPONENTE") && getFlgAbilitaSelectUniqueValueDirigentiProponentiItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredDirigentiProponentiItem() && getFlgAbilitaSelectUniqueValueDirigentiProponentiItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);		
				if(isRequiredDirigentiProponentiItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDirigentiProponentiItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDirigentiProponentiItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaDirigentiProponentiItem.setName("listaDirigentiProponenti");
		listaDirigentiProponentiItem.setShowTitle(false);
		listaDirigentiProponentiItem.setColSpan(20);
		listaDirigentiProponentiItem.setNotReplicable(true);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_SV_DIR_PROPONENTE")) {
//			listaDirigentiProponentiItem.setAttribute("obbligatorio", true);
//		}
		listaDirigentiProponentiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDirigentiProponentiItem()) {
					listaDirigentiProponentiItem.setAttribute("obbligatorio", true);
				} else {
					listaDirigentiProponentiItem.setAttribute("obbligatorio", false);
				}
				listaDirigentiProponentiItem.storeValue(form.getValueAsRecordList(listaDirigentiProponentiItem.getName()));	
				listaDirigentiProponentiItem.manageAfterChangedRequired();
				return showDirigentiProponentiItem();
			}
		});
			
		listaAltriDirigentiProponentiItem = new AltriDirigentiProponentiCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAltriDirigentiProponentiItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioAltriDirigentiProponentiItem();
			}
			
			@Override
			public boolean showMotivi() {
				return showMotiviAltriDirigentiProponentiItem();
			}
			
			@Override
			public boolean isRequiredMotivi() {
				return isRequiredMotiviAltriDirigentiProponentiItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAltriDirigentiProponentiItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);	
				if(isRequiredAltriDirigentiProponentiItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAltriDirigentiProponentiItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAltriDirigentiProponentiItem() + "</span>");
				}
				return lVLayout;
			}
		};
		listaAltriDirigentiProponentiItem.setName("listaAltriDirigentiProponenti");
		listaAltriDirigentiProponentiItem.setStartRow(true);
		listaAltriDirigentiProponentiItem.setShowTitle(false);
		listaAltriDirigentiProponentiItem.setColSpan(20);
		if(isRequiredAltriDirigentiProponentiItem()) {
			listaAltriDirigentiProponentiItem.setAttribute("obbligatorio", true);	
		}
		listaAltriDirigentiProponentiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAltriDirigentiProponentiItem();
			}
		});
		
		String titleCoordinatoriCompCircItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleCoordinatoriCompCircItem() + "</span>";
		if(isRequiredCoordinatoriCompCircItem()) {
			titleCoordinatoriCompCircItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleCoordinatoriCompCircItem()) + "</span>";
		}
		listaCoordinatoriCompCircItem = new CoordinatoriCompCircItem(titleCoordinatoriCompCircItem) {
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_COORDINATORE_COMP_CIRC") && getFlgAbilitaSelectUniqueValueCoordinatoriCompCircItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredCoordinatoriCompCircItem() && getFlgAbilitaSelectUniqueValueCoordinatoriCompCircItem();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboCoordinatoriCompCircItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showCoordinatoriCompCircItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaCoordinatoriCompCircItem.setName("listaCoordinatoriCompCirc");
		listaCoordinatoriCompCircItem.setShowTitle(false);
		listaCoordinatoriCompCircItem.setColSpan(20);
		listaCoordinatoriCompCircItem.setNotReplicable(true);		
		if(isRequiredCoordinatoriCompCircItem()) {
			listaCoordinatoriCompCircItem.setAttribute("obbligatorio", true);
		}
		listaCoordinatoriCompCircItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showCoordinatoriCompCircItem();
			}
		});	
		
		flgRichiediVistoDirettoreItem = new CheckboxItem("flgRichiediVistoDirettore", getTitleFlgRichiediVistoDirettoreItem());
		flgRichiediVistoDirettoreItem.setDefaultValue(false);
		flgRichiediVistoDirettoreItem.setStartRow(true);
		flgRichiediVistoDirettoreItem.setColSpan(20);
		flgRichiediVistoDirettoreItem.setWidth("*");
		flgRichiediVistoDirettoreItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgRichiediVistoDirettoreItem();
			}
		});
		
		listaRespVistiConformitaItem = new RespVistiConformitaCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRespVistiConformitaItem();
			}
			
			@Override
			public boolean isEditableScrivania() {
				return isEditableScrivaniaRespVistiConformitaItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioRespVistiConformitaItem();
			}
			
			@Override
			public boolean showMotivi() {
				return showMotiviRespVistiConformitaItem();
			}

			@Override
			public String getTitleMotivi() {
				return getTitleMotiviRespVistiConformitaItem();
			}
						
			@Override
			public boolean isRequiredMotivi() {
				return isRequiredMotiviRespVistiConformitaItem();
			}
			
			@Override
			public boolean isEditableMotivi() {
				return isEditableMotiviRespVistiConformitaItem();
			}

			@Override
			public boolean showFlgRiacqVistoInRitornoIter() {
				return showFlgRiacqVistoInRitornoIterRespVistiConformitaItem();
			}			
			
			@Override
			public boolean skipValidation() {
				if(showRespVistiConformitaItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);	
				if(isRequiredRespVistiConformitaItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRespVistiConformitaItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRespVistiConformitaItem() + "</span>");
				}
				return lVLayout;
			}
		};
		listaRespVistiConformitaItem.setName("listaRespVistiConformita");
		listaRespVistiConformitaItem.setStartRow(true);
		listaRespVistiConformitaItem.setShowTitle(false);
		listaRespVistiConformitaItem.setColSpan(20);
		if(isRequiredRespVistiConformitaItem()) {
			listaRespVistiConformitaItem.setAttribute("obbligatorio", true);	
		}
		listaRespVistiConformitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showRespVistiConformitaItem();
			}
		});
		
		listaRespUfficioPropItem = new RespUfficioPropCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRespUfficioPropItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioRespUfficioPropItem();
			}
			
			@Override
			public boolean showMotivi() {
				return showMotiviRespUfficioPropItem();
			}
						
			@Override
			public boolean isRequiredMotivi() {
				return isRequiredMotiviRespUfficioPropItem();
			}
			
			@Override
			public boolean showFlgRiacqVistoInRitornoIter() {
				return showFlgRiacqVistoInRitornoIterRespUfficioPropItem();
			}			
			
			@Override
			public boolean skipValidation() {
				if(showRespUfficioPropItem()) {
					return super.skipValidation();
				}
				return true;
			}

			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_UO_PROP") && getFlgAbilitaSelectUniqueValueRespUfficioPropItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredRespUfficioPropItem() && getFlgAbilitaSelectUniqueValueRespUfficioPropItem();
			}
						
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);	
				if(isRequiredRespUfficioPropItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRespUfficioPropItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRespUfficioPropItem() + "</span>");
				}
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaRespUfficioPropItem.setName("listaRespUfficioProp");
		listaRespUfficioPropItem.setStartRow(true);
		listaRespUfficioPropItem.setShowTitle(false);
		listaRespUfficioPropItem.setColSpan(20);
		listaRespUfficioPropItem.setNotReplicable(true);				
		if(isRequiredRespUfficioPropItem()) {
			listaRespUfficioPropItem.setAttribute("obbligatorio", true);	
		}		
		listaRespUfficioPropItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showRespUfficioPropItem();
			}
		});
		
		listaRespVistiPerfezionamentoItem = new RespVistiPerfezionamentoCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRespVistiPerfezionamentoItem();
			}
			
			@Override
			public boolean isEditableScrivania() {
				return isEditableScrivaniaRespVistiPerfezionamentoItem();
			}
			
			@Override
			public boolean showFlgFirmatario() {
				return showFlgFirmatarioRespVistiPerfezionamentoItem();
			}
			
			@Override
			public boolean showMotivi() {
				return showMotiviRespVistiPerfezionamentoItem();
			}
						
			@Override
			public String getTitleMotivi() {
				return getTitleMotiviRespVistiPerfezionamentoItem();
			}

			@Override
			public boolean isRequiredMotivi() {
				return isRequiredMotiviRespVistiPerfezionamentoItem();
			}
			
			@Override
			public boolean isEditableMotivi() {
				return isEditableMotiviRespVistiPerfezionamentoItem();
			}

			@Override
			public boolean showFlgRiacqVistoInRitornoIter() {
				return showFlgRiacqVistoInRitornoIterRespVistiPerfezionamentoItem();
			}			
			
			@Override
			public boolean skipValidation() {
				if(showRespVistiPerfezionamentoItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);	
				if(isRequiredRespVistiPerfezionamentoItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRespVistiPerfezionamentoItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRespVistiPerfezionamentoItem() + "</span>");
				}
				return lVLayout;
			}
		};
		listaRespVistiPerfezionamentoItem.setName("listaRespVistiPerfezionamento");
		listaRespVistiPerfezionamentoItem.setStartRow(true);
		listaRespVistiPerfezionamentoItem.setShowTitle(false);
		listaRespVistiPerfezionamentoItem.setColSpan(20);
		if(isRequiredRespVistiPerfezionamentoItem()) {
			listaRespVistiPerfezionamentoItem.setAttribute("obbligatorio", true);	
		}
		listaRespVistiPerfezionamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showRespVistiPerfezionamentoItem();
			}
		});
				
		flgVistoBilancioItem = new RadioGroupItem("flgVistoBilancio", getTitleFlgVistoBilancioItem());
		flgVistoBilancioItem.setStartRow(true);				
		Map<String, String> flgVistoBilancioValueMap = getValueMapFlgVistoBilancioItem();
		if(flgVistoBilancioValueMap != null && flgVistoBilancioValueMap.keySet().size() > 0) {
			flgVistoBilancioItem.setValueMap(flgVistoBilancioValueMap);			
		} else {
			flgVistoBilancioValueMap = new HashMap<String, String>();
			flgVistoBilancioValueMap.put(_FLG_SI, "SI");
			flgVistoBilancioValueMap.put(_FLG_NO, "NO");
			flgVistoBilancioValueMap.put(_FLG_ALTRO, "SI, di tipo");
			flgVistoBilancioItem.setValueMap(flgVistoBilancioValueMap);
		}
		flgVistoBilancioItem.setDefaultValue(getDefaultValueFlgVistoBilancioItem());
		flgVistoBilancioItem.setVertical(false);
		flgVistoBilancioItem.setWrap(false);
		flgVistoBilancioItem.setShowDisabled(false);
		if(isRequiredFlgVistoBilancioItem()) {
			flgVistoBilancioItem.setAttribute("obbligatorio", true);
		}
		flgVistoBilancioItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgVistoBilancioItem();
			}
		}));
		flgVistoBilancioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgVistoBilancioItem();
			}
		});			
		flgVistoBilancioItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				ruoliForm.markForRedraw();
			}
		});
		
		listaRespVisAltBilancioItem = new ResponsabileVistoAlternativoBilancioCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public boolean skipObbligForEmptySelect() {
				return skipObbligForEmptySelectDirRespVisAltBilancio();
			}
			
			@Override
			public void manageAfterReloadSelectInNotReplicableCanvas(boolean empty) {
				if(skipObbligForEmptySelect()) {
					VLayout lVLayout = getVLayout();
					if(lVLayout != null) {
						if(isRequiredRespVisAltBilancioItem() && !empty) {
							lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRespVisAltBilancioItem()) + "</span>");
						} else {
							lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRespVisAltBilancioItem() + "</span>");
						}
					}					
				}
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboRespVisAltBilancioItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredRespVisAltBilancioItem()) {
					listaRespVisAltBilancioItem.setAttribute("obbligatorio", true);
				} else {
					listaRespVisAltBilancioItem.setAttribute("obbligatorio", false);
				}
				listaRespVisAltBilancioItem.storeValue(ruoliForm.getValueAsRecordList(listaRespVisAltBilancioItem.getName()));
				return super.validate();
			}
						
			@Override
			public boolean skipValidation() {
				if(showRespVisAltBilancioItem()) {
					return super.skipValidation();
				}
				return true;
			}

			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO") && getFlgAbilitaSelectUniqueValueRespVisAltBilancioItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredRespVisAltBilancioItem() && getFlgAbilitaSelectUniqueValueRespVisAltBilancioItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredRespVisAltBilancioItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleRespVisAltBilancioItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleRespVisAltBilancioItem() + "</span>");
				}				
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaRespVisAltBilancioItem.setName("listaRespVisAltBilancio");
		listaRespVisAltBilancioItem.setShowTitle(false);
		listaRespVisAltBilancioItem.setColSpan(20);
		listaRespVisAltBilancioItem.setNotReplicable(true);
//		if(getFlgObbligatorioAttributoCustomCablato("ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO")) {
//			listaRespVisAltBilancioItem.setAttribute("obbligatorio", true);
//		}
		listaRespVisAltBilancioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredRespVisAltBilancioItem()) {
					listaRespVisAltBilancioItem.setAttribute("obbligatorio", true);
				} else {
					listaRespVisAltBilancioItem.setAttribute("obbligatorio", false);
				}
				listaRespVisAltBilancioItem.storeValue(form.getValueAsRecordList(listaRespVisAltBilancioItem.getName()));
				return showRespVisAltBilancioItem();
			}
		});
		
		tipoVistoBilancioItem = new TextAreaItem("tipoVistoBilancio", getTitleTipoVistoBilancioItem());
		tipoVistoBilancioItem.setWidth(500);
		tipoVistoBilancioItem.setHeight(getAltezzaTipoVistoBilancioItem());
		tipoVistoBilancioItem.setLength(4000);
//		tipoVistoBilancioItem.setColSpan(18);		
		tipoVistoBilancioItem.setShowTitle(false);
		tipoVistoBilancioItem.setTitleOrientation(TitleOrientation.TOP);
		tipoVistoBilancioItem.setStartRow(false);
		tipoVistoBilancioItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoVistoBilancioItem();
			}
		}));
		tipoVistoBilancioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredTipoVistoBilancioItem()) {
					tipoVistoBilancioItem.setAttribute("obbligatorio", true);
					tipoVistoBilancioItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleTipoVistoBilancioItem()));
				} else {
					tipoVistoBilancioItem.setAttribute("obbligatorio", false);
					tipoVistoBilancioItem.setTitle(getTitleTipoVistoBilancioItem());
				}
				return showTipoVistoBilancioItem();
			}
		});
		
		flgVistoSGItem = new CheckboxItem("flgVistoSG", getTitleFlgVistoSGItem());
		flgVistoSGItem.setDefaultValue(getDefaultValueAsBooleanFlgVistoSGItem());
		flgVistoSGItem.setStartRow(true);
		flgVistoSGItem.setColSpan(20);
		flgVistoSGItem.setWidth("*");
		flgVistoSGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgVistoSGItem();
			}
		});
		
		flgVistoPresidenteItem = new CheckboxItem("flgVistoPresidente", getTitleFlgVistoPresidenteItem());
		flgVistoPresidenteItem.setDefaultValue(getDefaultValueAsBooleanFlgVistoPresidenteItem());
		flgVistoPresidenteItem.setStartRow(true);
		flgVistoPresidenteItem.setColSpan(20);
		flgVistoPresidenteItem.setWidth("*");
		flgVistoPresidenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgVistoPresidenteItem();
			}
		});
		
		listaEstensoriItem = new EstensoreCompletaItem() {
				
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboEstensoriItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showEstensoriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}	
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_ESTENSORE_MAIN") && getFlgAbilitaSelectUniqueValueEstensoriItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredEstensoriItem() && getFlgAbilitaSelectUniqueValueEstensoriItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredEstensoriItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleEstensoriItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleEstensoriItem() + "</span>");
				}				
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaEstensoriItem.setName("listaEstensori");
		listaEstensoriItem.setShowTitle(false);
		listaEstensoriItem.setColSpan(20);
		listaEstensoriItem.setNotReplicable(true);				
		if(isRequiredEstensoriItem()) {
			listaEstensoriItem.setAttribute("obbligatorio", true);			
		}	
		listaEstensoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showEstensoriItem();
			}
		});	
		
		listaAltriEstensoriItem = new EstensoreCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAltriEstensoriItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAltriEstensoriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}		
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_ESTENSORI") && getFlgAbilitaSelectUniqueValueAltriEstensoriItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredAltriEstensoriItem() && getFlgAbilitaSelectUniqueValueAltriEstensoriItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredAltriEstensoriItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAltriEstensoriItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAltriEstensoriItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		listaAltriEstensoriItem.setName("listaAltriEstensori");
		listaAltriEstensoriItem.setShowTitle(false);
		listaAltriEstensoriItem.setColSpan(20);			
		if(isRequiredAltriEstensoriItem()) {
			listaAltriEstensoriItem.setAttribute("obbligatorio", true);			
		}	
		listaAltriEstensoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAltriEstensoriItem();
			}
		});	
		
		listaIstruttoriItem = new IstruttoreCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboIstruttoriItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showIstruttoriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}		
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_ISTRUTTORE_MAIN") && getFlgAbilitaSelectUniqueValueIstruttoriItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredIstruttoriItem() && getFlgAbilitaSelectUniqueValueIstruttoriItem();
			}
			
			@Override
			public Boolean getFlgAttoMeroIndirizzo() {
				return isAttoMeroIndirizzo();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredIstruttoriItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleIstruttoriItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleIstruttoriItem() + "</span>");
				}				
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaIstruttoriItem.setName("listaIstruttori");
		listaIstruttoriItem.setShowTitle(false);
		listaIstruttoriItem.setColSpan(20);
		listaIstruttoriItem.setNotReplicable(true);				
		if(isRequiredIstruttoriItem()) {
			listaIstruttoriItem.setAttribute("obbligatorio", true);			
		}	
		listaIstruttoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showIstruttoriItem();
			}
		});	
		
		listaAltriIstruttoriItem = new IstruttoreCompletaItem() {
			
			@Override
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboAltriIstruttoriItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showAltriIstruttoriItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}		
			
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("ID_SV_ALTRI_ISTRUTTORI") && getFlgAbilitaSelectUniqueValueAltriIstruttoriItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredAltriIstruttoriItem() && getFlgAbilitaSelectUniqueValueAltriIstruttoriItem();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredAltriIstruttoriItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleAltriIstruttoriItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleAltriIstruttoriItem() + "</span>");
				}				
				return lVLayout;
			}
		};
		listaAltriIstruttoriItem.setName("listaAltriIstruttori");
		listaAltriIstruttoriItem.setShowTitle(false);
		listaAltriIstruttoriItem.setColSpan(20);			
		if(isRequiredAltriIstruttoriItem()) {
			listaAltriIstruttoriItem.setAttribute("obbligatorio", true);			
		}	
		listaAltriIstruttoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAltriIstruttoriItem();
			}
		});	
		
		String titleUtenteRifAttoConsiglioItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleUtenteRifAttoConsiglioItem() + "</span>";
		if(getFlgObbligatorioAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO")) {
			titleUtenteRifAttoConsiglioItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUtenteRifAttoConsiglioItem()) + "</span>";
		}
		listaUtenteRifAttoConsiglioItem = new UtenteRifAttoConsiglioItem(titleUtenteRifAttoConsiglioItem) {
			
//			@Override
//			public String getIdUdAtto() {
//				return getIdUd();
//			}
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboUtenteRifAttoConsiglioItem();
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredUtenteRifAttoConsiglioItem()) {
					listaUtenteRifAttoConsiglioItem.setAttribute("obbligatorio", true);
				} else {
					listaUtenteRifAttoConsiglioItem.setAttribute("obbligatorio", false);
				}
				listaUtenteRifAttoConsiglioItem.storeValue(ruoliForm.getValueAsRecordList(listaUtenteRifAttoConsiglioItem.getName()));	
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showUtenteRifAttoConsiglioItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaUtenteRifAttoConsiglioItem.setName("listaUtenteRifAttoConsiglio");
		listaUtenteRifAttoConsiglioItem.setShowTitle(false);
		listaUtenteRifAttoConsiglioItem.setColSpan(20);
		if(isNotReplicableUtenteRifAttoConsiglioItem()) {
			listaUtenteRifAttoConsiglioItem.setNotReplicable(true);
		}		
//		if(getFlgObbligatorioAttributoCustomCablato("ID_USER_RIF_ATTO_CONSIGLIO")) {
//			listaUtenteRifAttoConsiglioItem.setAttribute("obbligatorio", true);
//		}
		listaUtenteRifAttoConsiglioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredUtenteRifAttoConsiglioItem()) {
					listaUtenteRifAttoConsiglioItem.setAttribute("obbligatorio", true);
				} else {
					listaUtenteRifAttoConsiglioItem.setAttribute("obbligatorio", false);
				}
				listaUtenteRifAttoConsiglioItem.storeValue(form.getValueAsRecordList(listaUtenteRifAttoConsiglioItem.getName()));	
				return showUtenteRifAttoConsiglioItem();
			}
		});			
		
		flgSenzaValidazionePOItem = new CheckboxItem("flgSenzaValidazionePO", getTitleFlgSenzaValidazionePOItem());
		flgSenzaValidazionePOItem.setDefaultValue(getDefaultValueAsBooleanFlgSenzaValidazionePOItem());
		flgSenzaValidazionePOItem.setStartRow(true);
		flgSenzaValidazionePOItem.setColSpan(20);
		flgSenzaValidazionePOItem.setWidth("*");
		flgSenzaValidazionePOItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgSenzaValidazionePOItem();
			}
		});
		
		List<FormItem> items = new ArrayList<FormItem>();

		if(showProponentiItem()) {
			items.add(listaProponentiItem);
		} else {
			if(isAbilToSelUffPropEsteso()) {
				items.add(listaUfficioProponenteItem);
			} else {
				items.add(codUfficioProponenteItem);
				items.add(desUfficioProponenteItem);	
				items.add(flgUfficioProponenteGareItem);
				items.add(ufficioProponenteItem);
			}
		}
		items.add(tipoProvvedimentoItem);
		items.add(sottotipoDeliberaItem);
//		items.add(ufficioGareAcquistiItem);
		items.add(listaUfficioGareAcquistiItem);
		items.add(flgProcExCodAppaltiItem);
		items.add(codUfficioCompetenteItem);
		items.add(desUfficioCompetenteItem);
		items.add(cdrUOCompetenteItem);
		items.add(opzUOCompetenteItem);
		items.add(listaUfficioCompetenteItem);
		items.add(listaRdPCodAppaltiItem);
		items.add(listaRUPCodAppaltiItem);
		items.add(listaAdottanteItem);
		items.add(flgVistoBilancioItem);
		items.add(listaRespVisAltBilancioItem);
		items.add(tipoVistoBilancioItem);
		items.add(flgVistoSGItem);
		items.add(flgVistoPresidenteItem);
		items.add(codProcedimentoRdPUgualeAdottanteItem);
		items.add(centroDiCostoItem);
		items.add(listaDirigentiConcertoItem);
		
		//SPOSTATI *** VECCHIA POSIZIONE ***
		if(isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaDirRespRegTecnicaItem);
			items.add(listaAltriDirRespRegTecnicaItem);
		}
		
		//SPOSTATI *** NUOVA POSIZIONE ***
		if(!isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaEstensoriItem);
			items.add(listaAltriEstensoriItem);
			items.add(listaIstruttoriItem);
			items.add(listaAltriIstruttoriItem);
		}
		
		items.add(listaRdPItem);
		items.add(codProcedimentoRdPItem);
		items.add(desProcedimentoItem);
		items.add(listaRUPItem);
		items.add(listaScrivaniaDECItem);	
		
		//SPOSTATI *** NUOVA POSIZIONE ***
		if(!isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaRespUfficioPropItem);
		}
		
		//SPOSTATI *** NUOVA POSIZIONE ***
		if(!isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaDirRespRegTecnicaItem);
			items.add(listaAltriDirRespRegTecnicaItem);
		}
		
		//SPOSTATI *** NUOVA POSIZIONE ***
		if(!isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaDirigentiProponentiItem);
			items.add(listaAltriDirigentiProponentiItem);
		}
		
		items.add(listaAssessoriItem);
		items.add(listaAltriAssessoriItem);
		items.add(listaProponenteAttoConsiglioItem);
		items.add(listaConsiglieriItem);
		items.add(listaAltriConsiglieriItem);
		items.add(dataTermFirmeConsiglieriItem);
		
		//SPOSTATI *** NUOVA POSIZIONE ***
		if(!isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaUtenteRifAttoConsiglioItem);
		}
		
		//SPOSTATI *** VECCHIA POSIZIONE ***
		if(isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaDirigentiProponentiItem);
			items.add(listaAltriDirigentiProponentiItem);
		}
		
		items.add(listaCoordinatoriCompCircItem);
		items.add(flgRichiediVistoDirettoreItem);
		items.add(listaRespVistiConformitaItem);
		items.add(listaRespVistiPerfezionamentoItem);
		
		//SPOSTATI *** VECCHIA POSIZIONE ***
		if(isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaRespUfficioPropItem);
		}
		
		//SPOSTATI *** VECCHIA POSIZIONE ***
		if(isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaEstensoriItem);
			items.add(listaAltriEstensoriItem);
			items.add(listaIstruttoriItem);
			items.add(listaAltriIstruttoriItem);
		}
		
		//SPOSTATI *** VECCHIA POSIZIONE ***
		if(isAttivoVecchioOrdineCampiRuoliAtto()) {
			items.add(listaUtenteRifAttoConsiglioItem);
		}
		
		items.add(flgSenzaValidazionePOItem);
		
		ruoliForm.setFields(items.toArray(new FormItem[items.size()]));		
	}
	
	public boolean isAttivoVecchioOrdineCampiRuoliAtto() {
		// per COTO rimane attivo il vecchio ordinamento dei campi relativi ai ruoli
		return AurigaLayout.getParametroDBAsBoolean("ATTIVA_VECCHIO_ORDINE_RUOLI_ATTO");
	}
	
	/************************************** 
	 * DATI SCHEDA - VISTI DIR. SUPERIORI *
	 **************************************/
	
	public boolean showDetailSectionVistiDirSuperiori() {
		Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
		if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoRespUffVisibilita") && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup1Visibilita") && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup2Visibilita")) {
			return false;
		}
		return showAttributoCustomCablato("VISTI_DIR_SUPERIORI");
	}
	
	public String getTitleDetailSectionVistiDirSuperiori() {
		String label = getLabelAttributoCustomCablato("VISTI_DIR_SUPERIORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Visti dir. superiori";	 
	}
	
	public boolean isRequiredDetailSectionVistiDirSuperiori() {
		return false;
	}
	
	protected void createDetailSectionVistiDirSuperiori() {
		
		createVistiDirSuperioriForm();
		
		detailSectionVistiDirSuperiori = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionVistiDirSuperiori(), true, true, isRequiredDetailSectionVistiDirSuperiori(), vistiDirSuperioriForm);
	}
	
	public boolean showFlgVistoRespUffItem() {
		Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
		if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoRespUffVisibilita")) {
			return false;
		}
		return showDetailSectionVistiDirSuperiori() && showAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF");
	}
		
	public String getTitleFlgVistoRespUffItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto responsabile d'ufficio";	
	}
	
	public boolean isRequiredFlgVistoRespUffItem() {
		return showFlgVistoRespUffItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF");
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoRespUffItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF");
	}
	
	public boolean showFlgVistoDirSup1Item() {
		Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
		if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup1Visibilita")) {
			return false;
		}
		return showDetailSectionVistiDirSuperiori() && showAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1");
	}
		
	public String getTitleFlgVistoDirSup1Item() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto dirigente di area";	
	}
	
	public boolean isRequiredFlgVistoDirSup1Item() {
		return showFlgVistoDirSup1Item() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1");
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoDirSup1Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1");
	}
	
	public boolean showFlgVistoDirSup2Item() {
		Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
		if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup2Visibilita")) {
			return false;
		}
		return showDetailSectionVistiDirSuperiori() && showAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2");
	}
		
	public String getTitleFlgVistoDirSup2Item() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto direttore di divisione";	
	}
	
	public boolean isRequiredFlgVistoDirSup2Item() {
		return showFlgVistoDirSup2Item() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2");
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoDirSup2Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2");
	}
	
	protected void createVistiDirSuperioriForm() {
		
		vistiDirSuperioriForm = new DynamicForm();
		vistiDirSuperioriForm.setValuesManager(vm);
		vistiDirSuperioriForm.setWidth100();
		vistiDirSuperioriForm.setPadding(5);
		vistiDirSuperioriForm.setWrapItemTitles(false);
		vistiDirSuperioriForm.setNumCols(20);
		vistiDirSuperioriForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		vistiDirSuperioriForm.setTabSet(tabSet);
		vistiDirSuperioriForm.setTabID(_TAB_DATI_SCHEDA_ID);
		vistiDirSuperioriForm.setHeight(1);
		
		flgVistoRespUffItem = new CheckboxItem("flgVistoRespUff", getTitleFlgVistoRespUffItem());
		flgVistoRespUffItem.setDefaultValue(getDefaultValueAsBooleanFlgVistoRespUffItem());
		flgVistoRespUffItem.setColSpan(1);
		flgVistoRespUffItem.setWidth("*");			
		flgVistoRespUffItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {		
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				flgVistoRespUffItem.setDisabled(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoRespUffEditabile"));
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie") != null;
				return showFlgVistoRespUffItem() && !showSelectScrivanie;
			}
		});
		
		flgVistoDirSup1Item = new CheckboxItem("flgVistoDirSup1", getTitleFlgVistoDirSup1Item());
		flgVistoDirSup1Item.setDefaultValue(getDefaultValueAsBooleanFlgVistoDirSup1Item());
		flgVistoDirSup1Item.setColSpan(1);
		flgVistoDirSup1Item.setWidth("*");			
		flgVistoDirSup1Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				flgVistoDirSup1Item.setDisabled(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup1Editabile"));				
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie") != null;
				return showFlgVistoDirSup1Item() && !showSelectScrivanie;
			}
		});
		
		flgVistoDirSup2Item = new CheckboxItem("flgVistoDirSup2", getTitleFlgVistoDirSup2Item());
		flgVistoDirSup2Item.setDefaultValue(getDefaultValueAsBooleanFlgVistoDirSup2Item());
		flgVistoDirSup2Item.setColSpan(1);
		flgVistoDirSup2Item.setWidth("*");			
		flgVistoDirSup2Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {		
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				flgVistoDirSup2Item.setDisabled(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup2Editabile"));				
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie") != null;
				return showFlgVistoDirSup2Item() && !showSelectScrivanie;
			}
		});
		
		idScrivaniaVistoRespUffItem = new SelectItem("idScrivaniaVistoRespUff", getTitleFlgVistoRespUffItem());
		idScrivaniaVistoRespUffItem.setStartRow(true);
		idScrivaniaVistoRespUffItem.setWidth(650);
		idScrivaniaVistoRespUffItem.setAllowEmptyValue(true);
		idScrivaniaVistoRespUffItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {		
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoRespUffEditabile")) {
					item.setCanEdit(false);	
				} else {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF") ? editing : false);
				}					
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie") != null;
				return showFlgVistoRespUffItem() && showSelectScrivanie;
			}
		});
		if(isRequiredFlgVistoRespUffItem()) {
			idScrivaniaVistoRespUffItem.setAttribute("obbligatorio", true);
		}
		idScrivaniaVistoRespUffItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie") != null;
				return isRequiredFlgVistoRespUffItem() && showSelectScrivanie;
			}
		}));
		
		idScrivaniaVistoDirSup1Item = new SelectItem("idScrivaniaVistoDirSup1", getTitleFlgVistoDirSup1Item());
		idScrivaniaVistoDirSup1Item.setStartRow(true);	
		idScrivaniaVistoDirSup1Item.setWidth(650);
		idScrivaniaVistoDirSup1Item.setAllowEmptyValue(true);
		idScrivaniaVistoDirSup1Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup1Editabile")) {
					item.setCanEdit(false);	
				} else {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1") ? editing : false);
				}	
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie") != null;
				return showFlgVistoDirSup1Item() && showSelectScrivanie;
			}
		});
		if(isRequiredFlgVistoDirSup1Item()) {
			idScrivaniaVistoDirSup1Item.setAttribute("obbligatorio", true);
		}
		idScrivaniaVistoDirSup1Item.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie") != null;
				return isRequiredFlgVistoDirSup1Item() && showSelectScrivanie;
			}
		}));
		
		idScrivaniaVistoDirSup2Item = new SelectItem("idScrivaniaVistoDirSup2", getTitleFlgVistoDirSup2Item());		
		idScrivaniaVistoDirSup2Item.setStartRow(true);		
		idScrivaniaVistoDirSup2Item.setWidth(650);
		idScrivaniaVistoDirSup2Item.setAllowEmptyValue(true);
		idScrivaniaVistoDirSup2Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {		
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				if(recordOpzUOCompetente != null && !recordOpzUOCompetente.getAttributeAsBoolean("flgVistoDirSup2Editabile")) {
					item.setCanEdit(false);	
				} else {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2") ? editing : false);
				}	
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie") != null;
				return showFlgVistoDirSup2Item() && showSelectScrivanie;
			}
		});
		if(isRequiredFlgVistoDirSup2Item()) {
			idScrivaniaVistoDirSup2Item.setAttribute("obbligatorio", true);
		}
		idScrivaniaVistoDirSup2Item.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
				boolean showSelectScrivanie = recordOpzUOCompetente != null && recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie") != null;
				return isRequiredFlgVistoDirSup2Item() && showSelectScrivanie;
			}
		}));
		
		vistiDirSuperioriForm.setFields(flgVistoRespUffItem, flgVistoDirSup1Item, flgVistoDirSup2Item, idScrivaniaVistoRespUffItem, idScrivaniaVistoDirSup1Item, idScrivaniaVistoDirSup2Item);			
	}
	
	/*********************************************** 
	 * DATI SCHEDA - PARERE DELLA/E CIRCOSCRIZIONI *
	 ***********************************************/
	
	public boolean showDetailSectionParereCircoscrizioni() {
		return showParereCircoscrizioniItem();
	}
	
	public String getTitleDetailSectionParereCircoscrizioni() {
		return getTitleParereCircoscrizioniItem();
	}
	
	public boolean isRequiredDetailSectionParereCircoscrizioni() {
		return isRequiredParereCircoscrizioniItem();
	}		
	
	protected void createDetailSectionParereCircoscrizioni() {
		
		createParereCircoscrizioniForm();
		
		detailSectionParereCircoscrizioni = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionParereCircoscrizioni(), true, true, isRequiredDetailSectionParereCircoscrizioni(), parereCircoscrizioniForm);
	}
	
	public boolean showParereCircoscrizioniItem() {
		return showAttributoCustomCablato("COD_CIRCOSCRIZIONE_X_PARERE");
	}
	
	public String getTitleParereCircoscrizioniItem() {
		String label = getLabelAttributoCustomCablato("COD_CIRCOSCRIZIONE_X_PARERE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Parere della/e circoscrizioni"; 
	}
	
	public boolean isRequiredParereCircoscrizioniItem() {
		return showParereCircoscrizioniItem() && getFlgObbligatorioAttributoCustomCablato("COD_CIRCOSCRIZIONE_X_PARERE");
	}	
	
	public String getAltriParamLoadComboParereCircoscrizioniItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("COD_CIRCOSCRIZIONE_X_PARERE");
	}
	
	protected void createParereCircoscrizioniForm() {
		
		parereCircoscrizioniForm = new DynamicForm();
		parereCircoscrizioniForm.setValuesManager(vm);
		parereCircoscrizioniForm.setWidth100();
		parereCircoscrizioniForm.setPadding(5);
		parereCircoscrizioniForm.setWrapItemTitles(false);
		parereCircoscrizioniForm.setNumCols(20);
		parereCircoscrizioniForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		parereCircoscrizioniForm.setTabSet(tabSet);
		parereCircoscrizioniForm.setTabID(_TAB_DATI_SCHEDA_ID);
		parereCircoscrizioniForm.setHeight(1);
		
		listaParereCircoscrizioniItem = new ValoriDizionarioItem() {
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboParereCircoscrizioniItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showParereCircoscrizioniItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
		};
		listaParereCircoscrizioniItem.setName("listaParereCircoscrizioni");
		listaParereCircoscrizioniItem.setStartRow(true);
		listaParereCircoscrizioniItem.setShowTitle(false);
		listaParereCircoscrizioniItem.setColSpan(20);
		if(isRequiredParereCircoscrizioniItem()) {
			listaParereCircoscrizioniItem.setAttribute("obbligatorio", true);
		}
		listaParereCircoscrizioniItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showParereCircoscrizioniItem();
			}
		});
		
		parereCircoscrizioniForm.setFields(listaParereCircoscrizioniItem);			
	}
	
	/******************************************** 
	 * DATI SCHEDA - PARERE DELLA/E COMMISSIONI *
	 ********************************************/
		
	public boolean showDetailSectionParereCommissioni() {
		if(showAttributoCustomCablato("SEZ_COMMISSIONI")) {
			return showFlgCommissioniItem() || showParereCommissioniItem();
		}
		return showParereCommissioniItem();
	}
	
	public String getTitleDetailSectionParereCommissioni() {
		if(showAttributoCustomCablato("SEZ_COMMISSIONI")) {
			String label = getLabelAttributoCustomCablato("SEZ_COMMISSIONI");
			if(label != null && !"".equals(label)) {
				return label;
			}
			return "Commissioni";
		}
		return getTitleParereCommissioniItem();
	}
	
	public boolean isRequiredDetailSectionParereCommissioni() {
		if(showAttributoCustomCablato("SEZ_COMMISSIONI")) {
			return !showFlgCommissioniItem() && isRequiredParereCommissioniItem();
		}
		return isRequiredParereCommissioniItem();
	}		
	
	public boolean showFlgCommissioniItemInSezCommissioni() {	
		return showAttributoCustomCablato("SEZ_COMMISSIONI");
	}
	
	public boolean showFlgCommissioniItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI") && showFlgCommissioniItemInSezCommissioni();
	}
	
	public String getTitleFlgCommissioniItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "per commissioni"; 
	}
	
	public boolean getDefaultValueAsBooleanFlgCommissioniItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI");
	}		
	
	protected void createDetailSectionParereCommissioni() {
		
		createParereCommissioniForm();
		
		detailSectionParereCommissioni = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionParereCommissioni(), true, true, isRequiredDetailSectionParereCommissioni(), parereCommissioniForm);
	}
	
	public boolean showParereCommissioniItem() {
		if(showFlgCommissioniItem()) {
			return showAttributoCustomCablato("COD_COMMISSIONE_X_PARERE") && getValueAsBoolean("flgCommissioni");
		}
		return showAttributoCustomCablato("COD_COMMISSIONE_X_PARERE");
	}
	
	public String getTitleParereCommissioniItem() {
		String label = getLabelAttributoCustomCablato("COD_COMMISSIONE_X_PARERE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Parere della/e commissioni"; 
	}
	
	public boolean isRequiredParereCommissioniItem() {
		return showParereCommissioniItem() && getFlgObbligatorioAttributoCustomCablato("COD_COMMISSIONE_X_PARERE");
	}	
	
	public boolean getFlgAbilitaSelectUniqueValueParereCommissioniItem() {
		return getFlgAbilitaSelectUniqueValueAttributoCustomCablato("COD_COMMISSIONE_X_PARERE");
	}
	
	public String getAltriParamLoadComboParereCommissioniItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("COD_COMMISSIONE_X_PARERE");
	}
	
	protected void createParereCommissioniForm() {
		
		parereCommissioniForm = new DynamicForm();
		parereCommissioniForm.setValuesManager(vm);
		parereCommissioniForm.setWidth100();
		parereCommissioniForm.setPadding(5);
		parereCommissioniForm.setWrapItemTitles(false);
		parereCommissioniForm.setNumCols(20);
		parereCommissioniForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		parereCommissioniForm.setTabSet(tabSet);
		parereCommissioniForm.setTabID(_TAB_DATI_SCHEDA_ID);
		parereCommissioniForm.setHeight(1);
		
		flgCommissioniItem = new CheckboxItem("flgCommissioni", getTitleFlgCommissioniItem());
		flgCommissioniItem.setDefaultValue(getDefaultValueAsBooleanFlgCommissioniItem());
		flgCommissioniItem.setColSpan(1);
		flgCommissioniItem.setWidth("*");
		flgCommissioniItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
//				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
//				enableDisableTabs();
//				showHideSections();
				parereCommissioniForm.markForRedraw();
			}
		});
		flgCommissioniItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgCommissioniItem();
			}
		});
		
		listaParereCommissioniItem = new ParereCommissioniItem() {
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboParereCommissioniItem();
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
						
			@Override
			public boolean getFlgAbilitaAutoFetchDataSelectOrganigramma() {
				return getFlgObbligatorioAttributoCustomCablato("COD_COMMISSIONE_X_PARERE") && getFlgAbilitaSelectUniqueValueParereCommissioniItem();
			}
			
			@Override
			public boolean selectUniqueValueAfterChangedParams() {
				return isRequiredParereCommissioniItem() && getFlgAbilitaSelectUniqueValueParereCommissioniItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showParereCommissioniItem()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				if(showAttributoCustomCablato("SEZ_COMMISSIONI")) {
					lVLayout.setWidth100();
					lVLayout.setPadding(11);
					lVLayout.setMargin(4);
					lVLayout.setIsGroup(true);
					lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
					if(isRequiredParereCommissioniItem()) {
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleParereCommissioniItem()) + "</span>");
					} else {
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleParereCommissioniItem() + "</span>");
					}				
				}
				return lVLayout;
			}
		};
		listaParereCommissioniItem.setName("listaParereCommissioni");
		listaParereCommissioniItem.setStartRow(true);
		listaParereCommissioniItem.setShowTitle(false);
		listaParereCommissioniItem.setColSpan(20);
		if(isRequiredParereCommissioniItem()) {
			listaParereCommissioniItem.setAttribute("obbligatorio", true);
		}
		listaParereCommissioniItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showParereCommissioniItem();
			}
		});				
		
		parereCommissioniForm.setFields(flgCommissioniItem, listaParereCommissioniItem);			
	}

	/************************* 
	 * DATI SCHEDA - OGGETTO *
	 *************************/
	
	public boolean showDetailSectionDesOgg() {
		return showDesOggItem();
	}
	
	public String getTitleDetailSectionDesOgg() {
		return getTitleDesOggItem();
	}
	
	public boolean isRequiredDetailSectionDesOgg() {
		return true;
	}
	
	protected void createDetailSectionDesOgg() {
		
		createDesOggForm();
		
		detailSectionDesOgg = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDesOgg(), true, true, isRequiredDetailSectionDesOgg(), desOggForm);
	}
	
	public boolean showDesOggItem() {
		return isPresenteAttributoCustomCablato("DES_OGG");
	}
	
	public String getTitleDesOggItem() {
		String label = getLabelAttributoCustomCablato("DES_OGG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Oggetto descrittivo";
	}
	
	protected void createDesOggForm() {
		
		desOggForm = new DynamicForm();
		desOggForm.setValuesManager(vm);
		desOggForm.setWidth100();
		desOggForm.setPadding(5);
		desOggForm.setWrapItemTitles(false);
		desOggForm.setNumCols(20);
		desOggForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		desOggForm.setTabSet(tabSet);
		desOggForm.setTabID(_TAB_DATI_SCHEDA_ID);
		desOggForm.setHeight(1);
		
		desOggItem = new ExtendedTextAreaItem("desOgg");
		desOggItem.setShowTitle(false);
		desOggItem.setColSpan(20);
		desOggItem.setLength(4000);
		desOggItem.setHeight(60);
		desOggItem.setWidth("100%");
		desOggItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDesOggItem();
			}
		});
		desOggItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showDesOggItem();
			}
		}));
		desOggItem.addChangedBlurHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				String desOgg = (String) event.getValue();
				if(desOgg != null && !"".equals(desOgg)) {
					if(oggettoHtmlItem != null) {
						String oggettoHtml = oggettoHtmlItem.getValue();
						if(oggettoHtml == null || "".equals(oggettoHtml.trim())) {
							oggettoHtmlItem.setValue("<p>" + desOgg + "</p>");
						}
					}				
				}
			}
		});
		
		desOggForm.setFields(desOggItem);			
	}
	
	public boolean showDetailSectionOggetto() {
		return showOggettoHtmlItem();
	}
	
	public String getTitleDetailSectionOggetto() {
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionOggetto_title();
	}
	
	public boolean isRequiredDetailSectionOggetto() {
		return isRequiredOggettoHtmlItem();
	}
				
	protected void createDetailSectionOggetto() {
		
		createOggettoForm();
		
		detailSectionOggetto = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOggetto(), true, true, isRequiredDetailSectionOggetto(), oggettoForm);
	}
	
	public boolean showOggettoHtmlItem() {
		if(isPresenteAttributoCustomCablato("NASCONDI_OGGETTO") || !show_DETAIL_SECTION_OGGETTO()) {
			return false;
		}
		return true;
	}
	
	public boolean isRequiredOggettoHtmlItem() {
		return showOggettoHtmlItem();
	}
	
	public int getLengthOggettoHtmlItem() {
		String length = AurigaLayout.getParametroDB("OGGETTO_ATTI_LENGHT");
		return length != null && !"".equals(length) ? Integer.parseInt(length) : 4000;
	}
	
	public boolean getUpperCaseOggettoHtmlItem() {
		Boolean uppercase = AurigaLayout.getParametroDBAsBoolean("UPPERCASE_OGGETTO_ATTO");
		return uppercase != null && uppercase;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileOggettoHtmlItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("OGGETTO_HTML");
	}
	
	public boolean getFlgIgnoraGestioneOmissisOggettoHtmlItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("OGGETTO_HTML");
	}
	
	protected void createOggettoForm() {
		
		oggettoForm = new DynamicForm();
		oggettoForm.setValuesManager(vm);
		oggettoForm.setWidth100();
		oggettoForm.setPadding(5);
		oggettoForm.setWrapItemTitles(false);
		oggettoForm.setNumCols(20);
		oggettoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		oggettoForm.setTabSet(tabSet);
		oggettoForm.setTabID(_TAB_DATI_SCHEDA_ID);
		oggettoForm.setHeight(1);
		
		oggettoItem = new HiddenItem("oggetto");
//		oggettoItem.setRequired(true);
//		oggettoItem.setShowTitle(false);
//		oggettoItem.setColSpan(20);
//		oggettoItem.setLength(4000);
//		oggettoItem.setHeight(60);
//		oggettoItem.setWidth("100%");
		
		oggettoHtmlItem = new CKEditorItem("oggettoHtml", getLengthOggettoHtmlItem(), "restricted", 4, -1, "", getUpperCaseOggettoHtmlItem(), false, getFlgAbilitaIniezioneCkEditorDaFileOggettoHtmlItem(), getFlgIgnoraGestioneOmissisOggettoHtmlItem()) {
			
			@Override
			public Boolean validate() {
				if(showOggettoHtmlItem()) {
					return super.validate();
				}
				return true;			
			}
		};
		oggettoHtmlItem.setShowTitle(false);
		oggettoHtmlItem.setColSpan(20);
		oggettoHtmlItem.setWidth("100%");	
		oggettoHtmlItem.setRequired(isRequiredOggettoHtmlItem());
		oggettoHtmlItem.setVisible(showOggettoHtmlItem());	
		
		oggettoForm.setFields(oggettoItem, oggettoHtmlItem);			
	}
	
	/************************************* 
	 * DATI SCHEDA - ATTO DI RIFERIMENTO *
	 *************************************/
	
	public boolean showDetailSectionAttoRiferimento() {
		return showAttributoCustomCablato("ATTO_RIFERIMENTO");
	}
			
	public String getTitleDetailSectionAttoRiferimento() {
		String label = getLabelAttributoCustomCablato("ATTO_RIFERIMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Atto di riferimento";
	}
	
	public boolean isRequiredDetailSectionAttoRiferimento() {
		return getFlgObbligatorioAttributoCustomCablato("ATTO_RIFERIMENTO");
	}
	
	public boolean isNotReplicableDetailSectionAttiRiferimento() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("ATTO_RIFERIMENTO");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}
	
	protected void createDetailSectionAttoRiferimento() {
		
		createAttoRiferimentoForm();
		
		detailSectionAttoRiferimento = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionAttoRiferimento(), true, true, isRequiredDetailSectionAttoRiferimento(), attoRiferimentoForm);
	}
	
	public boolean showFlgAttoRifASistemaItem() {
		return showAttributoCustomCablato("ATTO_RIF_A_SISTEMA");
	}
	
	public String getTitleFlgAttoRifASistemaItem() {
		String label = getLabelAttributoCustomCablato("ATTO_RIF_A_SISTEMA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Presente a sistema"; 
	}
	
	public boolean isRequiredFlgAttoRifASistemaItem() {
		return showFlgAttoRifASistemaItem() && getFlgObbligatorioAttributoCustomCablato("ATTO_RIF_A_SISTEMA");
	}
	
	public String getDefaultValueFlgAttoRifASistemaItem() {
		return getValoreFissoAttributoCustomCablato("ATTO_RIF_A_SISTEMA");
	}
	
	protected void createAttoRiferimentoForm() {
		
		attoRiferimentoForm = new DynamicForm();
		attoRiferimentoForm.setValuesManager(vm);
		attoRiferimentoForm.setWidth100();
		attoRiferimentoForm.setPadding(5);
		attoRiferimentoForm.setWrapItemTitles(false);
		attoRiferimentoForm.setNumCols(20);
		attoRiferimentoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		attoRiferimentoForm.setTabSet(tabSet);
		attoRiferimentoForm.setTabID(_TAB_DATI_SCHEDA_ID);
		attoRiferimentoForm.setHeight(1);
		
		listaAttiRiferimentoItem = new AttiRiferimentoItem() {
			
			@Override
			public boolean isRequiredAttoRiferimento() {
				return isRequiredDetailSectionAttoRiferimento();
			}

			@Override
			public boolean isFromDeterminaAggiudicaProceduraGara() {
				return isDeterminaAggiudicaProceduraGara();
			}
			
			@Override
			public boolean isFromDeterminaRimodulazioneSpesaGaraAggiudicata() {
				return isDeterminaRimodulazioneSpesaGaraAggiudicata();
			}
			
			@Override
			public boolean isFromRatificaDeliberaUrgenza() {
				return isRatificaDeliberaUrgenza();
			}
						
			@Override
			public boolean showFlgPresentaASistemaItem() {
				return showFlgAttoRifASistemaItem();
			}
			
			@Override
			public String getTitleFlgPresentaASistemaItem() {
				return getTitleFlgAttoRifASistemaItem();
			}
			
			@Override
			public String getDefaultValueFlgPresentaASistemaItem() {
				return getDefaultValueFlgAttoRifASistemaItem();
			}
			
			@Override
			public boolean isRequiredFlgPresentaASistemaItem() {
				return isRequiredFlgAttoRifASistemaItem();
			}
			
			@Override
			public boolean isEditabileFlgPresentaASistemaItem() {
				return getFlgEditabileAttributoCustomCablato("ATTO_RIF_A_SISTEMA");
			}
			
			@Override
			public String getTitleCategoriaReg() {
				String label = getLabelAttributoCustomCablato("ATTO_RIFERIMENTO_CATEGORIA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return null;
			}
			
			@Override
			public HashMap<String, String> getValueMapCategoriaReg() {
				return getValueMapAttributoCustomCablato("ATTO_RIFERIMENTO_CATEGORIA");
			}
			
			@Override
			public String getDefaultValueCategoriaReg() {
				return getValoreFissoAttributoCustomCablato("ATTO_RIFERIMENTO_CATEGORIA");
			}
			
			@Override
			public boolean showTipoAttoRif() {
				return showAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");
			}
			
			@Override
			public String getTitleTipoAttoRif() {
				String label = getLabelAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Tipo";
			}
			
			@Override
			public boolean isRequiredTipoAttoRif() {
				return showTipoAttoRif() && getFlgObbligatorioAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");				
			}						
			
			@Override
			public String getDefaultValueTipoAttoRif() {
				return getValoreFissoAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");
			}
			
			@Override
			public String getTipoLoadComboTipoAttoRif() {
				return getTipoLoadComboAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");
			}
			
			@Override
			public String getAltriParamLoadComboTipoAttoRif() {
				return getAltriParametriLoadComboAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");
			}
			
			@Override
			public boolean getFlgSoloVldLoadComboTipoAttoRif() {
				return getFlgSoloVldLoadComboAttributoCustomCablato("ATTO_RIFERIMENTO_TIPO");
			}
			
			@Override
			public boolean skipValidation() {
				if(showDetailSectionAttoRiferimento()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaAttiRiferimentoItem.setName("listaAttiRiferimento");
		listaAttiRiferimentoItem.setShowTitle(false);
		listaAttiRiferimentoItem.setColSpan(20);
		if(isNotReplicableDetailSectionAttiRiferimento()) {
			listaAttiRiferimentoItem.setNotReplicable(true);
		}
		if(isRequiredDetailSectionAttoRiferimento()) {
			listaAttiRiferimentoItem.setAttribute("obbligatorio", true);
		}
		listaAttiRiferimentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionAttoRiferimento();
			}
		});	
		
		attoRiferimentoForm.setFields(listaAttiRiferimentoItem);
	}
	
	/******************************************** 
	 * DATI SCHEDA - SPECIFICITA' PROVVEDIMENTO *
	 ********************************************/
	
	public boolean showDetailSectionCaratteristicheProvvedimento() {
		//TODO qui bisogna mettere tutti gli showIf degli item, mancano ad es. flgMEPACONSIP, flgServeDUVRI e imponibileComplessivo
		// per quello nascondento NRO_GARA non si vedeva più la sezione, ho dovuto aggiungere SEZ_SPECIFICITA_PROVVEDIMENTO
		return showAttributoCustomCablato("SEZ_SPECIFICITA_PROVVEDIMENTO") ||
			   showOggLiquidazioneItem() ||
			   showDataScadenzaLiquidazioneItem() ||
			   showUrgenzaLiquidazioneItem() || 
			   showFlgLiqXUffCassaItem() ||
			   showImportoAnticipoCassaItem() ||
			   showDataDecorrenzaContrattoItem() ||
			   showAnniDurataContrattoItem() ||
			   showFlgAffidamentoItem() ||
			   showFlgDeterminaAContrarreTramiteProceduraGaraItem() ||
			   showFlgDeterminaAggiudicaProceduraGaraItem() ||
			   showFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem() ||
			   showFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem() ||
			   showFlgDeterminaRiaccertamentoItem() ||
			   showFlgDeterminaAccertRadiazItem() ||
			   showFlgDeterminaVariazBilItem() ||
			   showFlgVantaggiEconomiciItem() ||
			   showFlgDecretoReggioItem() ||
			   showFlgAvvocaturaItem() ||
			   showFlgDeterminaArchiviazioneItem() ||
			   showFlgContributiItem() ||
			   showFlgSpesaItem() ||
			   showFlgDatiRilevantiGSAItem() ||
			   showAnnoContabileCompetenzaItem() ||
			   showFlgCorteContiItem() ||
			   showFlgLiqContestualeImpegnoItem() || 
			   showFlgLiqContestualeAltriAspettiRilContItem() ||
			   showFlgDetConLiquidazioneItem() ||
			   showFlgCompQuadroFinRagDecItem() ||
			   showFlgNuoviImpAccItem() ||
			   showFlgImpSuAnnoCorrenteItem() ||
			   showFlgInsMovARagioneriaItem() ||
			   showFlgPresaVisioneContabilitaItem() ||	
			   showFlgSpesaCorrenteItem() ||
			   showFlgImpegniCorrenteGiaValidatiItem() ||
			   showFlgSpesaContoCapitaleItem() ||
			   showFlgImpegniContoCapitaleGiaRilasciatiItem() ||
			   showFlgSoloSubImpSubCronoItem() ||
			   showTipoAttoInDeliberaPEGItem() ||
			   showTipoAffidamentoItem() ||
			   showNormRifAffidamentoItem() ||
			   showRespAffidamentoItem() ||
			   showMateriaTipoAttoItem() ||
			   showTipoFinanziamentoPNRRItem() ||
			   showFlgSottotipoAttoItem() ||
			   showFlgTipoIterItem() ||
			   showFlgFondiEuropeiPONItem() ||
			   showFlgFondiPNRRRadioItem() ||
			   showFlgFondiPNRRItem() ||
			   showFlgFondiPNRRRigenItem() ||
			   showFlgFondiPRUItem() ||
			   showFlgVistoUtenzeItem() ||
			   showFlgVistoCapitolatiSottoSogliaItem() ||
			   showFlgVistoCapitolatiSopraSogliaItem() ||
			   showFlgVistoPar117_2013Item() ||
			   showFlgNotificaDaMessiItem() ||		
			   showFlgLLPPItem() ||
			   showFlgBeniServiziItem() ||
			   showFlgProgrammazioneAcquistiItem() ||
			   showFlgPrivacyItem() ||
			   showFlgDatiProtettiTipo1Item() ||
			   showFlgDatiProtettiTipo2Item() ||
			   showFlgDatiProtettiTipo3Item() ||
			   showFlgDatiProtettiTipo4Item() ||
			   showNumGaraItem();
	}
	
	public String getTitleDetailSectionCaratteristicheProvvedimento() {		
		String label = getLabelAttributoCustomCablato("SEZ_SPECIFICITA_PROVVEDIMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionCaratteristicheProvvedimento_title();
	}
	
	public boolean isRequiredDetailSectionCaratteristicheProvvedimento() {
		//TODO anche qui bisogna gestire tutti i required
		return isRequiredOggLiquidazioneItem() ||
			   isRequiredDataScadenzaLiquidazioneItem() ||
			   isRequiredUrgenzaLiquidazioneItem() || 
			   isRequiredImportoAnticipoCassaItem() ||
			   isRequiredDataDecorrenzaContrattoItem() ||
			   isRequiredAnniDurataContrattoItem() ||			   
			   isRequiredFlgSpesaItem() ||	
			   isRequiredFlgDatiRilevantiGSAItem() ||
			   isRequiredTipoAttoInDeliberaPEGItem() ||
			   isRequiredTipoAffidamentoItem() ||
			   isRequiredNormRifAffidamentoItem() ||
			   isRequiredRespAffidamentoItem() ||
			   isRequiredMateriaTipoAttoItem() ||
			   isRequiredTipoFinanziamentoPNRRItem() ||
			   isRequiredFlgSottotipoAttoItem() ||
			   isRequiredFlgTipoIterItem() ||
			   isRequiredFlgLLPPItem() ||
			   isRequiredFlgBeniServiziItem() ||
			   isRequiredFlgProgrammazioneAcquistiItem() ||
			   isRequiredFlgPrivacyItem();	
	}
	
	protected void createDetailSectionCaratteristicheProvvedimento() {
		
		createCaratteristicheProvvedimentoForm();
		
		detailSectionCaratteristicheProvvedimento = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionCaratteristicheProvvedimento(), true, true, isRequiredDetailSectionCaratteristicheProvvedimento(), caratteristicheProvvedimentoForm);
	}
	
	public boolean showOggLiquidazioneItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_OGG_LIQUIDAZIONE");
	}
	
	public String getTitleOggLiquidazioneItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_OGG_LIQUIDAZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Liquidazione di";
	}
	
	public boolean isRequiredOggLiquidazioneItem() {
		return showOggLiquidazioneItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_OGG_LIQUIDAZIONE");
	}
		
	public String getDefaultValueOggLiquidazioneItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_OGG_LIQUIDAZIONE");
	}
	
	public String getAltriParamLoadComboOggLiquidazioneItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("TASK_RESULT_2_OGG_LIQUIDAZIONE");
	}
	
	public boolean showDataScadenzaLiquidazioneItem() {
		return showAttributoCustomCablato("SCADENZA_LIQUIDAZIONE");
	}
	
	public String getTitleDataScadenzaLiquidazioneItem() {
		String label = getLabelAttributoCustomCablato("SCADENZA_LIQUIDAZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Scadenza liquidazione";
	}
	
	public boolean isRequiredDataScadenzaLiquidazioneItem() {
		return showDataScadenzaLiquidazioneItem() && getFlgObbligatorioAttributoCustomCablato("SCADENZA_LIQUIDAZIONE");
	}
		
	public String getDefaultValueDataScadenzaLiquidazioneItem() {
		return getValoreFissoAttributoCustomCablato("SCADENZA_LIQUIDAZIONE");
	}
	
	public boolean showUrgenzaLiquidazioneItem() {
		return showAttributoCustomCablato("URGENZA_LIQUIDAZIONE");
	}
	
	public String getTitleUrgenzaLiquidazioneItem() {
		String label = getLabelAttributoCustomCablato("URGENZA_LIQUIDAZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Urgenza liquidazione";
	}
	
	public boolean isRequiredUrgenzaLiquidazioneItem() {
		return showUrgenzaLiquidazioneItem() && getFlgObbligatorioAttributoCustomCablato("URGENZA_LIQUIDAZIONE");
	}
		
	public String getDefaultValueUrgenzaLiquidazioneItem() {
		return getValoreFissoAttributoCustomCablato("URGENZA_LIQUIDAZIONE");
	}
	
	public String getAltriParamLoadComboUrgenzaLiquidazioneItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("URGENZA_LIQUIDAZIONE");
	}
	
	public boolean showFlgLiqXUffCassaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_LIQ_X_UFF_CASSA");
	}
	
	public String getTitleFlgLiqXUffCassaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_LIQ_X_UFF_CASSA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "per ufficio cassa";
	}
		
	public boolean getDefaultValueAsBooleanFlgLiqXUffCassaItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_LIQ_X_UFF_CASSA");
	}
	
	public boolean showImportoAnticipoCassaItem() {
		boolean isLiqXUffCassa = showFlgLiqXUffCassaItem() && getValueAsBoolean("flgLiqXUffCassa");		
		return isLiqXUffCassa && showAttributoCustomCablato("IMPORTO_ANTICIPO_CASSA");
	}
	
	public String getTitleImportoAnticipoCassaItem() {
		String label = getLabelAttributoCustomCablato("IMPORTO_ANTICIPO_CASSA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anticipo cassa (&euro;)";
	}
	
	public boolean isRequiredImportoAnticipoCassaItem() {
		return showImportoAnticipoCassaItem() && getFlgObbligatorioAttributoCustomCablato("IMPORTO_ANTICIPO_CASSA");
	}
		
	public String getDefaultValueImportoAnticipoCassaItem() {
		return getValoreFissoAttributoCustomCablato("IMPORTO_ANTICIPO_CASSA");
	}
	
	public boolean showDataDecorrenzaContrattoItem() {
		if(showOggLiquidazioneItem() && !getValueAsString("oggLiquidazione").toUpperCase().contains("CONTRATTO")) {
			return false;
		}
		return showAttributoCustomCablato("DECORRENZA_CONTRATTO");
	}
	
	public String getTitleDataDecorrenzaContrattoItem() {
		String label = getLabelAttributoCustomCablato("DECORRENZA_CONTRATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Decorrenza contratto";
	}
	
	public boolean isRequiredDataDecorrenzaContrattoItem() {
		return showDataDecorrenzaContrattoItem() && getFlgObbligatorioAttributoCustomCablato("DECORRENZA_CONTRATTO");
	}
		
	public String getDefaultValueDataDecorrenzaContrattoItem() {
		return getValoreFissoAttributoCustomCablato("DECORRENZA_CONTRATTO");
	}
	
	public boolean showAnniDurataContrattoItem() {
		if(showOggLiquidazioneItem() && !getValueAsString("oggLiquidazione").toUpperCase().contains("CONTRATTO")) {
			return false;
		}
		return showAttributoCustomCablato("ANNI_DURATA_CONTRATTO");
	}
	
	public String getTitleAnniDurataContrattoItem() {
		String label = getLabelAttributoCustomCablato("ANNI_DURATA_CONTRATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anni durata contratto";
	}
	
	public boolean isRequiredAnniDurataContrattoItem() {
		return showAnniDurataContrattoItem() && getFlgObbligatorioAttributoCustomCablato("ANNI_DURATA_CONTRATTO");
	}
		
	public String getDefaultValueAnniDurataContrattoItem() {
		return getValoreFissoAttributoCustomCablato("ANNI_DURATA_CONTRATTO");
	}
	
	public boolean showFlgAffidamentoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_AFFIDAMENTO");
	}
		
	public String getTitleFlgAffidamentoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_AFFIDAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "affidamento";	
	}
	
	public boolean getDefaultValueAsBooleanFlgAffidamentoItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_AFFIDAMENTO");
	}
	
	public boolean showFlgDeterminaAContrarreTramiteProceduraGaraItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_CONTR_CON_GARA");
	}
		
	public String getTitleFlgDeterminaAContrarreTramiteProceduraGaraItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CONTR_CON_GARA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina a contrarre tramite procedura di gara"; 		
	}
	
	public boolean showFlgDeterminaAggiudicaProceduraGaraItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_AGGIUDICA_GARA");
	}
		
	public String getTitleFlgDeterminaAggiudicaProceduraGaraItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_AGGIUDICA_GARA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina di aggiudica di procedura di gara";		
	}
	
	public boolean showFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_RIMOD_SPESA_GARA_AGGIUD");
	}
		
	public String getTitleFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_RIMOD_SPESA_GARA_AGGIUD");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina di rimodulazione spesa gara aggiudicata"; 	
	}
	
	public boolean showFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_PERSONALE");
	}
		
	public String getTitleFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_PERSONALE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina spesa di personale";		
	}
	
	public boolean showFlgDeterminaRiaccertamentoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_RIACCERT");
	}
		
	public String getTitleFlgDeterminaRiaccertamentoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_RIACCERT");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina di riaccertamento";	
	}	
	
	public boolean showFlgDeterminaAccertRadiazItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_ACCERT_RADIAZ");
	}
		
	public String getTitleFlgDeterminaAccertRadiazItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_ACCERT_RADIAZ");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "solo accertamento o radiazione";	
	}
	
	public boolean getDefaultValueAsBooleanFlgDeterminaAccertRadiazItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_DET_ACCERT_RADIAZ");
	}		
	
	public boolean showFlgDeterminaVariazBilItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_VARIAZ_BIL");
	}
		
	public String getTitleFlgDeterminaVariazBilItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_VARIAZ_BIL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "variazioni bilancio";	
	}
	
	public boolean getDefaultValueAsBooleanFlgDeterminaVariazBilItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_DET_VARIAZ_BIL");
	}		
	
	public boolean showFlgVantaggiEconomiciItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_VANTAGGI_ECONOMICI");
	}
		
	public String getTitleFlgVantaggiEconomiciItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_VANTAGGI_ECONOMICI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "vantaggi economici";	
	}
	
	public boolean getDefaultValueAsBooleanFlgVantaggiEconomiciItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_VANTAGGI_ECONOMICI");
	}
	
	public boolean showFlgDecretoReggioItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DECRETO_REGGIO");
	}
		
	public String getTitleFlgDecretoReggioItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DECRETO_REGGIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "decreto REGGIO";
	}	
	
	public boolean getDefaultValueAsBooleanFlgDecretoReggioItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_DECRETO_REGGIO");
	}
	
	public boolean showFlgAvvocaturaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_AVVOCATURA");
	}
		
	public String getTitleFlgAvvocaturaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_AVVOCATURA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "AVVOCATURA";
	}	
	
	public boolean getDefaultValueAsBooleanFlgAvvocaturaItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_AVVOCATURA");
	}
	
	public boolean showFlgDeterminaArchiviazioneItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_DET_ARCHIVIAZIONE");
	}
		
	public String getTitleFlgDeterminaArchiviazioneItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_ARCHIVIAZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina di archiviazione";
	}	
	
	public boolean getDefaultValueAsBooleanFlgDeterminaArchiviazioneItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_DET_ARCHIVIAZIONE");
	}
	
	public boolean showFlgContributiItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_CONTRIBUTI");
	}
		
	public String getTitleFlgContributiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_CONTRIBUTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "contributi";
	}	
	
	public boolean getDefaultValueAsBooleanFlgContributiItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_CONTRIBUTI");
	}
	
	public boolean showFlgSpesaItem() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
			return false; // se la mappa contiene un solo valore nascondo il radio e forzo quel valore
		}
		return showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA");
	}
		
	public String getTitleFlgSpesaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Determina con spesa";
	}
	
	public boolean isRequiredFlgSpesaItem() {
		return showFlgSpesaItem() /*&& getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA")*/;
	}
	
	public String[] getValoriPossibiliFlgSpesaItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {_FLG_SI, getFLG_SI_SENZA_VLD_RIL_IMP(), _FLG_NO};
		}
	}
	
	public HashMap<String, String> getValueMapFlgSpesaItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA");
	}
	
	public boolean hasValoreFlgSpesaSiSenzaVldRilImp() {
		HashSet<String> flgSpesaValueSet = new HashSet<String>();
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length > 0) {
			for(String key : flgSpesaValoriPossibili) {
				flgSpesaValueSet.add(key);
			}
		}
		return flgSpesaValueSet.contains(getFLG_SI_SENZA_VLD_RIL_IMP());
	}
	
	public String getDefaultValueFlgSpesaItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA");
	}
	
	public boolean showFlgDatiRilevantiGSAItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_RIL_GSA");
	}
		
	public String getTitleFlgDatiRilevantiGSAItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RIL_GSA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati rilevanti GSA";
	}
	
	public boolean isRequiredFlgDatiRilevantiGSAItem() {
		return showFlgDatiRilevantiGSAItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_RIL_GSA");
	}
	
	public String[] getValoriPossibiliFlgDatiRilevantiGSAItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("TASK_RESULT_2_RIL_GSA");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {_FLG_SI, _FLG_NO};
		}
	}
	
	public HashMap<String, String> getValueMapFlgDatiRilevantiGSAItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_RIL_GSA");
	}
	
	public String getDefaultValueFlgDatiRilevantiGSAItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_RIL_GSA");
	}
	
	public boolean showAnnoContabileCompetenzaItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("ANNO_CONTABILE_COMPETENZA");
	}
	
	public String getTitleAnnoContabileCompetenzaItem() {
		String label = getLabelAttributoCustomCablato("ANNO_CONTABILE_COMPETENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anno contabile";
	}
	
	public boolean isRequiredAnnoContabileCompetenzaItem() {
		return showAnnoContabileCompetenzaItem() && getFlgObbligatorioAttributoCustomCablato("ANNO_CONTABILE_COMPETENZA");
	}
	
	public boolean showFlgCorteContiItem() {
		return (isDeterminaConSpesa() || isDeterminaConSpesaSenzaImpegni()) && showAttributoCustomCablato("TASK_RESULT_2_FLG_CORTE_CONTI");
	}
		
	public String getTitleFlgCorteContiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_CORTE_CONTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "per Corte dei Conti";
	}	
	
	public boolean getDefaultValueAsBooleanFlgCorteContiItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_CORTE_CONTI");
	}
	
	public boolean showFlgLiqContestualeImpegnoItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("FLG_LIQ_CONTESTUALE_IMPEGNO");
	}
		
	public String getTitleFlgLiqContestualeImpegnoItem() {
		String label = getLabelAttributoCustomCablato("FLG_LIQ_CONTESTUALE_IMPEGNO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "liquidazione contestuale all'assunzione di impegno o sub-impegno";
	}	
	
	public boolean getDefaultValueAsBooleanFlgLiqContestualeImpegnoItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_LIQ_CONTESTUALE_IMPEGNO");
	}
	
	public boolean showFlgLiqContestualeAltriAspettiRilContItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("FLG_LIQ_CONTESTUALE_ALTRI_ASPETTI_RIL_CONT");
	}
		
	public String getTitleFlgLiqContestualeAltriAspettiRilContItem() {
		String label = getLabelAttributoCustomCablato("FLG_LIQ_CONTESTUALE_ALTRI_ASPETTI_RIL_CONT");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "liquidazione contestuale ad aspetti di rilevanza contabile diversi dall'assunzione di impegno o sub-impegno";
	}	
	
	public boolean getDefaultValueAsBooleanFlgLiqContestualeAltriAspettiRilContItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_LIQ_CONTESTUALE_ALTRI_ASPETTI_RIL_CONT");
	}
	
	public boolean showFlgDetConLiquidazioneItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_FLG_DET_CON_LIQ");
	}
		
	public String getTitleFlgDetConLiquidazioneItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_DET_CON_LIQ");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "determina di approvazione atti e liquidazione";
	}	
	
	public boolean getDefaultValueAsBooleanFlgDetConLiquidazioneItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_DET_CON_LIQ");
	}
	
	public boolean showFlgCompQuadroFinRagDecItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_COMP_QUADRO_FIN_RAG_DEC");
	}
		
	public String getTitleFlgCompQuadroFinRagDecItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_COMP_QUADRO_FIN_RAG_DEC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "compilazione dettaglio quadro finanziario demandata a Ragioneria decentrata";
	}	
	
	public boolean getDefaultValueAsBooleanFlgCompQuadroFinRagDecItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_COMP_QUADRO_FIN_RAG_DEC");
	}
	
	public boolean showFlgNuoviImpAccItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_FLG_NUOVI_IMP_ACC");
	}
		
	public String getTitleFlgNuoviImpAccItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_NUOVI_IMP_ACC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "solo nuovi impegni e/o accertamenti";	
	}
	
	public boolean getDefaultValueAsBooleanFlgNuoviImpAccItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_NUOVI_IMP_ACC");
	}
	
	public boolean showFlgImpSuAnnoCorrenteItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_FLG_IMPEGNI_SU_ANNO_CORRENTE");
	}
		
	public String getTitleFlgImpSuAnnoCorrenteItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_IMPEGNI_SU_ANNO_CORRENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "impegni su anno corrente";	
	}
	
	public boolean getDefaultValueAsBooleanFlgImpSuAnnoCorrenteItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_IMPEGNI_SU_ANNO_CORRENTE");
	}
	
	public boolean showFlgInsMovARagioneriaItem() {
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_INS_MOV_A_RAGIONERIA");
	}
		
	public String getTitleFlgInsMovARagioneriaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_INS_MOV_A_RAGIONERIA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "inserimento movimenti contabili demandato a Ragioneria";	
	}
	
	public boolean getDefaultValueAsBooleanFlgInsMovARagioneriaItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_INS_MOV_A_RAGIONERIA");
	}
	
	public boolean showFlgPresaVisioneContabilitaItem() {
		return isDeterminaSenzaSpesa() && showAttributoCustomCablato("TASK_RESULT_2_RICH_PRESA_VIS_CONTABILITA");
	}
		
	public String getTitleFlgPresaVisioneContabilitaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RICH_PRESA_VIS_CONTABILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "richiesta presa visione contabilità";	
	}
	
	public boolean showTipoAttoInDeliberaPEGItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_TIPO_ATTO_IN_DEL_PEG") && (isDeterminaConSpesa() || isDeterminaConSpesaSenzaImpegni());
	}
		
	public String getTitleTipoAttoInDeliberaPEGItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_TIPO_ATTO_IN_DEL_PEG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Fattispecie indicata in delibera PEG";
	}
	
	public boolean isRequiredTipoAttoInDeliberaPEGItem() {
		return showTipoAttoInDeliberaPEGItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_TIPO_ATTO_IN_DEL_PEG");
	}
		
	public String getAltriParamLoadComboTipoAttoInDeliberaPEGItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("TASK_RESULT_2_TIPO_ATTO_IN_DEL_PEG");
	}
	
	public String[] getValoriPossibiliTipoAttoInDeliberaPEGItem() {
		return getValoriPossibiliAttributoCustomCablato("TASK_RESULT_2_TIPO_ATTO_IN_DEL_PEG");
	}
	
	public boolean showTipoAffidamentoItem() {
		if(showFlgAffidamentoItem() && !getValueAsBoolean("flgAffidamento")) {
			return false;
		}
		return showAttributoCustomCablato("TIPO_AFFIDAMENTO");
	}
	
	public String getTitleTipoAffidamentoItem() {
		String label = getLabelAttributoCustomCablato("TIPO_AFFIDAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo di affidamento";
	}
	
	public boolean isRequiredTipoAffidamentoItem() {
		return showTipoAffidamentoItem() && getFlgObbligatorioAttributoCustomCablato("TIPO_AFFIDAMENTO");
	}
	
	public String getAltriParamLoadComboTipoAffidamentoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("TIPO_AFFIDAMENTO");
	}
	
	public boolean showNormRifAffidamentoItem() {
		if(showFlgAffidamentoItem() && !getValueAsBoolean("flgAffidamento")) {
			return false;
		}
		return showAttributoCustomCablato("NORM_RIF_AFFIDAMENTO");
	}
	
	public String getTitleNormRifAffidamentoItem() {
		String label = getLabelAttributoCustomCablato("NORM_RIF_AFFIDAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Normativa di rif.";
	}
	
	public boolean isRequiredNormRifAffidamentoItem() {
		return showNormRifAffidamentoItem() && getFlgObbligatorioAttributoCustomCablato("NORM_RIF_AFFIDAMENTO");
	}
	
	public String getAltriParamLoadComboNormRifAffidamentoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("NORM_RIF_AFFIDAMENTO");
	}
	   
	public boolean showRespAffidamentoItem() {
		if(showFlgAffidamentoItem() && !getValueAsBoolean("flgAffidamento")) {
			return false;
		}
		return showAttributoCustomCablato("RESP_AFFIDAMENTO");
	}
	
	public String getTitleRespAffidamentoItem() {
		String label = getLabelAttributoCustomCablato("RESP_AFFIDAMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Resp. proc.";
	}
	
	public boolean isRequiredRespAffidamentoItem() {
		return showRespAffidamentoItem() && getFlgObbligatorioAttributoCustomCablato("RESP_AFFIDAMENTO");
	}
	
	public boolean showMateriaTipoAttoItem() {
		return showAttributoCustomCablato("MATERIA_NATURA_ATTO");
	}
	
	public String getTitleMateriaTipoAttoItem() {
		String label = getLabelAttributoCustomCablato("MATERIA_NATURA_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Materia/tipo atto (ex codice atto)";
	}
	
	public boolean isRequiredMateriaTipoAttoItem() {
		return showMateriaTipoAttoItem() && getFlgObbligatorioAttributoCustomCablato("MATERIA_NATURA_ATTO");
	}
	
	public String getAltriParamLoadComboMateriaTipoAttoItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("MATERIA_NATURA_ATTO");
	}
	
	public void resetMateriaTipoAttoAfterChangedParams() {
		if(materiaTipoAttoItem != null) {
			String altriParametri = getAltriParamLoadComboMateriaTipoAttoItem();
			if(altriParametri != null && altriParametri.indexOf("$ATTO_CON_SPESA$") != -1) {
				final String value = materiaTipoAttoItem.getValueAsString();
				materiaTipoAttoItem.fetchData(new DSCallback() {
		
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						RecordList data = response.getDataAsRecordList();
						if(value != null && !"".equals(value)) {
							boolean trovato = false;
							if (data.getLength() > 0) {
								for (int i = 0; i < data.getLength(); i++) {
									String key = data.get(i).getAttribute("key");
									if (value.equals(key)) {
										trovato = true;
										break;
									}
								}
							}
							if (!trovato) {
								materiaTipoAttoItem.setValue("");
								materiaTipoAttoItem.fireEvent(new ChangedEvent(materiaTipoAttoItem.getJsObj()));
							}
						}
					}
				});
			}
		}
	}
	
	public boolean showTipoFinanziamentoPNRRItem() {
		return showAttributoCustomCablato("TIPO_FINANZIAMENTO_PNRR");
	}
	
	public String getTitleTipoFinanziamentoPNRRItem() {
		String label = getLabelAttributoCustomCablato("TIPO_FINANZIAMENTO_PNRR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo finanziamento PNRR";
	}
	
	public boolean isRequiredTipoFinanziamentoPNRRItem() {
		return showTipoFinanziamentoPNRRItem() && getFlgObbligatorioAttributoCustomCablato("TIPO_FINANZIAMENTO_PNRR");
	}
	
	public String getDefaultValueTipoFinanziamentoPNRRItem() {
		return getValoreFissoAttributoCustomCablato("TIPO_FINANZIAMENTO_PNRR");
	}
	
	public String getAltriParamLoadComboTipoFinanziamentoPNRRItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("TIPO_FINANZIAMENTO_PNRR");
	}	
	 
	public boolean showFlgSottotipoAttoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_ATTO_RADIO");
	}
	
	public String getTitleFlgSottotipoAttoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_ATTO_RADIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sotto-tipo";
	}
	
	public boolean isRequiredFlgSottotipoAttoItem() {
		return showFlgSottotipoAttoItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_ATTO_RADIO");
	}
	
	public HashMap<String, String> getValueMapFlgSottotipoAttoItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_ATTO_RADIO");
	}
	
	public String getDefaultValueFlgSottotipoAttoItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_ATTO_RADIO");
	}
	
	public boolean showFlgTipoIterItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_TIPO_ITER");
	}
	
	public String getTitleFlgTipoIterItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_TIPO_ITER");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipo iter";
	}
	
	public boolean isRequiredFlgTipoIterItem() {
		return showFlgTipoIterItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_TIPO_ITER");
	}
	
	public HashMap<String, String> getValueMapFlgTipoIterItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_TIPO_ITER");
	}
	
	public String getDefaultValueFlgTipoIterItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_TIPO_ITER");
	}
	
	public boolean showFlgFondiEuropeiPONItem() {
		// se TASK_RESULT_2_DET_CON_SPESA diverso da NO
		return !isDeterminaSenzaSpesa() && showAttributoCustomCablato("TASK_RESULT_2_FONDI_EUROPEI_PON");
	}
		
	public String getTitleFlgFondiEuropeiPONItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FONDI_EUROPEI_PON");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "fondi europei/PON";
	}
	
	public boolean getDefaultValueAsBooleanFlgFondiEuropeiPONItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FONDI_EUROPEI_PON");
	}
	
	public boolean showFlgFondiPNRRRadioItem() {
		// TASK_RESULT_2_FONDI_PNRR_RADIO è visibile anche quando non è con spesa (comportamento diverso rispetto a TASK_RESULT_2_FONDI_PNRR)
		return showAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RADIO");
	}
	
	public String getTitleFlgFondiPNRRRadioItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RADIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Fondi PNRR";
	}
	
	public boolean isRequiredFlgFondiPNRRRadioItem() {
		return showFlgFondiPNRRRadioItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RADIO");
	}
	
	public HashMap<String, String> getValueMapFlgFondiPNRRRadioItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RADIO");
	}
	
	public String getDefaultValueFlgFondiPNRRRadioItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RADIO");
	}
	
	public boolean showFlgFondiPNRRItem() {
		// se TASK_RESULT_2_DET_CON_SPESA diverso da NO
		return !isDeterminaSenzaSpesa() && showAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR");
	}
		
	public String getTitleFlgFondiPNRRItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "fondi PNRR";
	}
	
	public boolean getDefaultValueAsBooleanFlgFondiPNRRItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR");
	}
	
	public boolean showFlgFondiPNRRRigenItem() {
		// se TASK_RESULT_2_DET_CON_SPESA diverso da NO
		return !isDeterminaSenzaSpesa() && showAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RIGEN");
	}
	
	public String getTitleFlgFondiPNRRRigenItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RIGEN");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "fondi PNRR rigenerazione";
	}
	
	public boolean getDefaultValueAsBooleanFlgFondiPNRRRigenItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RIGEN");
	}
	
	public boolean showFlgFondiPRUItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FONDI_PRU");
	}
		
	public String getTitleFlgFondiPRUItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FONDI_PRU");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "fondi PRU";
	}
	
	public boolean getDefaultValueAsBooleanFlgFondiPRUItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FONDI_PRU");
	}
	
	public boolean showFlgVistoUtenzeItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_VISTO_UTENZE");
	}
		
	public String getTitleFlgVistoUtenzeItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_VISTO_UTENZE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto utenze";
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoUtenzeItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_VISTO_UTENZE");
	}
	
	public boolean showFlgVistoCapitolatiSottoSogliaItem() {
		return (isDeterminaConSpesa() || isDeterminaConSpesaSenzaImpegni()) && showAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOTTO_SOGLIA");
	}
		
	public String getTitleFlgVistoCapitolatiSottoSogliaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOTTO_SOGLIA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto capitolati sotto soglia";
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoCapitolatiSottoSogliaItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOTTO_SOGLIA");
	}
	
	public boolean showFlgVistoCapitolatiSopraSogliaItem() {
		return (isDeterminaConSpesa() || isDeterminaConSpesaSenzaImpegni()) && showAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOPRA_SOGLIA");
	}
		
	public String getTitleFlgVistoCapitolatiSopraSogliaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOPRA_SOGLIA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto capitolati sopra soglia";
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoCapitolatiSopraSogliaItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOPRA_SOGLIA");
	}
	
	public boolean showFlgVistoPar117_2013Item() {
		return showAttributoCustomCablato("TASK_RESULT_2_VISTO_PAR_117_2013");
	}
		
	public String getTitleFlgVistoPar117_2013Item() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISTO_PAR_117_2013");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visto parere favorevole ai sensi ai sensi della DD 117/2013 ssmm";
	}
	
	public boolean getDefaultValueAsBooleanFlgVistoPar117_2013Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISTO_PAR_117_2013");
	}
	
	public boolean showFlgNotificaDaMessiItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_NOTIFICA_DA_MESSI");
	}
		
	public String getTitleFlgNotificaDaMessiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_NOTIFICA_DA_MESSI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "notifica tramite messi";
	}
	
	public boolean getDefaultValueAsBooleanFlgNotificaDaMessiItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_NOTIFICA_DA_MESSI");
	}
	
	public boolean showFlgSenzaImpegniContItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_SENZA_IMPEGNI_CONT");
	}
		
	public String getTitleFlgSenzaImpegniContItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_SENZA_IMPEGNI_CONT");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "non comporta nuovi impegni di spesa in contabilità";
	}
	
	public boolean getDefaultValueAsBooleanFlgSenzaImpegniContItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_SENZA_IMPEGNI_CONT");
	}
	
	public boolean showFlgMEPACONSIPItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_MEPA_CONSIP");
	}
	
	public String getTitleFlgMEPACONSIPItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_MEPA_CONSIP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "MEPA/CONSIP";
	}
	
	public boolean isRequiredFlgMEPACONSIPItem() {
		return showFlgMEPACONSIPItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_MEPA_CONSIP");
	}
	
	public String getDefaultValueFlgMEPACONSIPItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_MEPA_CONSIP");
	}
	
	public boolean showFlgServeDUVRIItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_SERVE_DUVRI");
	}
	
	public String getTitleFlgServeDUVRIItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_SERVE_DUVRI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "necessario DUVRI";
	}
	
	public boolean isRequiredFlgServeDUVRIItem() {
		return showFlgServeDUVRIItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_SERVE_DUVRI");
	}
	
	public String getDefaultValueFlgServeDUVRIItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_SERVE_DUVRI");
	}
	
	public boolean showImponibileComplessivoItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_IMPONIBILE_TOT");
	}
	
	public String getTitleImponibileComplessivoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_IMPONIBILE_TOT");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Imponibile complessivo (senza IVA) (&euro;)";
	}
	
	public boolean isRequiredImponibileComplessivoItem() {
		return showImponibileComplessivoItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_IMPONIBILE_TOT");
	}
	
	public String getDefaultValueImponibileComplessivoItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_IMPONIBILE_TOT");
	}
	
	public boolean showImportoOneriSicurezzaItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_IMPORTO_ONERI_SICUREZZA");
	}
	
	public String getTitleImportoOneriSicurezzaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_IMPORTO_ONERI_SICUREZZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Importo Oneri Sicurezza (&euro;)";
	}
	
	public boolean isRequiredImportoOneriSicurezzaItem() {
		return showImportoOneriSicurezzaItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_IMPORTO_ONERI_SICUREZZA");
	}
		
	public String getDefaultValueImportoOneriSicurezzaItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_IMPORTO_ONERI_SICUREZZA");
	}
	
	public boolean showFlgLLPPItem() {
		return showAttributoCustomCablato("FLG_LLPP");
	}
	
	public String getTitleFlgLLPPItem() {
		String label = getLabelAttributoCustomCablato("FLG_LLPP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "LL.PP.";
	}
	
	public boolean isRequiredFlgLLPPItem() {
		return showFlgLLPPItem() && getFlgObbligatorioAttributoCustomCablato("FLG_LLPP");
	}
	
	public String getDefaultValueFlgLLPPItem() {
		return getValoreFissoAttributoCustomCablato("FLG_LLPP");
	}
	
	public boolean showAnnoProgettoLLPPItem() {
		return isLLPP() && showAttributoCustomCablato("ANNO_PROGETTO_LLPP");
	}
	
	public String getTitleAnnoProgettoLLPPItem() {
		String label = getLabelAttributoCustomCablato("ANNO_PROGETTO_LLPP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anno progetto LL.PP.";
	}
	
	public boolean isRequiredAnnoProgettoLLPPItem() {
		return showAnnoProgettoLLPPItem() && getFlgObbligatorioAttributoCustomCablato("ANNO_PROGETTO_LLPP");
	}
	
	public boolean showNumProgettoLLPPItem() {
		return isLLPP() && showAttributoCustomCablato("NRO_PROGETTO_LLPP");
	}
	
	public String getTitleNumProgettoLLPPItem() {
		String label = getLabelAttributoCustomCablato("NRO_PROGETTO_LLPP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N° progetto LL.PP.";
	}
	
	public boolean isRequiredNumProgettoLLPPItem() {
		return showNumProgettoLLPPItem() && getFlgObbligatorioAttributoCustomCablato("NRO_PROGETTO_LLPP");
	}
	
	public boolean showFlgBeniServiziItem() {
		return showAttributoCustomCablato("FLG_BENI_SERVIZI");
	}
	
	public String getTitleFlgBeniServiziItem() {
		String label = getLabelAttributoCustomCablato("FLG_BENI_SERVIZI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Beni e Servizi";
	}
	
	public boolean isRequiredFlgBeniServiziItem() {
		return showFlgBeniServiziItem() && getFlgObbligatorioAttributoCustomCablato("FLG_BENI_SERVIZI");
	}
	
	public String getDefaultValueFlgBeniServiziItem() {
		return getValoreFissoAttributoCustomCablato("FLG_BENI_SERVIZI");
	}
	
	public boolean showAnnoProgettoBeniServiziItem() {
		return isBeniServizi() && showAttributoCustomCablato("ANNO_PROGETTO_BENI_SERVIZI");
	}
	
	public String getTitleAnnoProgettoBeniServiziItem() {
		String label = getLabelAttributoCustomCablato("ANNO_PROGETTO_BENI_SERVIZI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anno progetto Beni e Servizi";
	}
	
	public boolean isRequiredAnnoProgettoBeniServiziItem() {
		return showAnnoProgettoBeniServiziItem() && getFlgObbligatorioAttributoCustomCablato("ANNO_PROGETTO_BENI_SERVIZI");
	}
	
	public boolean showNumProgettoBeniServiziItem() {
		return isBeniServizi() && showAttributoCustomCablato("NRO_PROGETTO_BENI_SERVIZI");
	}
	
	public String getTitleNumProgettoBeniServiziItem() {
		String label = getLabelAttributoCustomCablato("NRO_PROGETTO_BENI_SERVIZI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N° progetto Beni e Servizi";
	}
	
	public boolean isRequiredNumProgettoBeniServiziItem() {
		return showNumProgettoBeniServiziItem() && getFlgObbligatorioAttributoCustomCablato("NRO_PROGETTO_BENI_SERVIZI");
	}
	
	public boolean showFlgProgrammazioneAcquistiItem() {
		return (!showFlgBeniServiziItem() || isBeniServizi()) && showAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI");
	}
	
	public String getTitleFlgProgrammazioneAcquistiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Programmazione acquisti";
	}
	
	public boolean isRequiredFlgProgrammazioneAcquistiItem() {
		return showFlgProgrammazioneAcquistiItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI");
	}
	
	public HashMap<String, String> getValueMapFlgProgrammazioneAcquistiItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI");
	}
	
	public String getDefaultValueFlgProgrammazioneAcquistiItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI");
	}
	
	public boolean showFlgPrivacyItem() {
		return showAttributoCustomCablato("FLG_ATTO_CON_DATI_RISERVATI");
	}
	
	public String getTitleFlgPrivacyItem() {
		String label = getLabelAttributoCustomCablato("FLG_ATTO_CON_DATI_RISERVATI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Possibile presenza di dati coperti da privacy o riservati";
	}
	
	public boolean isRequiredFlgPrivacyItem() {
		return showFlgPrivacyItem() && getFlgObbligatorioAttributoCustomCablato("FLG_ATTO_CON_DATI_RISERVATI");
	}
	
	public String getDefaultValueFlgPrivacyItem() {
		return getValoreFissoAttributoCustomCablato("FLG_ATTO_CON_DATI_RISERVATI");
	}
	
	public boolean showFlgDatiProtettiTipo1Item() {
		return (!showFlgPrivacyItem() || isDatiRiservati()) && showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_1");
	}
		
	public String getTitleFlgDatiProtettiTipo1Item() {
		String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_1");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "dati protetti tipo 1";
	}
	
	public boolean getDefaultValueAsBooleanFlgDatiProtettiTipo1Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_1");
	}
	
	public boolean showFlgDatiProtettiTipo2Item() {
		return (!showFlgPrivacyItem() || isDatiRiservati()) && showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_2");
	}
		
	public String getTitleFlgDatiProtettiTipo2Item() {
		String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_2");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "dati protetti tipo 2";
	}
	
	public boolean getDefaultValueAsBooleanFlgDatiProtettiTipo2Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_2");
	}
		
	public boolean showFlgDatiProtettiTipo3Item() {
		return (!showFlgPrivacyItem() || isDatiRiservati()) && showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_3");
	}
		
	public String getTitleFlgDatiProtettiTipo3Item() {
		String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_3");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "dati protetti tipo 3";
	}
	
	public boolean getDefaultValueAsBooleanFlgDatiProtettiTipo3Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_3");
	}
		
	public boolean showFlgDatiProtettiTipo4Item() {
		return (!showFlgPrivacyItem() || isDatiRiservati()) && showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_4");
	}
		
	public String getTitleFlgDatiProtettiTipo4Item() {
		String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_4");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "dati protetti tipo 4";
	}
	
	public boolean getDefaultValueAsBooleanFlgDatiProtettiTipo4Item() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_4");
	}
	
	public boolean showNumGaraItem() {
		return showAttributoCustomCablato("NRO_GARA") && !showAttributoCustomCablato("CIG");
	}
	
	public String getTitleNumGaraItem() {
		String label = getLabelAttributoCustomCablato("NRO_GARA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N° gara";
	}
	
	public boolean isRequiredNumGaraItem() {
		return showNumGaraItem() && getFlgObbligatorioAttributoCustomCablato("NRO_GARA");
	}
	
	public String getDefaultValueNumGaraItem() {
		return getValoreFissoAttributoCustomCablato("NRO_GARA");
	}
	
	public boolean showFlgControlloLegittimitaItem() {
		return showAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA");
	}
	
	public String getTitleFlgControlloLegittimitaItem() {
		String label = getLabelAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Controllo legittimità";
	}
	
	public boolean isRequiredFlgControlloLegittimitaItem() {
		return showFlgControlloLegittimitaItem() && getFlgObbligatorioAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA");
	}
		
	public String[] getValoriPossibiliFlgControlloLegittimitaItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {_FLG_SI, _FLG_NO};
		}
	}
	
	public HashMap<String, String> getValueMapFlgControlloLegittimitaItem() {
		return getValueMapAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA");
	}
		
	public String getDefaultValueFlgControlloLegittimitaItem() {
		return getValoreFissoAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA");
	}
	
	public boolean showMotivazioniEsclControlloLegittimitaItem() {
		return (showFlgControlloLegittimitaItem() && _FLG_NO.equalsIgnoreCase(getValueAsString("flgControlloLegittimita"))) && showAttributoCustomCablato("MOTIVAZIONI_ESCL_CONTROLLO_LEGITTIMITA");
	}
	
	public String getTitleMotivazioniEsclControlloLegittimitaItem() {
		String label = getLabelAttributoCustomCablato("MOTIVAZIONI_ESCL_CONTROLLO_LEGITTIMITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Motivazioni esclusione controllo legittimità"; 
	}	
	
	public String getDefaultValueMotivazioniEsclControlloLegittimitaItem() {
		return getValoreFissoAttributoCustomCablato("MOTIVAZIONI_ESCL_CONTROLLO_LEGITTIMITA");
	}
	
	public int getAltezzaMotivazioniEsclControlloLegittimitaItem() {
		Integer altezza = getAltezzaInRigheAttributoCustomCablato("MOTIVAZIONI_ESCL_CONTROLLO_LEGITTIMITA");
		return altezza != null ? altezza.intValue() : 50;
	}
	
	public boolean isRequiredMotivazioniEsclControlloLegittimitaItem() {
		return showMotivazioniEsclControlloLegittimitaItem() && getFlgObbligatorioAttributoCustomCablato("MOTIVAZIONI_ESCL_CONTROLLO_LEGITTIMITA");
	}
	
	protected void createCaratteristicheProvvedimentoForm() {
		
		caratteristicheProvvedimentoForm = new DynamicForm();
		caratteristicheProvvedimentoForm.setValuesManager(vm);
		caratteristicheProvvedimentoForm.setWidth100();
		caratteristicheProvvedimentoForm.setPadding(5);
		caratteristicheProvvedimentoForm.setWrapItemTitles(false);
		caratteristicheProvvedimentoForm.setNumCols(20);
		caratteristicheProvvedimentoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		caratteristicheProvvedimentoForm.setTabSet(tabSet);
		caratteristicheProvvedimentoForm.setTabID(_TAB_DATI_SCHEDA_ID);
		caratteristicheProvvedimentoForm.setHeight(1);
		
		GWTRestDataSource oggLiquidazioneDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		oggLiquidazioneDS.addParam("altriParamLoadCombo", getAltriParamLoadComboOggLiquidazioneItem());
		 		
		oggLiquidazioneItem = new SelectItem("oggLiquidazione", getTitleOggLiquidazioneItem());
//		oggLiquidazioneItem.setTitleOrientation(TitleOrientation.TOP);		
		oggLiquidazioneItem.setWidth(500);
		oggLiquidazioneItem.setColSpan(17);		
		oggLiquidazioneItem.setStartRow(true);
		oggLiquidazioneItem.setValueField("key");
		oggLiquidazioneItem.setDisplayField("value");
		oggLiquidazioneItem.setOptionDataSource(oggLiquidazioneDS);	
		oggLiquidazioneItem.setClearable(true);		
		oggLiquidazioneItem.setDefaultValue(getDefaultValueOggLiquidazioneItem());
		oggLiquidazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showOggLiquidazioneItem();
			}
		});
		if(isRequiredOggLiquidazioneItem()) {
			oggLiquidazioneItem.setAttribute("obbligatorio", true);
		}
		oggLiquidazioneItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredOggLiquidazioneItem();
			}
		}));
		oggLiquidazioneItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		
		final String titleShowInfoOggLiquidazioneButton = "Informazioni sull'uso del campo \"" + getTitleOggLiquidazioneItem() + "\"";
		
		showInfoOggLiquidazioneButton = new ImgButtonItem("showInfoOggLiquidazioneButton", "about.png", titleShowInfoOggLiquidazioneButton);
		showInfoOggLiquidazioneButton.setAlwaysEnabled(true);
		showInfoOggLiquidazioneButton.setShowTitle(false);
		showInfoOggLiquidazioneButton.setWidth(16);
		showInfoOggLiquidazioneButton.setColSpan(1);
		showInfoOggLiquidazioneButton.setValueIconSize(32);
		showInfoOggLiquidazioneButton.setPrompt(titleShowInfoOggLiquidazioneButton);
		showInfoOggLiquidazioneButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
				lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("getInfoOggLiquidazione", getRecordToSave(), new DSCallback() {							
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record recordPreview = response.getData()[0];
							PreviewWindow lPreviewWindow = new PreviewWindow(recordPreview.getAttribute("uri"), false, new InfoFileRecord(recordPreview.getAttributeAsRecord("infoFile")), "FileToExtractBean",	recordPreview.getAttribute("nomeFile")) {
								
								@Override
								public boolean isModal() {
									return isEnablePreviewModal();
								}
								
							};
							lPreviewWindow.setShowTitle(true);
							lPreviewWindow.setTitle(titleShowInfoOggLiquidazioneButton);
							/*
							 * Commentato perchè già eseguito in PrevieWindow se lasciato può creare problemi con la preview dei file
							 * lPreviewWindow.show(); 
							 */
						} 				
					}
				}, new DSRequest());
			}
		});
		showInfoOggLiquidazioneButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String uriInfoOggLiquidazione = AurigaLayout.getParametroDB("URI_INFO_OGG_LIQUIDAZIONE");
				return showOggLiquidazioneItem() && uriInfoOggLiquidazione != null && !"".equals(uriInfoOggLiquidazione);
			}
		});
		
		SpacerItem endRowScadenzaItem = new SpacerItem();
		endRowScadenzaItem.setColSpan(1);
		endRowScadenzaItem.setEndRow(true);
		endRowScadenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDataScadenzaLiquidazioneItem() || showUrgenzaLiquidazioneItem();
			}
		});
		
		dataScadenzaLiquidazioneItem = new DateItem("dataScadenzaLiquidazione", getTitleDataScadenzaLiquidazioneItem());
		dataScadenzaLiquidazioneItem.setColSpan(1);
		dataScadenzaLiquidazioneItem.setDefaultValue(getDefaultValueDataScadenzaLiquidazioneItem());
		dataScadenzaLiquidazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataScadenzaLiquidazioneItem()) {
					dataScadenzaLiquidazioneItem.setAttribute("obbligatorio", true);
					dataScadenzaLiquidazioneItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataScadenzaLiquidazioneItem()));
				} else {
					dataScadenzaLiquidazioneItem.setAttribute("obbligatorio", false);
					dataScadenzaLiquidazioneItem.setTitle(getTitleDataScadenzaLiquidazioneItem());
				}	
				return showDataScadenzaLiquidazioneItem();
			}
		});
		dataScadenzaLiquidazioneItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataScadenzaLiquidazioneItem();
			}
		}));
		
		GWTRestDataSource urgenzaLiquidazioneDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		urgenzaLiquidazioneDS.addParam("altriParamLoadCombo", getAltriParamLoadComboUrgenzaLiquidazioneItem());
		 		
		urgenzaLiquidazioneItem = new SelectItem("urgenzaLiquidazione", getTitleUrgenzaLiquidazioneItem());
//		urgenzaLiquidazioneItem.setTitleOrientation(TitleOrientation.TOP);		
		urgenzaLiquidazioneItem.setWidth(169);
		urgenzaLiquidazioneItem.setColSpan(1);		
		urgenzaLiquidazioneItem.setValueField("key");
		urgenzaLiquidazioneItem.setDisplayField("value");
		urgenzaLiquidazioneItem.setOptionDataSource(urgenzaLiquidazioneDS);	
		urgenzaLiquidazioneItem.setClearable(true);		
		urgenzaLiquidazioneItem.setDefaultValue(getDefaultValueUrgenzaLiquidazioneItem());
		urgenzaLiquidazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showUrgenzaLiquidazioneItem();
			}
		});
		if(isRequiredUrgenzaLiquidazioneItem()) {
			urgenzaLiquidazioneItem.setAttribute("obbligatorio", true);
		}
		urgenzaLiquidazioneItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredUrgenzaLiquidazioneItem();
			}
		}));
		
		SpacerItem spacerFlgLiqXUffCassaItem = new SpacerItem();
		spacerFlgLiqXUffCassaItem.setColSpan(1);
		spacerFlgLiqXUffCassaItem.setStartRow(true);
		spacerFlgLiqXUffCassaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgLiqXUffCassaItem();
			}
		});
		
		flgLiqXUffCassaItem = new CheckboxItem("flgLiqXUffCassa", getTitleFlgLiqXUffCassaItem());
		flgLiqXUffCassaItem.setDefaultValue(getDefaultValueAsBooleanFlgLiqXUffCassaItem());
		flgLiqXUffCassaItem.setColSpan(1);
		flgLiqXUffCassaItem.setWidth("*");			
		flgLiqXUffCassaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgLiqXUffCassaItem();
			}
		});
		flgLiqXUffCassaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		
		RegExpValidator importoAnticipoCassaPrecisionValidator = new RegExpValidator();
		importoAnticipoCassaPrecisionValidator.setExpression("^([0-9]{1,3}((\\.)?[0-9]{3})*(,[0-9]{1,2})?)$");
		importoAnticipoCassaPrecisionValidator.setErrorMessage("Valore non valido o superato il limite di 2 cifre decimali");
		
		CustomValidator importoAnticipoCassaMaggioreDiZeroValidator = new CustomValidator() {
			
			@Override
			protected boolean condition(Object value) {
				if(showImportoAnticipoCassaItem()) {					
					// se l'importo è vuoto, ma non è obbligatorio, la validazione deve andare a buon fine
					if(!isRequiredImportoAnticipoCassaItem() && (value == null || "".equals(value))) {
						return true;
					}
					String pattern = "#,##0.00";
					double importo = 0;
					if(value != null && !"".equals(value)) {
						importo = new Double(NumberFormat.getFormat(pattern).parse((String) value)).doubleValue();			
					}
					return importo > 0;
				}
				return true;
			}
		};
		importoAnticipoCassaMaggioreDiZeroValidator.setErrorMessage("Valore non valido: l'importo deve essere maggiore di zero");
		
		importoAnticipoCassaItem = new ExtendedNumericItem("importoAnticipoCassa", getTitleImportoAnticipoCassaItem()); 
		importoAnticipoCassaItem.setKeyPressFilter("[0-9.,]");
		importoAnticipoCassaItem.setColSpan(1);
		importoAnticipoCassaItem.setWidth(150);
		importoAnticipoCassaItem.setDefaultValue(getDefaultValueImportoAnticipoCassaItem());
		importoAnticipoCassaItem.addChangedBlurHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {				
				importoAnticipoCassaItem.setValue(NumberFormatUtility.getFormattedValue((String) event.getValue()));
			}
		});		
		importoAnticipoCassaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				importoAnticipoCassaItem.setValue(NumberFormatUtility.getFormattedValue(importoAnticipoCassaItem.getValueAsString()));
				if(isRequiredImportoAnticipoCassaItem()) {
					importoAnticipoCassaItem.setAttribute("obbligatorio", true);
					importoAnticipoCassaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleImportoAnticipoCassaItem()));
				} else {
					importoAnticipoCassaItem.setAttribute("obbligatorio", false);
					importoAnticipoCassaItem.setTitle(getTitleImportoAnticipoCassaItem());
				}					
				return showImportoAnticipoCassaItem();
			}
		});
		importoAnticipoCassaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredImportoAnticipoCassaItem();
			}
		}), importoAnticipoCassaPrecisionValidator, importoAnticipoCassaMaggioreDiZeroValidator);
		
		SpacerItem endRowContrattoItem = new SpacerItem();
		endRowContrattoItem.setColSpan(1);
		endRowContrattoItem.setEndRow(true);
		endRowContrattoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDataDecorrenzaContrattoItem() || showAnniDurataContrattoItem();
			}
		});
		
		dataDecorrenzaContrattoItem = new DateItem("dataDecorrenzaContratto", getTitleDataDecorrenzaContrattoItem()); 
		dataDecorrenzaContrattoItem.setColSpan(1);
		dataDecorrenzaContrattoItem.setDefaultValue(getDefaultValueDataDecorrenzaContrattoItem());
		dataDecorrenzaContrattoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataDecorrenzaContrattoItem()) {
					dataDecorrenzaContrattoItem.setAttribute("obbligatorio", true);
					dataDecorrenzaContrattoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataDecorrenzaContrattoItem()));
				} else {
					dataDecorrenzaContrattoItem.setAttribute("obbligatorio", false);
					dataDecorrenzaContrattoItem.setTitle(getTitleDataDecorrenzaContrattoItem());
				}				
				return showDataDecorrenzaContrattoItem();
			}
		});
		dataDecorrenzaContrattoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataDecorrenzaContrattoItem();
			}
		}));
		
		anniDurataContrattoItem = new NumericItem("anniDurataContratto", getTitleAnniDurataContrattoItem(), false); 
		anniDurataContrattoItem.setColSpan(1);
		anniDurataContrattoItem.setWidth(70);
		anniDurataContrattoItem.setDefaultValue(getDefaultValueAnniDurataContrattoItem());
		anniDurataContrattoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredAnniDurataContrattoItem()) {
					anniDurataContrattoItem.setAttribute("obbligatorio", true);
					anniDurataContrattoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleAnniDurataContrattoItem()));
				} else {
					anniDurataContrattoItem.setAttribute("obbligatorio", false);
					anniDurataContrattoItem.setTitle(getTitleAnniDurataContrattoItem());
				}	
				return showAnniDurataContrattoItem();
			}
		});
		anniDurataContrattoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnniDurataContrattoItem();
			}
		}));
		
		SpacerItem spacerFlgAffidamentoItem = new SpacerItem();
		spacerFlgAffidamentoItem.setColSpan(1);
		spacerFlgAffidamentoItem.setStartRow(true);
		spacerFlgAffidamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgAffidamentoItem();
			}
		});
		
		flgAffidamentoItem = new CheckboxItem("flgAffidamento", getTitleFlgAffidamentoItem());
		flgAffidamentoItem.setDefaultValue(getDefaultValueAsBooleanFlgAffidamentoItem());
		flgAffidamentoItem.setColSpan(18);
		flgAffidamentoItem.setWidth("*");
//		flgAffidamentoItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgAffidamentoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);					
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);			
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaConSpesa()) {
						flgSpesaItem.setValue(_FLG_SI);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}				
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgAffidamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgAffidamentoItem();
			}
		});
		
		SpacerItem spacerFlgDeterminaAContrarreTramiteProceduraGaraItem = new SpacerItem();
		spacerFlgDeterminaAContrarreTramiteProceduraGaraItem.setColSpan(1);
		spacerFlgDeterminaAContrarreTramiteProceduraGaraItem.setStartRow(true);
		spacerFlgDeterminaAContrarreTramiteProceduraGaraItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaAContrarreTramiteProceduraGaraItem();
			}
		});
		
		flgDeterminaAContrarreTramiteProceduraGaraItem = new CheckboxItem("flgDeterminaAContrarreTramiteProceduraGara", getTitleFlgDeterminaAContrarreTramiteProceduraGaraItem());
		flgDeterminaAContrarreTramiteProceduraGaraItem.setDefaultValue(false);
		flgDeterminaAContrarreTramiteProceduraGaraItem.setColSpan(18);
		flgDeterminaAContrarreTramiteProceduraGaraItem.setWidth("*");
//		flgDeterminaAContrarreTramiteProceduraGaraItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaAContrarreTramiteProceduraGaraItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);			
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);		
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaConSpesa()) {
						flgSpesaItem.setValue(_FLG_SI);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaAContrarreTramiteProceduraGaraItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaAContrarreTramiteProceduraGaraItem();
			}
		});
		
		SpacerItem spacerFlgDeterminaAggiudicaProceduraGaraItem = new SpacerItem();
		spacerFlgDeterminaAggiudicaProceduraGaraItem.setColSpan(1);
		spacerFlgDeterminaAggiudicaProceduraGaraItem.setStartRow(true);
		spacerFlgDeterminaAggiudicaProceduraGaraItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaAggiudicaProceduraGaraItem();
			}
		});
		
		flgDeterminaAggiudicaProceduraGaraItem = new CheckboxItem("flgDeterminaAggiudicaProceduraGara", getTitleFlgDeterminaAggiudicaProceduraGaraItem());
		flgDeterminaAggiudicaProceduraGaraItem.setDefaultValue(false);
		flgDeterminaAggiudicaProceduraGaraItem.setColSpan(18);
		flgDeterminaAggiudicaProceduraGaraItem.setWidth("*");
//		flgDeterminaAggiudicaProceduraGaraItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaAggiudicaProceduraGaraItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);		
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);	
					flgDeterminaArchiviazioneItem.setValue(false);
//					if(showFlgSpesaItem()) {
//						flgSpesaItem.clearValue();
//						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
//					}
				} 
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();	
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaAggiudicaProceduraGaraItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaAggiudicaProceduraGaraItem();
			}
		});

		SpacerItem spacerFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem = new SpacerItem();
		spacerFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setColSpan(1);
		spacerFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setStartRow(true);
		spacerFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem();
			}
		});
		
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem = new CheckboxItem("flgDeterminaRimodulazioneSpesaGaraAggiudicata", getTitleFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem());
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setDefaultValue(false);
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setColSpan(18);
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setWidth("*");
//		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);					
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);		
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);	
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaConSpesa()) {
						flgSpesaItem.setValue(_FLG_SI);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);
				enableDisableTabs();			
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem();
			}
		});		
		
		SpacerItem spacerFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem = new SpacerItem();
		spacerFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setColSpan(1);
		spacerFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setStartRow(true);
		spacerFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem();
			}
		});
		
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem = new CheckboxItem("flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoro", getTitleFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem());
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setDefaultValue(false);
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setColSpan(18);
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setWidth("*");
//		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					toSaveAndReloadTask = true;					
//				}
//			}
//			
//		});
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);			
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);			
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaConSpesa()) {
						flgSpesaItem.setValue(_FLG_SI);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem();
			}
		});			
		
		SpacerItem spacerFlgDeterminaRiaccertamentoItem = new SpacerItem();
		spacerFlgDeterminaRiaccertamentoItem.setColSpan(1);
		spacerFlgDeterminaRiaccertamentoItem.setStartRow(true);
		spacerFlgDeterminaRiaccertamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaRiaccertamentoItem();
			}
		});
		
		flgDeterminaRiaccertamentoItem = new CheckboxItem("flgDeterminaRiaccertamento", getTitleFlgDeterminaRiaccertamentoItem());
		flgDeterminaRiaccertamentoItem.setDefaultValue(false);
		flgDeterminaRiaccertamentoItem.setColSpan(18);
		flgDeterminaRiaccertamentoItem.setWidth("*");
//		flgDeterminaRiaccertamentoItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaRiaccertamentoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);					
					flgVantaggiEconomiciItem.setValue(false);		
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);	
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem()) {
//						flgSpesaItem.clearValue();
//						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
						if(hasValoreFlgSpesaSiSenzaVldRilImp() && !isDeterminaConSpesaSenzaImpegni()) {
							flgSpesaItem.setValue(getFLG_SI_SENZA_VLD_RIL_IMP());						
							flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
						} else if(!isDeterminaConSpesa()) {
							flgSpesaItem.setValue(_FLG_SI);						
							flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
						}				
					}
				} 
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();	
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaRiaccertamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaRiaccertamentoItem();
			}
		});		
		
		SpacerItem spacerFlgDeterminaAccertRadiazItem = new SpacerItem();
		spacerFlgDeterminaAccertRadiazItem.setColSpan(1);
		spacerFlgDeterminaAccertRadiazItem.setStartRow(true);
		spacerFlgDeterminaAccertRadiazItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaAccertRadiazItem();
			}
		});
		
		flgDeterminaAccertRadiazItem = new CheckboxItem("flgDeterminaAccertRadiaz", getTitleFlgDeterminaAccertRadiazItem());
		flgDeterminaAccertRadiazItem.setDefaultValue(getDefaultValueAsBooleanFlgDeterminaAccertRadiazItem());		
		flgDeterminaAccertRadiazItem.setColSpan(18);
		flgDeterminaAccertRadiazItem.setWidth("*");
//		flgDeterminaAccertRadiazItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaAccertRadiazItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);		
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaConSpesa()) {
						flgSpesaItem.setValue(_FLG_SI);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaAccertRadiazItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaAccertRadiazItem();
			}
		});	
		
		SpacerItem spacerFlgDeterminaVariazBilItem = new SpacerItem();
		spacerFlgDeterminaVariazBilItem.setColSpan(1);
		spacerFlgDeterminaVariazBilItem.setStartRow(true);
		spacerFlgDeterminaVariazBilItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaVariazBilItem();
			}
		});
		
		flgDeterminaVariazBilItem = new CheckboxItem("flgDeterminaVariazBil", getTitleFlgDeterminaVariazBilItem());
		flgDeterminaVariazBilItem.setDefaultValue(getDefaultValueAsBooleanFlgDeterminaVariazBilItem());		
		flgDeterminaVariazBilItem.setColSpan(18);
		flgDeterminaVariazBilItem.setWidth("*");
//		flgDeterminaVariazBilItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaVariazBilItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);		
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem()) {
						if(hasValoreFlgSpesaSiSenzaVldRilImp() && !isDeterminaConSpesaSenzaImpegni()) {
							flgSpesaItem.setValue(getFLG_SI_SENZA_VLD_RIL_IMP());						
							flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
						} else if(!isDeterminaConSpesa()) {
							flgSpesaItem.setValue(_FLG_SI);						
							flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
						}				
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaVariazBilItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDeterminaVariazBilItem();
			}
		});	
		
		SpacerItem spacerFlgVantaggiEconomiciItem = new SpacerItem();
		spacerFlgVantaggiEconomiciItem.setColSpan(1);
		spacerFlgVantaggiEconomiciItem.setStartRow(true);
		spacerFlgVantaggiEconomiciItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgVantaggiEconomiciItem();
			}
		});
		
		flgVantaggiEconomiciItem = new CheckboxItem("flgVantaggiEconomici", getTitleFlgVantaggiEconomiciItem());
		flgVantaggiEconomiciItem.setDefaultValue(getDefaultValueAsBooleanFlgVantaggiEconomiciItem());
		flgVantaggiEconomiciItem.setColSpan(18);
		flgVantaggiEconomiciItem.setWidth("*");
//		flgVantaggiEconomiciItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgVantaggiEconomiciItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);						
					flgDecretoReggioItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaSenzaSpesa() && !AurigaLayout.getParametroDBAsBoolean("VANTAGGI_ECONOMICI_CON_RIL_CONT")) {
						flgSpesaItem.setValue(_FLG_NO);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgVantaggiEconomiciItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgVantaggiEconomiciItem();
			}
		});	
		
		SpacerItem spacerFlgDecretoReggioItem = new SpacerItem();
		spacerFlgDecretoReggioItem.setColSpan(1);
		spacerFlgDecretoReggioItem.setStartRow(true);
		spacerFlgDecretoReggioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDecretoReggioItem();
			}
		});
		
		flgDecretoReggioItem = new CheckboxItem("flgDecretoReggio", getTitleFlgDecretoReggioItem());
		flgDecretoReggioItem.setDefaultValue(getDefaultValueAsBooleanFlgDecretoReggioItem());
		flgDecretoReggioItem.setColSpan(18);
		flgDecretoReggioItem.setWidth("*");			
//		flgDecretoReggioItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDecretoReggioItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);	
					flgAvvocaturaItem.setValue(false);	
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaConSpesa()) {
						flgSpesaItem.setValue(_FLG_SI);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});		
		flgDecretoReggioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgDecretoReggioItem();
			}
		});
		
		SpacerItem spacerFlgAvvocaturaItem = new SpacerItem();
		spacerFlgAvvocaturaItem.setColSpan(1);
		spacerFlgAvvocaturaItem.setStartRow(true);
		spacerFlgAvvocaturaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgAvvocaturaItem();
			}
		});
		
		flgAvvocaturaItem = new CheckboxItem("flgAvvocatura", getTitleFlgAvvocaturaItem());
		flgAvvocaturaItem.setDefaultValue(getDefaultValueAsBooleanFlgAvvocaturaItem());
		flgAvvocaturaItem.setColSpan(18);
		flgAvvocaturaItem.setWidth("*");	
//		flgAvvocaturaItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgAvvocaturaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);	
					flgDecretoReggioItem.setValue(false);
					flgDeterminaArchiviazioneItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaSenzaSpesa()) {
						flgSpesaItem.setValue(_FLG_NO);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgAvvocaturaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgAvvocaturaItem();
			}
		});
		
		SpacerItem spacerFlgDeterminaArchiviazioneItem = new SpacerItem();
		spacerFlgDeterminaArchiviazioneItem.setColSpan(1);
		spacerFlgDeterminaArchiviazioneItem.setStartRow(true);
		spacerFlgDeterminaArchiviazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDeterminaArchiviazioneItem();
			}
		});
		
		flgDeterminaArchiviazioneItem = new CheckboxItem("flgDeterminaArchiviazione", getTitleFlgDeterminaArchiviazioneItem());
		flgDeterminaArchiviazioneItem.setDefaultValue(getDefaultValueAsBooleanFlgDeterminaArchiviazioneItem());
		flgDeterminaArchiviazioneItem.setColSpan(18);
		flgDeterminaArchiviazioneItem.setWidth("*");	
//		flgDeterminaArchiviazioneItem.addChangeHandler(new ChangeHandler() {
//
//			@Override
//			public void onChange(final ChangeEvent event) {
//				if(!isAvvioPropostaAtto()) {
//					if (event.getValue() != null && (Boolean) event.getValue()) {					
//						if(isDeterminaPersonale()) {
//							toSaveAndReloadTask = true;							
//						}
//					}
//				}
//			}
//			
//		});
		flgDeterminaArchiviazioneItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAffidamentoItem.setValue(false);	
					flgDeterminaAContrarreTramiteProceduraGaraItem.setValue(false);	
					flgDeterminaAggiudicaProceduraGaraItem.setValue(false);
					flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setValue(false);
					flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setValue(false);
					flgDeterminaRiaccertamentoItem.setValue(false);				
					flgDeterminaAccertRadiazItem.setValue(false);	
					flgDeterminaVariazBilItem.setValue(false);	
					flgVantaggiEconomiciItem.setValue(false);	
					flgDecretoReggioItem.setValue(false);
					flgAvvocaturaItem.setValue(false);
					if(showFlgSpesaItem() && !isDeterminaSenzaSpesa()) {
						flgSpesaItem.setValue(_FLG_NO);
						flgSpesaItem.fireEvent(new ChangedEvent(flgSpesaItem.getJsObj()));
					}
				}
				redrawTabForms(_TAB_DATI_SCHEDA_ID);				
				enableDisableTabs();
				showHideSections();
//				if(toSaveAndReloadTask) {
//					toSaveAndReloadTask = false;
//					saveAndReloadTask();
//				}
			}
		});
		flgDeterminaArchiviazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgDeterminaArchiviazioneItem();
			}
		});
		
		// il check "contributi" non è esclusivo come gli altri sopra
		
		SpacerItem spacerFlgContributiItem = new SpacerItem();
		spacerFlgContributiItem.setColSpan(1);
		spacerFlgContributiItem.setStartRow(true);
		spacerFlgContributiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgContributiItem();
			}
		});
		
		flgContributiItem = new CheckboxItem("flgContributi", getTitleFlgContributiItem());
		flgContributiItem.setDefaultValue(getDefaultValueAsBooleanFlgContributiItem());
		flgContributiItem.setColSpan(18);
		flgContributiItem.setWidth("*");	
		flgContributiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgContributiItem();
			}
		});
				
		flgSpesaItem = new RadioGroupItem("flgSpesa", getTitleFlgSpesaItem());
		flgSpesaItem.setStartRow(true);
		flgSpesaItem.setColSpan(showFlgDatiRilevantiGSAItem() ? 6 : 18);
		Map<String, String> flgSpesaValueMap = getValueMapFlgSpesaItem();
		if(flgSpesaValueMap != null && flgSpesaValueMap.keySet().size() > 0) {
			flgSpesaItem.setValueMap(flgSpesaValueMap);					
			if(flgSpesaValueMap.size() == 1) {
				flgSpesaItem.setDefaultValue(flgSpesaValueMap.keySet().iterator().next());
			} else {
				flgSpesaItem.setDefaultValue(getDefaultValueFlgSpesaItem());
			}	
		} else {
			String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
			flgSpesaItem.setValueMap(flgSpesaValoriPossibili);					
			if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
				flgSpesaItem.setDefaultValue(flgSpesaValoriPossibili[0]);
			} else {
				flgSpesaItem.setDefaultValue(getDefaultValueFlgSpesaItem());
			}
		}
		flgSpesaItem.setVertical(false);
		flgSpesaItem.setWrap(false);
		flgSpesaItem.setShowDisabled(false);
		if(isRequiredFlgSpesaItem()) {
			flgSpesaItem.setAttribute("obbligatorio", true);
		}
		flgSpesaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgSpesaItem();
			}
		}));
		flgSpesaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(showFlgSpesaItem()) {
					if(isAttoMeroIndirizzo() || isVantaggiEconomici() || isAvvocatura() || isDeterminaArchiviazione()) {
						boolean isVantaggiEconomiciConRilCont = isVantaggiEconomici() && AurigaLayout.getParametroDBAsBoolean("VANTAGGI_ECONOMICI_CON_RIL_CONT");
						if(!isVantaggiEconomiciConRilCont) {
							item.setDisabled(true);
							item.setValue(_FLG_NO);
						}
			 		} else if(isAffidamento() || isDeterminaAContrarreTramiteProceduraGara() || isDeterminaRimodulazioneSpesaGaraAggiudicata() || isDeterminaPersonale() || isDecretoReggio()) {
						item.setDisabled(true);
						item.setValue(_FLG_SI);		
					} else if(isDeterminaRiaccertamento()) {
						item.setDisabled(true);
						item.setValue(hasValoreFlgSpesaSiSenzaVldRilImp() ? getFLG_SI_SENZA_VLD_RIL_IMP() : _FLG_SI);									
					} else if(isDeterminaAccertRadiaz()) {
						item.setDisabled(false);
						item.setValue(_FLG_SI);	
					} else if(isDeterminaVariazBil()) {
						item.setDisabled(false);
						item.setValue(hasValoreFlgSpesaSiSenzaVldRilImp() ? getFLG_SI_SENZA_VLD_RIL_IMP() : _FLG_SI);									
					} else {
						item.setDisabled(false);					
					}
					return true;
				}
				return false;
			}
		});
		flgSpesaItem.addChangeHandler(new ChangeHandler() {
			
			@Override
			public void onChange(ChangeEvent event) {
				if(event.getValue() != null && _FLG_NO.equalsIgnoreCase((String) event.getValue())) {	
					if(isDeterminaAccertRadiaz()) {
						event.cancel();
						AurigaLayout.addMessage(new MessageBean("Opzione non selezionabile per " + getTitleFlgDeterminaAccertRadiazItem(), "", MessageType.ERROR));
					} else if(isDeterminaVariazBil()) {
						event.cancel();		
						AurigaLayout.addMessage(new MessageBean("Opzione non selezionabile per " + getTitleFlgDeterminaVariazBilItem(), "", MessageType.ERROR));
					}			
				}
			}
		});
		flgSpesaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {					
				if(showAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_UNICO_RESP_SPESA")) {
					if(isDeterminaConSpesa()) {
						flgAdottanteUnicoRespPEGItem.setValue(true);
						flgAdottanteUnicoRespPEGItem.setDisabled(false);
					} else if(isDeterminaConSpesaSenzaImpegni()) {						
						flgAdottanteUnicoRespPEGItem.setValue(true);
						flgAdottanteUnicoRespPEGItem.setDisabled(true);
					} else if(isDeterminaSenzaSpesa()) {
						flgAdottanteUnicoRespPEGItem.setValue(false);
						flgAdottanteUnicoRespPEGItem.setDisabled(true);
					}				
				}
				if(showAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_RESP_REG_TECNICA_UNICO_RESP_SPESA")) {
					if(isDeterminaConSpesa()) {
						flgDirRespRegTecnicaUnicoRespSpesaItem.setValue(true);
						flgDirRespRegTecnicaUnicoRespSpesaItem.setDisabled(false);
					} else if(isDeterminaConSpesaSenzaImpegni()) {
						flgDirRespRegTecnicaUnicoRespSpesaItem.setValue(true);
						flgDirRespRegTecnicaUnicoRespSpesaItem.setDisabled(true);
					} else if(isDeterminaSenzaSpesa()) {
						flgDirRespRegTecnicaUnicoRespSpesaItem.setValue(false);
						flgDirRespRegTecnicaUnicoRespSpesaItem.setDisabled(true);
					}
				}
				if(materiaTipoAttoItem != null) {
					resetMateriaTipoAttoAfterChangedParams();
				}					
				setUfficioDefinizioneSpesaFromUoProponente();				
				redrawTabForms(_TAB_DATI_SCHEDA_ID);
				enableDisableTabs();
				showHideSections();
			}
		});		
		
		SpacerItem spacerFlgDatiRilevantiGSAItem = new SpacerItem();
		spacerFlgDatiRilevantiGSAItem.setColSpan(2);
		spacerFlgDatiRilevantiGSAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDatiRilevantiGSAItem();
			}
		});
		
		flgDatiRilevantiGSAItem = new RadioGroupItem("flgDatiRilevantiGSA", getTitleFlgDatiRilevantiGSAItem());
		flgDatiRilevantiGSAItem.setColSpan(5);
		Map<String, String> flgDatiRilevantiGSAValueMap = getValueMapFlgDatiRilevantiGSAItem();
		if(flgDatiRilevantiGSAValueMap != null && flgDatiRilevantiGSAValueMap.keySet().size() > 0) {
			flgDatiRilevantiGSAItem.setValueMap(flgDatiRilevantiGSAValueMap);					
			if(flgDatiRilevantiGSAValueMap.size() == 1) {
				flgDatiRilevantiGSAItem.setDefaultValue(flgDatiRilevantiGSAValueMap.keySet().iterator().next());
			} else {
				flgDatiRilevantiGSAItem.setDefaultValue(getDefaultValueFlgDatiRilevantiGSAItem());
			}	
		} else {
			String[] flgDatiRilevantiGSAValoriPossibili = getValoriPossibiliFlgDatiRilevantiGSAItem();
			flgDatiRilevantiGSAItem.setValueMap(flgDatiRilevantiGSAValoriPossibili);					
			if(flgDatiRilevantiGSAValoriPossibili != null && flgDatiRilevantiGSAValoriPossibili.length == 1) {
				flgDatiRilevantiGSAItem.setDefaultValue(flgDatiRilevantiGSAValoriPossibili[0]);
			} else {
				flgDatiRilevantiGSAItem.setDefaultValue(getDefaultValueFlgDatiRilevantiGSAItem());
			}
		}
		flgDatiRilevantiGSAItem.setVertical(false);
		flgDatiRilevantiGSAItem.setWrap(false);
		flgDatiRilevantiGSAItem.setShowDisabled(false);
		if(isRequiredFlgDatiRilevantiGSAItem()) {
			flgDatiRilevantiGSAItem.setAttribute("obbligatorio", true);
		}
		flgDatiRilevantiGSAItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgDatiRilevantiGSAItem();
			}
		}));
		flgDatiRilevantiGSAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgDatiRilevantiGSAItem();
			}
		});
		
		infoDatiRilevantiGSAButton = new ImgButtonItem("infoDatiRilevantiGSAButton", "about.png", "Info");
		infoDatiRilevantiGSAButton.setAlwaysEnabled(true);
		infoDatiRilevantiGSAButton.setColSpan(5);
		infoDatiRilevantiGSAButton.setIconWidth(16);
		infoDatiRilevantiGSAButton.setIconHeight(16);
		infoDatiRilevantiGSAButton.setIconVAlign(VerticalAlignment.BOTTOM);
		infoDatiRilevantiGSAButton.setAlign(Alignment.LEFT);
		infoDatiRilevantiGSAButton.setWidth(16);
		infoDatiRilevantiGSAButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				final String uriPdfInfoDatiRilevantiGSA = AurigaLayout.getParametroDB("URI_PDF_INFO_GSA");
				if(uriPdfInfoDatiRilevantiGSA != null && !"".equals(uriPdfInfoDatiRilevantiGSA)) {
					Record infoFilePdf = new Record();
					infoFilePdf.setAttribute("correctFileName", "Info_Dati_Rilevanti_GSA.pdf");
					infoFilePdf.setAttribute("mimetype", "application/pdf");					
					infoFilePdf.setAttribute("firmato", false);
					infoFilePdf.setAttribute("convertibile", false);
					infoFilePdf.setAttribute("bytes", 0);					
					new PreviewWindow(uriPdfInfoDatiRilevantiGSA, true, new InfoFileRecord(infoFilePdf), "FileToExtractBean", "Info_Dati_Rilevanti_GSA.pdf") {
						
						@Override
						public boolean isModal() {
							return isEnablePreviewModal();
						}								
					};
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessun file di informazione disponibile", "", MessageType.ERROR));
				}
			}
		});
		infoDatiRilevantiGSAButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String uriPdfInfoDatiRilevantiGSA = AurigaLayout.getParametroDB("URI_PDF_INFO_GSA");
				return showFlgDatiRilevantiGSAItem() && uriPdfInfoDatiRilevantiGSA != null && !"".equals(uriPdfInfoDatiRilevantiGSA);
			}
		});
		
		String titleUfficiCompetentiRagItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleUfficiCompetentiRagItem() + "</span>";
		if(isRequiredUfficiCompetentiRagItem()) {
			titleUfficiCompetentiRagItem = "<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUfficiCompetentiRagItem()) + "</span>";
		}
		listaUfficiCompetentiRagItem = new UfficioCompetenteRagItem(titleUfficiCompetentiRagItem) {
						
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboUfficiCompetentiRagItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showUfficiCompetentiRagItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public void manageAfterChangedRequired() {
				VLayout lVLayout = getVLayout();
				if(lVLayout != null) {
					if(isRequiredUfficiCompetentiRagItem()) {
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUfficiCompetentiRagItem()) + "</span>");
					} else {
						lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleUfficiCompetentiRagItem() + "</span>");
					}
				}
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredUfficiCompetentiRagItem()) {
					listaUfficiCompetentiRagItem.setAttribute("obbligatorio", true);
				} else {
					listaUfficiCompetentiRagItem.setAttribute("obbligatorio", false);
				}
				listaUfficiCompetentiRagItem.storeValue(caratteristicheProvvedimentoForm.getValueAsRecordList(listaUfficiCompetentiRagItem.getName()));	
				listaUfficiCompetentiRagItem.manageAfterChangedRequired();
				return super.validate();
			}
		};
		listaUfficiCompetentiRagItem.setName("listaUfficiCompetentiRag");
		listaUfficiCompetentiRagItem.setShowTitle(false);
		listaUfficiCompetentiRagItem.setColSpan(20);
		listaUfficiCompetentiRagItem.setDefaultValue(getDefaultValueUfficiCompetentiRagItem());
//		if(isRequiredUfficiCompetentiRagItem()) {
//			listaUfficiCompetentiRagItem.setAttribute("obbligatorio", true);
//		} else {
//			listaUfficiCompetentiRagItem.setAttribute("obbligatorio", false);
//		}
		if(isNotReplicableUfficiCompetentiRagItem()) {
			listaUfficiCompetentiRagItem.setNotReplicable(true);
		}	
		listaUfficiCompetentiRagItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredUfficiCompetentiRagItem()) {
					listaUfficiCompetentiRagItem.setAttribute("obbligatorio", true);
				} else {
					listaUfficiCompetentiRagItem.setAttribute("obbligatorio", false);
				}
				listaUfficiCompetentiRagItem.storeValue(form.getValueAsRecordList(listaUfficiCompetentiRagItem.getName()));	
				listaUfficiCompetentiRagItem.manageAfterChangedRequired();
				return showUfficiCompetentiRagItem();
			}
		});
		
		final LinkedHashMap<String, String> annoContabileCompetenzaValueMap = new LinkedHashMap<String, String>();
		String annoCorrente = DateTimeFormat.getFormat("yyyy").format(new Date());		
		String doppioAnnoContabileFinoAl = AurigaLayout.getParametroDB("DOPPIO_ANNO_CONTABILE_FINO_AL");
		if(doppioAnnoContabileFinoAl != null && !"".equals(doppioAnnoContabileFinoAl)) {
			Date dataDoppioAnnoContabileFinoAl = DateTimeFormat.getFormat("dd/MM/yyyy").parse(doppioAnnoContabileFinoAl += "/" + annoCorrente);
			Date today = new Date();	
			CalendarUtil.resetTime(today); // resetto l'ora altrimenti se le date sono uguali ma l'ora è diversa
			if (dataDoppioAnnoContabileFinoAl != null && today.compareTo(dataDoppioAnnoContabileFinoAl) <= 0) {
				String annoPrec = String.valueOf(Integer.parseInt(annoCorrente) - 1);
				annoContabileCompetenzaValueMap.put(annoPrec, annoPrec);    	
			}				
		}		
		annoContabileCompetenzaValueMap.put(annoCorrente, annoCorrente);		
		
		annoContabileCompetenzaItem = new SelectItem("annoContabileCompetenza", getTitleAnnoContabileCompetenzaItem()) {
			
			@Override
			public void setCanEdit(Boolean canEdit) {
				super.setCanEdit(annoContabileCompetenzaValueMap.keySet().size() > 1 ? canEdit : false);
			}
		};
		annoContabileCompetenzaItem.setWidth(150);
		annoContabileCompetenzaItem.setColSpan(1);
		annoContabileCompetenzaItem.setStartRow(true);						
		if(annoContabileCompetenzaValueMap.keySet().size() == 1) {
			annoContabileCompetenzaItem.setDefaultValue(annoContabileCompetenzaValueMap.keySet().iterator().next());
		}
		annoContabileCompetenzaItem.setValueMap(annoContabileCompetenzaValueMap);
		annoContabileCompetenzaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnnoContabileCompetenzaItem();
			}
		}));
		annoContabileCompetenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredAnnoContabileCompetenzaItem()) {
					annoContabileCompetenzaItem.setAttribute("obbligatorio", true);
					annoContabileCompetenzaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleAnnoContabileCompetenzaItem()));
				} else {
					annoContabileCompetenzaItem.setAttribute("obbligatorio", false);
					annoContabileCompetenzaItem.setTitle(getTitleAnnoContabileCompetenzaItem());
				}
				return showAnnoContabileCompetenzaItem();
			}
		});
		
		SpacerItem spacerFlgCorteContiItem = new SpacerItem();
		spacerFlgCorteContiItem.setColSpan(1);
		spacerFlgCorteContiItem.setStartRow(true);
		spacerFlgCorteContiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgCorteContiItem();
			}
		});
		
		flgCorteContiItem = new CheckboxItem("flgCorteConti", getTitleFlgCorteContiItem());
		flgCorteContiItem.setDefaultValue(getDefaultValueAsBooleanFlgCorteContiItem());
		flgCorteContiItem.setColSpan(18);
		flgCorteContiItem.setWidth("*");	
		flgCorteContiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgCorteContiItem();
			}
		});
		
		SpacerItem spacerFlgLiqContestualeImpegnoItem = new SpacerItem();
		spacerFlgLiqContestualeImpegnoItem.setColSpan(1);
		spacerFlgLiqContestualeImpegnoItem.setStartRow(true);
		spacerFlgLiqContestualeImpegnoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgLiqContestualeImpegnoItem();
			}
		});
		
		flgLiqContestualeImpegnoItem = new CheckboxItem("flgLiqContestualeImpegno", getTitleFlgLiqContestualeImpegnoItem());
		flgLiqContestualeImpegnoItem.setDefaultValue(getDefaultValueAsBooleanFlgLiqContestualeImpegnoItem());
		flgLiqContestualeImpegnoItem.setColSpan(18);
		flgLiqContestualeImpegnoItem.setWidth("*");	
		flgLiqContestualeImpegnoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgLiqContestualeAltriAspettiRilContItem.setValue(false);	
					flgDetConLiquidazioneItem.setValue(false);
				} 
			}
		});
		flgLiqContestualeImpegnoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgLiqContestualeImpegnoItem();
			}
		});
		
		SpacerItem spacerFlgLiqContestualeAltriAspettiRilContItem = new SpacerItem();
		spacerFlgLiqContestualeAltriAspettiRilContItem.setColSpan(1);
		spacerFlgLiqContestualeAltriAspettiRilContItem.setStartRow(true);
		spacerFlgLiqContestualeAltriAspettiRilContItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgLiqContestualeAltriAspettiRilContItem();
			}
		});
		
		flgLiqContestualeAltriAspettiRilContItem = new CheckboxItem("flgLiqContestualeAltriAspettiRilCont", getTitleFlgLiqContestualeAltriAspettiRilContItem());
		flgLiqContestualeAltriAspettiRilContItem.setDefaultValue(getDefaultValueAsBooleanFlgLiqContestualeAltriAspettiRilContItem());
		flgLiqContestualeAltriAspettiRilContItem.setColSpan(18);
		flgLiqContestualeAltriAspettiRilContItem.setWidth("*");	
		flgLiqContestualeAltriAspettiRilContItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgLiqContestualeImpegnoItem.setValue(false);		
					flgDetConLiquidazioneItem.setValue(false);
				} 
			}
		});
		flgLiqContestualeAltriAspettiRilContItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgLiqContestualeAltriAspettiRilContItem();
			}
		});
		
		SpacerItem spacerFlgDetConLiquidazioneItem = new SpacerItem();
		spacerFlgDetConLiquidazioneItem.setColSpan(1);
		spacerFlgDetConLiquidazioneItem.setStartRow(true);
		spacerFlgDetConLiquidazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDetConLiquidazioneItem();
			}
		});
		
		flgDetConLiquidazioneItem = new CheckboxItem("flgDetConLiquidazione", getTitleFlgDetConLiquidazioneItem());
		flgDetConLiquidazioneItem.setDefaultValue(getDefaultValueAsBooleanFlgDetConLiquidazioneItem());
		flgDetConLiquidazioneItem.setColSpan(18);
		flgDetConLiquidazioneItem.setWidth("*");	
		flgDetConLiquidazioneItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgLiqContestualeImpegnoItem.setValue(false);		
					flgLiqContestualeAltriAspettiRilContItem.setValue(false);
				} 
			}
		});
		flgDetConLiquidazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgDetConLiquidazioneItem();
			}
		});
		
		SpacerItem spacerFlgCompQuadroFinRagDecItem = new SpacerItem();
		spacerFlgCompQuadroFinRagDecItem.setColSpan(1);
		spacerFlgCompQuadroFinRagDecItem.setStartRow(true);
		spacerFlgCompQuadroFinRagDecItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgCompQuadroFinRagDecItem();
			}
		});
		
		flgCompQuadroFinRagDecItem = new CheckboxItem("flgCompQuadroFinRagDec", getTitleFlgCompQuadroFinRagDecItem());
		flgCompQuadroFinRagDecItem.setDefaultValue(getDefaultValueAsBooleanFlgCompQuadroFinRagDecItem());
		flgCompQuadroFinRagDecItem.setColSpan(18);
		flgCompQuadroFinRagDecItem.setWidth("*");			
		flgCompQuadroFinRagDecItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgCompQuadroFinRagDecItem();
			}
		});
		
		SpacerItem spacerFlgNuoviImpAccItem = new SpacerItem();
		spacerFlgNuoviImpAccItem.setColSpan(1);
		spacerFlgNuoviImpAccItem.setStartRow(true);
		spacerFlgNuoviImpAccItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgNuoviImpAccItem();
			}
		});
		
		flgNuoviImpAccItem = new CheckboxItem("flgNuoviImpAcc", getTitleFlgNuoviImpAccItem());
		flgNuoviImpAccItem.setDefaultValue(getDefaultValueAsBooleanFlgNuoviImpAccItem());
		flgNuoviImpAccItem.setColSpan(18);
		flgNuoviImpAccItem.setWidth("*");	
		flgNuoviImpAccItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		flgNuoviImpAccItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgNuoviImpAccItem();
			}
		});
		
		SpacerItem spacerFlgImpSuAnnoCorrenteItem = new SpacerItem();
		spacerFlgImpSuAnnoCorrenteItem.setColSpan(1);
		spacerFlgImpSuAnnoCorrenteItem.setStartRow(true);
		spacerFlgImpSuAnnoCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgImpSuAnnoCorrenteItem();
			}
		});
		
		flgImpSuAnnoCorrenteItem = new CheckboxItem("flgImpSuAnnoCorrente", getTitleFlgImpSuAnnoCorrenteItem());
		flgImpSuAnnoCorrenteItem.setDefaultValue(getDefaultValueAsBooleanFlgImpSuAnnoCorrenteItem());
		flgImpSuAnnoCorrenteItem.setColSpan(18);
		flgImpSuAnnoCorrenteItem.setWidth("*");	
		flgImpSuAnnoCorrenteItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		flgImpSuAnnoCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgImpSuAnnoCorrenteItem();
			}
		});
		
		SpacerItem spacerFlgInsMovARagioneriaItem = new SpacerItem();
		spacerFlgInsMovARagioneriaItem.setColSpan(1);
		spacerFlgInsMovARagioneriaItem.setStartRow(true);
		spacerFlgInsMovARagioneriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgInsMovARagioneriaItem();
			}
		});
		
		flgInsMovARagioneriaItem = new CheckboxItem("flgInsMovARagioneria", getTitleFlgInsMovARagioneriaItem());
		flgInsMovARagioneriaItem.setDefaultValue(getDefaultValueAsBooleanFlgInsMovARagioneriaItem());
		flgInsMovARagioneriaItem.setColSpan(18);
		flgInsMovARagioneriaItem.setWidth("*");	
		flgInsMovARagioneriaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				if(showFlgInsMovARagioneriaItem()) {
					if(showFlgNuoviImpAccItem() && !getValueAsBoolean("flgNuoviImpAcc")) {
						item.setDisabled(true);
						item.setValue(true);		
			 		} else {
						item.setDisabled(false);
					}
					return true;
				}
				return false;
			}
		});
		
		SpacerItem spacerFlgPresaVisioneContabilitaItem = new SpacerItem();
		spacerFlgPresaVisioneContabilitaItem.setColSpan(1);
		spacerFlgPresaVisioneContabilitaItem.setStartRow(true);
		spacerFlgPresaVisioneContabilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgPresaVisioneContabilitaItem();
			}
		});
		
		flgPresaVisioneContabilitaItem = new CheckboxItem("flgPresaVisioneContabilita", getTitleFlgPresaVisioneContabilitaItem());
		flgPresaVisioneContabilitaItem.setDefaultValue(false);
		flgPresaVisioneContabilitaItem.setColSpan(18);
		flgPresaVisioneContabilitaItem.setWidth("*");
		flgPresaVisioneContabilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgPresaVisioneContabilitaItem();
			}
		});
		
		tipoAttoInDeliberaPEGItem = new SelectItem("tipoAttoInDeliberaPEG", getTitleTipoAttoInDeliberaPEGItem());		
//		tipoAttoInDeliberaPEGItem.setTitleOrientation(TitleOrientation.TOP);
		tipoAttoInDeliberaPEGItem.setWidth(800);
		tipoAttoInDeliberaPEGItem.setColSpan(18);		
		tipoAttoInDeliberaPEGItem.setStartRow(true);
		String[] tipoAttoInDeliberaPEGValoriPossibili = getValoriPossibiliTipoAttoInDeliberaPEGItem();
		if(tipoAttoInDeliberaPEGValoriPossibili != null && tipoAttoInDeliberaPEGValoriPossibili.length > 0) {
			tipoAttoInDeliberaPEGItem.setValueMap(tipoAttoInDeliberaPEGValoriPossibili);			
		} else {
			GWTRestDataSource tipoAttoInDeliberaPEGDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
			tipoAttoInDeliberaPEGDS.addParam("altriParamLoadCombo", getAltriParamLoadComboTipoAttoInDeliberaPEGItem());			
			tipoAttoInDeliberaPEGItem.setValueField("key");
			tipoAttoInDeliberaPEGItem.setDisplayField("value");
			tipoAttoInDeliberaPEGItem.setOptionDataSource(tipoAttoInDeliberaPEGDS);	
		}
		tipoAttoInDeliberaPEGItem.setClearable(true);		
		tipoAttoInDeliberaPEGItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoAttoInDeliberaPEGItem();
			}
		}));
		tipoAttoInDeliberaPEGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredTipoAttoInDeliberaPEGItem()) {
					tipoAttoInDeliberaPEGItem.setAttribute("obbligatorio", true);
					tipoAttoInDeliberaPEGItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleTipoAttoInDeliberaPEGItem()));
				} else {
					tipoAttoInDeliberaPEGItem.setAttribute("obbligatorio", false);
					tipoAttoInDeliberaPEGItem.setTitle(getTitleTipoAttoInDeliberaPEGItem());
				}
				return showTipoAttoInDeliberaPEGItem();
			}
		});
			
		GWTRestDataSource tipoAffidamentoDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		tipoAffidamentoDS.addParam("altriParamLoadCombo", getAltriParamLoadComboTipoAffidamentoItem());
		 		
		tipoAffidamentoItem = new SelectItem("tipoAffidamento", getTitleTipoAffidamentoItem());
//		tipoAffidamentoItem.setTitleOrientation(TitleOrientation.TOP);		
		tipoAffidamentoItem.setWidth(500);
		tipoAffidamentoItem.setColSpan(18);		
		tipoAffidamentoItem.setStartRow(true);
		tipoAffidamentoItem.setValueField("key");
		tipoAffidamentoItem.setDisplayField("value");
		tipoAffidamentoItem.setOptionDataSource(tipoAffidamentoDS);	
		tipoAffidamentoItem.setClearable(true);		
		tipoAffidamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredTipoAffidamentoItem()) {
					tipoAffidamentoItem.setAttribute("obbligatorio", true);
					tipoAffidamentoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleTipoAffidamentoItem()));
				} else {
					tipoAffidamentoItem.setAttribute("obbligatorio", false);
					tipoAffidamentoItem.setTitle(getTitleTipoAffidamentoItem());
				}
				return showTipoAffidamentoItem();
			}
		});
		tipoAffidamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoAffidamentoItem();
			}
		}));		
		tipoAffidamentoItem.addChangedHandler(new ChangedHandler() {

			@Override
			public void onChanged(ChangedEvent event) {
				if(normRifAffidamentoItem != null) {
					final String value = normRifAffidamentoItem.getValueAsString();
					normRifAffidamentoItem.fetchData(new DSCallback() {
			
						@Override
						public void execute(DSResponse response, Object rawData, DSRequest request) {
							RecordList data = response.getDataAsRecordList();
							if(value != null && !"".equals(value)) {
								boolean trovato = false;
								if (data.getLength() > 0) {
									for (int i = 0; i < data.getLength(); i++) {
										String key = data.get(i).getAttribute("key");
										if (value.equals(key)) {
											trovato = true;
											break;
										}
									}
								}
								if (!trovato) {
									normRifAffidamentoItem.setValue("");
									normRifAffidamentoItem.fireEvent(new ChangedEvent(normRifAffidamentoItem.getJsObj()));
								}
							}
						}
					});
				}
			}
		});
		
		GWTRestDataSource normRifAffidamentoDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		normRifAffidamentoDS.addParam("altriParamLoadCombo", getAltriParamLoadComboNormRifAffidamentoItem());
		 		
		normRifAffidamentoItem = new SelectItem("normRifAffidamento", getTitleNormRifAffidamentoItem()) {
			
			@Override
			protected ListGrid builPickListProperties() {
				ListGrid normRifAffidamentoPickListProperties = super.builPickListProperties();	
				normRifAffidamentoPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						GWTRestDataSource normRifAffidamentoDS = (GWTRestDataSource) normRifAffidamentoItem.getOptionDataSource();		
						normRifAffidamentoDS.addParam("codValoreVincolo", tipoAffidamentoItem.getValueAsString());									
						normRifAffidamentoItem.setOptionDataSource(normRifAffidamentoDS);
						normRifAffidamentoItem.invalidateDisplayValueCache();
					}
				});
				return normRifAffidamentoPickListProperties;
			}
		};
//		normRifAffidamentoItem.setTitleOrientation(TitleOrientation.TOP);		
		normRifAffidamentoItem.setWidth(500);
		normRifAffidamentoItem.setColSpan(18);		
		normRifAffidamentoItem.setStartRow(true);
		normRifAffidamentoItem.setValueField("key");
		normRifAffidamentoItem.setDisplayField("value");
		normRifAffidamentoItem.setOptionDataSource(normRifAffidamentoDS);	
		normRifAffidamentoItem.setClearable(true);
		normRifAffidamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredNormRifAffidamentoItem()) {
					normRifAffidamentoItem.setAttribute("obbligatorio", true);
					normRifAffidamentoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleNormRifAffidamentoItem()));
				} else {
					normRifAffidamentoItem.setAttribute("obbligatorio", false);
					normRifAffidamentoItem.setTitle(getTitleNormRifAffidamentoItem());
				}
				return showNormRifAffidamentoItem();
			}
		});
		normRifAffidamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNormRifAffidamentoItem();
			}
		}));
		
		respAffidamentoItem = new TextItem("respAffidamento", getTitleRespAffidamentoItem());
		respAffidamentoItem.setWidth(481);
		respAffidamentoItem.setColSpan(18);		
		respAffidamentoItem.setStartRow(true);
		respAffidamentoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredRespAffidamentoItem();
			}
		}));
		respAffidamentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredRespAffidamentoItem()) {
					respAffidamentoItem.setAttribute("obbligatorio", true);
					respAffidamentoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleRespAffidamentoItem()));
				} else {
					respAffidamentoItem.setAttribute("obbligatorio", false);
					respAffidamentoItem.setTitle(getTitleRespAffidamentoItem());
				}
				return showRespAffidamentoItem();
			}
		});
			
		GWTRestDataSource materiaTipoAttoDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT, true);
		materiaTipoAttoDS.addParam("altriParamLoadCombo", getAltriParamLoadComboMateriaTipoAttoItem());
		 		
		materiaTipoAttoItem = new FilteredSelectItem("materiaTipoAtto", getTitleMateriaTipoAttoItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);	
				caratteristicheProvvedimentoForm.setValue("desMateriaTipoAtto", record.getAttributeAsString("value"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				caratteristicheProvvedimentoForm.setValue("materiaTipoAtto", "");	
				caratteristicheProvvedimentoForm.setValue("desMateriaTipoAtto", "");	
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					caratteristicheProvvedimentoForm.setValue("materiaTipoAtto", "");
					caratteristicheProvvedimentoForm.setValue("desMateriaTipoAtto", "");
				}
			}

			@Override
			protected ListGrid builPickListProperties() {
				ListGrid materiaTipoAttoItemPickListProperties = super.builPickListProperties();	
				materiaTipoAttoItemPickListProperties.setShowHeader(false);
				materiaTipoAttoItemPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						GWTRestDataSource materiaTipoAttoDS = (GWTRestDataSource) materiaTipoAttoItem.getOptionDataSource();		
						materiaTipoAttoDS.addParam("flgSpesa", getFlgSpesa());						
						materiaTipoAttoItem.setOptionDataSource(materiaTipoAttoDS);
						materiaTipoAttoItem.invalidateDisplayValueCache();
					}
				});
				return materiaTipoAttoItemPickListProperties;
			}
		};
//		materiaTipoAttoItem.setTitleOrientation(TitleOrientation.TOP);
		materiaTipoAttoItem.setWidth(500);
		materiaTipoAttoItem.setColSpan(18);		
		materiaTipoAttoItem.setStartRow(true);		
		materiaTipoAttoItem.setValueField("key");
		materiaTipoAttoItem.setDisplayField("value");
		ListGridField valueField = new ListGridField("value", "Descrizione");
		valueField.setWidth("*");
		valueField.setCanFilter(true);		
		materiaTipoAttoItem.setPickListFields(valueField);
		materiaTipoAttoItem.setOptionDataSource(materiaTipoAttoDS);
		materiaTipoAttoItem.setClearable(true);		
		materiaTipoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showMateriaTipoAttoItem();
			}
		});
		if(isRequiredMateriaTipoAttoItem()) {
			materiaTipoAttoItem.setAttribute("obbligatorio", true);
		}
		materiaTipoAttoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredMateriaTipoAttoItem();
			}
		}));
		
		desMateriaTipoAttoItem = new HiddenItem("desMateriaTipoAtto");
		
		GWTRestDataSource tipoFinanziamentoPNRRDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		tipoFinanziamentoPNRRDS.addParam("altriParamLoadCombo", getAltriParamLoadComboTipoFinanziamentoPNRRItem());
		 		
		tipoFinanziamentoPNRRItem = new SelectItem("tipoFinanziamentoPNRR", getTitleTipoFinanziamentoPNRRItem());
//		tipoFinanziamentoPNRRItem.setTitleOrientation(TitleOrientation.TOP);		
		tipoFinanziamentoPNRRItem.setWidth(500);
		tipoFinanziamentoPNRRItem.setColSpan(18);		
		tipoFinanziamentoPNRRItem.setStartRow(true);
		tipoFinanziamentoPNRRItem.setValueField("key");
		tipoFinanziamentoPNRRItem.setDisplayField("value");
		tipoFinanziamentoPNRRItem.setOptionDataSource(tipoFinanziamentoPNRRDS);	
		tipoFinanziamentoPNRRItem.setClearable(true);				
		tipoFinanziamentoPNRRItem.setDefaultValue(getDefaultValueTipoFinanziamentoPNRRItem());		
		tipoFinanziamentoPNRRItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredTipoFinanziamentoPNRRItem()) {
					tipoFinanziamentoPNRRItem.setAttribute("obbligatorio", true);
					tipoFinanziamentoPNRRItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleTipoFinanziamentoPNRRItem()));
				} else {
					tipoFinanziamentoPNRRItem.setAttribute("obbligatorio", false);
					tipoFinanziamentoPNRRItem.setTitle(getTitleTipoFinanziamentoPNRRItem());
				}
				return showTipoFinanziamentoPNRRItem();
			}
		});
		tipoFinanziamentoPNRRItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredTipoFinanziamentoPNRRItem();
			}
		}));		
		
		flgSottotipoAttoItem = new RadioGroupItem("flgSottotipoAtto", getTitleFlgSottotipoAttoItem());		
		flgSottotipoAttoItem.setStartRow(true);		
		flgSottotipoAttoItem.setValueMap(getValueMapFlgSottotipoAttoItem());
		flgSottotipoAttoItem.setDefaultValue(getDefaultValueFlgSottotipoAttoItem());
		flgSottotipoAttoItem.setVertical(false);
		flgSottotipoAttoItem.setWrap(false);
		flgSottotipoAttoItem.setShowDisabled(false);
		if(isRequiredFlgSottotipoAttoItem()) {
			flgSottotipoAttoItem.setAttribute("obbligatorio", true);
		}
		flgSottotipoAttoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgSottotipoAttoItem();
			}
		}));
		flgSottotipoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgSottotipoAttoItem();
			}
		});		
		
		flgTipoIterItem = new RadioGroupItem("flgTipoIter", getTitleFlgTipoIterItem());		
		flgTipoIterItem.setStartRow(true);		
		flgTipoIterItem.setValueMap(getValueMapFlgTipoIterItem());
		flgTipoIterItem.setDefaultValue(getDefaultValueFlgTipoIterItem());
		flgTipoIterItem.setVertical(false);
		flgTipoIterItem.setWrap(false);
		flgTipoIterItem.setShowDisabled(false);
		if(isRequiredFlgTipoIterItem()) {
			flgTipoIterItem.setAttribute("obbligatorio", true);
		}
		flgTipoIterItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgTipoIterItem();
			}
		}));
		flgTipoIterItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgTipoIterItem();
			}
		});			
				
		SpacerItem spacerFlgFondiEuropeiPONItem = new SpacerItem();
		spacerFlgFondiEuropeiPONItem.setColSpan(1);
		spacerFlgFondiEuropeiPONItem.setStartRow(true);
		spacerFlgFondiEuropeiPONItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgFondiEuropeiPONItem();
			}
		});
		
		flgFondiEuropeiPONItem = new CheckboxItem("flgFondiEuropeiPON", getTitleFlgFondiEuropeiPONItem());
		flgFondiEuropeiPONItem.setDefaultValue(getDefaultValueAsBooleanFlgFondiEuropeiPONItem());
		flgFondiEuropeiPONItem.setColSpan(18);
		flgFondiEuropeiPONItem.setWidth("*");	
		flgFondiEuropeiPONItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgFondiPNRRItem.setValue(false);	
					flgFondiPNRRRigenItem.setValue(false);					
				}
			}
		});
		flgFondiEuropeiPONItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgFondiEuropeiPONItem();
			}
		});
		
		flgFondiPNRRRadioItem = new RadioGroupItem("flgFondiPNRRRadio", getTitleFlgFondiPNRRRadioItem());		
		flgFondiPNRRRadioItem.setStartRow(true);		
		flgFondiPNRRRadioItem.setValueMap(getValueMapFlgFondiPNRRRadioItem());
		flgFondiPNRRRadioItem.setDefaultValue(getDefaultValueFlgFondiPNRRRadioItem());
		flgFondiPNRRRadioItem.setVertical(false);
		flgFondiPNRRRadioItem.setWrap(false);
		flgFondiPNRRRadioItem.setShowDisabled(false);		
		flgFondiPNRRRadioItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgFondiPNRRRadioItem();
			}
		}));
		flgFondiPNRRRadioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredFlgFondiPNRRRadioItem()) {
					flgFondiPNRRRadioItem.setAttribute("obbligatorio", true);
					flgFondiPNRRRadioItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleFlgFondiPNRRRadioItem()));
				} else {
					flgFondiPNRRRadioItem.setAttribute("obbligatorio", false);
					flgFondiPNRRRadioItem.setTitle(getTitleFlgFondiPNRRRadioItem());
				}
				return showFlgFondiPNRRRadioItem();
			}
		});
		flgFondiPNRRRadioItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				showHideSections();
			}
		});
		
		SpacerItem spacerFlgFondiPNRRItem = new SpacerItem();
		spacerFlgFondiPNRRItem.setColSpan(1);
		spacerFlgFondiPNRRItem.setStartRow(true);
		spacerFlgFondiPNRRItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgFondiPNRRItem();
			}
		});
		
		flgFondiPNRRItem = new CheckboxItem("flgFondiPNRR", getTitleFlgFondiPNRRItem());
		flgFondiPNRRItem.setDefaultValue(getDefaultValueAsBooleanFlgFondiPNRRItem());
		flgFondiPNRRItem.setColSpan(18);
		flgFondiPNRRItem.setWidth("*");	
		flgFondiPNRRItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgFondiEuropeiPONItem.setValue(false);	
					flgFondiPNRRRigenItem.setValue(false);					
				}
			}
		});
		flgFondiPNRRItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgFondiPNRRItem();
			}
		});
				
		SpacerItem spacerFlgFondiPNRRRigenItem = new SpacerItem();
		spacerFlgFondiPNRRRigenItem.setColSpan(1);
		spacerFlgFondiPNRRRigenItem.setStartRow(true);
		spacerFlgFondiPNRRRigenItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgFondiPNRRRigenItem();
			}
		});
		
		flgFondiPNRRRigenItem = new CheckboxItem("flgFondiPNRRRigen", getTitleFlgFondiPNRRRigenItem());
		flgFondiPNRRRigenItem.setDefaultValue(getDefaultValueAsBooleanFlgFondiPNRRRigenItem());
		flgFondiPNRRRigenItem.setColSpan(18);
		flgFondiPNRRRigenItem.setWidth("*");	
		flgFondiPNRRRigenItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgFondiEuropeiPONItem.setValue(false);	
					flgFondiPNRRItem.setValue(false);					
				}
			}
		});
		flgFondiPNRRRigenItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgFondiPNRRRigenItem();
			}
		});
		
		SpacerItem spacerFlgFondiPRUItem = new SpacerItem();
		spacerFlgFondiPRUItem.setColSpan(1);
		spacerFlgFondiPRUItem.setStartRow(true);
		spacerFlgFondiPRUItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgFondiPRUItem();
			}
		});
		
		flgFondiPRUItem = new CheckboxItem("flgFondiPRU", getTitleFlgFondiPRUItem());
		flgFondiPRUItem.setDefaultValue(getDefaultValueAsBooleanFlgFondiPRUItem());
		flgFondiPRUItem.setColSpan(18);
		flgFondiPRUItem.setWidth("*");	
		flgFondiPRUItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgFondiPRUItem();
			}
		});
		
		SpacerItem spacerFlgVistoUtenzeItem = new SpacerItem();
		spacerFlgVistoUtenzeItem.setColSpan(1);
		spacerFlgVistoUtenzeItem.setStartRow(true);
		spacerFlgVistoUtenzeItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgVistoUtenzeItem();
			}
		});
		
		flgVistoUtenzeItem = new CheckboxItem("flgVistoUtenze", getTitleFlgVistoUtenzeItem());
		flgVistoUtenzeItem.setDefaultValue(getDefaultValueAsBooleanFlgVistoUtenzeItem());
		flgVistoUtenzeItem.setColSpan(18);
		flgVistoUtenzeItem.setWidth("*");	
		flgVistoUtenzeItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgVistoUtenzeItem();
			}
		});
		
		SpacerItem spacerFlgVistoCapitolatiSottoSogliaItem = new SpacerItem();
		spacerFlgVistoCapitolatiSottoSogliaItem.setColSpan(1);
		spacerFlgVistoCapitolatiSottoSogliaItem.setStartRow(true);
		spacerFlgVistoCapitolatiSottoSogliaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgVistoCapitolatiSottoSogliaItem();
			}
		});
		
		flgVistoCapitolatiSottoSogliaItem = new CheckboxItem("flgVistoCapitolatiSottoSoglia", getTitleFlgVistoCapitolatiSottoSogliaItem());
		flgVistoCapitolatiSottoSogliaItem.setDefaultValue(getDefaultValueAsBooleanFlgVistoCapitolatiSottoSogliaItem());
		flgVistoCapitolatiSottoSogliaItem.setColSpan(18);
		flgVistoCapitolatiSottoSogliaItem.setWidth("*");
		flgVistoCapitolatiSottoSogliaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgVistoCapitolatiSopraSogliaItem.setValue(false);									
				}
			}
		});
		flgVistoCapitolatiSottoSogliaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgVistoCapitolatiSottoSogliaItem();
			}
		});	
		
		SpacerItem spacerFlgVistoCapitolatiSopraSogliaItem = new SpacerItem();
		spacerFlgVistoCapitolatiSopraSogliaItem.setColSpan(1);
		spacerFlgVistoCapitolatiSopraSogliaItem.setStartRow(true);
		spacerFlgVistoCapitolatiSopraSogliaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgVistoCapitolatiSopraSogliaItem();
			}
		});
		
		flgVistoCapitolatiSopraSogliaItem = new CheckboxItem("flgVistoCapitolatiSopraSoglia", getTitleFlgVistoCapitolatiSopraSogliaItem());
		flgVistoCapitolatiSopraSogliaItem.setDefaultValue(getDefaultValueAsBooleanFlgVistoCapitolatiSopraSogliaItem());
		flgVistoCapitolatiSopraSogliaItem.setColSpan(18);
		flgVistoCapitolatiSopraSogliaItem.setWidth("*");
		flgVistoCapitolatiSopraSogliaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgVistoCapitolatiSottoSogliaItem.setValue(false);									
				}
			}
		});
		flgVistoCapitolatiSopraSogliaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgVistoCapitolatiSopraSogliaItem();
			}
		});		 
		
		SpacerItem spacerFlgVistoPar117_2013Item = new SpacerItem();
		spacerFlgVistoPar117_2013Item.setColSpan(1);
		spacerFlgVistoPar117_2013Item.setStartRow(true);
		spacerFlgVistoPar117_2013Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgVistoPar117_2013Item();
			}
		});
		
		flgVistoPar117_2013Item = new CheckboxItem("flgVistoPar117_2013", getTitleFlgVistoPar117_2013Item());
		flgVistoPar117_2013Item.setDefaultValue(getDefaultValueAsBooleanFlgVistoPar117_2013Item());
		flgVistoPar117_2013Item.setColSpan(18);
		flgVistoPar117_2013Item.setWidth("*");	
		flgVistoPar117_2013Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgVistoPar117_2013Item();
			}
		});
		
		SpacerItem spacerFlgNotificaDaMessiItem = new SpacerItem();
		spacerFlgNotificaDaMessiItem.setColSpan(1);
		spacerFlgNotificaDaMessiItem.setStartRow(true);
		spacerFlgNotificaDaMessiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgNotificaDaMessiItem();
			}
		});
		
		flgNotificaDaMessiItem = new CheckboxItem("flgNotificaDaMessi", getTitleFlgNotificaDaMessiItem());
		flgNotificaDaMessiItem.setDefaultValue(getDefaultValueAsBooleanFlgNotificaDaMessiItem());
		flgNotificaDaMessiItem.setColSpan(18);
		flgNotificaDaMessiItem.setWidth("*");	
		flgNotificaDaMessiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgNotificaDaMessiItem();
			}
		});
		
		SpacerItem spacerFlgSenzaImpegniContItem = new SpacerItem();
		spacerFlgSenzaImpegniContItem.setColSpan(1);
		spacerFlgSenzaImpegniContItem.setStartRow(true);
		spacerFlgSenzaImpegniContItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgSenzaImpegniContItem();
			}
		});
		
		flgSenzaImpegniContItem = new CheckboxItem("flgSenzaImpegniCont", getTitleFlgSenzaImpegniContItem());
		flgSenzaImpegniContItem.setDefaultValue(getDefaultValueAsBooleanFlgSenzaImpegniContItem());
		flgSenzaImpegniContItem.setColSpan(18);
		flgSenzaImpegniContItem.setWidth("*");	
		flgSenzaImpegniContItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgSenzaImpegniContItem();
			}
		});
		
		flgMEPACONSIPItem = new RadioGroupItem("flgMEPACONSIP", getTitleFlgMEPACONSIPItem());
		flgMEPACONSIPItem.setStartRow(true);
		flgMEPACONSIPItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgMEPACONSIPItem.setDefaultValue(getDefaultValueFlgMEPACONSIPItem());
		flgMEPACONSIPItem.setVertical(false);
		flgMEPACONSIPItem.setWrap(false);
		flgMEPACONSIPItem.setShowDisabled(false);
		if(isRequiredFlgMEPACONSIPItem()) {
			flgMEPACONSIPItem.setAttribute("obbligatorio", true);
		}
		flgMEPACONSIPItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgMEPACONSIPItem();
			}
		}));
		flgMEPACONSIPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgMEPACONSIPItem();
			}
		});			
		flgMEPACONSIPItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		
		flgServeDUVRIItem = new RadioGroupItem("flgServeDUVRI", getTitleFlgServeDUVRIItem());
		flgServeDUVRIItem.setStartRow(true);
		flgServeDUVRIItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgServeDUVRIItem.setDefaultValue(getDefaultValueFlgServeDUVRIItem());
		flgServeDUVRIItem.setVertical(false);
		flgServeDUVRIItem.setWrap(false);
		flgServeDUVRIItem.setShowDisabled(false);
		if(isRequiredFlgServeDUVRIItem()) {
			flgServeDUVRIItem.setAttribute("obbligatorio", true);
		}
		flgServeDUVRIItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgServeDUVRIItem();
			}
		}));
		flgServeDUVRIItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgServeDUVRIItem();
			}
		});			
		flgServeDUVRIItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		
		RegExpValidator imponibileComplessivoPrecisionValidator = new RegExpValidator();
		imponibileComplessivoPrecisionValidator.setExpression("^([0-9]{1,3}((\\.)?[0-9]{3})*(,[0-9]{1,2})?)$");
		imponibileComplessivoPrecisionValidator.setErrorMessage("Valore non valido o superato il limite di 2 cifre decimali");
		
		CustomValidator imponibileComplessivoMaggioreOUgualeDiZeroValidator = new CustomValidator() {
			
			@Override
			protected boolean condition(Object value) {
				if(showImponibileComplessivoItem()) {					
					// se l'importo è vuoto, ma non è obbligatorio, la validazione deve andare a buon fine
					if(!isRequiredImponibileComplessivoItem() && (value == null || "".equals(value))) {
						return true;
					}
					String pattern = "#,##0.00";
					double importo = 0;
					if(value != null && !"".equals(value)) {
						importo = new Double(NumberFormat.getFormat(pattern).parse((String) value)).doubleValue();			
					}
					return importo >= 0;
				}
				return true;
			}
		};
		imponibileComplessivoMaggioreOUgualeDiZeroValidator.setErrorMessage("Valore non valido: l'importo deve essere maggiore o uguale di zero");
		
		imponibileComplessivoItem = new ExtendedNumericItem("imponibileComplessivo", getTitleImponibileComplessivoItem()); 
		imponibileComplessivoItem.setStartRow(true); //TODO togliere
		imponibileComplessivoItem.setKeyPressFilter("[0-9.,]");
		imponibileComplessivoItem.setColSpan(1);
		imponibileComplessivoItem.setWidth(150);
		imponibileComplessivoItem.setDefaultValue(getDefaultValueImponibileComplessivoItem());
		imponibileComplessivoItem.addChangedBlurHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {				
				imponibileComplessivoItem.setValue(NumberFormatUtility.getFormattedValue((String) event.getValue()));
			}
		});		
		imponibileComplessivoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				imponibileComplessivoItem.setValue(NumberFormatUtility.getFormattedValue(imponibileComplessivoItem.getValueAsString()));
				if(isRequiredImponibileComplessivoItem()) {
					imponibileComplessivoItem.setAttribute("obbligatorio", true);
					imponibileComplessivoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleImponibileComplessivoItem()));
				} else {
					imponibileComplessivoItem.setAttribute("obbligatorio", false);
					imponibileComplessivoItem.setTitle(getTitleImponibileComplessivoItem());
				}					
				return showImponibileComplessivoItem();
			}
		});
		imponibileComplessivoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredImponibileComplessivoItem();
			}
		}), imponibileComplessivoPrecisionValidator, imponibileComplessivoMaggioreOUgualeDiZeroValidator);
		
		RegExpValidator importoOneriSicurezzaPrecisionValidator = new RegExpValidator();
		importoOneriSicurezzaPrecisionValidator.setExpression("^([0-9]{1,3}((\\.)?[0-9]{3})*(,[0-9]{1,2})?)$");
		importoOneriSicurezzaPrecisionValidator.setErrorMessage("Valore non valido o superato il limite di 2 cifre decimali");
		
		CustomValidator importoOneriSicurezzaMaggioreOUgualeDiZeroValidator = new CustomValidator() {
			
			@Override
			protected boolean condition(Object value) {
				if(showImportoOneriSicurezzaItem()) {					
					// se l'importo è vuoto, ma non è obbligatorio, la validazione deve andare a buon fine
					if(!isRequiredImportoOneriSicurezzaItem() && (value == null || "".equals(value))) {
						return true;
					}
					String pattern = "#,##0.00";
					double importo = 0;
					if(value != null && !"".equals(value)) {
						importo = new Double(NumberFormat.getFormat(pattern).parse((String) value)).doubleValue();			
					}
					return importo >= 0;
				}
				return true;
			}
		};
		importoOneriSicurezzaMaggioreOUgualeDiZeroValidator.setErrorMessage("Valore non valido: l'importo deve essere maggiore o uguale di zero");
		
		importoOneriSicurezzaItem = new ExtendedNumericItem("importoOneriSicurezza", getTitleImportoOneriSicurezzaItem()); 
		importoOneriSicurezzaItem.setStartRow(true);
		importoOneriSicurezzaItem.setKeyPressFilter("[0-9.,]");
		importoOneriSicurezzaItem.setColSpan(1);
		importoOneriSicurezzaItem.setWidth(150);
		importoOneriSicurezzaItem.setDefaultValue(getDefaultValueImportoOneriSicurezzaItem());
		importoOneriSicurezzaItem.addChangedBlurHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {				
				importoOneriSicurezzaItem.setValue(NumberFormatUtility.getFormattedValue((String) event.getValue()));
			}
		});		
		importoOneriSicurezzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				importoOneriSicurezzaItem.setValue(NumberFormatUtility.getFormattedValue(importoOneriSicurezzaItem.getValueAsString()));
				if(isRequiredImportoOneriSicurezzaItem()) {
					importoOneriSicurezzaItem.setAttribute("obbligatorio", true);
					importoOneriSicurezzaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleImportoOneriSicurezzaItem()));
				} else {
					importoOneriSicurezzaItem.setAttribute("obbligatorio", false);
					importoOneriSicurezzaItem.setTitle(getTitleImportoOneriSicurezzaItem());
				}					
				return showImportoOneriSicurezzaItem();
			}
		});
		importoOneriSicurezzaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredImportoOneriSicurezzaItem();
			}
		}), importoOneriSicurezzaPrecisionValidator, importoOneriSicurezzaMaggioreOUgualeDiZeroValidator);				
		
		flgLLPPItem = new RadioGroupItem("flgLLPP", getTitleFlgLLPPItem());
		flgLLPPItem.setStartRow(true);
		flgLLPPItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgLLPPItem.setDefaultValue(getDefaultValueFlgLLPPItem());
		flgLLPPItem.setVertical(false);
		flgLLPPItem.setWrap(false);
		flgLLPPItem.setShowDisabled(false);
		if(isRequiredFlgLLPPItem()) {
			flgLLPPItem.setAttribute("obbligatorio", true);
		}
		flgLLPPItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgLLPPItem();
			}
		}));
		flgLLPPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgLLPPItem();
			}
		});			
		flgLLPPItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		
		annoProgettoLLPPItem = new AnnoItem("annoProgettoLLPP", getTitleAnnoProgettoLLPPItem());
		annoProgettoLLPPItem.setColSpan(1);
		if(isRequiredAnnoProgettoLLPPItem()) {
			annoProgettoLLPPItem.setAttribute("obbligatorio", true);
		}
		annoProgettoLLPPItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnnoProgettoLLPPItem();
			}
		}));
		annoProgettoLLPPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAnnoProgettoLLPPItem();
			}
		});
		
		numProgettoLLPPItem = new TextItem("numProgettoLLPP", getTitleNumProgettoLLPPItem());
		numProgettoLLPPItem.setColSpan(1);
		if(isRequiredNumProgettoLLPPItem()) {
			numProgettoLLPPItem.setAttribute("obbligatorio", true);
		}
		numProgettoLLPPItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumProgettoLLPPItem();
			}
		}));
		numProgettoLLPPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumProgettoLLPPItem();
			}
		});
		
		flgBeniServiziItem = new RadioGroupItem("flgBeniServizi", getTitleFlgBeniServiziItem());
		flgBeniServiziItem.setStartRow(true);
		flgBeniServiziItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgBeniServiziItem.setDefaultValue(getDefaultValueFlgBeniServiziItem());
		flgBeniServiziItem.setVertical(false);
		flgBeniServiziItem.setWrap(false);
		flgBeniServiziItem.setShowDisabled(false);
		if(isRequiredFlgBeniServiziItem()) {
			flgBeniServiziItem.setAttribute("obbligatorio", true);
		}
		flgBeniServiziItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgBeniServiziItem();
			}
		}));
		flgBeniServiziItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgBeniServiziItem();
			}
		});	
		flgBeniServiziItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
				showHideSections();
			}
		});
		
		annoProgettoBeniServiziItem = new AnnoItem("annoProgettoBeniServizi", getTitleAnnoProgettoBeniServiziItem());
		annoProgettoBeniServiziItem.setColSpan(1);
		if(isRequiredAnnoProgettoBeniServiziItem()) {
			annoProgettoBeniServiziItem.setAttribute("obbligatorio", true);
		}
		annoProgettoBeniServiziItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnnoProgettoBeniServiziItem();
			}
		}));
		annoProgettoBeniServiziItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAnnoProgettoBeniServiziItem();
			}
		});
		
		numProgettoBeniServiziItem = new TextItem("numProgettoBeniServizi", getTitleNumProgettoBeniServiziItem());
		numProgettoBeniServiziItem.setColSpan(1);
		if(isRequiredNumProgettoBeniServiziItem()) {
			numProgettoBeniServiziItem.setAttribute("obbligatorio", true);
		}
		numProgettoBeniServiziItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumProgettoBeniServiziItem();
			}
		}));
		numProgettoBeniServiziItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumProgettoBeniServiziItem();
			}
		});
		
		flgProgrammazioneAcquistiItem = new RadioGroupItem("flgProgrammazioneAcquisti", getTitleFlgProgrammazioneAcquistiItem());
		flgProgrammazioneAcquistiItem.setStartRow(true);
		flgProgrammazioneAcquistiItem.setValueMap(getValueMapFlgProgrammazioneAcquistiItem());		
		flgProgrammazioneAcquistiItem.setDefaultValue(getDefaultValueFlgProgrammazioneAcquistiItem());		
		flgProgrammazioneAcquistiItem.setVertical(false);
		flgProgrammazioneAcquistiItem.setWrap(false);
		flgProgrammazioneAcquistiItem.setShowDisabled(false);
		flgProgrammazioneAcquistiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgProgrammazioneAcquistiItem();
			}
		}));
		flgProgrammazioneAcquistiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredFlgProgrammazioneAcquistiItem()) {
					flgProgrammazioneAcquistiItem.setAttribute("obbligatorio", true);
					flgProgrammazioneAcquistiItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleFlgProgrammazioneAcquistiItem()));
				} else {
					flgProgrammazioneAcquistiItem.setAttribute("obbligatorio", false);
					flgProgrammazioneAcquistiItem.setTitle(getTitleFlgProgrammazioneAcquistiItem());
				}
				return showFlgProgrammazioneAcquistiItem();
			}
		});
		flgProgrammazioneAcquistiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				showHideSections();
			}
		});
		
		flgPrivacyItem = new RadioGroupItem("flgPrivacy", getTitleFlgPrivacyItem());
		flgPrivacyItem.setStartRow(true);
		flgPrivacyItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgPrivacyItem.setDefaultValue(getDefaultValueFlgPrivacyItem());		
		flgPrivacyItem.setVertical(false);
		flgPrivacyItem.setWrap(false);
		flgPrivacyItem.setShowDisabled(false);
		if(isRequiredFlgPrivacyItem()) {
			flgPrivacyItem.setAttribute("obbligatorio", true);
		}
		flgPrivacyItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgPrivacyItem();
			}
		}));
		flgPrivacyItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(showFlgPrivacyItem() && !isDatiRiservati() && hasDatiSensibili()) {				
					item.setDisabled(true);
					item.setValue(_FLG_SI);		
					caratteristicheProvvedimentoForm.markForRedraw();
				} else {
					item.setDisabled(false);					
				}
				return showFlgPrivacyItem();
			}
		});	
		flgPrivacyItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});
		
		SpacerItem spacerFlgDatiProtettiTipo1Item = new SpacerItem();
		spacerFlgDatiProtettiTipo1Item.setColSpan(1);
		spacerFlgDatiProtettiTipo1Item.setStartRow(true);
		spacerFlgDatiProtettiTipo1Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDatiProtettiTipo1Item();
			}
		});
		
		flgDatiProtettiTipo1Item = new CheckboxItem("flgDatiProtettiTipo1", getTitleFlgDatiProtettiTipo1Item());
		flgDatiProtettiTipo1Item.setDefaultValue(getDefaultValueAsBooleanFlgDatiProtettiTipo1Item());
		flgDatiProtettiTipo1Item.setColSpan(18);
		flgDatiProtettiTipo1Item.setWidth("*");	
		flgDatiProtettiTipo1Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {		
				if(showFlgDatiProtettiTipo1Item()) {
					return true;
				} else {
					flgDatiProtettiTipo1Item.setValue(false);
					return false;
				}
			}
		});
		
		SpacerItem spacerFlgDatiProtettiTipo2Item = new SpacerItem();
		spacerFlgDatiProtettiTipo2Item.setColSpan(1);
		spacerFlgDatiProtettiTipo2Item.setStartRow(true);
		spacerFlgDatiProtettiTipo2Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDatiProtettiTipo2Item();
			}
		});
		
		flgDatiProtettiTipo2Item = new CheckboxItem("flgDatiProtettiTipo2", getTitleFlgDatiProtettiTipo2Item());
		flgDatiProtettiTipo2Item.setDefaultValue(getDefaultValueAsBooleanFlgDatiProtettiTipo2Item());
		flgDatiProtettiTipo2Item.setColSpan(18);
		flgDatiProtettiTipo2Item.setWidth("*");	
		flgDatiProtettiTipo2Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				if(showFlgDatiProtettiTipo2Item()) {
					return true;
				} else {
					flgDatiProtettiTipo2Item.setValue(false);
					return false;
				}
			}
		});
		   
		SpacerItem spacerFlgDatiProtettiTipo3Item = new SpacerItem();
		spacerFlgDatiProtettiTipo3Item.setColSpan(1);
		spacerFlgDatiProtettiTipo3Item.setStartRow(true);
		spacerFlgDatiProtettiTipo3Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDatiProtettiTipo3Item();
			}
		});
		
		flgDatiProtettiTipo3Item = new CheckboxItem("flgDatiProtettiTipo3", getTitleFlgDatiProtettiTipo3Item());
		flgDatiProtettiTipo3Item.setDefaultValue(getDefaultValueAsBooleanFlgDatiProtettiTipo3Item());
		flgDatiProtettiTipo3Item.setColSpan(18);
		flgDatiProtettiTipo3Item.setWidth("*");	
		flgDatiProtettiTipo3Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				if(showFlgDatiProtettiTipo3Item()) {
					return true;
				} else {
					flgDatiProtettiTipo3Item.setValue(false);
					return false;
				}
			}
		});
		
		SpacerItem spacerFlgDatiProtettiTipo4Item = new SpacerItem();
		spacerFlgDatiProtettiTipo4Item.setColSpan(1);
		spacerFlgDatiProtettiTipo4Item.setStartRow(true);
		spacerFlgDatiProtettiTipo4Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgDatiProtettiTipo4Item();
			}
		});
		
		flgDatiProtettiTipo4Item = new CheckboxItem("flgDatiProtettiTipo4", getTitleFlgDatiProtettiTipo4Item());
		flgDatiProtettiTipo4Item.setDefaultValue(getDefaultValueAsBooleanFlgDatiProtettiTipo4Item());
		flgDatiProtettiTipo4Item.setColSpan(18);
		flgDatiProtettiTipo4Item.setWidth("*");	
		flgDatiProtettiTipo4Item.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {		
				if(showFlgDatiProtettiTipo4Item()) {
					return true;
				} else {
					flgDatiProtettiTipo4Item.setValue(false);
					return false;
				}
			}
		});
		
		numGaraItem = new TextItem("numGara", getTitleNumGaraItem());
		numGaraItem.setStartRow(true);
		numGaraItem.setColSpan(1);
		numGaraItem.setWidth(150);
		numGaraItem.setDefaultValue(getDefaultValueNumGaraItem());		
		if(isRequiredNumGaraItem()) {
			numGaraItem.setAttribute("obbligatorio", true);
		}
		numGaraItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumGaraItem();
			}
		}));
		numGaraItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumGaraItem();
			}
		});
				
		flgControlloLegittimitaItem = new RadioGroupItem("flgControlloLegittimita", getTitleFlgControlloLegittimitaItem());
		flgControlloLegittimitaItem.setStartRow(true);
		Map<String, String> flgControlloLegittimitaValueMap = getValueMapFlgControlloLegittimitaItem();
		if(flgControlloLegittimitaValueMap != null && flgControlloLegittimitaValueMap.keySet().size() > 0) {
			flgControlloLegittimitaItem.setValueMap(flgControlloLegittimitaValueMap);					
			if(flgControlloLegittimitaValueMap.size() == 1) {
				flgControlloLegittimitaItem.setDefaultValue(flgControlloLegittimitaValueMap.keySet().iterator().next());
			} else {
				flgControlloLegittimitaItem.setDefaultValue(getDefaultValueFlgControlloLegittimitaItem());
			}	
		} else {
			String[] flgControlloLegittimitaValoriPossibili = getValoriPossibiliFlgControlloLegittimitaItem();
			flgControlloLegittimitaItem.setValueMap(flgControlloLegittimitaValoriPossibili);					
			if(flgControlloLegittimitaValoriPossibili != null && flgControlloLegittimitaValoriPossibili.length == 1) {
				flgControlloLegittimitaItem.setDefaultValue(flgControlloLegittimitaValoriPossibili[0]);
			} else {
				flgControlloLegittimitaItem.setDefaultValue(getDefaultValueFlgControlloLegittimitaItem());
			}
		}		
		flgControlloLegittimitaItem.setVertical(false);
		flgControlloLegittimitaItem.setWrap(false);
		flgControlloLegittimitaItem.setShowDisabled(false);
		if(isRequiredFlgControlloLegittimitaItem()) {
			flgControlloLegittimitaItem.setAttribute("obbligatorio", true);
		}
		flgControlloLegittimitaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgControlloLegittimitaItem();
			}
		}));
		flgControlloLegittimitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgControlloLegittimitaItem();
			}
		});	
		flgControlloLegittimitaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				caratteristicheProvvedimentoForm.markForRedraw();
			}
		});		

		SpacerItem spacerMotivazioniEsclControlloLegittimitaItem = new SpacerItem();
		spacerMotivazioniEsclControlloLegittimitaItem.setColSpan(1);
		spacerMotivazioniEsclControlloLegittimitaItem.setStartRow(true);
		spacerMotivazioniEsclControlloLegittimitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showMotivazioniEsclControlloLegittimitaItem();
			}
		});
		
		motivazioniEsclControlloLegittimitaItem = new TextAreaItem("motivazioniEsclControlloLegittimita", getTitleMotivazioniEsclControlloLegittimitaItem());
		motivazioniEsclControlloLegittimitaItem.setWidth(481);
		motivazioniEsclControlloLegittimitaItem.setHeight(getAltezzaMotivazioniEsclControlloLegittimitaItem());
		motivazioniEsclControlloLegittimitaItem.setDefaultValue(getDefaultValueMotivazioniEsclControlloLegittimitaItem());		
		motivazioniEsclControlloLegittimitaItem.setColSpan(17);
		motivazioniEsclControlloLegittimitaItem.setShowTitle(true);
		motivazioniEsclControlloLegittimitaItem.setTitleOrientation(TitleOrientation.TOP);		
		motivazioniEsclControlloLegittimitaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredMotivazioniEsclControlloLegittimitaItem();
			}
		}));
		motivazioniEsclControlloLegittimitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredMotivazioniEsclControlloLegittimitaItem()) {
					motivazioniEsclControlloLegittimitaItem.setAttribute("obbligatorio", true);
					motivazioniEsclControlloLegittimitaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleMotivazioniEsclControlloLegittimitaItem()));
				} else {
					motivazioniEsclControlloLegittimitaItem.setAttribute("obbligatorio", false);
					motivazioniEsclControlloLegittimitaItem.setTitle(getTitleMotivazioniEsclControlloLegittimitaItem());
				}
				return showMotivazioniEsclControlloLegittimitaItem();
			}
		});		
				
		caratteristicheProvvedimentoForm.setFields(			
			oggLiquidazioneItem, showInfoOggLiquidazioneButton,
			endRowScadenzaItem, dataScadenzaLiquidazioneItem, urgenzaLiquidazioneItem,
			spacerFlgLiqXUffCassaItem, flgLiqXUffCassaItem,	importoAnticipoCassaItem,
			endRowContrattoItem, dataDecorrenzaContrattoItem, anniDurataContrattoItem,
			spacerFlgAffidamentoItem, flgAffidamentoItem, 
			spacerFlgDeterminaAContrarreTramiteProceduraGaraItem, flgDeterminaAContrarreTramiteProceduraGaraItem, 
			spacerFlgDeterminaAggiudicaProceduraGaraItem, flgDeterminaAggiudicaProceduraGaraItem, 
			spacerFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem, flgDeterminaRimodulazioneSpesaGaraAggiudicataItem,
			spacerFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem, flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem,
			spacerFlgDeterminaRiaccertamentoItem, flgDeterminaRiaccertamentoItem,		
			spacerFlgDeterminaAccertRadiazItem, flgDeterminaAccertRadiazItem,
			spacerFlgDeterminaVariazBilItem, flgDeterminaVariazBilItem,
			spacerFlgVantaggiEconomiciItem, flgVantaggiEconomiciItem, 
			spacerFlgDecretoReggioItem, flgDecretoReggioItem,
			spacerFlgAvvocaturaItem, flgAvvocaturaItem,
			spacerFlgDeterminaArchiviazioneItem, flgDeterminaArchiviazioneItem,
			spacerFlgContributiItem, flgContributiItem, // il check "contributi" non è esclusivo come gli altri sopra			
			flgSpesaItem,
			spacerFlgDatiRilevantiGSAItem, flgDatiRilevantiGSAItem,
			infoDatiRilevantiGSAButton,
			listaUfficiCompetentiRagItem,
			annoContabileCompetenzaItem,
			spacerFlgCorteContiItem, flgCorteContiItem,
			spacerFlgLiqContestualeImpegnoItem, flgLiqContestualeImpegnoItem, 
			spacerFlgLiqContestualeAltriAspettiRilContItem, flgLiqContestualeAltriAspettiRilContItem,
			spacerFlgDetConLiquidazioneItem, flgDetConLiquidazioneItem,
			spacerFlgCompQuadroFinRagDecItem, flgCompQuadroFinRagDecItem,			
			spacerFlgNuoviImpAccItem, flgNuoviImpAccItem, 
			spacerFlgImpSuAnnoCorrenteItem, flgImpSuAnnoCorrenteItem,
			spacerFlgInsMovARagioneriaItem, flgInsMovARagioneriaItem,
			spacerFlgPresaVisioneContabilitaItem, flgPresaVisioneContabilitaItem,			
			tipoAttoInDeliberaPEGItem,
			tipoAffidamentoItem,
			normRifAffidamentoItem,
			respAffidamentoItem,
			materiaTipoAttoItem, desMateriaTipoAttoItem,
			tipoFinanziamentoPNRRItem,
			flgSottotipoAttoItem,
			flgTipoIterItem,
			spacerFlgFondiEuropeiPONItem, flgFondiEuropeiPONItem,
			flgFondiPNRRRadioItem,
			spacerFlgFondiPNRRItem, flgFondiPNRRItem,
			spacerFlgFondiPNRRRigenItem, flgFondiPNRRRigenItem,
			spacerFlgFondiPRUItem, flgFondiPRUItem,
			spacerFlgVistoUtenzeItem, flgVistoUtenzeItem,
			spacerFlgVistoCapitolatiSottoSogliaItem, flgVistoCapitolatiSottoSogliaItem,
			spacerFlgVistoCapitolatiSopraSogliaItem, flgVistoCapitolatiSopraSogliaItem,
			spacerFlgVistoPar117_2013Item, flgVistoPar117_2013Item,
			spacerFlgNotificaDaMessiItem, flgNotificaDaMessiItem,			
			spacerFlgSenzaImpegniContItem, flgSenzaImpegniContItem,
			flgMEPACONSIPItem,
			flgServeDUVRIItem,
			imponibileComplessivoItem,			
			importoOneriSicurezzaItem,			
			flgLLPPItem, annoProgettoLLPPItem, numProgettoLLPPItem,			
			flgBeniServiziItem, annoProgettoBeniServiziItem, numProgettoBeniServiziItem,
			flgProgrammazioneAcquistiItem,
			flgPrivacyItem,
			spacerFlgDatiProtettiTipo1Item, flgDatiProtettiTipo1Item,
			spacerFlgDatiProtettiTipo2Item, flgDatiProtettiTipo2Item,
			spacerFlgDatiProtettiTipo3Item, flgDatiProtettiTipo3Item,
			spacerFlgDatiProtettiTipo4Item, flgDatiProtettiTipo4Item,
			numGaraItem,
			flgControlloLegittimitaItem,
			spacerMotivazioniEsclControlloLegittimitaItem, motivazioniEsclControlloLegittimitaItem
		);	
	}
	
	/********************************* 
	 * DATI SCHEDA - DEST. VANTAGGIO *
	 *********************************/	
	
	public boolean showDetailSectionDestVantaggio() {
		return showDestVantaggioItem();
	}	
	
	public String getTitleDetailSectionDestVantaggio() {		
		return getTitleDestVantaggioItem();
	}
	
	public boolean isRequiredDetailSectionDestVantaggio() {
		return isRequiredDestVantaggioItem();
	}
	
	protected void createDetailSectionDestVantaggio() {
		
		createDestVantaggioForm();
		
		detailSectionDestVantaggio = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDestVantaggio(), true, true, isRequiredDetailSectionDestVantaggio(), destVantaggioForm);
	}
	
	public boolean showDestVantaggioItem() {
		return showFlgVantaggiEconomiciItem() && isVantaggiEconomici() && showAttributoCustomCablato("DEST_VANTAGGIO");
	}
	
	public boolean isRequiredDestVantaggioItem() {
		return showDestVantaggioItem() && getFlgObbligatorioAttributoCustomCablato("DEST_VANTAGGIO");
	}
	
	public String getTitleDestVantaggioItem() {
		String label = getLabelAttributoCustomCablato("DEST_VANTAGGIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dest. vantaggio";
	}
	
	public boolean isNotReplicableDestVantaggioItem() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("DEST_VANTAGGIO");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}
	
	protected void createDestVantaggioForm() {
		
		destVantaggioForm = new DynamicForm();
		destVantaggioForm.setValuesManager(vm);
		destVantaggioForm.setWidth100();
		destVantaggioForm.setPadding(5);
		destVantaggioForm.setWrapItemTitles(false);
		destVantaggioForm.setNumCols(12);
		destVantaggioForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		destVantaggioForm.setTabSet(tabSet);
		destVantaggioForm.setTabID(_TAB_DATI_SCHEDA_ID);
		destVantaggioForm.setHeight(1);
		
		listaDestVantaggioItem = new DestVantaggioItem() {
						
			@Override
			public boolean isRequiredTipoPersona() {
				if(isNotReplicableDestVantaggioItem()) {
					return isRequiredDestVantaggioItem();
				}
				return true;
			}						

			@Override
			public boolean isRequiredCognome() {
				if(isNotReplicableDestVantaggioItem()) {
					return isRequiredDestVantaggioItem();
				}
				return true;
			}

			@Override
			public boolean isRequiredNome() {
				if(isNotReplicableDestVantaggioItem()) {
					return isRequiredDestVantaggioItem();
				}
				return true;
			}

			@Override
			public boolean isRequiredRagioneSociale() {
				if(isNotReplicableDestVantaggioItem()) {
					return isRequiredDestVantaggioItem();
				}
				return true;
			}

			@Override
			public boolean isRequiredCodFiscalePIVA() {
				if(isNotReplicableDestVantaggioItem()) {
					return isRequiredDestVantaggioItem();
				}
				return true;
			}

			@Override
			public boolean isRequiredImporto() {
				if(isNotReplicableDestVantaggioItem()) {
					return isRequiredDestVantaggioItem();
				}
				return true;
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredDestVantaggioItem()) {
					listaDestVantaggioItem.setAttribute("obbligatorio", true);
				} else {
					listaDestVantaggioItem.setAttribute("obbligatorio", false);
				}
				listaDestVantaggioItem.storeValue(destVantaggioForm.getValueAsRecordList(listaDestVantaggioItem.getName()));
				return super.validate();
			}
						
			@Override
			public boolean skipValidation() {
				if(showDestVantaggioItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaDestVantaggioItem.setName("listaDestVantaggio");
		listaDestVantaggioItem.setShowTitle(false);
		listaDestVantaggioItem.setColSpan(20);
		if(isNotReplicableDestVantaggioItem()) {
			listaDestVantaggioItem.setNotReplicable(true);
		}
//		if(getFlgObbligatorioAttributoCustomCablato("DEST_VANTAGGIO")) {
//			listaDestVantaggioItem.setAttribute("obbligatorio", true);
//		}
		listaDestVantaggioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDestVantaggioItem()) {
					listaDestVantaggioItem.setAttribute("obbligatorio", true);
				} else {
					listaDestVantaggioItem.setAttribute("obbligatorio", false);
				}
				listaDestVantaggioItem.storeValue(form.getValueAsRecordList(listaDestVantaggioItem.getName()));
				return showDestVantaggioItem();
			}
		});	
		
		destVantaggioForm.setFields(listaDestVantaggioItem);	
	}
	
	/************************************************** 
	 * DATI SCHEDA - RUOLI E VISTI PER DATI CONTABILI *
	 **************************************************/	
	
	public boolean showDetailSectionRuoliEVistiXDatiContabili() {
		return showAttributoCustomCablato("DATI_CONTABILI") && (isDeterminaConSpesa() || isDeterminaConSpesaSenzaImpegni());
	}	
	
	public String getTitleDetailSectionRuoliEVistiXDatiContabili() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Ruoli e visti per dati contabili";
	}
	
	public boolean isRequiredDetailSectionRuoliEVistiXDatiContabili() {
		return false;
	}
	
	protected void createDetailSectionRuoliEVistiXDatiContabili() {
		
		createRuoliEVistiXDatiContabiliForm();
		
		detailSectionRuoliEVistiXDatiContabili = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionRuoliEVistiXDatiContabili(), true, true, isRequiredDetailSectionRuoliEVistiXDatiContabili(), ruoliXDatiContabiliForm1, ruoliXDatiContabiliForm2, opzioniSpesaForm, vistiXDatiContabiliForm);
	}
	
	public boolean showVistiXDatiContabiliForm() {
		return true;
	}
	
	public boolean showUfficioDefinizioneSpesaItem() {
		String struttCompDefDatiCont = AurigaLayout.getParametroDB("STRUTT_COMP_DEF_DATI_CONT");
		if(struttCompDefDatiCont != null && _STRUTT_COMP_DEF_DATI_CONT_SEMPRE_UGUALE_UO_PROPONENTE.equalsIgnoreCase(struttCompDefDatiCont)) {
			return false;
		}
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && showAttributoCustomCablato("ID_UO_COMP_SPESA");
	}
	
	protected void setUfficioDefinizioneSpesaFromUoProponente() {
		if(listaUfficioDefinizioneSpesaItem != null) {
			String struttCompDefDatiCont = AurigaLayout.getParametroDB("STRUTT_COMP_DEF_DATI_CONT");
			if(struttCompDefDatiCont != null) {
				boolean showUfficioDefinizioneSpesa = showUfficioDefinizioneSpesaItem();
				boolean hasValueUfficioDefinizioneSpesa = listaUfficioDefinizioneSpesaItem.hasValue();
				if(_STRUTT_COMP_DEF_DATI_CONT_SEMPRE_UGUALE_UO_PROPONENTE.equalsIgnoreCase(struttCompDefDatiCont) 
					|| (_STRUTT_COMP_DEF_DATI_CONT_DEFAULT_UGUALE_UO_PROPONENTE.equalsIgnoreCase(struttCompDefDatiCont) && showUfficioDefinizioneSpesa && !hasValueUfficioDefinizioneSpesa)) {
					if(showProponentiItem()) {
						if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
							Record lRecordUfficioDefinizioneSpesa = new Record();
							RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
							if(listaProponenti != null && listaProponenti.getLength() > 0) {
								lRecordUfficioDefinizioneSpesa.setAttribute("idUo", listaProponenti.get(0).getAttribute("idUo"));
								lRecordUfficioDefinizioneSpesa.setAttribute("codRapido", listaProponenti.get(0).getAttribute("codRapido"));
								lRecordUfficioDefinizioneSpesa.setAttribute("descrizione", listaProponenti.get(0).getAttribute("descrizione"));
								lRecordUfficioDefinizioneSpesa.setAttribute("descrizioneEstesa", listaProponenti.get(0).getAttribute("descrizione"));
								lRecordUfficioDefinizioneSpesa.setAttribute("organigramma", listaProponenti.get(0).getAttribute("organigramma"));					
							}
							codUfficioDefinizioneSpesaItem.setValue(lRecordUfficioDefinizioneSpesa.getAttribute("codRapido"));
							desUfficioDefinizioneSpesaItem.setValue(lRecordUfficioDefinizioneSpesa.getAttribute("descrizione"));
							RecordList listaUfficioDefinizioneSpesa = new RecordList();
							listaUfficioDefinizioneSpesa.add(lRecordUfficioDefinizioneSpesa);
							listaUfficioDefinizioneSpesaItem.drawAndSetValue(listaUfficioDefinizioneSpesa);
						}
					} else {
						Record lRecordUfficioDefinizioneSpesa = new Record();
						if(isAbilToSelUffPropEsteso()) {
							RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
							if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
								if(listaUfficioProponente.get(0).getAttribute("idUo") != null && !"".equals(listaUfficioProponente.get(0).getAttribute("idUo"))) {
									lRecordUfficioDefinizioneSpesa.setAttribute("idUo", listaUfficioProponente.get(0).getAttribute("idUo"));
									lRecordUfficioDefinizioneSpesa.setAttribute("codRapido", listaUfficioProponente.get(0).getAttribute("codRapido"));
									lRecordUfficioDefinizioneSpesa.setAttribute("descrizione", listaUfficioProponente.get(0).getAttribute("descrizione"));
									lRecordUfficioDefinizioneSpesa.setAttribute("descrizioneEstesa", listaUfficioProponente.get(0).getAttribute("descrizione"));
									lRecordUfficioDefinizioneSpesa.setAttribute("organigramma", listaUfficioProponente.get(0).getAttribute("organigramma"));			
								}
							}
						} else if (getValueAsString("ufficioProponente") != null && !"".equals(getValueAsString("ufficioProponente"))) {
							lRecordUfficioDefinizioneSpesa.setAttribute("idUo", getValueAsString("ufficioProponente"));
							lRecordUfficioDefinizioneSpesa.setAttribute("codRapido", getValueAsString("codUfficioProponente"));
							lRecordUfficioDefinizioneSpesa.setAttribute("descrizione", getValueAsString("desUfficioProponente"));
							lRecordUfficioDefinizioneSpesa.setAttribute("descrizioneEstesa", getValueAsString("desUfficioProponente"));						
							lRecordUfficioDefinizioneSpesa.setAttribute("organigramma", "UO" + getValueAsString("ufficioProponente"));
						}
						codUfficioDefinizioneSpesaItem.setValue(lRecordUfficioDefinizioneSpesa.getAttribute("codRapido"));
						desUfficioDefinizioneSpesaItem.setValue(lRecordUfficioDefinizioneSpesa.getAttribute("descrizione"));
						RecordList listaUfficioDefinizioneSpesa = new RecordList();
						listaUfficioDefinizioneSpesa.add(lRecordUfficioDefinizioneSpesa);
						listaUfficioDefinizioneSpesaItem.drawAndSetValue(listaUfficioDefinizioneSpesa);
					}
				}	
			}
		}
	}
	
	public String getTitleUfficioDefinizioneSpesaItem() {
		String label = getLabelAttributoCustomCablato("ID_UO_COMP_SPESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Struttura comp. def. dati contabili";		
	}
	
	public boolean showOpzAssCompSpesaItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_OPZ_ASS_COMP_SPESA");
	}
	
	public String getTitleOpzAssCompSpesaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_OPZ_ASS_COMP_SPESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Definizione dati contabili in carico a"; 
	}
	
	public boolean isRequiredOpzAssCompSpesaItem() {
		return showOpzAssCompSpesaItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_OPZ_ASS_COMP_SPESA");
	}
	
	public HashMap<String, String> getValueMapOpzAssCompSpesaItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_OPZ_ASS_COMP_SPESA");
	}
	
	public String getDefaultValueOpzAssCompSpesaItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_OPZ_ASS_COMP_SPESA");
	}
	
	public boolean showFlgAdottanteUnicoRespPEGItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && showAdottanteItem() && showAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_UNICO_RESP_SPESA");
	}
	
	public String getTitleFlgAdottanteUnicoRespPEGItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_UNICO_RESP_SPESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "adottante unico resp. cap. spesa";		
	}
	
	public boolean showFlgDirRespRegTecnicaUnicoRespSpesaItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && showDirRespRegTecnicaItem() && showAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_RESP_REG_TECNICA_UNICO_RESP_SPESA");
	}
	
	public String getTitleFlgDirRespRegTecnicaUnicoRespSpesaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_RESP_REG_TECNICA_UNICO_RESP_SPESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "dirigente responsabile registrazione tecnica unico spesa";		
	}
	
	public boolean showResponsabiliPEGItemByDirRespRegTecnicaUnicoRespSpesa() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && (!showFlgDirRespRegTecnicaUnicoRespSpesaItem() || !getValueAsBoolean("flgDirRespRegTecnicaUnicoRespSpesa")) && showAttributoCustomCablato("ID_SV_RESP_SPESA");
	}
	
	public boolean showResponsabiliPEGItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && (!showFlgAdottanteUnicoRespPEGItem() || !getValueAsBoolean("flgAdottanteUnicoRespPEG")) && showAttributoCustomCablato("ID_SV_RESP_SPESA");
	}
		
	public String getTitleResponsabiliPEGItem() {
		String label = getLabelAttributoCustomCablato("ID_SV_RESP_SPESA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri resp. cap. spesa";		
	}
	
	public String getAltriParamLoadComboResponsabiliPEGItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("ID_SV_RESP_SPESA");
	}
	
	public boolean showFlgSpesaCorrenteItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CORRENTE");
	}
		
	public String getTitleFlgSpesaCorrenteItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CORRENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "spesa su parte corrente";	
	}	  
	
	public boolean showFlgImpegniCorrenteGiaValidatiItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return isDeterminaConSpesaCorrente() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_IMP_CORR_VALID");
	}
		
	public String getTitleFlgImpegniCorrenteGiaValidatiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_IMP_CORR_VALID");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "impegni su parte corrente tutti già validati";		
	}
	
	public boolean showFlgSpesaContoCapitaleItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CONTO_CAP");
	}
		
	public String getTitleFlgSpesaContoCapitaleItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CONTO_CAP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "spesa in conto capitale";
	}
	
	public boolean showFlgImpegniContoCapitaleGiaRilasciatiItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return isDeterminaConSpesaContoCapitale() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_IMP_CCAP_RIL");
	}
		
	public String getTitleFlgImpegniContoCapitaleGiaRilasciatiItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_IMP_CCAP_RIL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "impegni in conto capitale tutti già rilasciati";	
	}
	
	public boolean showFlgSoloSubImpSubCronoItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SUB");
	}
		
	public String getTitleFlgSoloSubImpSubCronoItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_SUB");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "solo sub-impegni o sub-crono";
	}
	
	public boolean showFlgConVerificaContabilitaItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_RICH_VERIFICA_CONTABILITA");
	}
		
	public String getTitleFlgConVerificaContabilitaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RICH_VERIFICA_CONTABILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "richiesta verifica contabilità";	
	}
	
	public boolean showFlgRichiediParereRevisoriContabiliItem() {
		if(AurigaLayout.isAttivoClienteCMMI() && isDeterminaPersonale()) {
			return false;
		}
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesa() && showAttributoCustomCablato("TASK_RESULT_2_RICH_PARERE_REV_CONTABILI");
	}
		
	public String getTitleFlgRichiediParereRevisoriContabiliItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_RICH_PARERE_REV_CONTABILI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "richiesto parere revisori contabil";
	}
	
	public boolean showFlgRichVerificaDiBilancioCorrenteItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesaSenzaImpegni() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_BIL_CORR");
	}
		
	public String getTitleFlgRichVerificaDiBilancioCorrenteItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_BIL_CORR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "bilancio corrente";	
	}
	
	public boolean showFlgRichVerificaDiBilancioContoCapitaleItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesaSenzaImpegni() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_BIL_CCAP");
	}
		
	public String getTitleFlgRichVerificaDiBilancioContoCapitaleItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_BIL_CCAP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "bilancio conto capitale";			
	}
	
	public boolean showFlgRichVerificaDiContabilitaItem() {
		return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesaSenzaImpegni() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_CONTABIL");
	}
		
	public String getTitleFlgRichVerificaDiContabilitaItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_CONTABIL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "contabilità";			
	}
	
	protected void createRuoliEVistiXDatiContabiliForm() {
		
		ruoliXDatiContabiliForm1 = new DynamicForm();
		ruoliXDatiContabiliForm1.setValuesManager(vm);
		ruoliXDatiContabiliForm1.setWidth100();
		ruoliXDatiContabiliForm1.setPadding(5);
		ruoliXDatiContabiliForm1.setWrapItemTitles(false);
		ruoliXDatiContabiliForm1.setNumCols(20);
		ruoliXDatiContabiliForm1.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ruoliXDatiContabiliForm1.setTabSet(tabSet);
		ruoliXDatiContabiliForm1.setTabID(_TAB_DATI_SCHEDA_ID);
		ruoliXDatiContabiliForm1.setHeight(1);
		
		codUfficioDefinizioneSpesaItem = new HiddenItem("codUfficioDefinizioneSpesa");
		desUfficioDefinizioneSpesaItem = new HiddenItem("desUfficioDefinizioneSpesa");
		
		listaUfficioDefinizioneSpesaItem = new SelezionaUOItem() {
			
			@Override
			public int getSelectItemOrganigrammaWidth() {
				return 650;
			}
			
			@Override
			public boolean skipValidation() {
				if(showUfficioDefinizioneSpesaItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);				
				lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleUfficioDefinizioneSpesaItem()) + "</span>");	
				return lVLayout;
			}
			
			@Override
			public Boolean getShowRemoveButton() {
				return true;
			}
		};
		listaUfficioDefinizioneSpesaItem.setName("listaUfficioDefinizioneSpesa");
		listaUfficioDefinizioneSpesaItem.setStartRow(true);
		listaUfficioDefinizioneSpesaItem.setShowTitle(false);
		listaUfficioDefinizioneSpesaItem.setColSpan(20);
		listaUfficioDefinizioneSpesaItem.setNotReplicable(true);
		listaUfficioDefinizioneSpesaItem.setAttribute("obbligatorio", true);
		listaUfficioDefinizioneSpesaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showUfficioDefinizioneSpesaItem();
			}
		});
		
		opzAssCompSpesaItem = new RadioGroupItem("opzAssCompSpesa", getTitleOpzAssCompSpesaItem());
		opzAssCompSpesaItem.setValueMap(getValueMapOpzAssCompSpesaItem());
		opzAssCompSpesaItem.setDefaultValue(getDefaultValueOpzAssCompSpesaItem());
		opzAssCompSpesaItem.setVertical(false);
		opzAssCompSpesaItem.setWrap(false);
		opzAssCompSpesaItem.setShowDisabled(false);
		if(isRequiredOpzAssCompSpesaItem()) {
			opzAssCompSpesaItem.setAttribute("obbligatorio", true);
		}
		opzAssCompSpesaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredOpzAssCompSpesaItem();
			}
		}));
		opzAssCompSpesaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showOpzAssCompSpesaItem();
			}
		});			
		
		ruoliXDatiContabiliForm1.setFields(
			codUfficioDefinizioneSpesaItem,
			desUfficioDefinizioneSpesaItem,
			listaUfficioDefinizioneSpesaItem,
			opzAssCompSpesaItem
		);		
		
		ruoliXDatiContabiliForm2 = new DynamicForm();
		ruoliXDatiContabiliForm2.setValuesManager(vm);
		ruoliXDatiContabiliForm2.setWidth100();
		ruoliXDatiContabiliForm2.setPadding(5);
		ruoliXDatiContabiliForm2.setWrapItemTitles(false);
		ruoliXDatiContabiliForm2.setNumCols(20);
		ruoliXDatiContabiliForm2.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		ruoliXDatiContabiliForm2.setTabSet(tabSet);
		ruoliXDatiContabiliForm2.setTabID(_TAB_DATI_SCHEDA_ID);
		ruoliXDatiContabiliForm2.setHeight(1);		
		
		flgAdottanteUnicoRespPEGItem = new CheckboxItem("flgAdottanteUnicoRespPEG", getTitleFlgAdottanteUnicoRespPEGItem());
		flgAdottanteUnicoRespPEGItem.setDefaultValue(true);
		flgAdottanteUnicoRespPEGItem.setStartRow(true);
		flgAdottanteUnicoRespPEGItem.setColSpan(1);
		flgAdottanteUnicoRespPEGItem.setWidth("*");
		flgAdottanteUnicoRespPEGItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				ruoliXDatiContabiliForm2.markForRedraw();
			}
		});
		flgAdottanteUnicoRespPEGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(showAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_UNICO_RESP_SPESA")) {
					if(isDeterminaConSpesa()) {
						flgAdottanteUnicoRespPEGItem.setDisabled(false);
					} else if(isDeterminaConSpesaSenzaImpegni()) {
						flgAdottanteUnicoRespPEGItem.setValue(true);
						flgAdottanteUnicoRespPEGItem.setDisabled(true);
					} else if(isDeterminaSenzaSpesa()) {
						flgAdottanteUnicoRespPEGItem.setValue(false);
						flgAdottanteUnicoRespPEGItem.setDisabled(true);
					}		
				}
				return showFlgAdottanteUnicoRespPEGItem();
			}
		});
		
		flgDirRespRegTecnicaUnicoRespSpesaItem = new CheckboxItem("flgDirRespRegTecnicaUnicoRespSpesa", getTitleFlgDirRespRegTecnicaUnicoRespSpesaItem());
		flgDirRespRegTecnicaUnicoRespSpesaItem.setDefaultValue(true);
		flgDirRespRegTecnicaUnicoRespSpesaItem.setStartRow(true);
		flgDirRespRegTecnicaUnicoRespSpesaItem.setColSpan(1);
		flgDirRespRegTecnicaUnicoRespSpesaItem.setWidth("*");
		flgDirRespRegTecnicaUnicoRespSpesaItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				ruoliXDatiContabiliForm2.markForRedraw();
			}
		});
		flgDirRespRegTecnicaUnicoRespSpesaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				if(showAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_RESP_REG_TECNICA_UNICO_RESP_SPESA")) {
					if(isDeterminaConSpesa()) {
						flgDirRespRegTecnicaUnicoRespSpesaItem.setDisabled(false);
					} else if(isDeterminaConSpesaSenzaImpegni()) {
						flgDirRespRegTecnicaUnicoRespSpesaItem.setValue(true);
						flgDirRespRegTecnicaUnicoRespSpesaItem.setDisabled(true);
					} else if(isDeterminaSenzaSpesa()) {
						flgDirRespRegTecnicaUnicoRespSpesaItem.setValue(false);
						flgDirRespRegTecnicaUnicoRespSpesaItem.setDisabled(true);
					}
				}
				return showFlgDirRespRegTecnicaUnicoRespSpesaItem();
			}
		});
		
		listaResponsabiliPEGItem = new ResponsabiliPEGCompletaItem() {
			
			@Override
			public String getAltriParamLoadCombo() {
				return getAltriParamLoadComboResponsabiliPEGItem();
			}
			
			@Override
			public boolean skipValidation() {
				if(showResponsabiliPEGItem() && showResponsabiliPEGItemByDirRespRegTecnicaUnicoRespSpesa()) {
					return super.skipValidation(); //TODO Verificare se quando chiamo super.skipValidation() mi torna true quando sono su un altro tab
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleResponsabiliPEGItem()) + "</span>");	
				return lVLayout;
			}
		};
		listaResponsabiliPEGItem.setName("listaResponsabiliPEG");
		listaResponsabiliPEGItem.setStartRow(true);
		listaResponsabiliPEGItem.setShowTitle(false);
		listaResponsabiliPEGItem.setColSpan(20);
		listaResponsabiliPEGItem.setAttribute("obbligatorio", true);
		listaResponsabiliPEGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showResponsabiliPEGItem() && showResponsabiliPEGItemByDirRespRegTecnicaUnicoRespSpesa();
			}
		});
		
		ruoliXDatiContabiliForm2.setFields(
			flgAdottanteUnicoRespPEGItem,
			flgDirRespRegTecnicaUnicoRespSpesaItem,
			listaResponsabiliPEGItem
		);		
				
		opzioniSpesaForm = new DynamicForm();
		opzioniSpesaForm.setValuesManager(vm);
		opzioniSpesaForm.setWidth100();
		opzioniSpesaForm.setPadding(5);
		opzioniSpesaForm.setWrapItemTitles(false);
		opzioniSpesaForm.setNumCols(20);
		opzioniSpesaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniSpesaForm.setTabSet(tabSet);
		opzioniSpesaForm.setTabID(_TAB_DATI_SCHEDA_ID);
		opzioniSpesaForm.setHeight(1);	
		
		CustomValidator tipoSpesaValidator = new CustomValidator() {
			
			@Override
			protected boolean condition(Object value) {
				 // i due check compaiono solo se è una determina con spesa
				if(showFlgSpesaCorrenteItem() || showFlgSpesaContoCapitaleItem()) {
					return isDeterminaConSpesaCorrente() || isDeterminaConSpesaContoCapitale() /*|| (showFlgSoloSubImpSubCronoItem() && getValueAsBoolean("flgSoloSubImpSubCrono"))*/;
				
				}
				return true;
			}
		};
		tipoSpesaValidator.setErrorMessage("Campo obbligatorio: selezionare almeno una delle opzioni");
	
//		TitleItem tipoSpesaTitleItem = new TitleItem(FrontendUtil.getRequiredFormItemTitle(I18NUtil.getMessages().nuovaPropostaAtto2_detail_tipoSpesa_title(), true));
		StaticTextItem tipoSpesaTitleItem = new StaticTextItem();
		tipoSpesaTitleItem.setDefaultValue("<span style=\"color:#37505F\">" + FrontendUtil.getRequiredFormItemTitle(I18NUtil.getMessages().nuovaPropostaAtto2_detail_tipoSpesa_title(), true) + "</b></span>");		
		tipoSpesaTitleItem.setCellStyle(it.eng.utility.Styles.formTitle);		
		tipoSpesaTitleItem.setShowTitle(false);
		tipoSpesaTitleItem.setAlign(Alignment.RIGHT);
		tipoSpesaTitleItem.setWidth("*");
		tipoSpesaTitleItem.setWrap(false);
		tipoSpesaTitleItem.setColSpan(1);
		tipoSpesaTitleItem.setAttribute("obbligatorio", true);
		tipoSpesaTitleItem.setStartRow(true);
		tipoSpesaTitleItem.setValidators(tipoSpesaValidator);
		tipoSpesaTitleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgSpesaCorrenteItem() || showFlgSpesaContoCapitaleItem();	
			}
		});
		
		flgSpesaCorrenteItem = new CheckboxItem("flgSpesaCorrente", getTitleFlgSpesaCorrenteItem());
		flgSpesaCorrenteItem.setDefaultValue(false);
		flgSpesaCorrenteItem.setColSpan(1);
		flgSpesaCorrenteItem.setWidth("*");
		flgSpesaCorrenteItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				opzioniSpesaForm.markForRedraw();
				enableDisableTabs();
				showHideSections();
			}
		});
		flgSpesaCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgSpesaCorrenteItem();
			}
		});
		
		flgImpegniCorrenteGiaValidatiItem = new CheckboxItem("flgImpegniCorrenteGiaValidati", getTitleFlgImpegniCorrenteGiaValidatiItem());
		flgImpegniCorrenteGiaValidatiItem.setDefaultValue(false);
		flgImpegniCorrenteGiaValidatiItem.setColSpan(1);
		flgImpegniCorrenteGiaValidatiItem.setWidth("*");
		flgImpegniCorrenteGiaValidatiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgImpegniCorrenteGiaValidatiItem();
			}
		});
		flgImpegniCorrenteGiaValidatiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				opzioniSpesaForm.markForRedraw();						
			}
		});	
		
		SpacerItem spacerTipoSpesaItem = new SpacerItem();
		spacerTipoSpesaItem.setColSpan(1);
		spacerTipoSpesaItem.setWidth(30);
		spacerTipoSpesaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgImpegniCorrenteGiaValidatiItem() || showFlgImpegniContoCapitaleGiaRilasciatiItem();
			}
		});
		
		flgSpesaContoCapitaleItem = new CheckboxItem("flgSpesaContoCapitale", getTitleFlgSpesaContoCapitaleItem());
		flgSpesaContoCapitaleItem.setDefaultValue(false);
		flgSpesaContoCapitaleItem.setColSpan(1);
		flgSpesaContoCapitaleItem.setWidth("*");
		flgSpesaContoCapitaleItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {		
				opzioniSpesaForm.markForRedraw();				
				enableDisableTabs();
				showHideSections();
			}
		});
		flgSpesaContoCapitaleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgSpesaContoCapitaleItem();
			}
		});
		
		flgImpegniContoCapitaleGiaRilasciatiItem = new CheckboxItem("flgImpegniContoCapitaleGiaRilasciati", getTitleFlgImpegniContoCapitaleGiaRilasciatiItem());
		flgImpegniContoCapitaleGiaRilasciatiItem.setDefaultValue(false);
		flgImpegniContoCapitaleGiaRilasciatiItem.setColSpan(1);
		flgImpegniContoCapitaleGiaRilasciatiItem.setWidth("*");
		flgImpegniContoCapitaleGiaRilasciatiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgImpegniContoCapitaleGiaRilasciatiItem();
			}
		});		
		flgImpegniContoCapitaleGiaRilasciatiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				opzioniSpesaForm.markForRedraw();	
				if(modalitaInvioDatiSpesaARagioneriaContoCapitaleItem != null) {
					modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValueMap(buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap());
				}		
			}
		});	
		
		SpacerItem spacerFlgSoloSubImpSubCronoItem = new SpacerItem();
		spacerFlgSoloSubImpSubCronoItem.setColSpan(1);
		spacerFlgSoloSubImpSubCronoItem.setStartRow(true);
		spacerFlgSoloSubImpSubCronoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return  showFlgSoloSubImpSubCronoItem();
			}
		});
		
		flgSoloSubImpSubCronoItem = new CheckboxItem("flgSoloSubImpSubCrono", getTitleFlgSoloSubImpSubCronoItem());
		flgSoloSubImpSubCronoItem.setDefaultValue(false);
		flgSoloSubImpSubCronoItem.setColSpan(18);
		flgSoloSubImpSubCronoItem.setWidth("*");
		flgSoloSubImpSubCronoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgSoloSubImpSubCronoItem();
			}
		});
		flgSoloSubImpSubCronoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				opzioniSpesaForm.markForRedraw();	
				if(modalitaInvioDatiSpesaARagioneriaContoCapitaleItem != null) {
					modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValueMap(buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap());
				}
			}
		});		
		
		SpacerItem spacerFlgConVerificaContabilitaItem = new SpacerItem();
		spacerFlgConVerificaContabilitaItem.setColSpan(1);
		spacerFlgConVerificaContabilitaItem.setStartRow(true);
		spacerFlgConVerificaContabilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return showFlgConVerificaContabilitaItem();
			}
		});
		
		flgConVerificaContabilitaItem = new CheckboxItem("flgConVerificaContabilita", getTitleFlgConVerificaContabilitaItem());
		flgConVerificaContabilitaItem.setDefaultValue(false);
		flgConVerificaContabilitaItem.setColSpan(18);
		flgConVerificaContabilitaItem.setWidth("*");	
		flgConVerificaContabilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(showFlgConVerificaContabilitaItem()) {
					boolean forceToCheckFlgConVerificaContabilita = false;
					if(showFlgImpegniCorrenteGiaValidatiItem() && getValueAsBoolean("flgImpegniCorrenteGiaValidati")) {
						forceToCheckFlgConVerificaContabilita = true;					
					}					
					if(showFlgImpegniContoCapitaleGiaRilasciatiItem() && getValueAsBoolean("flgImpegniContoCapitaleGiaRilasciati")) {
						forceToCheckFlgConVerificaContabilita = true;						
					}
					if(showFlgSoloSubImpSubCronoItem() && getValueAsBoolean("flgSoloSubImpSubCrono")) {
						forceToCheckFlgConVerificaContabilita = true;
					}									
					if(forceToCheckFlgConVerificaContabilita) {
						item.setDisabled(true);
						item.setValue(true);
					} else {
						item.setDisabled(false);
					}
					return true;
				}
				return false;
			}
		});
		
		SpacerItem spacerFlgRichiediParereRevisoriContabiliItem = new SpacerItem();
		spacerFlgRichiediParereRevisoriContabiliItem.setColSpan(1);
		spacerFlgRichiediParereRevisoriContabiliItem.setStartRow(true);
		spacerFlgRichiediParereRevisoriContabiliItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {							
				return showFlgRichiediParereRevisoriContabiliItem();
			}
		});
		
		flgRichiediParereRevisoriContabiliItem = new CheckboxItem("flgRichiediParereRevisoriContabili", getTitleFlgRichiediParereRevisoriContabiliItem());
		flgRichiediParereRevisoriContabiliItem.setDefaultValue(false);
		flgRichiediParereRevisoriContabiliItem.setColSpan(18);
		flgRichiediParereRevisoriContabiliItem.setWidth("*");
		flgRichiediParereRevisoriContabiliItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgRichiediParereRevisoriContabiliItem();
			}
		});
		
		opzioniSpesaForm.setFields(
			tipoSpesaTitleItem, flgSpesaCorrenteItem, flgImpegniCorrenteGiaValidatiItem, spacerTipoSpesaItem, flgSpesaContoCapitaleItem, flgImpegniContoCapitaleGiaRilasciatiItem, 
			spacerFlgSoloSubImpSubCronoItem, flgSoloSubImpSubCronoItem,
			spacerFlgConVerificaContabilitaItem, flgConVerificaContabilitaItem, 
			spacerFlgRichiediParereRevisoriContabiliItem, flgRichiediParereRevisoriContabiliItem
		);
		
		vistiXDatiContabiliForm = new DynamicForm();
		vistiXDatiContabiliForm.setValuesManager(vm);
		vistiXDatiContabiliForm.setWidth100();
		vistiXDatiContabiliForm.setPadding(5);
		vistiXDatiContabiliForm.setWrapItemTitles(false);
		vistiXDatiContabiliForm.setNumCols(20);
		vistiXDatiContabiliForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		vistiXDatiContabiliForm.setTabSet(tabSet);
		vistiXDatiContabiliForm.setTabID(_TAB_DATI_SCHEDA_ID);
		vistiXDatiContabiliForm.setHeight(1);		
		
		CustomValidator richVerificaDiValidator = new CustomValidator() {
			
			@Override
			protected boolean condition(Object value) {
				if (showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesaSenzaImpegni() && 
					(showFlgRichVerificaDiBilancioCorrenteItem() || showFlgRichVerificaDiBilancioContoCapitaleItem() || showFlgRichVerificaDiContabilitaItem())) {
						return (showFlgRichVerificaDiBilancioCorrenteItem() && getValueAsBoolean("flgRichVerificaDiBilancioCorrente")) || 
							   (showFlgRichVerificaDiBilancioContoCapitaleItem() && getValueAsBoolean("flgRichVerificaDiBilancioContoCapitale")) || 
							   (showFlgRichVerificaDiContabilitaItem() && getValueAsBoolean("flgRichVerificaDiContabilita"));
				}
				return true;
			}
		};
		richVerificaDiValidator.setErrorMessage("Campo obbligatorio: selezionare almeno una delle opzioni");
		
		TitleItem richVerificaDiTitleItem = new TitleItem(FrontendUtil.getRequiredFormItemTitle(I18NUtil.getMessages().nuovaPropostaAtto2_detail_richVerificaDi_title(), true));
		richVerificaDiTitleItem.setAttribute("obbligatorio", true);
		richVerificaDiTitleItem.setValidators(richVerificaDiValidator);
		richVerificaDiTitleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showDetailSectionRuoliEVistiXDatiContabili() && isDeterminaConSpesaSenzaImpegni() && 
						(showFlgRichVerificaDiBilancioCorrenteItem() || showFlgRichVerificaDiBilancioContoCapitaleItem() || showFlgRichVerificaDiContabilitaItem());
			}
		});
		
		flgRichVerificaDiBilancioCorrenteItem = new CheckboxItem("flgRichVerificaDiBilancioCorrente", getTitleFlgRichVerificaDiBilancioCorrenteItem());
		flgRichVerificaDiBilancioCorrenteItem.setDefaultValue(false);
		flgRichVerificaDiBilancioCorrenteItem.setColSpan(1);
		flgRichVerificaDiBilancioCorrenteItem.setWidth("*");
		flgRichVerificaDiBilancioCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgRichVerificaDiBilancioCorrenteItem();
			}
		});
		
		flgRichVerificaDiBilancioContoCapitaleItem = new CheckboxItem("flgRichVerificaDiBilancioContoCapitale", getTitleFlgRichVerificaDiBilancioContoCapitaleItem());
		flgRichVerificaDiBilancioContoCapitaleItem.setDefaultValue(false);
		flgRichVerificaDiBilancioContoCapitaleItem.setColSpan(1);
		flgRichVerificaDiBilancioContoCapitaleItem.setWidth("*");
		flgRichVerificaDiBilancioContoCapitaleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgRichVerificaDiBilancioContoCapitaleItem();
			}
		});
		
		flgRichVerificaDiContabilitaItem = new CheckboxItem("flgRichVerificaDiContabilita", getTitleFlgRichVerificaDiContabilitaItem());
		flgRichVerificaDiContabilitaItem.setDefaultValue(true);		
		flgRichVerificaDiContabilitaItem.setColSpan(1);
		flgRichVerificaDiContabilitaItem.setWidth("*");
		flgRichVerificaDiContabilitaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgRichVerificaDiContabilitaItem();
			}
		});

		vistiXDatiContabiliForm.setFields(
			richVerificaDiTitleItem, flgRichVerificaDiBilancioCorrenteItem, flgRichVerificaDiBilancioContoCapitaleItem, flgRichVerificaDiContabilitaItem
		);	
		
	}
	
	/********************* 
	 * DATI SCHEDA - sotto-fascicolo RDA *
	 *********************/	
	public boolean isDerivaDaRda() {
//		hiddenForm.getValueAsString("flgAggiornataVersDaPubblicare")
		boolean isDerivaDaRda = hiddenForm != null ? "true".equals(hiddenForm.getValueAsString("derivaDaRdA")) : false;
//		boolean isDerivaDaRda = recordFromLoadDett != null ? recordFromLoadDett.getAttributeAsBoolean("derivaDaRdA") : false;
		return isDerivaDaRda;
	}
	
	public boolean showDetailSectionSubfolderRda() {
		return showSubfolderRda() && isDerivaDaRda(); // AGGIUNGERE SOLO SE SI PROVIENE DA DECRETO RDA
	}
	
	public String getTitleDetailSectionSubfolderRda() {
		String label = getLabelAttributoCustomCablato("SUBFOLDER_RDA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Nel sotto-fascicolo RdA";
	}
	
	public String getTitleSubfolderRdaItem() {
		String label = getLabelAttributoCustomCablato("SUBFOLDER_RDA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Nel sotto-fascicolo RdA";
	}
	
	public boolean isRequiredDetailSectionSubfolderRda() {
		return isRequiredSubfolderRdaItem();
	}
	
	protected void createDetailSectionSubfolderRda() {
		
		createSubfolderRdaForm();
		
		detailSectionSubfolderRda = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionSubfolderRda(), true, true, isRequiredDetailSectionSubfolderRda(), subfolderRdaForm);
	}
	
	public boolean showSubfolderRda() {
		return showAttributoCustomCablato("SUBFOLDER_RDA");
	}
	
	public String getAltriParamLoadComboSubfolderRdaItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("SUBFOLDER_RDA");
	}
	
	public boolean isRequiredSubfolderRdaItem() {
		return showDetailSectionSubfolderRda() && getFlgObbligatorioAttributoCustomCablato("SUBFOLDER_RDA");
	}
	
	protected void createSubfolderRdaForm() {
		
		subfolderRdaForm = new DynamicForm();
		subfolderRdaForm.setValuesManager(vm);
		subfolderRdaForm.setWidth100();
		subfolderRdaForm.setPadding(5);
		subfolderRdaForm.setWrapItemTitles(false);
		subfolderRdaForm.setNumCols(20);
		subfolderRdaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		subfolderRdaForm.setTabSet(tabSet);
		subfolderRdaForm.setTabID(_TAB_DATI_SCHEDA_ID);
		subfolderRdaForm.setHeight(1);	
		
		GWTRestDataSource subfolderRdaDS = new GWTRestDataSource("LoadComboSubFolderRdaDataSource");
		subfolderRdaDS.addParam("altriParamLoadCombo", getAltriParamLoadComboSubfolderRdaItem());
		
		subfolderRdaItem = new SelectItem("subfolderRda", getTitleSubfolderRdaItem());
		subfolderRdaItem.setValueField("key");
		subfolderRdaItem.setDisplayField("key");
		subfolderRdaItem.setOptionDataSource(subfolderRdaDS);
		subfolderRdaItem.setAutoFetchData(false);
		subfolderRdaItem.setAlwaysFetchMissingValues(true);
		subfolderRdaItem.setFetchMissingValues(true);
		subfolderRdaItem.setShowTitle(true);
		subfolderRdaItem.setClearable(true);
		subfolderRdaItem.setAllowEmptyValue(false);
		if(isRequiredSubfolderRdaItem()) {
			subfolderRdaItem.setAttribute("obbligatorio", true);
		} else {
			subfolderRdaItem.setAllowEmptyValue(true);
		}
		subfolderRdaItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredSubfolderRdaItem();
			}
		}));
		subfolderRdaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredSubfolderRdaItem()) {
					subfolderRdaItem.setAttribute("obbligatorio", true);
					subfolderRdaItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleSubfolderRdaItem()));
				} else {
					subfolderRdaItem.setAttribute("obbligatorio", false);
					subfolderRdaItem.setTitle(getTitleSubfolderRdaItem());
				}
				return showSubfolderRda();
			}
		});
				
		subfolderRdaForm.setFields(subfolderRdaItem);			
	}
	
	/********************* 
	 * DATI SCHEDA - CIG *
	 *********************/	
	
	public boolean showDetailSectionCIG() {
		return showFlgOpCommercialeItem() ||
			   showFlgEscludiCIGItem() ||
			   showFlgCIGDaAcquisireItem() ||
			   showMotivoEsclusioneCIGItem() ||
			   showCodiceCIGPadreItem() ||
			   showCIGItem();
	}
	
	public String getTitleDetailSectionCIG() {
		return "CIG";
	}
	
	public boolean isRequiredDetailSectionCIG() {
		return false;
	}
	
	protected void createDetailSectionCIG() {
		
		createCIGForm();
		
		detailSectionCIG = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionCIG(), true, true, isRequiredDetailSectionCIG(), CIGForm);
	}
	
	public boolean showFlgOpCommercialeItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE");
	}
	
	public String getTitleFlgOpCommercialeItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Operazione commerciale";
	}
	
	public boolean isRequiredFlgOpCommercialeItem() {
		return showFlgOpCommercialeItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE");
	}
	
	public String[] getValoriPossibiliFlgOpCommercialeItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {_FLG_SI, _FLG_NO, _FLG_OP_COMMERCIALE_NA};
		}
	}
	
	public HashMap<String, String> getValueMapFlgOpCommercialeItem() {
		return getValueMapAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE");
	}
	
	public String getDefaultValueFlgOpCommercialeItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE");
	}
	
	public boolean showFlgEscludiCIGItem() {
		if(!showFlgOpCommercialeItem() && showFlgProcExCodAppaltiItem() && !_FLG_SI.equals(getValueAsString("flgProcExCodAppalti"))) {
			return false;
		} 
		if(showFlgOpCommercialeItem() && !_FLG_SI.equals(getValueAsString("flgOpCommerciale"))) {
			return false;
		}
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_ESCL_CIG");
	}
	
	public String getTitleFlgEscludiCIGItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_ESCL_CIG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "escludi CIG";
	}
	
	public boolean getDefaultValueAsBooleanFlgEscludiCIGItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_ESCL_CIG");
	}
	
	public boolean showFlgCIGDaAcquisireItem() {
		return showAttributoCustomCablato("TASK_RESULT_2_FLG_CIG_IN_ACQUISIZIONE");
	}
	
	public String getTitleFlgCIGDaAcquisireItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_CIG_IN_ACQUISIZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "CIG in acquisizione";
	}
	
	public boolean getDefaultValueAsBooleanFlgCIGDaAcquisireItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_CIG_IN_ACQUISIZIONE");
	}
	
	public boolean showMotivoEsclusioneCIGItem() {
		if(showFlgEscludiCIGItem() && !getValueAsBoolean("flgEscludiCIG")) {
			return false;
		}
		if(!showFlgOpCommercialeItem() && showFlgProcExCodAppaltiItem() && !_FLG_SI.equals(getValueAsString("flgProcExCodAppalti"))) {
			return false;
		} 
		if(showFlgOpCommercialeItem() && !_FLG_SI.equals(getValueAsString("flgOpCommerciale"))) {
			return false;
		}
		return showAttributoCustomCablato("MOTIVO_ESCLUSIONE_CIG");
	}
	
	public String getTitleMotivoEsclusioneCIGItem() {
		String label = getLabelAttributoCustomCablato("MOTIVO_ESCLUSIONE_CIG");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Motivo esclusione CIG";
	}
	
	public boolean isRequiredMotivoEsclusioneCIGItem() {
		return showMotivoEsclusioneCIGItem() && getFlgObbligatorioAttributoCustomCablato("MOTIVO_ESCLUSIONE_CIG");
	}
	
	public boolean showCodiceCIGPadreItem() {
		if(showFlgEscludiCIGItem() && getValueAsBoolean("flgEscludiCIG")) {
			return false;
		}		
		return showAttributoCustomCablato("CIG_PADRE");
	}
	
	public String getTitleCodiceCIGPadreItem() {
		String label = getLabelAttributoCustomCablato("CIG_PADRE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "CIG padre";
	}
	
	public boolean isRequiredCodiceCIGPadreItem() {
		return showCodiceCIGPadreItem() && getFlgObbligatorioAttributoCustomCablato("CIG_PADRE");
	}
		
	public String getDefaultValueMotivoEsclusioneCIGItem() {
		return getValoreFissoAttributoCustomCablato("MOTIVO_ESCLUSIONE_CIG");
	}
	
	public boolean showCIGItem() {
		if(showFlgEscludiCIGItem() && getValueAsBoolean("flgEscludiCIG")) {
			return false;
		}
		if(showFlgCIGDaAcquisireItem() && getValueAsBoolean("flgCIGDaAcquisire")) {
			return false;
		}
		if(!showFlgOpCommercialeItem() && showFlgProcExCodAppaltiItem() && !_FLG_SI.equals(getValueAsString("flgProcExCodAppalti"))) {
			return false;
		} 
		if(showFlgOpCommercialeItem() && !_FLG_SI.equals(getValueAsString("flgOpCommerciale"))) {
			return false;
		}
		return showAttributoCustomCablato("CIG");
	}
	
	public boolean isRequiredCIGItem() {
		return showCIGItem() && AurigaLayout.getParametroDBAsBoolean("ATTIVA_OBBL_CIG_DET_CONTRARRE") && isDeterminaAContrarreTramiteProceduraGara();
	}
	
	public boolean isEsclusoCIG() {
		return (showAttributoCustomCablato("CIG") && !showCIGItem()) || !"".equals(getValueAsString("motivoEsclusioneCIG").trim());
	}
	
	protected void createCIGForm() {
		
		CIGForm = new DynamicForm();
		CIGForm.setValuesManager(vm);
		CIGForm.setWidth100();
		CIGForm.setPadding(5);
		CIGForm.setWrapItemTitles(false);
		CIGForm.setNumCols(20);
		CIGForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		CIGForm.setTabSet(tabSet);
		CIGForm.setTabID(_TAB_DATI_SCHEDA_ID);
		CIGForm.setHeight(1);		
				
		flgOpCommercialeItem = new RadioGroupItem("flgOpCommerciale", getTitleFlgOpCommercialeItem());
		flgOpCommercialeItem.setStartRow(true);
		flgOpCommercialeItem.setColSpan(1);		
		Map<String, String> flgOpCommercialeValueMap = getValueMapFlgOpCommercialeItem();
		if(flgOpCommercialeValueMap != null && flgOpCommercialeValueMap.keySet().size() > 0) {
			flgOpCommercialeItem.setValueMap(flgOpCommercialeValueMap);					
			if(flgOpCommercialeValueMap.size() == 1) {
				flgOpCommercialeItem.setDefaultValue(flgOpCommercialeValueMap.keySet().iterator().next());
			} else {
				flgOpCommercialeItem.setDefaultValue(getDefaultValueFlgOpCommercialeItem());
			}	
		} else {
			String[] flgOpCommercialeValoriPossibili = getValoriPossibiliFlgOpCommercialeItem();
			flgOpCommercialeItem.setValueMap(flgOpCommercialeValoriPossibili);					
			if(flgOpCommercialeValoriPossibili != null && flgOpCommercialeValoriPossibili.length == 1) {
				flgOpCommercialeItem.setDefaultValue(flgOpCommercialeValoriPossibili[0]);
			} else {
				flgOpCommercialeItem.setDefaultValue(getDefaultValueFlgOpCommercialeItem());
			}	
		}
		flgOpCommercialeItem.setVertical(false);
		flgOpCommercialeItem.setWrap(false);
		flgOpCommercialeItem.setShowDisabled(false);
		if(isRequiredFlgOpCommercialeItem()) {
			flgOpCommercialeItem.setAttribute("obbligatorio", true);
		}
		flgOpCommercialeItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgOpCommercialeItem();
			}
		}));
		flgOpCommercialeItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(showFlgOpCommercialeItem() && showFlgProcExCodAppaltiItem()) {
					if(_FLG_SI.equals(getValueAsString("flgProcExCodAppalti"))) {
						item.setValue(_FLG_SI);
						item.setCanEdit(false);	
					} else {
						item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE") ? editing : false);
					}					
				}
				return showFlgOpCommercialeItem();
			}
		});
		flgOpCommercialeItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {	
				CIGForm.markForRedraw();
			}
		});
		
		flgEscludiCIGItem = new CheckboxItem("flgEscludiCIG", getTitleFlgEscludiCIGItem());
		flgEscludiCIGItem.setDefaultValue(getDefaultValueAsBooleanFlgEscludiCIGItem());		
		flgEscludiCIGItem.setColSpan(1);
		flgEscludiCIGItem.setWidth("*");
		flgEscludiCIGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgEscludiCIGItem();
			}
		});		
		flgEscludiCIGItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {						
					if(showFlgCIGDaAcquisireItem() && getValueAsBoolean("flgCIGDaAcquisire")) {
						flgCIGDaAcquisireItem.setValue(false);
					}
				}				
				CIGForm.markForRedraw();
			}
		});
		
		flgCIGDaAcquisireItem = new CheckboxItem("flgCIGDaAcquisire", getTitleFlgCIGDaAcquisireItem());
		flgCIGDaAcquisireItem.setDefaultValue(getDefaultValueAsBooleanFlgCIGDaAcquisireItem());		
		flgCIGDaAcquisireItem.setColSpan(1);
		flgCIGDaAcquisireItem.setWidth("*");
		flgCIGDaAcquisireItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgCIGDaAcquisireItem();
			}
		});		
		flgCIGDaAcquisireItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if (event.getValue() != null && (Boolean) event.getValue()) {
					if(showFlgEscludiCIGItem() && getValueAsBoolean("flgEscludiCIG")) {
						flgEscludiCIGItem.setValue(false);
					}
				}
				CIGForm.markForRedraw();
			}
		});
		
		motivoEsclusioneCIGItem = new SelectItemValoriDizionario("motivoEsclusioneCIG", getTitleMotivoEsclusioneCIGItem(), "MOTIVO_ESCLUSIONE_CIG");
		motivoEsclusioneCIGItem.setDefaultValue(getDefaultValueMotivoEsclusioneCIGItem());
		motivoEsclusioneCIGItem.setStartRow(true);
		motivoEsclusioneCIGItem.setColSpan(20);
		motivoEsclusioneCIGItem.setWidth(500);		
		motivoEsclusioneCIGItem.setAllowEmptyValue(true);
		motivoEsclusioneCIGItem.setDefaultToFirstOption(false);
		motivoEsclusioneCIGItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredMotivoEsclusioneCIGItem();
			}
		}));
		motivoEsclusioneCIGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredMotivoEsclusioneCIGItem()) {
					motivoEsclusioneCIGItem.setAttribute("obbligatorio", true);
					motivoEsclusioneCIGItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleMotivoEsclusioneCIGItem()));
				} else {
					motivoEsclusioneCIGItem.setAttribute("obbligatorio", false);
					motivoEsclusioneCIGItem.setTitle(getTitleMotivoEsclusioneCIGItem());
				}				
				return showMotivoEsclusioneCIGItem();
			}
		});
		
		CustomValidator codiceCIGPadreLengthValidator = new CustomValidator() {

			@Override
			protected boolean condition(Object value) {
				if (value != null && !"".equals((String) value)) {
					String valore = (String) value;
					return valore.length() == 10;
				}
				return true;
			}
		};
		codiceCIGPadreLengthValidator.setErrorMessage("Il codice CIG, se indicato, deve essere di 10 caratteri");
		
		codiceCIGPadreItem = new TextItem("codiceCIGPadre", getTitleCodiceCIGPadreItem());
		codiceCIGPadreItem.setStartRow(true);
		codiceCIGPadreItem.setWidth(160);
		codiceCIGPadreItem.setLength(10);
		codiceCIGPadreItem.setInputTransformer(new FormItemInputTransformer() {
			
			@Override
			public Object transformInput(DynamicForm form, FormItem item, Object value, Object oldValue) {
				return value != null ? ((String)value).trim().replaceAll(" ", "") : null;
			}
		});
		codiceCIGPadreItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {

			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredCodiceCIGPadreItem();
			}
		}), codiceCIGPadreLengthValidator);
		codiceCIGPadreItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredCodiceCIGPadreItem()) {
					codiceCIGPadreItem.setAttribute("obbligatorio", true);
					codiceCIGPadreItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleCodiceCIGPadreItem()));
				} else {
					codiceCIGPadreItem.setAttribute("obbligatorio", false);
					codiceCIGPadreItem.setTitle(getTitleCodiceCIGPadreItem());
				}				
				return showCodiceCIGPadreItem();
			}
		});
		
		listaCIGItem = new CIGItem() {

			@Override
			public boolean showCUP() {
				return showAttributoCustomCablato("CUP");
			}
			
			@Override
			public boolean showNumGara() {
				return showAttributoCustomCablato("NRO_GARA");
			}
			
			@Override
			public String getTitleNumGara() {
				return getLabelAttributoCustomCablato("NRO_GARA");				
			}
			
			@Override
			public boolean isRequiredNumGara() {
				return getFlgObbligatorioAttributoCustomCablato("NRO_GARA");
			}
			
			@Override
			public String getDefaultValueNumGara() {
				return getValoreFissoAttributoCustomCablato("NRO_GARA");
			}
		};
		listaCIGItem.setName("listaCIG");
		listaCIGItem.setShowTitle(false);
		listaCIGItem.setColSpan(20);
		listaCIGItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
//				if(isRequiredCIGItem()) {
//					listaCIGItem.setAttribute("obbligatorio", true);				
//				} else {
//					listaCIGItem.setAttribute("obbligatorio", false);
//				}					
//				listaCIGItem.storeValueAfterChangedObbligatorio(form.getValueAsRecordList(listaCIGItem.getName()));
				//TODO andrebbe chiamato questo metodo in tutti i replicableItem la cui obbligatorietà cambia dopo il redraw, rispetto al valore di altri campi a maschera
				listaCIGItem.setObbligatorioAfterRedraw(isRequiredCIGItem());
				return showCIGItem();
			}
		});
				
		CIGForm.setFields(flgOpCommercialeItem, flgEscludiCIGItem, flgCIGDaAcquisireItem, motivoEsclusioneCIGItem, codiceCIGPadreItem, listaCIGItem);			
	}
	
	/********************* 
	 * DATI SCHEDA - CUI *
	 *********************/	
	
	public boolean showDetailSectionCUI() {
		return showCUIItem();
	}
	
	public String getTitleDetailSectionCUI() {
		return "CUI";
	}
	
	public boolean isRequiredDetailSectionCUI() {
		return isRequiredCUIItem();
	}
	
	protected void createDetailSectionCUI() {
		
		createCUIForm();
		
		detailSectionCUI = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionCUI(), true, true, isRequiredDetailSectionCUI(), CUIForm);
	}
	
	public boolean showCUIItem() {
		if(showAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI") && (!showFlgProgrammazioneAcquistiItem() || !_FLG_SI.equals(getValueAsString("flgProgrammazioneAcquisti")))) {
			return false;
		}
		return showAttributoCustomCablato("CUI");
	}
	
	public boolean isRequiredCUIItem() {
		return showCUIItem() && getFlgObbligatorioAttributoCustomCablato("CUI");
	}
	
	protected void createCUIForm() {
		
		CUIForm = new DynamicForm();
		CUIForm.setValuesManager(vm);
		CUIForm.setWidth100();
		CUIForm.setPadding(5);
		CUIForm.setWrapItemTitles(false);
		CUIForm.setNumCols(20);
		CUIForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		CUIForm.setTabSet(tabSet);
		CUIForm.setTabID(_TAB_DATI_SCHEDA_ID);
		CUIForm.setHeight(1);		
				
		listaCUIItem = new CUIItem() {

			@Override
			public boolean showAnnoRif() {
				return showAttributoCustomCablato("CUI_ANNO_RIF");
			}
			
			@Override
			public String getTitleAnnoRif() {
				return getLabelAttributoCustomCablato("CUI_ANNO_RIF");
			}
			
			@Override
			public boolean isRequiredAnnoRif() {
				return getFlgObbligatorioAttributoCustomCablato("CUI_ANNO_RIF");
			}
			
			@Override
			public String getDefaultValueAnnoRif() {
				return getValoreFissoAttributoCustomCablato("CUI_ANNO_RIF");
			}
		};
		listaCUIItem.setName("listaCUI");
		listaCUIItem.setShowTitle(false);
		listaCUIItem.setColSpan(20);
		listaCUIItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
//				if(isRequiredCUIItem()) {
//					listaCUIItem.setAttribute("obbligatorio", true);				
//				} else {
//					listaCUIItem.setAttribute("obbligatorio", false);
//				}					
//				listaCUIItem.storeValueAfterChangedObbligatorio(form.getValueAsRecordList(listaCUIItem.getName()));
				//TODO andrebbe chiamato questo metodo in tutti i replicableItem la cui obbligatorietà cambia dopo il redraw, rispetto al valore di altri campi a maschera
				listaCUIItem.setObbligatorioAfterRedraw(isRequiredCUIItem());
				return showCUIItem();
			}
		});
				
		CUIForm.setFields(listaCUIItem);			
	}
	
	/************************************** 
	 * DATI SCHEDA - CATEGORIA DI RISCHIO *
	 **************************************/
	
	public boolean showDetailSectionCategoriaRischio() {
		return showCategoriaRischioItem();
	}
	
	public String getTitleDetailSectionCategoriaRischio() {
		return getTitleCategoriaRischioItem();
	}
	
	public boolean isRequiredDetailSectionCategoriaRischio() {
		return isRequiredCategoriaRischioItem();
	}		
	
	protected void createDetailSectionCategoriaRischio() {
		
		createCategoriaRischioForm();
		
		detailSectionCategoriaRischio = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionCategoriaRischio(), true, true, isRequiredDetailSectionCategoriaRischio(), categoriaRischioForm);
	}
	
	public boolean showCategoriaRischioItem() {
		return showAttributoCustomCablato("CATEGORIA_RISCHIO");
	}
	
	public String getTitleCategoriaRischioItem() {
		String label = getLabelAttributoCustomCablato("CATEGORIA_RISCHIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Categoria di rischio"; 
	}
	
	public boolean isRequiredCategoriaRischioItem() {
		return showCategoriaRischioItem() && getFlgObbligatorioAttributoCustomCablato("CATEGORIA_RISCHIO");
	}
	
	public String getAltriParamLoadComboCategoriaRischioItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("CATEGORIA_RISCHIO");
	}
	
	protected void createCategoriaRischioForm() {
		
		categoriaRischioForm = new DynamicForm();
		categoriaRischioForm.setValuesManager(vm);
		categoriaRischioForm.setWidth100();
		categoriaRischioForm.setPadding(5);
		categoriaRischioForm.setWrapItemTitles(false);
		categoriaRischioForm.setNumCols(20);
		categoriaRischioForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		categoriaRischioForm.setTabSet(tabSet);
		/* Se è visibile il tab trasparenza di AVB il campo CATEGORIA_RISCHIO deve comparire lì, per primo, altrimenti resta sul primo tab */		
		if(showTabTrasparenzaAVB()) {
			categoriaRischioForm.setTabID(_TAB_DATI_TRASP_AVB_ID);
		} else {
			categoriaRischioForm.setTabID(_TAB_DATI_SCHEDA_ID);	
		}		
		categoriaRischioForm.setHeight(1);	
	
		GWTRestDataSource categoriaRischioDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		categoriaRischioDS.addParam("altriParamLoadCombo", getAltriParamLoadComboCategoriaRischioItem());
		
		categoriaRischioItem = new SelectItem("categoriaRischio", getTitleCategoriaRischioItem());
		categoriaRischioItem.setShowTitle(false);
		categoriaRischioItem.setWidth(500);
		categoriaRischioItem.setValueField("key");
		categoriaRischioItem.setDisplayField("value");
		categoriaRischioItem.setOptionDataSource(categoriaRischioDS);
		categoriaRischioItem.setClearable(true);		
		if(isRequiredCategoriaRischioItem()) {
			categoriaRischioItem.setAttribute("obbligatorio", true);
		}
		categoriaRischioItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredCategoriaRischioItem();
			}
		}));
		categoriaRischioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showCategoriaRischioItem();
			}
		});
	
		categoriaRischioForm.setFields(categoriaRischioItem);
	}
	
	/**************************************************
	 * DATI SCHEDA - CLASSIFICAZIONE E FASCICOLAZIONE *
	 **************************************************/	
	
	public boolean showDetailSectionClassFasc() {
		return showClassFascItem();
	}
	
	public String getTitleDetailSectionClassFasc() {
		String label = getLabelAttributoCustomCablato("CLASS_FASC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Classificazione e fascicolazione";
	}
	
	public boolean isRequiredDetailSectionClassFasc() {
		return isRequiredClassFascItem();
	}
	
	protected void createDetailSectionClassFasc() {
		
		createClassFascForm();
		
		detailSectionClassFasc = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionClassFasc(), true, true, isRequiredDetailSectionClassFasc(), classFascForm);
	}
	
	public boolean showClassFascItem() {
		return showAttributoCustomCablato("CLASS_FASC");
	}
	
	public boolean isRequiredClassFascItem() {
		return showClassFascItem() && getFlgObbligatorioAttributoCustomCablato("CLASS_FASC");
	}
	
	protected void createClassFascForm() {
		
		classFascForm = new DynamicForm();
		classFascForm.setValuesManager(vm);
		classFascForm.setWidth100();
		classFascForm.setPadding(5);
		classFascForm.setWrapItemTitles(false);
		classFascForm.setNumCols(20);
		classFascForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		classFascForm.setTabSet(tabSet);
		classFascForm.setTabID(_TAB_DATI_SCHEDA_ID);
		classFascForm.setHeight(1);		
				
		listaClassFascItem = new ClassificaFascicoloItem() {
			
			@Override
			public boolean skipValidation() {
				if(showClassFascItem()) {
					return super.skipValidation();
				}
				return true;
			}
		};
		listaClassFascItem.setName("listaClassFasc");
		listaClassFascItem.setShowTitle(false);
		listaClassFascItem.setColSpan(20);
		if(isRequiredClassFascItem()) {
			listaClassFascItem.setAttribute("obbligatorio", true);
		}
		listaClassFascItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showClassFascItem();
			}
		});
				
		classFascForm.setFields(listaClassFascItem);			
	}
		
	/************************ 
	 * TAB DATI DISPOSITIVO *
	 ************************/
	
	public boolean showTabDatiDispositivo() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("DATI_TESTO");
		boolean hideTabDatiDispositivo = maxNumValori != null && maxNumValori.intValue() == 0;
		return show_TAB_DATI_DISPOSITIVO() && !hideTabDatiDispositivo;
	}
	
	public String getTitleTabDatiDispositivo() {
		String label = getLabelAttributoCustomCablato("DATI_TESTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabDatiDispositivo_prompt();
	}
	
	/**
	 * Metodo per costruire il tab "Dati dispositivo"
	 * 
	 */
	protected void createTabDatiDispositivo() {

		tabDatiDispositivo = new Tab("<b>" + getTitleTabDatiDispositivo() + "</b>");
		tabDatiDispositivo.setAttribute("tabID", _TAB_DATI_DISPOSITIVO_ID);
		tabDatiDispositivo.setPrompt(getTitleTabDatiDispositivo());
		tabDatiDispositivo.setPane(createTabPane(getLayoutDatiDispositivo()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Dati dispositivo"
	 * 
	 */
	public VLayout getLayoutDatiDispositivo() {

		VLayout layoutDatiDispositivo = new VLayout(5);
		
		createDetailSectionUploadPdfAtto();
		layoutDatiDispositivo.addMember(detailSectionUploadPdfAtto);
				
		createDetailSectionRiferimentiNormativi();
		layoutDatiDispositivo.addMember(detailSectionRiferimentiNormativi);
		
		createDetailSectionAttiPresupposti();		
		layoutDatiDispositivo.addMember(detailSectionAttiPresupposti);
		
		createDetailSectionMotivazioni();		
		layoutDatiDispositivo.addMember(detailSectionMotivazioni);

		createDetailSectionPremessa();
		layoutDatiDispositivo.addMember(detailSectionPremessa);
		
		createDetailSectionRifNormativiLiberi();
		layoutDatiDispositivo.addMember(detailSectionRifNormativiLiberi);		

		createDetailSectionDispositivo();			
		layoutDatiDispositivo.addMember(detailSectionDispositivo);
	
		return layoutDatiDispositivo;
	}
	
	/************************************** 
	 * DATI DISPOSITIVO - UPLOAD PDF ATTO *
	 **************************************/	
	
	public boolean showDetailSectionUploadPdfAtto() {
		return showFilePdfAttoItem() || showFilePdfAttoOmissisItem();
	}
	
	public String getTitleDetailSectionUploadPdfAtto() {
		String label = AurigaLayout.getParametroDB("LABEL_PDF_ATTO_DA_UPLOAD");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Upload pdf atto";
	}
	
	public boolean isRequiredDetailSectionUploadPdfAtto() {
		return false;
	}
	
	protected void createDetailSectionUploadPdfAtto() {
		
		createUploadPdfAttoForm();
		
		detailSectionUploadPdfAtto = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionUploadPdfAtto(), true, true, isRequiredDetailSectionUploadPdfAtto(), uploadPdfAttoForm);
	}
	
	public boolean showFilePdfAttoItem() {
		Record recordEvento = getRecordEventoXInfoModelli();
		boolean flgAttivaUploadPdfAtto = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAttivaUploadPdfAtto") : false;		
		return showTabDatiDispositivo() && flgAttivaUploadPdfAtto;
	}
	
	public String getTitleFilePdfAttoItem() {
		return "PDF testo atto";
	}
	
	public boolean showFilePdfAttoOmissisItem() {
		Record recordEvento = getRecordEventoXInfoModelli();
		boolean flgAttivaUploadPdfAttoOmissis = recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAttivaUploadPdfAttoOmissis") : false;		
		return showTabDatiDispositivo() && flgAttivaUploadPdfAttoOmissis;
	}
	
	public String getTitleFilePdfAttoOmissisItem() {
		return "PDF vers. con omissis (per pubblicazione)";
	}
	
	protected void createUploadPdfAttoForm() {
		
		uploadPdfAttoForm = new DynamicForm();
		uploadPdfAttoForm.setValuesManager(vm);
		uploadPdfAttoForm.setWidth100();
		uploadPdfAttoForm.setPadding(5);
		uploadPdfAttoForm.setWrapItemTitles(false);
		uploadPdfAttoForm.setNumCols(20);
		uploadPdfAttoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		uploadPdfAttoForm.setTabSet(tabSet);
		uploadPdfAttoForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		uploadPdfAttoForm.setHeight(1);		
		
		filePdfAttoItem = new DocumentItem() {
			
			@Override
			public int getWidth() {
				return 250;
			}
			
			@Override
			public boolean showVisualizzaVersioniMenuItem() {
				return false;
			}
			
			@Override
			public boolean showAcquisisciDaScannerMenuItem() {
				return false;
			}
			
			@Override
			public boolean showFirmaMenuItem() {
				return false;
			}
			
			
			@Override
			public boolean showAltreOperazioniIfEditing() {
				return true;
			}
						
			@Override
			public boolean isNomeFileEditable() {
				return false;
			}
			
			@Override
			public String getWarningMessageOnUpload() {
				return "Attenzione: caricando il file pdf il testo dell'atto non verrà più generato in automatico a partire dai dati/testi compilati nelle maschere e sarà sempre pari al pdf caricato.";
			}
						
			@Override
			public boolean showSalvaVersConOmissisInPreview() {
				return showFilePdfAttoOmissisItem();
			}
			
			@Override
			public void executeSalvaVersConOmissisInPreview(Record record) {				
				if (showFilePdfAttoOmissisItem()) {					
					filePdfAttoOmissisItem.executeSalvaInPreview(record);
				}						 
			}
						
			@Override
			public boolean isFormatoAmmesso(InfoFileRecord info) {	
				String correctName = info != null ? info.getCorrectFileName() : "";
				return correctName.toLowerCase().endsWith(".pdf");
			}
		};
		filePdfAttoItem.setTitle(getTitleFilePdfAttoItem());
		filePdfAttoItem.setName("filePdfAtto");
//		filePdfAttoItem.setShowTitle(false);		
		filePdfAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFilePdfAttoItem();
			}
		});
		
		filePdfAttoOmissisItem = new DocumentItem() {
			
			@Override
			public int getWidth() {
				return 250;
			}
			
			@Override
			public boolean showVisualizzaVersioniMenuItem() {
				return false;
			}
			
			@Override
			public boolean showAcquisisciDaScannerMenuItem() {
				return false;
			}
			
			@Override
			public boolean showFirmaMenuItem() {
				return false;
			}
			
			
			@Override
			public boolean showAltreOperazioniIfEditing() {
				return true;
			}
						
			@Override
			public boolean isNomeFileEditable() {
				return false;
			}
			
			@Override
			public boolean isFormatoAmmesso(InfoFileRecord info) {	
				String correctName = info != null ? info.getCorrectFileName() : "";
				return correctName.toLowerCase().endsWith(".pdf");
			}
		};
		filePdfAttoOmissisItem.setTitle(getTitleFilePdfAttoOmissisItem());
		filePdfAttoOmissisItem.setName("filePdfAttoOmissis");
//		filePdfAttoOmissisItem.setShowTitle(false);		
		filePdfAttoOmissisItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFilePdfAttoOmissisItem();
			}
		});
		
		uploadPdfAttoForm.setFields(filePdfAttoItem, filePdfAttoOmissisItem);
	}
	
	/******************************************** 
	 * DATI DISPOSITIVO - RIFERIMENTI NORMATIVI *
	 ********************************************/	
	
	public boolean showDetailSectionRiferimentiNormativi() {
		return showRiferimentiNormativiItem();
	}
	
	public String getTitleDetailSectionRiferimentiNormativi() {		
		return getTitleRiferimentiNormativiItem();
	}
	
	public boolean isRequiredDetailSectionRiferimentiNormativi() {
		return isRequiredRiferimentiNormativiItem();
	}
	
	protected void createDetailSectionRiferimentiNormativi() {
		
		createRiferimentiNormativiForm();
		
		detailSectionRiferimentiNormativi = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionRiferimentiNormativi(), true, true, isRequiredDetailSectionRiferimentiNormativi(), riferimentiNormativiForm);
	}
	
	public boolean showRiferimentiNormativiItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("RIFERIMENTI_NORMATIVI");
	}
	
	public String getTitleRiferimentiNormativiItem() {
		String label = getLabelAttributoCustomCablato("RIFERIMENTI_NORMATIVI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Riferimenti normativi";
	}
	
	public boolean isRequiredRiferimentiNormativiItem() {
		return showRiferimentiNormativiItem() && getFlgObbligatorioAttributoCustomCablato("RIFERIMENTI_NORMATIVI");
	}
	
	protected void createRiferimentiNormativiForm() {
		
		riferimentiNormativiForm = new DynamicForm();
		riferimentiNormativiForm.setValuesManager(vm);
		riferimentiNormativiForm.setWidth100();
		riferimentiNormativiForm.setPadding(5);
		riferimentiNormativiForm.setWrapItemTitles(false);
		riferimentiNormativiForm.setNumCols(20);
		riferimentiNormativiForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		riferimentiNormativiForm.setTabSet(tabSet);
		riferimentiNormativiForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		riferimentiNormativiForm.setHeight(1);		
		
		listaRiferimentiNormativiItem = new RiferimentiNormativiItem() {
			
			@Override
			public boolean skipValidation() {
				if(showRiferimentiNormativiItem()) {
					return super.skipValidation();
				}
				return true;
			}
		};
		listaRiferimentiNormativiItem.setName("listaRiferimentiNormativi");
		listaRiferimentiNormativiItem.setShowTitle(false);
		listaRiferimentiNormativiItem.setColSpan(20);
		if(isRequiredRiferimentiNormativiItem()) {
			listaRiferimentiNormativiItem.setAttribute("obbligatorio", true);
		}
		listaRiferimentiNormativiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showRiferimentiNormativiItem();
			}
		});
		
		riferimentiNormativiForm.setFields(listaRiferimentiNormativiItem);			
	}
	
	/**************************************** 
	 * DATI DISPOSITIVO - ATTI PRESUPOPOSTI *
	 ****************************************/
	
	public boolean showDetailSectionAttiPresupposti() {
		return showAttiPresuppostiItem();
	}
	
	public String getTitleDetailSectionAttiPresupposti() {		
		return getTitleAttiPresuppostiItem();
	}
	
	public boolean isRequiredDetailSectionAttiPresupposti() {
		return isRequiredAttiPresuppostiItem();
	}
		
	protected void createDetailSectionAttiPresupposti() {
		
		createAttiPresuppostiForm();
		
		detailSectionAttiPresupposti = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionAttiPresupposti(), true, true, isRequiredDetailSectionAttiPresupposti(), attiPresuppostiForm);
	}
	
	public boolean showAttiPresuppostiItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("ATTI_PRESUPPOSTI");
	}
	
	public String getTitleAttiPresuppostiItem() {
		String label = getLabelAttributoCustomCablato("ATTI_PRESUPPOSTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Atti presupposti";
	}
	
	public boolean isRequiredAttiPresuppostiItem() {
		return showAttiPresuppostiItem() && getFlgObbligatorioAttributoCustomCablato("ATTI_PRESUPPOSTI");
	}
	
	public int getAltezzaInRigheAttiPresuppostiItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("ATTI_PRESUPPOSTI");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileAttiPresuppostiItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("ATTI_PRESUPPOSTI");
	}
	
	public boolean getFlgIgnoraGestioneOmissisAttiPresuppostiItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("ATTI_PRESUPPOSTI");
	}
	
	protected void createAttiPresuppostiForm() {
		
		attiPresuppostiForm = new DynamicForm();
		attiPresuppostiForm.setValuesManager(vm);
		attiPresuppostiForm.setWidth100();
		attiPresuppostiForm.setPadding(5);
		attiPresuppostiForm.setWrapItemTitles(false);
		attiPresuppostiForm.setNumCols(20);
		attiPresuppostiForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		attiPresuppostiForm.setTabSet(tabSet);
		attiPresuppostiForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		attiPresuppostiForm.setHeight(1);		
		
//		listaAttiPresuppostiItem = new AttiPresuppostiItem() {
//		
//			@Override
//			public boolean skipValidation() {
//				if(showDetailSectionAttiPresupposti()) {
//					return super.skipValidation();
//				}
//				return true;
//			}
//		};
//		listaAttiPresuppostiItem.setName("listaAttiPresupposti");
//		listaAttiPresuppostiItem.setShowTitle(false);
//		listaAttiPresuppostiItem.setColSpan(20);
//		if(isRequiredDetailSectionAttiPresupposti()) {
//			listaAttiPresuppostiItem.setAttribute("obbligatorio", true);
//		}
//		
//		attiPresuppostiForm.setFields(listaAttiPresuppostiItem);			
		
		attiPresuppostiItem = new CKEditorItem("attiPresupposti", -1, "STANDARD", getAltezzaInRigheAttiPresuppostiItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileAttiPresuppostiItem(), getFlgIgnoraGestioneOmissisAttiPresuppostiItem()) {
			
			@Override
			public Boolean validate() {
				if(showAttiPresuppostiItem()) {
					return super.validate();
				}
				return true;			
			}
		};
		attiPresuppostiItem.setShowTitle(false);
		attiPresuppostiItem.setColSpan(20);
		attiPresuppostiItem.setWidth("100%");
		attiPresuppostiItem.setRequired(isRequiredAttiPresuppostiItem());
		attiPresuppostiItem.setVisible(showAttiPresuppostiItem());			
		
		attiPresuppostiForm.setFields(attiPresuppostiItem);	
	}
	
	/********************************** 
	 * DATI DISPOSITIVO - MOTIVAZIONI *
	 **********************************/	
	
	public boolean showDetailSectionMotivazioni() {
		return showMotivazioniItem();
	}
	
	public String getTitleDetailSectionMotivazioni() {		
		return getTitleMotivazioniItem();
	}
	
	public boolean isRequiredDetailSectionMotivazioni() {
		return isRequiredMotivazioniItem();
	}
	
	protected void createDetailSectionMotivazioni() {
		
		createMotivazioniForm();
		
		detailSectionMotivazioni = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionMotivazioni(), true, true, isRequiredDetailSectionMotivazioni(), motivazioniForm);
	}
	
	public boolean showMotivazioniItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("MOTIVAZIONI_ATTO");
	}
	
	public String getTitleMotivazioniItem() {
		String label = getLabelAttributoCustomCablato("MOTIVAZIONI_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Motivazioni";
	}
	
	public boolean isRequiredMotivazioniItem() {
		return showMotivazioniItem() && getFlgObbligatorioAttributoCustomCablato("MOTIVAZIONI_ATTO");
	}	
	
	public int getAltezzaInRigheMotivazioniItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("MOTIVAZIONI_ATTO");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileMotivazioniItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("MOTIVAZIONI_ATTO");
	}
	
	public boolean getFlgIgnoraGestioneOmissisMotivazioniItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("MOTIVAZIONI_ATTO");
	}
	
	protected void createMotivazioniForm() {
		
		motivazioniForm = new DynamicForm();
		motivazioniForm.setValuesManager(vm);
		motivazioniForm.setWidth100();
		motivazioniForm.setPadding(5);
		motivazioniForm.setWrapItemTitles(false);
		motivazioniForm.setNumCols(20);
		motivazioniForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		motivazioniForm.setTabSet(tabSet);
		motivazioniForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		motivazioniForm.setHeight(1);		
		
		motivazioniItem = new CKEditorItem("motivazioni", -1, "STANDARD", getAltezzaInRigheMotivazioniItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileMotivazioniItem(), getFlgIgnoraGestioneOmissisMotivazioniItem()) {
			
			@Override
			public Boolean validate() {
				if(showMotivazioniItem()) {
					return super.validate();
				}
				return true;			
			}
		};
		motivazioniItem.setShowTitle(false);
		motivazioniItem.setColSpan(20);
		motivazioniItem.setWidth("100%");
		motivazioniItem.setRequired(isRequiredMotivazioniItem());
		motivazioniItem.setVisible(showMotivazioniItem());	
				
		motivazioniForm.setFields(motivazioniItem);		
	}
	
	/******************************* 
	 * DATI DISPOSITIVO - PREMESSA *
	 *******************************/	
	
	public boolean showDetailSectionPremessa() {
		return showPremessaItem();
	}
	
	public String getTitleDetailSectionPremessa() {		
		return getTitlePremessaItem();
	}
	
	public boolean isRequiredDetailSectionPremessa() {
		return isRequiredPremessaItem();
	}
		
	protected void createDetailSectionPremessa() {
		
		createPremessaForm();
		
		detailSectionPremessa = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionPremessa(), true, true, isRequiredDetailSectionPremessa(), premessaForm);
	}
	
	public boolean showPremessaItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("PREMESSA_ATTO");
	}
	
	public String getTitlePremessaItem() {
		String label = getLabelAttributoCustomCablato("PREMESSA_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Premessa";
	}
	
	public boolean isRequiredPremessaItem() {
		return showPremessaItem() && getFlgObbligatorioAttributoCustomCablato("PREMESSA_ATTO");
	}
	
	public int getAltezzaInRighePremessaItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("PREMESSA_ATTO");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFilePremessaItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("PREMESSA_ATTO");
	}
	
	public boolean getFlgIgnoraGestioneOmissisPremessaItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("PREMESSA_ATTO");
	}
		
	protected void createPremessaForm() {
		
		premessaForm = new DynamicForm();
		premessaForm.setValuesManager(vm);
		premessaForm.setWidth100();
		premessaForm.setPadding(5);
		premessaForm.setWrapItemTitles(false);
		premessaForm.setNumCols(20);
		premessaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		premessaForm.setTabSet(tabSet);
		premessaForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		premessaForm.setHeight(1);		
		
		premessaItem = new CKEditorItem("premessa", -1, "STANDARD", getAltezzaInRighePremessaItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFilePremessaItem(), getFlgIgnoraGestioneOmissisPremessaItem()) {
			
			@Override
			public Boolean validate() {
				if(showPremessaItem()) {
					return super.validate();
				}
				return true;			
			}
		};
		premessaItem.setShowTitle(false);
		premessaItem.setColSpan(20);
		premessaItem.setWidth("100%");
		premessaItem.setRequired(isRequiredPremessaItem());
		premessaItem.setVisible(showPremessaItem());	

		premessaForm.setFields(premessaItem);			
	}
	
	/******************************************** 
	 * DATI DISPOSITIVO - RIFERIMENTI NORMATIVI *
	 ********************************************/	
	
	public boolean showDetailSectionRifNormativiLiberi() {
		return showRifNormativiLiberiItem();
	}
	
	public String getTitleDetailSectionRifNormativiLiberi() {		
		return getTitleRifNormativiLiberiItem();
	}
	
	public boolean isRequiredDetailSectionRifNormativiLiberi() {
		return isRequiredRifNormativiLiberiItem();
	}
		
	protected void createDetailSectionRifNormativiLiberi() {
		
		createRifNormativiLiberiForm();
		
		detailSectionRifNormativiLiberi = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionRifNormativiLiberi(), true, true, isRequiredDetailSectionRifNormativiLiberi(), rifNormativiLiberiForm);
	}
	
	public boolean showRifNormativiLiberiItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("RIF_NORMATIVI_LIBERI");
	}
	
	public String getTitleRifNormativiLiberiItem() {
		String label = getLabelAttributoCustomCablato("RIF_NORMATIVI_LIBERI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Riferimenti normativi";
	}
	
	public boolean isRequiredRifNormativiLiberiItem() {
		return showRifNormativiLiberiItem() && getFlgObbligatorioAttributoCustomCablato("RIF_NORMATIVI_LIBERI");
	}
	
	public int getAltezzaInRigheRifNormativiLiberiItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("RIF_NORMATIVI_LIBERI");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileRifNormativiLiberiItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("RIF_NORMATIVI_LIBERI");
	}

	public boolean getFlgIgnoraGestioneOmissisRifNormativiLiberiItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("RIF_NORMATIVI_LIBERI");
	}
		
	protected void createRifNormativiLiberiForm() {
		
		rifNormativiLiberiForm = new DynamicForm();
		rifNormativiLiberiForm.setValuesManager(vm);
		rifNormativiLiberiForm.setWidth100();
		rifNormativiLiberiForm.setPadding(5);
		rifNormativiLiberiForm.setWrapItemTitles(false);
		rifNormativiLiberiForm.setNumCols(20);
		rifNormativiLiberiForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		rifNormativiLiberiForm.setTabSet(tabSet);
		rifNormativiLiberiForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		rifNormativiLiberiForm.setHeight(1);		
		
		rifNormativiLiberiItem = new CKEditorItem("rifNormativiLiberi", -1, "STANDARD", getAltezzaInRigheRifNormativiLiberiItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileRifNormativiLiberiItem(), getFlgIgnoraGestioneOmissisRifNormativiLiberiItem()) {
			
			@Override
			public Boolean validate() {
				if(showRifNormativiLiberiItem()) {
					return super.validate();
				}
				return true;			
			}
		};
		rifNormativiLiberiItem.setShowTitle(false);
		rifNormativiLiberiItem.setColSpan(20);
		rifNormativiLiberiItem.setWidth("100%");
		rifNormativiLiberiItem.setRequired(isRequiredRifNormativiLiberiItem());
		rifNormativiLiberiItem.setVisible(showRifNormativiLiberiItem());	

		rifNormativiLiberiForm.setFields(rifNormativiLiberiItem);			
	}
		
	/********************************** 
	 * DATI DISPOSITIVO - DISPOSITIVO *
	 **********************************/
	
	public boolean showDetailSectionDispositivo() {
		return showDispositivoItem();
	}
	
	public String getTitleDetailSectionDispositivo() {		
		return getTitleDispositivoItem();
	}
	
	public boolean isRequiredDetailSectionDispositivo() {
		return isRequiredDispositivoItem();
	}
	
	protected void createDetailSectionDispositivo() {
		
		createDispositivoForm();
		
		detailSectionDispositivo = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDispositivo(), true, true, isRequiredDetailSectionDispositivo(), dispositivoForm);
	}
		
	public boolean showDispositivoItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("DISPOSITIVO_ATTO");
	}
	
	public String getTitleDispositivoItem() {
		String label = getLabelAttributoCustomCablato("DISPOSITIVO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dispositivo";
	}
	
	public boolean isRequiredDispositivoItem() {
		return showDispositivoItem() && getFlgObbligatorioAttributoCustomCablato("DISPOSITIVO_ATTO");
	}
	
	public int getAltezzaInRigheDispositivo() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("DISPOSITIVO_ATTO");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileDispositivo() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("DISPOSITIVO_ATTO");
	}
	
	public boolean getFlgIgnoraGestioneOmissisDispositivo() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("DISPOSITIVO_ATTO");
	}
	
	public boolean showLoghiAggiuntiviDispositivoItem() {
		return showTabDatiDispositivo() && showAttributoCustomCablato("LOGHI_DISPOSITIVO_ATTO");		
	}
	
	public String getTitleLoghiAggiuntiviDispositivoItem() {
		String label = getLabelAttributoCustomCablato("LOGHI_DISPOSITIVO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Loghi aggiuntivi da inserire";
	}
	
	protected void createDispositivoForm() {
		
		dispositivoForm = new DynamicForm();
		dispositivoForm.setValuesManager(vm);
		dispositivoForm.setWidth100();
		dispositivoForm.setPadding(5);
		dispositivoForm.setWrapItemTitles(false);
		dispositivoForm.setNumCols(20);
		dispositivoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		dispositivoForm.setTabSet(tabSet);
		dispositivoForm.setTabID(_TAB_DATI_DISPOSITIVO_ID);
		dispositivoForm.setHeight(1);		
		
		dispositivoItem = new CKEditorItem("dispositivo", -1, "STANDARD", getAltezzaInRigheDispositivo(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileDispositivo(), getFlgIgnoraGestioneOmissisDispositivo()) {
			
			@Override
			public Boolean validate() {
				if(showDispositivoItem()) {
					return super.validate();
				}
				return true;			
			}
		};
		dispositivoItem.setShowTitle(false);
		dispositivoItem.setColSpan(20);
		dispositivoItem.setWidth("100%");
		dispositivoItem.setRequired(isRequiredDispositivoItem());
		dispositivoItem.setVisible(showDispositivoItem());	
		
		loghiAggiuntiviDispositivoItem = new SelectItemValoriDizionario("loghiAggiuntiviDispositivo", getTitleLoghiAggiuntiviDispositivoItem(), "LOGHI_X_TEMPLATE_DOC");
		loghiAggiuntiviDispositivoItem.setStartRow(true);
		loghiAggiuntiviDispositivoItem.setWidth(500);
		loghiAggiuntiviDispositivoItem.setAllowEmptyValue(true);
		loghiAggiuntiviDispositivoItem.setDefaultToFirstOption(false);
		loghiAggiuntiviDispositivoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showLoghiAggiuntiviDispositivoItem();
			}
		});
		
		dispositivoForm.setFields(dispositivoItem, loghiAggiuntiviDispositivoItem);			
	}
	
	/************************** 
	 * TAB DATI DISPOSITIVO 2 *
	 **************************/
	
	public boolean showTabDatiDispositivo2() { 
		return show_TAB_DATI_DISPOSITIVO_2() && showAttributoCustomCablato("DATI_TESTO_2");
	}
	
	public String getTitleTabDatiDispositivo2() {
		String label = getLabelAttributoCustomCablato("DATI_TESTO_2");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabDatiDispositivo2_prompt();
	}
	
	/**
	 * Metodo per costruire il tab "Dati dispositivo 2"
	 * 
	 */
	protected void createTabDatiDispositivo2() {

		tabDatiDispositivo2 = new Tab("<b>" + getTitleTabDatiDispositivo2() + "</b>");
		tabDatiDispositivo2.setAttribute("tabID", _TAB_DATI_DISPOSITIVO_2_ID);
		tabDatiDispositivo2.setPrompt(getTitleTabDatiDispositivo2());
		tabDatiDispositivo2.setPane(createTabPane(getLayoutDatiDispositivo2()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Dati dispositivo 2"
	 * 
	 */
	public VLayout getLayoutDatiDispositivo2() {

		VLayout layoutDatiDispositivo2 = new VLayout(5);
		
		createDetailSectionPremessa2();
		layoutDatiDispositivo2.addMember(detailSectionPremessa2);

		createDetailSectionDispositivo2();			
		layoutDatiDispositivo2.addMember(detailSectionDispositivo2);
	
		return layoutDatiDispositivo2;
	}
	
	/*********************************** 
	 * DATI DISPOSITIVO 2 - PREMESSA 2 *
	 ***********************************/	
	
	public boolean showDetailSectionPremessa2() {
		return showPremessa2Item();
	}
	
	public String getTitleDetailSectionPremessa2() {		
		return getTitlePremessa2Item();
	}
	
	public boolean isRequiredDetailSectionPremessa2() {
		return isRequiredPremessa2Item();
	}
		
	protected void createDetailSectionPremessa2() {
		
		createPremessa2Form();
		
		detailSectionPremessa2 = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionPremessa2(), true, true, isRequiredDetailSectionPremessa2(), premessa2Form);
	}
	
	public boolean showPremessa2Item() {
		return showTabDatiDispositivo2() && showAttributoCustomCablato("PREMESSA_ATTO_2");
	}
	
	public String getTitlePremessa2Item() {
		String label = getLabelAttributoCustomCablato("PREMESSA_ATTO_2");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Premessa 2";
	}
	
	public boolean isRequiredPremessa2Item() {
		return showPremessa2Item() && getFlgObbligatorioAttributoCustomCablato("PREMESSA_ATTO_2");
	}
	
	public int getAltezzaInRighePremessa2Item() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("PREMESSA_ATTO_2");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFilePremessa2Item() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("PREMESSA_ATTO_2");
	}
	
	public boolean getFlgIgnoraGestioneOmissisPremessa2Item() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("PREMESSA_ATTO_2");
	}
		
	protected void createPremessa2Form() {
		
		premessa2Form = new DynamicForm();
		premessa2Form.setValuesManager(vm);
		premessa2Form.setWidth100();
		premessa2Form.setPadding(5);
		premessa2Form.setWrapItemTitles(false);
		premessa2Form.setNumCols(20);
		premessa2Form.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		premessa2Form.setTabSet(tabSet);
		premessa2Form.setTabID(_TAB_DATI_DISPOSITIVO_2_ID);
		premessa2Form.setHeight(1);		
		
		premessa2Item = new CKEditorItem("premessa2", -1, "STANDARD", getAltezzaInRighePremessa2Item(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFilePremessa2Item(), getFlgIgnoraGestioneOmissisPremessa2Item()) {
			
			@Override
			public Boolean validate() {
				if(showPremessa2Item()) {
					return super.validate();
				}
				return true;			
			}
		};
		premessa2Item.setShowTitle(false);
		premessa2Item.setColSpan(20);
		premessa2Item.setWidth("100%");
		premessa2Item.setRequired(isRequiredPremessa2Item());
		premessa2Item.setVisible(showPremessa2Item());	

		premessa2Form.setFields(premessa2Item);			
	}
	
	/************************************** 
	 * DATI DISPOSITIVO 2 - DISPOSITIVO 2 *
	 **************************************/
	
	public boolean showDetailSectionDispositivo2() {
		return showDispositivo2Item();
	}
	
	public String getTitleDetailSectionDispositivo2() {		
		return getTitleDispositivo2Item();
	}
	
	public boolean isRequiredDetailSectionDispositivo2() {
		return isRequiredDispositivo2Item();
	}
	
	protected void createDetailSectionDispositivo2() {
		
		createDispositivo2Form();
		
		detailSectionDispositivo2 = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDispositivo2(), true, true, isRequiredDetailSectionDispositivo2(), dispositivo2Form);
	}
		
	public boolean showDispositivo2Item() {
		return showTabDatiDispositivo2() && showAttributoCustomCablato("DISPOSITIVO_ATTO_2");
	}
	
	public String getTitleDispositivo2Item() {
		String label = getLabelAttributoCustomCablato("DISPOSITIVO_ATTO_2");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dispositivo 2";
	}
	
	public boolean isRequiredDispositivo2Item() {
		return showDispositivo2Item() && getFlgObbligatorioAttributoCustomCablato("DISPOSITIVO_ATTO_2");
	}
	
	public int getAltezzaInRigheDispositivo2() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("DISPOSITIVO_ATTO_2");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileDispositivo2() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("DISPOSITIVO_ATTO_2");
	}
	
	public boolean getFlgIgnoraGestioneOmissisDispositivo2() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("DISPOSITIVO_ATTO_2");
	}
	
	protected void createDispositivo2Form() {
		
		dispositivo2Form = new DynamicForm();
		dispositivo2Form.setValuesManager(vm);
		dispositivo2Form.setWidth100();
		dispositivo2Form.setPadding(5);
		dispositivo2Form.setWrapItemTitles(false);
		dispositivo2Form.setNumCols(20);
		dispositivo2Form.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		dispositivo2Form.setTabSet(tabSet);
		dispositivo2Form.setTabID(_TAB_DATI_DISPOSITIVO_2_ID);
		dispositivo2Form.setHeight(1);		
		
		dispositivo2Item = new CKEditorItem("dispositivo2", -1, "STANDARD", getAltezzaInRigheDispositivo2(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileDispositivo2(), getFlgIgnoraGestioneOmissisDispositivo2()) {
			
			@Override
			public Boolean validate() {
				if(showDispositivo2Item()) {
					return super.validate();
				}
				return true;			
			}
		};
		dispositivo2Item.setShowTitle(false);
		dispositivo2Item.setColSpan(20);
		dispositivo2Item.setWidth("100%");
		dispositivo2Item.setRequired(isRequiredDispositivo2Item());
		dispositivo2Item.setVisible(showDispositivo2Item());	
		
		dispositivo2Form.setFields(dispositivo2Item);			
	}
	
	/**************** 
	 * TAB ALLEGATI *
	 ****************/
	
	public boolean showTabAllegati() {
		return show_TAB_ALLEGATI();
	}
	
	public String getTitleTabAllegati() {
		String label = AurigaLayout.getParametroDB("LABEL_TAB_ALLEG_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabAllegatiPareri_prompt();
	}
	
	public Boolean getFlgAllegAttoParteIntDefaultXTipoAtto() {
		return flgAllegAttoParteIntDefaultXTipoAtto != null ? flgAllegAttoParteIntDefaultXTipoAtto : AurigaLayout.getParametroDBAsBoolean("FLG_ALLEG_ATTO_PARTE_INT_DEFAULT");
	}
	
	public Boolean getFlgAllegAttoParteIntDefaultOrdPermanente() {
		return flgAllegAttoParteIntDefaultOrdPermanente != null ? flgAllegAttoParteIntDefaultOrdPermanente : getFlgAllegAttoParteIntDefaultXTipoAtto();
	}
	
	public Boolean getFlgAllegAttoParteIntDefaultOrdTemporanea() {
		return flgAllegAttoParteIntDefaultOrdTemporanea != null ? flgAllegAttoParteIntDefaultOrdTemporanea : getFlgAllegAttoParteIntDefaultXTipoAtto();
	}
	
	public Boolean getFlgAllegAttoPubblSepDefaultXTipoAtto() {
		return flgAllegAttoPubblSepDefaultXTipoAtto != null ? flgAllegAttoPubblSepDefaultXTipoAtto : AurigaLayout.getParametroDBAsBoolean("FLG_ALLEG_ATTO_PUBBL_SEPARATA_DEFAULT");
	}
		
	public Boolean getFlgAttivaSceltaPosizioneAllegatiUniti() {
		return flgAttivaSceltaPosizioneAllegatiUniti != null && flgAttivaSceltaPosizioneAllegatiUniti;
	}
	
	public boolean hasModelloAllegatiParteIntSeparatiXPubbl() {
		return false;					
	}
	
	/**
	 * Metodo per costruire il tab "Allegati"
	 * 
	 */
	protected void createTabAllegati() {

		tabAllegati = new Tab("<b>" + getTitleTabAllegati() + "</b>");
		tabAllegati.setAttribute("tabID", _TAB_ALLEGATI_ID);
		tabAllegati.setPrompt(getTitleTabAllegati());
		
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_ALLEGATI_IN_ATTI")) {
			// faccio in modo che la lista occupi tutto lo spazio disponibile
			VLayout layoutAllegati = getLayoutAllegati();
			layoutAllegati.setHeight100();
			VLayout layoutTabAllegati = new VLayout();
			layoutTabAllegati.setWidth100();
			layoutTabAllegati.setHeight100();
			layoutTabAllegati.addMember(layoutAllegati);
			layoutTabAllegati.setRedrawOnResize(true);
			tabAllegati.setPane(layoutTabAllegati);
		} else {
			tabAllegati.setPane(createTabPane(getLayoutAllegati()));
		}
	}

	/**
	 * Metodo che restituisce il layout del tab "Allegati"
	 * 
	 */
	public VLayout getLayoutAllegati() {

		VLayout layoutAllegati = new VLayout(5);
				
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_ALLEGATI_IN_ATTI")) {
			createAllegatiForm();
			layoutAllegati.addMember(allegatiForm);
		} else {
			createDetailSectionAllegati();
			layoutAllegati.addMember(detailSectionAllegati);	
		}
		
		return layoutAllegati;
	}
	
	public String getTitleDetailSectionAllegati() {
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionAllegati_title();
	}
	
	public boolean isRequiredDetailSectionAllegati() {
		return false;
	}
		
	protected void createDetailSectionAllegati() {
		
		createAllegatiForm();
		
		detailSectionAllegati = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionAllegati(), true, true, isRequiredDetailSectionAllegati(), allegatiForm);		
	}
	
	protected void createAllegatiForm() {
		
		allegatiForm = new DynamicForm();
		allegatiForm.setValuesManager(vm);
		allegatiForm.setWidth100();
		allegatiForm.setPadding(5);
		allegatiForm.setWrapItemTitles(false);
		allegatiForm.setNumCols(20);
		allegatiForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		allegatiForm.setTabSet(tabSet);
		allegatiForm.setTabID(_TAB_ALLEGATI_ID);
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_ALLEGATI_IN_ATTI")) {
			// faccio in modo che la lista occupi tutto lo spazio disponibile
			allegatiForm.setHeight100();
		} else {
			allegatiForm.setHeight(1);		
		}
			
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_ALLEGATI_IN_ATTI")) {
			/* NUOVA GESTIONE ALLEGATI CON GRIDITEM */
			listaAllegatiItem = new AllegatiGridItem("listaAllegati", "listaAllegatiAtto") {
	
				@Override
				public String getIdProcess() {
					return getIdProcessTask();
				}
	
				@Override
				public String getIdProcessType() {
					return getIdProcessTypeTask();
				}
	
				@Override
				public String getIdTaskCorrenteAllegati() {
					return getIdTaskCorrente();
				}
	
				@Override
				public HashSet<String> getTipiModelliAttiAllegati() {
					return getTipiModelliAttiInAllegati();
				}
				
				@Override
				public Record getDetailRecord() {
					return getDetailRecordInAllegati();
				}
								
				@Override
				public boolean isObbligatorioFile() {
					return isObbligatorioFileInAllegati();
				}
	
				@Override
				public boolean isFormatoAmmessoParteIntegrante(InfoFileRecord info) {
					return isFormatoAmmessoParteIntegranteInAllegati(info);
				}
				
				@Override
				public String getRifiutoAllegatiConFirmeNonValide() {
					return getRifiutoAllegatiConFirmeNonValideInAllegati();
				}
				
				@Override
				public boolean isDisattivaUnioneAllegatiFirmati() {
					return isDisattivaUnioneAllegatiFirmatiInAllegati();
				}
				
				@Override
				public boolean isPubblicazioneSeparataPdfProtetti() {
					return isPubblicazioneSeparataPdfProtettiInAllegati();
				}
				
				@Override
				public boolean isAttivaSceltaPosizioneAllegatiUniti() {
					return getFlgAttivaSceltaPosizioneAllegatiUniti();
				}
				
				@Override
				public boolean isAttivaVociBarcode() {
					String idUd = (idUdHiddenItem.getValue() != null) ? String.valueOf(idUdHiddenItem.getValue()) : null;
					return idUd != null && !"".equals(idUd);
				}								
				
				@Override
				public boolean getShowGeneraDaModello() {
					return true;
				}
				
				@Override
				public void caricaModelloAllegato(String idModello, String tipoModello, String flgConvertiInPdf, final ServiceCallback<Record> callback) {
					caricaModelloInAllegati(idModello, tipoModello, flgConvertiInPdf, callback);
				}
	
				@Override
				public Record getRecordCaricaModelloAllegato(String idModello, String tipoModello) {
					return getRecordCaricaModelloInAllegati(idModello, tipoModello);
				}
				
				@Override
				public boolean getFlgAllegAttoParteIntDefault() {
					if(showTipoOrdMobilitaItem() && _PERMANENTE.equalsIgnoreCase(getValueAsString("tipoOrdMobilita"))) {
						return getFlgAllegAttoParteIntDefaultOrdPermanente();
					}					
					if(showTipoOrdMobilitaItem() && _TEMPORANEA.equalsIgnoreCase(getValueAsString("tipoOrdMobilita"))) {
						return getFlgAllegAttoParteIntDefaultOrdTemporanea();
					}
					return getFlgAllegAttoParteIntDefaultXTipoAtto();
				}
				
				@Override
				public boolean getFlgAllegAttoPubblSepDefault() {
					return getFlgAllegAttoPubblSepDefaultXTipoAtto();
				}
				
				@Override
				public Integer getWidthDescrizioneFileAllegato() {
					return 250;
				}
				
				@Override
				public Integer getWidthNomeFileAllegato() {
					return 250;
				}
				
				@Override
				public boolean getShowFlgDatiProtettiTipo1() {
					return showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_1_SU_ALLEG");
				}
				
				@Override
				public String getTitleFlgDatiProtettiTipo1() {
					String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_1_SU_ALLEG");
					if(label != null && !"".equals(label)) {
						return label;
					}
					return "dati protetti tipo 1";
				}
				
				@Override
				public boolean getShowFlgDatiProtettiTipo2() {
					return showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_2_SU_ALLEG");
				}
				
				@Override
				public String getTitleFlgDatiProtettiTipo2() {
					String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_2_SU_ALLEG");
					if(label != null && !"".equals(label)) {
						return label;
					}
					return "dati protetti tipo 2";
				}
				
				@Override
				public boolean getShowFlgDatiProtettiTipo3() {
					return showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_3_SU_ALLEG");
				}
				
				@Override
				public String getTitleFlgDatiProtettiTipo3() {
					String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_3_SU_ALLEG");
					if(label != null && !"".equals(label)) {
						return label;
					}
					return "dati protetti tipo 3";
				}
				
				@Override
				public boolean getShowFlgDatiProtettiTipo4() {
					return showAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_4_SU_ALLEG");
				}
				
				@Override
				public String getTitleFlgDatiProtettiTipo4() {
					String label = getLabelAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_4_SU_ALLEG");
					if(label != null && !"".equals(label)) {
						return label;
					}
					return "dati protetti tipo 4";
				}
				
				@Override
				public boolean getShowVersioneOmissis() {
					return true;
				}
				
				@Override
				public boolean getShowFlgProvEsterna() {
					return AurigaLayout.getParametroDBAsBoolean("ATTIVA_GEST_PROV_ALLEG_ATTI");
				}
				
				@Override
				public boolean getShowFlgParere() {
					return true;
				}
				
				@Override
				public boolean getSortByFlgParteDispositivo() {
					return !AurigaLayout.getParametroDBAsBoolean("DISATTIVA_ORD_PARTE_INT_IN_GRID_ALLEG_ATTI");
				}
				
				@Override
				public boolean getShowFlgParteDispositivo() {
					return true;
				}
				
				@Override
				public boolean getShowFlgNoPubblAllegato() {
					return AurigaLayout.getParametroDBAsBoolean("ATTIVA_ESCL_PUBBL_FILE_IN_ATTI");
				}
				
				@Override
				public boolean getShowFlgPubblicaSeparato() {			
					return AurigaLayout.getParametroDBAsBoolean("ATTIVA_PUBBL_SEPARATA_FILE_IN_ATTI");
				}
				
				@Override
				public boolean getFlgPubblicazioneAllegatiUguale() {
					return flgPubblicazioneAllegatiUguale != null && flgPubblicazioneAllegatiUguale;
				}
				
				@Override
				public boolean getFlgSoloPreparazioneVersPubblicazione() {
					return flgSoloPreparazioneVersPubblicazione != null && flgSoloPreparazioneVersPubblicazione;
				}
				
				@Override
				public boolean getFlgSoloOmissisModProprietaFile() {
					return flgSoloOmissisModProprietaFile != null && flgSoloOmissisModProprietaFile;
				}
				
				@Override
				public boolean getShowImportaFileDaDocumenti() {
					return true;
				}
				
				@Override
				public boolean getShowCollegaDocumentiImportati() {
					return false;
				}		
				
				@Override
				public List<FormItem> getCustmOtherNewButtons() {
					List<FormItem> listaCustomOtherNewButton = new ArrayList<FormItem>();
					if(showAttributoCustomCablato("IMPORT_PDF_LIQ_TECNICA_AMC") && !isAvvioPropostaAtto() && isAttivoSICRA() && !isReadOnly()) {					
						ImgButtonItem importaPdfLiqTecnicaAMCButton = new ImgButtonItem("importaPdfLiqTecnicaAMCButton", "buttons/importaPdf.png", "Importa pdf liquidazione tecnica da sistema contabile");
						importaPdfLiqTecnicaAMCButton.addIconClickHandler(new IconClickHandler() {

							@Override
							public void onIconClick(IconClickEvent event) {
								final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
								lNuovaPropostaAtto2CompletaDataSource.addParam("tipo", "tecnica");
								lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("importaPdfLiquidazioneSICRA", getRecordToSave(), new DSCallback() {							
									@Override
									public void execute(DSResponse response, Object rawData, DSRequest request) {
										if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
											Record record = response.getData()[0];
											
											String nomeFileAttoLiqTecnica = record.getAttribute("nomeFileAttoLiqTecnica");
											String uriFileAttoLiqTecnica = record.getAttribute("uriFileAttoLiqTecnica");
											InfoFileRecord infoFileAttoLiqTecnica = record.getAttributeAsRecord("infoFileAttoLiqTecnica") != null ? new InfoFileRecord(record.getAttributeAsRecord("infoFileAttoLiqTecnica")) : null;
											
											if(uriFileAttoLiqTecnica != null && !"".equals(uriFileAttoLiqTecnica)) {
											
												if (allegatiForm != null) {
													
													RecordList listaAllegati = allegatiForm.getValuesAsRecord().getAttributeAsRecordList("listaAllegati");
													if (listaAllegati == null || listaAllegati.getLength() == 0) {
														listaAllegati = new RecordList();
													}
													
													if(uriFileAttoLiqTecnica != null && !"".equals(uriFileAttoLiqTecnica)) {
														Record lRecordAttoLiqTecnica = new Record();		
														String idTipoAttoLiqTecnica = AurigaLayout.getParametroDB("ID_DOC_TYPE_LIQ_TECNICA");
														String nomeTipoAttoLiqTecnica = AurigaLayout.getParametroDB("NOME_DOC_TYPE_LIQ_TECNICA");
														int posAttoLiqTecnica = -1;
														if(idTipoAttoLiqTecnica != null && !"".equals((idTipoAttoLiqTecnica))) {
															posAttoLiqTecnica = getPosAllegatoFromTipo(idTipoAttoLiqTecnica, listaAllegati);
															if (posAttoLiqTecnica != -1) {
																lRecordAttoLiqTecnica = listaAllegati.get(posAttoLiqTecnica);
															}													
														}
														lRecordAttoLiqTecnica.setAttribute("flgParteDispositivo", true);
														lRecordAttoLiqTecnica.setAttribute("flgNoPubblAllegato", false);
														lRecordAttoLiqTecnica.setAttribute("flgPubblicaSeparato", true);												
														lRecordAttoLiqTecnica.setAttribute("nomeFileAllegato", nomeFileAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("uriFileAllegato", uriFileAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("descrizioneFileAllegato", "");
														lRecordAttoLiqTecnica.setAttribute("nomeFileAllegatoTif", "");
														lRecordAttoLiqTecnica.setAttribute("uriFileAllegatoTif", "");
														lRecordAttoLiqTecnica.setAttribute("remoteUri", false);
														lRecordAttoLiqTecnica.setAttribute("isChanged", true);
														lRecordAttoLiqTecnica.setAttribute("nomeFileVerPreFirma", nomeFileAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("uriFileVerPreFirma", uriFileAttoLiqTecnica);												
														lRecordAttoLiqTecnica.setAttribute("infoFileVerPreFirma", infoFileAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("improntaVerPreFirma", infoFileAttoLiqTecnica.getImpronta());
														lRecordAttoLiqTecnica.setAttribute("infoFile", infoFileAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("listaTipiFileAllegato", idTipoAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("idTipoFileAllegato", idTipoAttoLiqTecnica);
														lRecordAttoLiqTecnica.setAttribute("descTipoFileAllegato", nomeTipoAttoLiqTecnica);
														if (posAttoLiqTecnica != -1) {
															listaAllegati.set(posAttoLiqTecnica, lRecordAttoLiqTecnica);
														} else {
															listaAllegati.add(lRecordAttoLiqTecnica);
														}
													}													
													
													Record lRecordForm = new Record();
													lRecordForm.setAttribute("listaAllegati", listaAllegati);
													allegatiForm.setValues(lRecordForm.toMap());
													
													if(listaAllegatiItem != null) {
														if(listaAllegatiItem instanceof AllegatiGridItem) {
															((AllegatiGridItem)listaAllegatiItem).resetCanvasChanged();
														} else if(listaAllegatiItem instanceof AllegatiItem) {
															((AllegatiItem)listaAllegatiItem).resetCanvasChanged();
														}
													}
	
													if (detailSectionAllegati != null) {
														detailSectionAllegati.openIfhasValue();
													}
												}		
											}
										} 				
									}
								}, new DSRequest());
							}
						});	
						importaPdfLiqTecnicaAMCButton.setCanFocus(false);
						importaPdfLiqTecnicaAMCButton.setTabIndex(-1);
						listaCustomOtherNewButton.add(importaPdfLiqTecnicaAMCButton);				
					}
					if(showAttributoCustomCablato("IMPORT_PDF_LIQ_CONTABILE_AMC") && !isAvvioPropostaAtto() && isAttivoSICRA() && !isReadOnly()) {						
						ImgButtonItem importaPdfLiqContabileAMCButton = new ImgButtonItem("importaPdfLiqContabileAMCButton", "buttons/importaPdf.png", "Importa pdf liquidazione contabile da sistema contabile");
						importaPdfLiqContabileAMCButton.addIconClickHandler(new IconClickHandler() {

							@Override
							public void onIconClick(IconClickEvent event) {
								final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
								lNuovaPropostaAtto2CompletaDataSource.addParam("tipo", "contabile");
								lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("importaPdfLiquidazioneSICRA", getRecordToSave(), new DSCallback() {							
									@Override
									public void execute(DSResponse response, Object rawData, DSRequest request) {
										if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
											Record record = response.getData()[0];
											
											String nomeFileAttoLiqContabile = record.getAttribute("nomeFileAttoLiqContabile");
											String uriFileAttoLiqContabile = record.getAttribute("uriFileAttoLiqContabile");
											InfoFileRecord infoFileAttoLiqContabile = record.getAttributeAsRecord("infoFileAttoLiqContabile") != null ? new InfoFileRecord(record.getAttributeAsRecord("infoFileAttoLiqContabile")) : null;
											
											if(uriFileAttoLiqContabile != null && !"".equals(uriFileAttoLiqContabile)) {
											
												if (allegatiForm != null) {
													
													RecordList listaAllegati = allegatiForm.getValuesAsRecord().getAttributeAsRecordList("listaAllegati");
													if (listaAllegati == null || listaAllegati.getLength() == 0) {
														listaAllegati = new RecordList();
													}																										
	
													if(uriFileAttoLiqContabile != null && !"".equals(uriFileAttoLiqContabile)) {
														Record lRecordAttoLiqContabile = new Record();		
														String idTipoAttoLiqContabile = AurigaLayout.getParametroDB("ID_DOC_TYPE_LIQ_CONTABILE");
														String nomeTipoAttoLiqContabile = AurigaLayout.getParametroDB("NOME_DOC_TYPE_LIQ_CONTABILE");
														int posAttoLiqContabile = -1;
														if(idTipoAttoLiqContabile != null && !"".equals((idTipoAttoLiqContabile))) {
															posAttoLiqContabile = getPosAllegatoFromTipo(idTipoAttoLiqContabile, listaAllegati);
															if (posAttoLiqContabile != -1) {
																lRecordAttoLiqContabile = listaAllegati.get(posAttoLiqContabile);
															}													
														}
														lRecordAttoLiqContabile.setAttribute("flgParteDispositivo", false);
														lRecordAttoLiqContabile.setAttribute("flgNoPubblAllegato", true);
														lRecordAttoLiqContabile.setAttribute("flgPubblicaSeparato", false);
														lRecordAttoLiqContabile.setAttribute("flgDatiSensibili", false);
														lRecordAttoLiqContabile.setAttribute("nomeFileAllegato", nomeFileAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("uriFileAllegato", uriFileAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("descrizioneFileAllegato", "");
														lRecordAttoLiqContabile.setAttribute("nomeFileAllegatoTif", "");
														lRecordAttoLiqContabile.setAttribute("uriFileAllegatoTif", "");
														lRecordAttoLiqContabile.setAttribute("remoteUri", false);
														lRecordAttoLiqContabile.setAttribute("isChanged", true);
														lRecordAttoLiqContabile.setAttribute("nomeFileVerPreFirma", nomeFileAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("uriFileVerPreFirma", uriFileAttoLiqContabile);												
														lRecordAttoLiqContabile.setAttribute("infoFileVerPreFirma", infoFileAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("improntaVerPreFirma", infoFileAttoLiqContabile.getImpronta());
														lRecordAttoLiqContabile.setAttribute("infoFile", infoFileAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("listaTipiFileAllegato", idTipoAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("idTipoFileAllegato", idTipoAttoLiqContabile);
														lRecordAttoLiqContabile.setAttribute("descTipoFileAllegato", nomeTipoAttoLiqContabile);
														if (posAttoLiqContabile != -1) {
															listaAllegati.set(posAttoLiqContabile, lRecordAttoLiqContabile);
														} else {
															listaAllegati.add(lRecordAttoLiqContabile);
														}
													}
													
													Record lRecordForm = new Record();
													lRecordForm.setAttribute("listaAllegati", listaAllegati);
													allegatiForm.setValues(lRecordForm.toMap());
													
													if(listaAllegatiItem != null) {
														if(listaAllegatiItem instanceof AllegatiGridItem) {
															((AllegatiGridItem)listaAllegatiItem).resetCanvasChanged();
														} else if(listaAllegatiItem instanceof AllegatiItem) {
															((AllegatiItem)listaAllegatiItem).resetCanvasChanged();
														}
													}
	
													if (detailSectionAllegati != null) {
														detailSectionAllegati.openIfhasValue();
													}
												}		
											}
										} 				
									}
								}, new DSRequest());
							}
						});	
						importaPdfLiqContabileAMCButton.setCanFocus(false);
						importaPdfLiqContabileAMCButton.setTabIndex(-1);
						listaCustomOtherNewButton.add(importaPdfLiqContabileAMCButton);				
					}
					return listaCustomOtherNewButton;
				}				
				
				@Override
				public long getDimAlertAllegato() {
					return AurigaLayout.getParametroDB("DIM_ALERT_ALLEGATO_ATTO") != null && !"".equals(AurigaLayout.getParametroDB("DIM_ALERT_ALLEGATO_ATTO")) ? Long.parseLong(AurigaLayout.getParametroDB("DIM_ALERT_ALLEGATO_ATTO")) : -1;
				}		
				
				@Override
				public long getDimMaxAllegatoXPubbl() {
					return AurigaLayout.getParametroDB("MAX_DIM_ALLEG_ATTO_X_PUBBL") != null && !"".equals(AurigaLayout.getParametroDB("MAX_DIM_ALLEG_ATTO_X_PUBBL")) ? Long.parseLong(AurigaLayout.getParametroDB("MAX_DIM_ALLEG_ATTO_X_PUBBL")) : -1;
				}	
	
				@Override
				public boolean isGrigliaEditabile() {
					return true;
				}
				
				@Override
				public boolean getShowTimbraBarcodeMenuOmissis() {
					return true;
				}
				
				@Override
				public String getIdUd() {
					return idUdHiddenItem.getValue() != null ? String.valueOf(idUdHiddenItem.getValue()) : null;
				}
				
				@Override
				public boolean hasListaAllegatiParteIntSeparatiXPubbl() {
					return hasModelloAllegatiParteIntSeparatiXPubbl();
				}
				
				@Override
				public boolean isShowModalPreview() {
					return isEnablePreviewModal();
				}

				@Override
				public void onRecordSelected(Record record) {
					// TODO Auto-generated method stub
				}
				
				@Override
				public boolean skipUpdDocAllegatiNonModificati() {
					return true;
				}
								
				@Override
				public boolean isAllegatiNonParteIntegranteNonEditabili() {
					return isAllegatiNonParteIntegranteNonEditabiliInTask();
				}
			};
			listaAllegatiItem.setShowTitle(false);
			listaAllegatiItem.setColSpan(20);
			listaAllegatiItem.setHeight("95%");
		} else {
			/* VECCHIA GESTIONE ALLEGATI CON REPLICABLEITEM */		
			listaAllegatiItem = new AllegatiItem() {								
	
				@Override
				public String getIdProcess() {
					return getIdProcessTask();
				}
	
				@Override
				public String getIdProcessType() {
					return getIdProcessTypeTask();
				}
	
				@Override
				public String getIdTaskCorrenteAllegati() {
					return getIdTaskCorrente();
				}
	
				@Override
				public HashSet<String> getTipiModelliAttiAllegati() {
					return getTipiModelliAttiInAllegati();
				}
				
				@Override
				public boolean isObbligatorioFile() {
					return isObbligatorioFileInAllegati();
				}
				
				@Override
				public boolean isFormatoAmmessoParteIntegrante(InfoFileRecord info) {
					return isFormatoAmmessoParteIntegranteInAllegati(info);
				}
				
				@Override
				public String getRifiutoAllegatiConFirmeNonValide() {
					return getRifiutoAllegatiConFirmeNonValideInAllegati();
				}
				
				@Override
				public boolean isDisattivaUnioneAllegatiFirmati() {
					return isDisattivaUnioneAllegatiFirmatiInAllegati();
				}
				
				@Override
				public boolean isPubblicazioneSeparataPdfProtetti() {
					return isPubblicazioneSeparataPdfProtettiInAllegati();
				}
				
				@Override
				public Record getDetailRecord() {
					return getDetailRecordInAllegati();
				}
				
				@Override
				public boolean isAttivaVociBarcode() {
					String idUd = idUdHiddenItem.getValue() != null ? String.valueOf(idUdHiddenItem.getValue()) : null;
					return idUd != null && !"".equals(idUd);
				}
				
				@Override
				public boolean showGeneraDaModello() {
					return true;
				}
				
				@Override
				public void caricaModelloAllegato(String idModello, String tipoModello, String flgConvertiInPdf, final ServiceCallback<Record> callback) {
					caricaModelloInAllegati(idModello, tipoModello, flgConvertiInPdf, callback);
				}
	
				@Override
				public Record getRecordCaricaModelloAllegato(String idModello, String tipoModello) {
					return getRecordCaricaModelloInAllegati(idModello, tipoModello);
				}
				
				@Override
				public boolean getFlgAllegAttoParteIntDefault() {
					if(showTipoOrdMobilitaItem() && _PERMANENTE.equalsIgnoreCase(getValueAsString("tipoOrdMobilita"))) {
						return getFlgAllegAttoParteIntDefaultOrdPermanente();
					}					
					if(showTipoOrdMobilitaItem() && _TEMPORANEA.equalsIgnoreCase(getValueAsString("tipoOrdMobilita"))) {
						return getFlgAllegAttoParteIntDefaultOrdTemporanea();
					}
					return getFlgAllegAttoParteIntDefaultXTipoAtto();
				}
				
				@Override
				public boolean getFlgAllegAttoPubblSepDefault() {
					return getFlgAllegAttoPubblSepDefaultXTipoAtto();
				}
				
				@Override
				public String getTitleFlgParteDispositivo() {
					return I18NUtil.getMessages().nuovaPropostaAtto2_detail_allegati_flgParteIntegrante_title();
				}
				
				@Override
				public Integer getWidthDescrizioneFileAllegato() {
					return 250;
				}
				
				@Override
				public Integer getWidthNomeFileAllegato() {
					return 250;
				}
				
				@Override
				public boolean getShowVersioneOmissis() {
					return true;
				}			
				
				@Override
				public long getDimAlertAllegato() {
					return AurigaLayout.getParametroDB("DIM_ALERT_ALLEGATO_ATTO") != null && !"".equals(AurigaLayout.getParametroDB("DIM_ALERT_ALLEGATO_ATTO")) ? Long.parseLong(AurigaLayout.getParametroDB("DIM_ALERT_ALLEGATO_ATTO")) : -1;
				}
				
				@Override
				public long getDimMaxAllegatoXPubbl() {
					return AurigaLayout.getParametroDB("MAX_DIM_ALLEG_ATTO_X_PUBBL") != null && !"".equals(AurigaLayout.getParametroDB("MAX_DIM_ALLEG_ATTO_X_PUBBL")) ? Long.parseLong(AurigaLayout.getParametroDB("MAX_DIM_ALLEG_ATTO_X_PUBBL")) : -1;
				}	
				
				@Override
				public boolean showTimbraBarcodeMenuOmissis() {
					return true;
				}
				
				@Override
				public String getIdUd() {
					return idUdHiddenItem.getValue() != null ? String.valueOf(idUdHiddenItem.getValue()) : null;
				}
				
				@Override
				public boolean hasListaAllegatiParteIntSeparatiXPubbl() {
					return hasModelloAllegatiParteIntSeparatiXPubbl();					
				}
				
				@Override
				public boolean isShowModalPreview() {
					return isEnablePreviewModal();
				}
				
				@Override
				public boolean isAllegatiNonParteIntegranteNonEditabili() {
					return isAllegatiNonParteIntegranteNonEditabiliInTask();
				}
			};
			listaAllegatiItem.setName("listaAllegati");
			listaAllegatiItem.setShowTitle(false);
			listaAllegatiItem.setColSpan(20);
			((AllegatiItem)listaAllegatiItem).setShowFlgProvEsterna(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GEST_PROV_ALLEG_ATTI"));
			((AllegatiItem)listaAllegatiItem).setShowFlgParere(true);
			((AllegatiItem)listaAllegatiItem).setShowFlgParteDispositivo(true);
			((AllegatiItem)listaAllegatiItem).setShowFlgNoPubblAllegato(AurigaLayout.getParametroDBAsBoolean("ATTIVA_ESCL_PUBBL_FILE_IN_ATTI"));	
			((AllegatiItem)listaAllegatiItem).setShowFlgPubblicaSeparato(AurigaLayout.getParametroDBAsBoolean("ATTIVA_PUBBL_SEPARATA_FILE_IN_ATTI"));
			((AllegatiItem)listaAllegatiItem).setFlgPubblicazioneAllegatiUguale(flgPubblicazioneAllegatiUguale != null && flgPubblicazioneAllegatiUguale);
			((AllegatiItem)listaAllegatiItem).setFlgSoloPreparazioneVersPubblicazione(flgSoloPreparazioneVersPubblicazione != null && flgSoloPreparazioneVersPubblicazione);
			((AllegatiItem)listaAllegatiItem).setFlgSoloOmissisModProprietaFile(flgSoloOmissisModProprietaFile != null && flgSoloOmissisModProprietaFile);
			((AllegatiItem)listaAllegatiItem).setShowImportaFileDaDocumenti(true);
			((AllegatiItem)listaAllegatiItem).setShowCollegaDocumentiImportati(false);
		}
		
		allegatiForm.setFields(listaAllegatiItem);				
	}
	
	public boolean isFormatoAmmessoParteIntegranteInAllegati(InfoFileRecord info) {
		String mimetype = info != null ? info.getMimetype() : "";
		String mimetypeAmmessiAllegatiParteIntegranteAtti = AurigaLayout.getParametroDB("MIMETYPE_AMM_ALL_PI_ATTO");
		if(mimetypeAmmessiAllegatiParteIntegranteAtti != null && !"".equals(mimetypeAmmessiAllegatiParteIntegranteAtti)) {
			String modalitaControlloMimetypeAllegatiParteIntegranteAtti = AurigaLayout.getParametroDB("MOD_CTRL_MIMETYPE_ALL_PI_ATTO");
			if(modalitaControlloMimetypeAllegatiParteIntegranteAtti != null && "sempre".equalsIgnoreCase(modalitaControlloMimetypeAllegatiParteIntegranteAtti)) {				
				StringSplitterClient st = new StringSplitterClient(mimetypeAmmessiAllegatiParteIntegranteAtti, ";");
				for(int i = 0; i < st.getTokens().length; i++) {
					if(mimetype.equals(st.getTokens()[i])) {
						return true;
					}
				}
				return false;			
			}
		}
		return true;
	}
	
	public String getRifiutoAllegatiConFirmeNonValideInAllegati() {
		return AurigaLayout.getParametroDB("RIFIUTO_ALLEGATI_ATTI_CON_FIRME_NON_VALIDE");
	}
	
	public boolean isDisattivaUnioneAllegatiFirmatiInAllegati() {
		return AurigaLayout.getParametroDBAsBoolean("DISATTIVA_UNIONE_ALLEGATI_ATTI_FIRMATI");
	}
	
	public boolean isPubblicazioneSeparataPdfProtettiInAllegati() {
		// Non serve più controllare se un pdf è protetto dato che con la variabile unethicalreading di itext ora si riesce a manipolarli
		return false;
	}
	
	/*************************** 
	 * TAB DOCUMENTI FASCICOLO *
	 ***************************/
	
	public boolean showTabDocFasc() {
		String idFolder = getIdFolderProc();
		return show_TAB_DOC_FASC() && showAttributoCustomCablato("DOC_FASC") && idFolder != null && !"".equals(idFolder);		
	}
	
	public String getTitleTabDocFasc() {
		String label = AurigaLayout.getParametroDB("DOC_FASC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Documenti fascicolo";
	}
	
	/**
	 * Metodo per costruire il tab "Documenti fascicolo"
	 * 
	 */
	protected void createTabDocFasc() {

		tabDocFasc = new Tab("<b>" + getTitleTabDocFasc() + "</b>");
		tabDocFasc.setAttribute("tabID", _TAB_DOC_FASC_ID);
		tabDocFasc.setPrompt(getTitleTabDocFasc());
		
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_DOC_FASC_IN_ATTI")) {
			// faccio in modo che la lista occupi tutto lo spazio disponibile
			VLayout layoutDocFasc = getLayoutDocFasc();
			layoutDocFasc.setHeight100();
			VLayout layoutTabDocFasc = new VLayout();
			layoutTabDocFasc.setWidth100();
			layoutTabDocFasc.setHeight100();
			layoutTabDocFasc.addMember(layoutDocFasc);
			layoutTabDocFasc.setRedrawOnResize(true);
			tabDocFasc.setPane(layoutTabDocFasc);
		} else {
			tabDocFasc.setPane(createTabPane(getLayoutDocFasc()));
		}
	}

	/**
	 * Metodo che restituisce il layout del tab "Documenti fascicolo"
	 * 
	 */
	public VLayout getLayoutDocFasc() {

		VLayout layoutDocFasc = new VLayout(5);
				
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_DOC_FASC_IN_ATTI")) {
			createDocFascForm();
			layoutDocFasc.addMember(docFascForm);
		} else {
			createDetailSectionDocFasc();
			layoutDocFasc.addMember(detailSectionDocFasc);
		}
		
		return layoutDocFasc;
	}
	
	public String getTitleDetailSectionDocFasc() {
		return "Documenti fascicolo";
	}
	
	public boolean isRequiredDetailSectionDocFasc() {
		return false;
	}
		
	protected void createDetailSectionDocFasc() {
		
		createDocFascForm();
		
		detailSectionDocFasc = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDocFasc(), true, true, isRequiredDetailSectionDocFasc(), docFascForm);		
	}
	
	protected void createDocFascForm() {
		
		docFascForm = new DynamicForm();
		docFascForm.setValuesManager(vm);
		docFascForm.setWidth100();
		docFascForm.setPadding(5);
		docFascForm.setWrapItemTitles(false);
		docFascForm.setNumCols(20);
		docFascForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		docFascForm.setTabSet(tabSet);
		docFascForm.setTabID(_TAB_DOC_FASC_ID);
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_DOC_FASC_IN_ATTI")) {
			// faccio in modo che la lista occupi tutto lo spazio disponibile
			docFascForm.setHeight100();
		} else {
			docFascForm.setHeight(1);		
		}
			
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_GRID_DOC_FASC_IN_ATTI")) {
			/* NUOVA GESTIONE DOCUMENTI FASCICOLO CON GRIDITEM */
			listaDocFascItem = new AllegatiGridItem("listaDocFasc", "listaDocFascAtto") {					
				
				@Override
				public boolean getShowFlgParteDispositivo() {
					return false;
				}
				
				@Override
				public GWTRestDataSource getTipiFileAllegatoDataSource() {
					GWTRestDataSource lLoadComboTipoDocInProcessDataSource = new GWTRestDataSource("LoadComboTipoDocInProcessDataSource", "idTipoDoc",
							FieldType.TEXT, true);
					lLoadComboTipoDocInProcessDataSource.addParam("idProcess", getIdProcessTask());
					lLoadComboTipoDocInProcessDataSource.addParam("idProcessType", getIdProcessTypeTask());
					return lLoadComboTipoDocInProcessDataSource;
				}

				@Override
				public boolean showFilterEditorInTipiFileAllegato() {
					return false;
				}			

				@Override
				public String getIdProcess() {
					return getIdProcessTask();
				}
				
				@Override
				public String getIdProcessType() {
					return getIdProcessTypeTask();
				}

				@Override
				public String getTitleFlgParteDispositivo() {
					return "parte integrante";
				}

				@Override
				public boolean canBeEditedByApplet() {
					return true;
				}

				@Override
				public boolean getShowGeneraDaModello() {
					return true;
				}

				@Override
				public void caricaModelloAllegato(String idModello, String tipoModello, String flgConvertiInPdf, ServiceCallback<Record> callback) {
					caricaModelloInDocumentiFascicolo(idModello, tipoModello, flgConvertiInPdf, callback);
				}
				
				@Override
				public void clickVisualizzaVersioni(final ListGridRecord listRecord) {
					final String nroProgr = listRecord.getAttributeAsString("numeroProgrAllegato");
					final String idDoc = listRecord.getAttributeAsString("idDocAllegato");						
					final GWTRestDataSource lProtocolloDataSource = new GWTRestDataSource("ProtocolloDataSource");
					Record lRecordToLoad = new Record();
					lRecordToLoad.setAttribute("idUd", listRecord.getAttributeAsString("idUdAppartenenza"));
					lProtocolloDataSource.getData(lRecordToLoad, new DSCallback() {

						@Override
						public void execute(DSResponse response, Object rawData, DSRequest request) {
							if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
								Record recordProtocollo = response.getData()[0];
								ProtocollazioneDetail.visualizzaVersioni(idDoc, "DI", nroProgr, "", recordProtocollo);
							}
						}
					});					
				}

				@Override
				public String getIdTaskCorrenteAllegati() {
					return getIdTaskCorrente();
				}

				@Override
				public HashSet<String> getTipiModelliAttiAllegati() {
					return getTipiModelliAttiInDocFasc();
				}
							
				@Override
				public boolean isDocumentiIstruttoria() {
					return true;
				}
				
				@Override
				public boolean isDocCedAutotutela() {
					return false;
				}
				
				@Override
				public boolean isDocIstruttoriaDettFascicoloGenCompleto() {
					return true;
				}
				
				@Override
				public boolean getShowImportaFileDaDocumenti() {
					return true;
				}
				
				@Override
				public boolean getShowCollegaDocumentiImportati() {
					return false;
				}
				
				@Override
				public String getImportaFileDocumentiButtonTitle() {
					return I18NUtil.getMessages().protocollazione_detail_importaDocumentiDaAltriDocumenti_title();
				}
				
				@Override
				public String getFinalitaImportaAllegatiMultiLookupArchivio() {
					return "IMPORTA_UD";					
				}
				
				@Override
				public boolean getShowVersioneOmissis() {
					return false;
				}								
	
				@Override
				public boolean isGrigliaEditabile() {
					return true;
				}
				
				@Override
				public String getIdUd() {
					return idUdHiddenItem.getValue() != null ? String.valueOf(idUdHiddenItem.getValue()) : null;
				}
				
				@Override
				public boolean isShowModalPreview() {
					return isEnablePreviewModal();
				}

				@Override
				public void onRecordSelected(Record record) {
					//TODO					
				}
				
			};
			listaDocFascItem.setShowTitle(false);
			listaDocFascItem.setColSpan(20);
			listaDocFascItem.setHeight("95%");
		} else {
			/* VECCHIA GESTIONE DOCUMENTI FASCICOLO CON REPLICABLEITEM */		
			listaDocFascItem = new AllegatiItem() {

				@Override
				public GWTRestDataSource getTipiFileAllegatoDataSource() {
					GWTRestDataSource lLoadComboTipoDocInProcessDataSource = new GWTRestDataSource("LoadComboTipoDocInProcessDataSource", "idTipoDoc",
							FieldType.TEXT, true);
					lLoadComboTipoDocInProcessDataSource.addParam("idProcess", getIdProcessTask());
					lLoadComboTipoDocInProcessDataSource.addParam("idProcessType", getIdProcessTypeTask());
					return lLoadComboTipoDocInProcessDataSource;
				}

				@Override
				public boolean showFilterEditorInTipiFileAllegato() {
					return false;
				}				

				@Override
				public String getIdProcess() {
					return getIdProcessTask();
				}
				
				@Override
				public String getIdProcessType() {
					return getIdProcessTypeTask();
				}

				@Override
				public String getTitleFlgParteDispositivo() {
					return "parte integrante";
				}

				@Override
				public boolean canBeEditedByApplet() {
					return true;
				}

				@Override
				public boolean showGeneraDaModello() {
					return true;
				}

				@Override
				public void caricaModelloAllegato(String idModello, String tipoModello, String flgConvertiInPdf, ServiceCallback<Record> callback) {
					caricaModelloInDocumentiFascicolo(idModello, tipoModello, flgConvertiInPdf, callback);
				}
				
				@Override
				public void visualizzaVersioni(Record allegatoRecord) {
					final String nroProgr = allegatoRecord.getAttributeAsString("numeroProgrAllegato");
					final String idDoc = allegatoRecord.getAttributeAsString("idDocAllegato");						
					final GWTRestDataSource lProtocolloDataSource = new GWTRestDataSource("ProtocolloDataSource");
					Record lRecordToLoad = new Record();
					lRecordToLoad.setAttribute("idUd", allegatoRecord.getAttributeAsString("idUdAppartenenza"));
					lProtocolloDataSource.getData(lRecordToLoad, new DSCallback() {

						@Override
						public void execute(DSResponse response, Object rawData, DSRequest request) {
							if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
								Record recordProtocollo = response.getData()[0];
								ProtocollazioneDetail.visualizzaVersioni(idDoc, "DI", nroProgr, "", recordProtocollo);
							}
						}
					});
				}

				@Override
				public String getIdTaskCorrenteAllegati() {
					return getIdTaskCorrente();
				}

				@Override
				public HashSet<String> getTipiModelliAttiAllegati() {
					return getTipiModelliAttiInDocFasc();
				}
							
				@Override
				public boolean isDocumentiIstruttoria() {
					return true;
				}
				
				@Override
				public boolean isDocCedAutotutela() {
					return false;
				}
				
				@Override
				public boolean isDocIstruttoriaDettFascicoloGenCompleto() {
					return true;
				}
				
				@Override
				public String getImportaFileDocumentiBtnTitle() {
					return I18NUtil.getMessages().protocollazione_detail_importaDocumentiDaAltriDocumenti_title();
				}
								
				@Override
				public String getFinalitaImportaAllegatiMultiLookupArchivio() {
					return "IMPORTA_UD";					
				}
				
				@Override
				public boolean getShowVersioneOmissis() {
					return false;
				}

			};
			((AllegatiItem) listaDocFascItem).setShowFlgParteDispositivo(false);
			listaDocFascItem.setName("listaDocFasc");
			listaDocFascItem.setShowTitle(false);
			((AllegatiItem)listaDocFascItem).setShowImportaFileDaDocumenti(true);
			((AllegatiItem)listaDocFascItem).setShowCollegaDocumentiImportati(false);
		}
		
		docFascForm.setFields(listaDocFascItem);				
	}
	
//	public void protocollaDocumentoIstruttoriaInUscita(final Record documentoIstruttoriaDaProtocollare, final ServiceCallback<Record> callback) {
//		salvaDati(true, new ServiceCallback<Record>() {
//			
//			@Override
//			public void execute(Record object) {
//				Layout.showWaitPopup("Protocollazione in corso: potrebbe richiedere qualche secondo. Attendere...");
//				Record record = getRecordToProtocollaDocumentoIstruttoriaInUscita(documentoIstruttoriaDaProtocollare);
//				// FIXME Finire protocollazione del documento di istruttoria
//				new GWTRestDataSource("ArchivioDatasource").executecustom("protocollazioneDocumentiIstruttoria", record, new DSCallback() {
//					
//					@Override
//					public void execute(DSResponse response, Object data, DSRequest dsRequest) {
//						if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
//							// FIXME Chiamo la callback per aggiornare i dati nell'allegato
//							// Gestire bene i popup
//							if (callback != null) {
//								Layout.hideWaitPopup();
//								callback.execute(response.getData().length > 0 ? response.getData()[0] : new Record());
//							} else {
//								Layout.hideWaitPopup();
//							}
//						} else {
//							Layout.hideWaitPopup();
//						}
//					}
//				});
//			}
//		});
//	}
	
	/******************************* 
	 * TAB PUBBLICAZIONE/NOTIFICHE *
	 *******************************/	
	
	public boolean showTabPubblicazioneNotifiche() {
		return show_TAB_DATI_PUBBL() && showAttributoCustomCablato("DATI_PUBBL");
	}
	
	public String getTitleTabPubblicazioneNotifiche() {
		String label = getLabelAttributoCustomCablato("DATI_PUBBL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Pubblicazione/notifiche";
	}
	
	/**
	 * Metodo per costruire il tab "Pubblicazione/notifiche"
	 * 
	 */
	protected void createTabPubblicazioneNotifiche() {

		tabPubblicazioneNotifiche = new Tab("<b>" + getTitleTabPubblicazioneNotifiche() + "</b>");
		tabPubblicazioneNotifiche.setAttribute("tabID", _TAB_DATI_PUBBL_ID);
		tabPubblicazioneNotifiche.setPrompt(getTitleTabPubblicazioneNotifiche());
		tabPubblicazioneNotifiche.setPane(createTabPane(getLayoutPubblicazioneNotifiche()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Pubblicazione/notifiche"
	 * 
	 */
	public VLayout getLayoutPubblicazioneNotifiche() {

		VLayout layoutPubblicazioneNotifiche = new VLayout(5);
				
		createDetailSectionOpzioniTesto();
		layoutPubblicazioneNotifiche.addMember(detailSectionOpzioniTesto);
		
		createDetailSectionOpzioniAvanzateTesto();
		layoutPubblicazioneNotifiche.addMember(detailSectionOpzioniAvanzateTesto);
		
		createDetailSectionOpzioniIter();
		layoutPubblicazioneNotifiche.addMember(detailSectionOpzioniIter);
		
		createDetailSectionOpzioniVisibilita();
		layoutPubblicazioneNotifiche.addMember(detailSectionOpzioniVisibilita);
		
		createDetailSectionPubblAlbo();
		layoutPubblicazioneNotifiche.addMember(detailSectionPubblAlbo);
				
		createDetailSectionPubblAmmTrasp();
		layoutPubblicazioneNotifiche.addMember(detailSectionPubblAmmTrasp);
		
		createDetailSectionPubblBUR();
		layoutPubblicazioneNotifiche.addMember(detailSectionPubblBUR);
		
		createDetailSectionPubblNotiziario();
		layoutPubblicazioneNotifiche.addMember(detailSectionPubblNotiziario);
		
		createDetailSectionEsecutivita();
		layoutPubblicazioneNotifiche.addMember(detailSectionEsecutivita);		

		createDetailSectionNotifiche();
		layoutPubblicazioneNotifiche.addMember(detailSectionNotifiche);
		
		createDetailSectionNotificaMessi();
		layoutPubblicazioneNotifiche.addMember(detailSectionNotificaMessi);
		
		createDetailSectionNotificaPEC();
		layoutPubblicazioneNotifiche.addMember(detailSectionNotificaPEC);
		
		createVisibPubblicaPostAdozioneForm();
		layoutPubblicazioneNotifiche.addMember(visibPubblicaPostAdozioneForm);
		
		return layoutPubblicazioneNotifiche;
	}
	
	/************************************************ 
	 * PUBBLICAZIONE/NOTIFICHE - OPZIONI TESTO ATTO *
	 ************************************************/
	
	public boolean showDetailSectionOpzioniTesto() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("OPZIONI_TESTO_ATTO");
	}
	
	public String getTitleDetailSectionOpzioniTesto() {
		String label = getLabelAttributoCustomCablato("OPZIONI_TESTO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Opzioni testo";
	}
	
	public boolean isRequiredDetailSectionOpzioniTesto() {
		return false;
	}
	
	protected void createDetailSectionOpzioniTesto() {
		
		createOpzioniTestoForm();
		
		detailSectionOpzioniTesto = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOpzioniTesto(), true, true, isRequiredDetailSectionOpzioniTesto(), opzioniTestoForm);
	}
	
	public boolean showFlgEscludiPremesseFisseDaTestoAttoItem() {
		return showDetailSectionOpzioniTesto() && showAttributoCustomCablato("FLG_ESCLUDI_PREMESSE_FISSE_DA_TESTO_ATTO");
	}
	
	public String getTitleFlgEscludiPremesseFisseDaTestoAttoItem() {
		String label = getLabelAttributoCustomCablato("FLG_ESCLUDI_PREMESSE_FISSE_DA_TESTO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "escludi premessa fissa dal testo atto";
	}
	
	public boolean getDefaultValueAsBooleanFlgEscludiPremesseFisseDaTestoAttoItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_ESCLUDI_PREMESSE_FISSE_DA_TESTO_ATTO");
	}
	
	public boolean showFlgEscludiOggettoDaTestoAttoItem() {
		return showDetailSectionOpzioniTesto() && showAttributoCustomCablato("FLG_ESCLUDI_OGGETTO_DA_TESTO_ATTO");
	}
	
	public String getTitleFlgEscludiOggettoDaTestoAttoItem() {
		String label = getLabelAttributoCustomCablato("FLG_ESCLUDI_OGGETTO_DA_TESTO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "escludi oggetto dal testo atto";
	}
	
	public boolean getDefaultValueAsBooleanFlgEscludiOggettoDaTestoAttoItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_ESCLUDI_OGGETTO_DA_TESTO_ATTO");
	}
	
	protected void createOpzioniTestoForm() {
		
		opzioniTestoForm = new DynamicForm();
		opzioniTestoForm.setValuesManager(vm);
		opzioniTestoForm.setWidth100();
		opzioniTestoForm.setPadding(5);
		opzioniTestoForm.setWrapItemTitles(false);
		opzioniTestoForm.setNumCols(20);
		opzioniTestoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniTestoForm.setTabSet(tabSet);
		opzioniTestoForm.setTabID(_TAB_DATI_PUBBL_ID);
		opzioniTestoForm.setHeight(1);	
		
		flgEscludiPremesseFisseDaTestoAttoItem = new CheckboxItem("flgEscludiPremesseFisseDaTestoAtto", getTitleFlgEscludiPremesseFisseDaTestoAttoItem());
		flgEscludiPremesseFisseDaTestoAttoItem.setDefaultValue(getDefaultValueAsBooleanFlgEscludiPremesseFisseDaTestoAttoItem());		
		flgEscludiPremesseFisseDaTestoAttoItem.setColSpan(1);
		flgEscludiPremesseFisseDaTestoAttoItem.setWidth("*");
		flgEscludiPremesseFisseDaTestoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgEscludiPremesseFisseDaTestoAttoItem();
			}
		});		
		flgEscludiPremesseFisseDaTestoAttoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});				
		
		flgEscludiOggettoDaTestoAttoItem = new CheckboxItem("flgEscludiOggettoDaTestoAtto", getTitleFlgEscludiOggettoDaTestoAttoItem());
		flgEscludiOggettoDaTestoAttoItem.setDefaultValue(getDefaultValueAsBooleanFlgEscludiOggettoDaTestoAttoItem());		
		flgEscludiOggettoDaTestoAttoItem.setColSpan(1);
		flgEscludiOggettoDaTestoAttoItem.setWidth("*");
		flgEscludiOggettoDaTestoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgEscludiOggettoDaTestoAttoItem();
			}
		});		
		flgEscludiOggettoDaTestoAttoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		opzioniTestoForm.setFields(flgEscludiPremesseFisseDaTestoAttoItem, flgEscludiOggettoDaTestoAttoItem);
	}
		
	/********************************************************* 
	 * PUBBLICAZIONE/NOTIFICHE - OPZIONI AVANZATE TESTO ATTO *
	 *********************************************************/
	
	public boolean showDetailSectionOpzioniAvanzateTesto() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("OPZIONI_AVANZATE_TESTO_ATTO");
	}
	
	public String getTitleDetailSectionOpzioniAvanzateTesto() {
		String label = getLabelAttributoCustomCablato("OPZIONI_AVANZATE_TESTO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Opzioni avanzate testo";
	}
	
	public boolean isRequiredDetailSectionOpzioniAvanzateTesto() {
		return false;
	}
	
	protected void createDetailSectionOpzioniAvanzateTesto() {
		
		createOpzioniAvanzateTestoForm();
		
		detailSectionOpzioniAvanzateTesto = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOpzioniAvanzateTesto(), true, true, isRequiredDetailSectionOpzioniAvanzateTesto(), opzioniAvanzateTestoForm);
	}
	
	public boolean showScrittaTraPremessaEDispositivoAttoItem() {
		return showDetailSectionOpzioniAvanzateTesto() && showAttributoCustomCablato("SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public String getTitleScrittaTraPremessaEDispositivoAttoItem() {
		String label = getLabelAttributoCustomCablato("SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Riga di testo";
	}
	
	public boolean isRequiredScrittaTraPremessaEDispositivoAttoItem() {
		return showScrittaTraPremessaEDispositivoAttoItem() && getFlgObbligatorioAttributoCustomCablato("SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}	
	
	public String getDefaultValueScrittaTraPremessaEDispositivoAttoItem() {
		return getValoreFissoAttributoCustomCablato("SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public boolean showNumRighePreScrittaTraPremessaEDispositivoAttoItem() {
		return showDetailSectionOpzioniAvanzateTesto() && showAttributoCustomCablato("NRO_RIGHE_PRE_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public String getTitleNumRighePreScrittaTraPremessaEDispositivoAttoItem() {
		String label = getLabelAttributoCustomCablato("NRO_RIGHE_PRE_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N° righe bianche prima del testo";
	}
	
	public boolean isRequiredNumRighePreScrittaTraPremessaEDispositivoAttoItem() {
		return showNumRighePreScrittaTraPremessaEDispositivoAttoItem() && getFlgObbligatorioAttributoCustomCablato("NRO_RIGHE_PRE_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public String getDefaultValueNumRighePreScrittaTraPremessaEDispositivoAttoItem() {
		return getValoreFissoAttributoCustomCablato("NRO_RIGHE_PRE_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public boolean showNumRighePostScrittaTraPremessaEDispositivoAttoItem() {
		return showDetailSectionOpzioniAvanzateTesto() && showAttributoCustomCablato("NRO_RIGHE_POST_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public String getTitleNumRighePostScrittaTraPremessaEDispositivoAttoItem() {
		String label = getLabelAttributoCustomCablato("NRO_RIGHE_POST_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N° righe bianche dopo il testo";
	}
	
	public boolean isRequiredNumRighePostScrittaTraPremessaEDispositivoAttoItem() {
		return showNumRighePostScrittaTraPremessaEDispositivoAttoItem() && getFlgObbligatorioAttributoCustomCablato("NRO_RIGHE_POST_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	public String getDefaultValueNumRighePostScrittaTraPremessaEDispositivoAttoItem() {
		return getValoreFissoAttributoCustomCablato("NRO_RIGHE_POST_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO");
	}
	
	protected void createOpzioniAvanzateTestoForm() {
		
		opzioniAvanzateTestoForm = new DynamicForm();
		opzioniAvanzateTestoForm.setValuesManager(vm);
		opzioniAvanzateTestoForm.setWidth100();
		opzioniAvanzateTestoForm.setPadding(5);
		opzioniAvanzateTestoForm.setWrapItemTitles(false);
		opzioniAvanzateTestoForm.setNumCols(20);
		opzioniAvanzateTestoForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniAvanzateTestoForm.setTabSet(tabSet);
		opzioniAvanzateTestoForm.setTabID(_TAB_DATI_PUBBL_ID);
		opzioniAvanzateTestoForm.setHeight(1);	
		
		scrittaTraPremessaEDispositivoAttoItem = new TextItem("scrittaTraPremessaEDispositivoAtto", getTitleScrittaTraPremessaEDispositivoAttoItem());
		scrittaTraPremessaEDispositivoAttoItem.setWidth(800);
		scrittaTraPremessaEDispositivoAttoItem.setColSpan(19);
		scrittaTraPremessaEDispositivoAttoItem.setStartRow(true);
		scrittaTraPremessaEDispositivoAttoItem.setEndRow(true);
		scrittaTraPremessaEDispositivoAttoItem.setDefaultValue(getDefaultValueScrittaTraPremessaEDispositivoAttoItem());
		scrittaTraPremessaEDispositivoAttoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredScrittaTraPremessaEDispositivoAttoItem();
			}
		}));
		scrittaTraPremessaEDispositivoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredScrittaTraPremessaEDispositivoAttoItem()) {
					scrittaTraPremessaEDispositivoAttoItem.setAttribute("obbligatorio", true);
					scrittaTraPremessaEDispositivoAttoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleScrittaTraPremessaEDispositivoAttoItem()));
				} else {
					scrittaTraPremessaEDispositivoAttoItem.setAttribute("obbligatorio", false);
					scrittaTraPremessaEDispositivoAttoItem.setTitle(getTitleScrittaTraPremessaEDispositivoAttoItem());
				}
				return showScrittaTraPremessaEDispositivoAttoItem();
			}
		});
			
		numRighePreScrittaTraPremessaEDispositivoAttoItem = new NumericItem("numRighePreScrittaTraPremessaEDispositivoAtto", getTitleNumRighePreScrittaTraPremessaEDispositivoAttoItem(), false);
		numRighePreScrittaTraPremessaEDispositivoAttoItem.setColSpan(1);
		numRighePreScrittaTraPremessaEDispositivoAttoItem.setWidth(70);
		numRighePreScrittaTraPremessaEDispositivoAttoItem.setDefaultValue(getDefaultValueNumRighePreScrittaTraPremessaEDispositivoAttoItem());
		numRighePreScrittaTraPremessaEDispositivoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredNumRighePreScrittaTraPremessaEDispositivoAttoItem()) {
					numRighePreScrittaTraPremessaEDispositivoAttoItem.setAttribute("obbligatorio", true);
					numRighePreScrittaTraPremessaEDispositivoAttoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleNumRighePreScrittaTraPremessaEDispositivoAttoItem()));
				} else {
					numRighePreScrittaTraPremessaEDispositivoAttoItem.setAttribute("obbligatorio", false);
					numRighePreScrittaTraPremessaEDispositivoAttoItem.setTitle(getTitleNumRighePreScrittaTraPremessaEDispositivoAttoItem());
				}
				return showNumRighePreScrittaTraPremessaEDispositivoAttoItem();
			}
		});
		numRighePreScrittaTraPremessaEDispositivoAttoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumRighePreScrittaTraPremessaEDispositivoAttoItem();
			}
		}));	
				
		numRighePostScrittaTraPremessaEDispositivoAttoItem = new NumericItem("numRighePostScrittaTraPremessaEDispositivoAtto", getTitleNumRighePostScrittaTraPremessaEDispositivoAttoItem(), false);
		numRighePostScrittaTraPremessaEDispositivoAttoItem.setColSpan(1);
		numRighePostScrittaTraPremessaEDispositivoAttoItem.setWidth(70);
		numRighePostScrittaTraPremessaEDispositivoAttoItem.setDefaultValue(getDefaultValueNumRighePostScrittaTraPremessaEDispositivoAttoItem());
		numRighePostScrittaTraPremessaEDispositivoAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredNumRighePostScrittaTraPremessaEDispositivoAttoItem()) {
					numRighePostScrittaTraPremessaEDispositivoAttoItem.setAttribute("obbligatorio", true);
					numRighePostScrittaTraPremessaEDispositivoAttoItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleNumRighePostScrittaTraPremessaEDispositivoAttoItem()));
				} else {
					numRighePostScrittaTraPremessaEDispositivoAttoItem.setAttribute("obbligatorio", false);
					numRighePostScrittaTraPremessaEDispositivoAttoItem.setTitle(getTitleNumRighePostScrittaTraPremessaEDispositivoAttoItem());
				}
				return showNumRighePostScrittaTraPremessaEDispositivoAttoItem();
			}
		});
		numRighePostScrittaTraPremessaEDispositivoAttoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumRighePostScrittaTraPremessaEDispositivoAttoItem();
			}
		}));	
		
		opzioniAvanzateTestoForm.setFields(scrittaTraPremessaEDispositivoAttoItem, numRighePreScrittaTraPremessaEDispositivoAttoItem, numRighePostScrittaTraPremessaEDispositivoAttoItem);
	}
	
	/****************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - OPZIONI ITER *
	 ******************************************/
		
	public boolean showDetailSectionOpzioniIter() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("OPZIONI_ITER");
	}
	
	public String getTitleDetailSectionOpzioniIter() {
		String label = getLabelAttributoCustomCablato("OPZIONI_ITER");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Opzioni iter";
	}
	
	public boolean isRequiredDetailSectionOpzioniIter() {
		return false;
	}
	
	protected void createDetailSectionOpzioniIter() {
		
		createOpzioniIterForm();
		
		detailSectionOpzioniIter = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOpzioniIter(), true, true, isRequiredDetailSectionOpzioniIter(), opzioniIterForm);
	}
	
	public boolean showFlgAcquisitiVistiTornaVerificaUoPropItem() {
		return showDetailSectionOpzioniIter() && showAttributoCustomCablato("FLG_ACQUISITI_VISTI_TORNA_VERIFICA_UO_PROP");
	}
	
	public String getTitleFlgAcquisitiVistiTornaVerificaUoPropItem() {
		String label = getLabelAttributoCustomCablato("FLG_ACQUISITI_VISTI_TORNA_VERIFICA_UO_PROP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "acquisiti tutti i visti della fase preparatoria torna alla struttura proponente per verifica finale";
	}
	
	public boolean getDefaultValueAsBooleanFlgAcquisitiVistiTornaVerificaUoPropItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_ACQUISITI_VISTI_TORNA_VERIFICA_UO_PROP");
	}
	
	protected void createOpzioniIterForm() {
		
		opzioniIterForm = new DynamicForm();
		opzioniIterForm.setValuesManager(vm);
		opzioniIterForm.setWidth100();
		opzioniIterForm.setPadding(5);
		opzioniIterForm.setWrapItemTitles(false);
		opzioniIterForm.setNumCols(20);
		opzioniIterForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniIterForm.setTabSet(tabSet);
		opzioniIterForm.setTabID(_TAB_DATI_PUBBL_ID);
		opzioniIterForm.setHeight(1);	
				
		flgAcquisitiVistiTornaVerificaUoPropItem = new CheckboxItem("flgAcquisitiVistiTornaVerificaUoProp", getTitleFlgAcquisitiVistiTornaVerificaUoPropItem());
		flgAcquisitiVistiTornaVerificaUoPropItem.setDefaultValue(getDefaultValueAsBooleanFlgAcquisitiVistiTornaVerificaUoPropItem());		
		flgAcquisitiVistiTornaVerificaUoPropItem.setColSpan(1);
		flgAcquisitiVistiTornaVerificaUoPropItem.setWidth("*");
		flgAcquisitiVistiTornaVerificaUoPropItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgAcquisitiVistiTornaVerificaUoPropItem();
			}
		});		
		flgAcquisitiVistiTornaVerificaUoPropItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		opzioniIterForm.setFields(flgAcquisitiVistiTornaVerificaUoPropItem);
	}
	
	/************************************************ 
	 * PUBBLICAZIONE/NOTIFICHE - OPZIONI VISIBILITA *
	 ************************************************/
		
	public boolean showDetailSectionOpzioniVisibilita() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("OPZIONI_VISIBILITA");
	}
	
	public String getTitleDetailSectionOpzioniVisibilita() {
		String label = getLabelAttributoCustomCablato("OPZIONI_VISIBILITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Opzioni visualizzazione";
	}
	
	public boolean isRequiredDetailSectionOpzioniVisibilita() {
		return false;
	}
	
	protected void createDetailSectionOpzioniVisibilita() {
		
		createOpzioniVisibilitaForm();
		
		detailSectionOpzioniVisibilita = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOpzioniVisibilita(), true, true, isRequiredDetailSectionOpzioniVisibilita(), opzioniVisibilitaForm);
	}
	
	public boolean showFlgVisibilitaPubblPostAdozioneItem() {
		return showDetailSectionOpzioniVisibilita() && showAttributoCustomCablato("FLG_VISIBILITA_PUBBL_POST_ADOZIONE");
	}
	
	public String getTitleFlgVisibilitaPubblPostAdozioneItem() {
		String label = getLabelAttributoCustomCablato("FLG_VISIBILITA_PUBBL_POST_ADOZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "accesso in visualizzazione aperto a tutti dopo l'adozione";
	}
	
	public boolean getDefaultValueAsBooleanFlgVisibilitaPubblPostAdozioneItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_VISIBILITA_PUBBL_POST_ADOZIONE");
	}
	
	protected void createOpzioniVisibilitaForm() {
		
		opzioniVisibilitaForm = new DynamicForm();
		opzioniVisibilitaForm.setValuesManager(vm);
		opzioniVisibilitaForm.setWidth100();
		opzioniVisibilitaForm.setPadding(5);
		opzioniVisibilitaForm.setWrapItemTitles(false);
		opzioniVisibilitaForm.setNumCols(20);
		opzioniVisibilitaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniVisibilitaForm.setTabSet(tabSet);
		opzioniVisibilitaForm.setTabID(_TAB_DATI_PUBBL_ID);
		opzioniVisibilitaForm.setHeight(1);
				
		flgVisibilitaPubblPostAdozioneItem = new CheckboxItem("flgVisibilitaPubblPostAdozione", getTitleFlgVisibilitaPubblPostAdozioneItem());
		flgVisibilitaPubblPostAdozioneItem.setDefaultValue(getDefaultValueAsBooleanFlgVisibilitaPubblPostAdozioneItem());		
		flgVisibilitaPubblPostAdozioneItem.setColSpan(1);
		flgVisibilitaPubblPostAdozioneItem.setWidth("*");
		flgVisibilitaPubblPostAdozioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgVisibilitaPubblPostAdozioneItem();
			}
		});		
		flgVisibilitaPubblPostAdozioneItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
						
		opzioniVisibilitaForm.setFields(flgVisibilitaPubblPostAdozioneItem);
	}
	
	/**************************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - PUBBLICAZIONE ALL'ALBO *
	 ****************************************************/
	
	public boolean showDetailSectionPubblAlbo() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("DATI_PUBBL_ALBO");
	}
	
	public String getTitleDetailSectionPubblAlbo() {
		String label = getLabelAttributoCustomCablato("DATI_PUBBL_ALBO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Pubblicazione all'Albo";
	}
	
	public boolean isRequiredDetailSectionPubblAlbo() {
		return false;
	}
	
	public Date getDataInizioPubblicazioneValue() {
		return null;
	}
	
	public String getGiorniPubblicazioneValue() {
		return null;
	}
	
	protected void createDetailSectionPubblAlbo() {
		
		createPubblAlboForm();
		
		detailSectionPubblAlbo = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionPubblAlbo(), true, true, isRequiredDetailSectionPubblAlbo(), pubblAlboForm);
	}
	
	public boolean showFlgPubblAlboItem() {
		return showDetailSectionPubblAlbo() && showAttributoCustomCablato("FLG_PUBBL_ALBO");
	}
	
	public String getTitleFlgPubblAlboItem() {
		String label = getLabelAttributoCustomCablato("FLG_PUBBL_ALBO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Pubblicazione all'Albo";
	}
	
	public boolean isRequiredFlgPubblAlboItem() {
		return showFlgPubblAlboItem() && getFlgObbligatorioAttributoCustomCablato("FLG_PUBBL_ALBO");
	}
	
	public String getDefaultValueFlgPubblAlboItem() {
		return getValoreFissoAttributoCustomCablato("FLG_PUBBL_ALBO");
	}
		
	public boolean showTipoDecorrenzaPubblAlboItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_ALBO");
	}
	
	public String getTitleTipoDecorrenzaPubblAlboItem() {
		String label = getLabelAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_ALBO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Decorrenza pubblicazione"; 		
	}
	
	public HashMap<String, String> getValueMapTipoDecorrenzaPubblAlboItem() {
		return getValueMapAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_ALBO");
	}
	
	public String getDefaultValueTipoDecorrenzaPubblAlboItem() {
		return getValoreFissoAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_ALBO");
	}
	
	public boolean isDataPubblAlboDalBeforeNumGiorniPubblAlbo() {
		return showDetailSectionPubblAlbo() && !showAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_ALBO") && showAttributoCustomCablato("PUBBL_ALBO_DAL");
	}
	
	public boolean showDataPubblAlboDalItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && (!showTipoDecorrenzaPubblAlboItem() || isDecorrenzaPubblAlboPosticipata()) && showAttributoCustomCablato("PUBBL_ALBO_DAL");
	}
	
	public String getTitleDataPubblAlboDalItem() {
		String label = getLabelAttributoCustomCablato("PUBBL_ALBO_DAL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "a partire dal";
	}
	
	public boolean isRequiredDataPubblAlboDalItem() {
		return showDataPubblAlboDalItem() && getFlgObbligatorioAttributoCustomCablato("PUBBL_ALBO_DAL");
	}
	
	public String getDefaultValueDataPubblAlboDalItem() {
		return getValoreFissoAttributoCustomCablato("PUBBL_ALBO_DAL");
	}
	
	public boolean showNumGiorniPubblAlboItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO");
	}
	
	public String getTitleNumGiorniPubblAlboItem() {
		String label = getLabelAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "N° giorni pubblicazione";
	}
	
	public boolean isRequiredNumGiorniPubblAlboItem() {
		return showNumGiorniPubblAlboItem() && getFlgObbligatorioAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO");
	}
	
	public String getDefaultValueNumGiorniPubblAlboItem() {
		return getValoreFissoAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO");
	}
	
	public boolean showDataPubblAlboAlItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("PUBBL_ALBO_AL");
	}
	
	public String getTitleDataPubblAlboAlItem() {
		String label = getLabelAttributoCustomCablato("PUBBL_ALBO_AL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "termine pubblicazione";
	}
	
	public boolean isRequiredDataPubblAlboAlItem() {
		return showDataPubblAlboAlItem() && getFlgObbligatorioAttributoCustomCablato("PUBBL_ALBO_AL");
	}
	
	public String getDefaultValueDataPubblAlboAlItem() {
		return getValoreFissoAttributoCustomCablato("PUBBL_ALBO_AL");
	}
	
	public boolean isAttivaCompilazioneAutomaticaInPubblAlbo() {
		return showAttributoCustomCablato("PUBBL_ALBO_DAL") && showAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO") && showAttributoCustomCablato("PUBBL_ALBO_AL");
	}
	
	public boolean showFlgUrgentePubblAlboItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("FLG_URGENTE_PUBBL_ALBO");
	}
	
	public String getTitleFlgUrgentePubblAlboItem() {
		String label = getLabelAttributoCustomCablato("FLG_URGENTE_PUBBL_ALBO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "pubblicazione urgente";
	}
	
	public boolean getDefaultValueAsBooleanFlgUrgentePubblAlboItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_URGENTE_PUBBL_ALBO");
	}
	
	public boolean showDataPubblAlboEntroItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && isUrgentePubblAlbo() && showAttributoCustomCablato("PUBBL_ALBO_ENTRO");
	}
	
	public String getTitleDataPubblAlboEntroItem() {
		String label = getLabelAttributoCustomCablato("PUBBL_ALBO_ENTRO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "entro il";
	}
	
	public boolean isRequiredDataPubblAlboEntroItem() {
		return showDataPubblAlboEntroItem() && getFlgObbligatorioAttributoCustomCablato("PUBBL_ALBO_ENTRO");
	}
	
	public boolean showDataRipubblAlboDalItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("RIPUBBL_ALBO_DAL");
	}
	
	public String getTitleDataRipubblAlboDalItem() {
		String label = getLabelAttributoCustomCablato("RIPUBBL_ALBO_DAL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Ri-pubblicazione dal";
	}
	
	public boolean isRequiredDataRipubblAlboDalItem() {
		return showDataRipubblAlboDalItem() && getFlgObbligatorioAttributoCustomCablato("RIPUBBL_ALBO_DAL");
	}
	
	public String getDefaultValueDataRipubblAlboDalItem() {
		return getValoreFissoAttributoCustomCablato("RIPUBBL_ALBO_DAL");
	}
	
	public boolean showNumGiorniRipubblAlboItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("NRO_GIORNI_RIPUBBL_ALBO");
	}
	
	public String getTitleNumGiorniRipubblAlboItem() {
		String label = getLabelAttributoCustomCablato("NRO_GIORNI_RIPUBBL_ALBO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "per giorni";
	}
	
	public boolean isRequiredNumGiorniRipubblAlboItem() {
		return showNumGiorniRipubblAlboItem() && getFlgObbligatorioAttributoCustomCablato("NRO_GIORNI_RIPUBBL_ALBO");
	}
	
	public String getDefaultValueNumGiorniRipubblAlboItem() {
		return getValoreFissoAttributoCustomCablato("NRO_GIORNI_RIPUBBL_ALBO");
	}
	
	public boolean showDataRipubblAlboAlItem() {
		return showDetailSectionPubblAlbo() && (!showFlgPubblAlboItem() || isPubblAlbo()) && showAttributoCustomCablato("RIPUBBL_ALBO_AL");
	}
	
	public String getTitleDataRipubblAlboAlItem() {
		String label = getLabelAttributoCustomCablato("RIPUBBL_ALBO_AL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "al";
	}
	
	public boolean isRequiredDataRipubblAlboAlItem() {
		return showDataRipubblAlboAlItem() && getFlgObbligatorioAttributoCustomCablato("RIPUBBL_ALBO_AL");
	}
	
	public String getDefaultValueDataRipubblAlboAlItem() {
		return getValoreFissoAttributoCustomCablato("RIPUBBL_ALBO_AL");
	}
	
	public boolean isAttivaCompilazioneAutomaticaInRipubblAlbo() {
		return showAttributoCustomCablato("RIPUBBL_ALBO_DAL") && showAttributoCustomCablato("NRO_GIORNI_RIPUBBL_ALBO") && showAttributoCustomCablato("RIPUBBL_ALBO_AL");
	}
	
	// Metodo che indica se nel conteggio dei giorni di pubblicazione il giorno di pubblicazione viene sempre considerato come 1 giorno intero, altrimenti no	 
	public boolean isConteggiaInteroGiornoCorrenteXPeriodoPubbl() {
		return AurigaLayout.getParametroDBAsBoolean("CONTEGGIA_INTERO_GIORNO_CORRENTE_X_PERIODO_PUBBL");
	}
	
	private void manageOnChangedPeriodoPubbl(String fieldName) {
    	Integer giorniPubblicazione = null;
    	if(numGiorniPubblAlboItem.getValueAsString() != null && !"".equals(numGiorniPubblAlboItem.getValueAsString())) {
    		giorniPubblicazione = Integer.parseInt(numGiorniPubblAlboItem.getValueAsString());
		}   
    	Date dataInizioPubbl = dataPubblAlboDalItem.getValueAsDate();
    	Date dataFinePubbl = dataPubblAlboAlItem.getValueAsDate();
    	if(fieldName != null) {
			if("dataPubblAlboDal".equals(fieldName)) {
				if(dataInizioPubbl != null && giorniPubblicazione != null) {
					calcolaDataFinePubbl(dataInizioPubbl, giorniPubblicazione);
					dataPubblAlboAlItem.validate();
				} else if(dataInizioPubbl != null && dataFinePubbl != null) {
					if(dataPubblAlboAlItem.validate()) {
						calcolaGiorniPubbl(dataInizioPubbl, dataFinePubbl);
					}
				}
			} else if("numGiorniPubblAlbo".equals(fieldName)) {
				if(dataInizioPubbl != null && giorniPubblicazione != null) {
					calcolaDataFinePubbl(dataInizioPubbl, giorniPubblicazione);
					dataPubblAlboAlItem.validate();
				}
			} else if("dataPubblAlboAl".equals(fieldName)) {
				if(dataInizioPubbl != null && dataFinePubbl != null) {
					if(dataPubblAlboAlItem.validate()) {
						calcolaGiorniPubbl(dataInizioPubbl, dataFinePubbl);
					}
			    } 
			}
    	}
    }
	
	private void calcolaDataFinePubbl(Date dataInizioPubbl, Integer giorniPubblicazione) {
    	if(dataInizioPubbl != null && giorniPubblicazione != null) {
			Date dataFinePubbl = dataInizioPubbl;
			if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
        		CalendarUtil.addDaysToDate(dataFinePubbl, giorniPubblicazione - 1);
        	} else {
        		CalendarUtil.addDaysToDate(dataFinePubbl, giorniPubblicazione);
        	}
			dataPubblAlboAlItem.setValue(dataFinePubbl); 
		}
    }
    
    private void calcolaGiorniPubbl(Date dataInizioPubbl, Date dataFinePubbl) {
    	if(dataInizioPubbl != null && dataFinePubbl != null) {
    		Integer differenceDays = CalendarUtil.getDaysBetween(dataInizioPubbl, dataFinePubbl);
    		if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
    			if(differenceDays >= 0) {
    				numGiorniPubblAlboItem.setValue("" + (differenceDays + 1));
    			}
			} else {
				if(differenceDays > 0) {
					numGiorniPubblAlboItem.setValue("" + differenceDays);
				}
			}
	    }
    }
	
	private void manageOnChangedPeriodoRipubbl(String fieldName) {
    	Integer giorniRipubblicazione = null;
    	if(numGiorniRipubblAlboItem.getValueAsString() != null && !"".equals(numGiorniRipubblAlboItem.getValueAsString())) {
    		giorniRipubblicazione = Integer.parseInt(numGiorniRipubblAlboItem.getValueAsString());
		}   
    	Date dataInizioRipubbl = dataRipubblAlboDalItem.getValueAsDate();
    	Date dataFineRipubbl = dataRipubblAlboAlItem.getValueAsDate();
    	if(fieldName != null) {
			if("dataRipubblAlboDal".equals(fieldName)) {
				if(dataInizioRipubbl != null && giorniRipubblicazione != null) {
					calcolaDataFineRipubbl(dataInizioRipubbl, giorniRipubblicazione);
					dataRipubblAlboAlItem.validate();
				} else if(dataInizioRipubbl != null && dataFineRipubbl != null) {
					if(dataRipubblAlboAlItem.validate()) {
						calcolaGiorniRipubbl(dataInizioRipubbl, dataFineRipubbl);
					}
				}
			} else if("numGiorniRipubblAlbo".equals(fieldName)) {
				if(dataInizioRipubbl != null && giorniRipubblicazione != null) {
					calcolaDataFineRipubbl(dataInizioRipubbl, giorniRipubblicazione);
					dataRipubblAlboAlItem.validate();
				}
			} else if("dataRipubblAlboAl".equals(fieldName)) {
				if(dataInizioRipubbl != null && dataFineRipubbl != null) {
					if(dataRipubblAlboAlItem.validate()) {
						calcolaGiorniRipubbl(dataInizioRipubbl, dataFineRipubbl);
					}
			    } 
			}
    	}
    }
    
    private void calcolaDataFineRipubbl(Date dataInizioRipubbl, Integer giorniRipubblicazione) {
    	if(dataInizioRipubbl != null && giorniRipubblicazione != null) {
			Date dataFineRipubbl = dataInizioRipubbl;
			if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
        		CalendarUtil.addDaysToDate(dataFineRipubbl, giorniRipubblicazione - 1);
        	} else {
        		CalendarUtil.addDaysToDate(dataFineRipubbl, giorniRipubblicazione);
        	}
			dataRipubblAlboAlItem.setValue(dataFineRipubbl); 
		}
    }
    
    private void calcolaGiorniRipubbl(Date dataInizioRipubbl, Date dataFineRipubbl) {
    	if(dataInizioRipubbl != null && dataFineRipubbl != null) {
    		Integer differenceDays = CalendarUtil.getDaysBetween(dataInizioRipubbl, dataFineRipubbl);
    		if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
    			if(differenceDays >= 0) {
    				numGiorniRipubblAlboItem.setValue("" + (differenceDays + 1));
    			}
			} else {
				if(differenceDays > 0) {
					numGiorniRipubblAlboItem.setValue("" + differenceDays);
				}
			}
	    }
    }
	
	protected void createPubblAlboForm() {
		
		pubblAlboForm = new DynamicForm();
		pubblAlboForm.setValuesManager(vm);
		pubblAlboForm.setWidth100();
		pubblAlboForm.setPadding(5);
		pubblAlboForm.setWrapItemTitles(false);
		pubblAlboForm.setNumCols(20);
		pubblAlboForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		pubblAlboForm.setTabSet(tabSet);
		pubblAlboForm.setTabID(_TAB_DATI_PUBBL_ID);
		pubblAlboForm.setHeight(1);	
		
		flgPubblAlboItem = new RadioGroupItem("flgPubblAlbo", getTitleFlgPubblAlboItem());
		flgPubblAlboItem.setStartRow(true);
		flgPubblAlboItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgPubblAlboItem.setDefaultValue(getDefaultValueFlgPubblAlboItem());
		flgPubblAlboItem.setVertical(false);
		flgPubblAlboItem.setWrap(false);
		flgPubblAlboItem.setShowDisabled(false);
		if(isRequiredFlgPubblAlboItem()) {
			flgPubblAlboItem.setAttribute("obbligatorio", true);
		}
		flgPubblAlboItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgPubblAlboItem();
			}
		}));
		flgPubblAlboItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgPubblAlboItem();
			}
		});		
		flgPubblAlboItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});

		tipoDecorrenzaPubblAlboItem = new SelectItem("tipoDecorrenzaPubblAlbo", getTitleTipoDecorrenzaPubblAlboItem());
		tipoDecorrenzaPubblAlboItem.setWidth(200);
		Map<String, String> tipoDecorrenzaPubblAlboValueMap = getValueMapTipoDecorrenzaPubblAlboItem();
		if(tipoDecorrenzaPubblAlboValueMap != null && tipoDecorrenzaPubblAlboValueMap.keySet().size() > 0) {
			tipoDecorrenzaPubblAlboItem.setValueMap(tipoDecorrenzaPubblAlboValueMap);			
		} else {
			tipoDecorrenzaPubblAlboValueMap = new HashMap<String, String>();
			tipoDecorrenzaPubblAlboValueMap.put(_DECORR_PUBBL_STD, "dal giorno successivo all'adozione");
			tipoDecorrenzaPubblAlboValueMap.put(_DECORR_PUBBL_POST, "posticipata");
			tipoDecorrenzaPubblAlboItem.setValueMap(tipoDecorrenzaPubblAlboValueMap);
		}		
		tipoDecorrenzaPubblAlboItem.setDefaultValue(getDefaultValueTipoDecorrenzaPubblAlboItem());
		tipoDecorrenzaPubblAlboItem.setAttribute("obbligatorio", true);
		tipoDecorrenzaPubblAlboItem.setAllowEmptyValue(false);
		tipoDecorrenzaPubblAlboItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTipoDecorrenzaPubblAlboItem();
			}
		}));
		tipoDecorrenzaPubblAlboItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoDecorrenzaPubblAlboItem();
			}
		});
		tipoDecorrenzaPubblAlboItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		dataPubblAlboDalItem = new ExtendedDateItem("dataPubblAlboDal", getTitleDataPubblAlboDalItem());
		dataPubblAlboDalItem.setColSpan(1);
		if(getDefaultValueDataPubblAlboDalItem()!=null && !"".equals(getDefaultValueDataPubblAlboDalItem())) {
			dataPubblAlboDalItem.setDefaultValue(getDefaultValueDataPubblAlboDalItem());
		}
		dataPubblAlboDalItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataPubblAlboDalItem()) {
					dataPubblAlboDalItem.setAttribute("obbligatorio", true);
					dataPubblAlboDalItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataPubblAlboDalItem()));
				} else {
					dataPubblAlboDalItem.setAttribute("obbligatorio", false);
					dataPubblAlboDalItem.setTitle(getTitleDataPubblAlboDalItem());
				}
				return showDataPubblAlboDalItem();
			}
		});
		dataPubblAlboDalItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataPubblAlboDalItem();
			}
		}));
		if(isAttivaCompilazioneAutomaticaInPubblAlbo()) {
//	    	Integer giorniDelay = Integer.parseInt(AurigaLayout.getParametroDB("GG_DELAY_INIZIO_PUBBL_ATTO") != null ? AurigaLayout.getParametroDB("GG_DELAY_INIZIO_PUBBL_ATTO") : "1");
//	    	Date dataInizioPubbl = new Date();
//	    	CalendarUtil.addDaysToDate(dataInizioPubbl, giorniDelay);
//			dataPubblAlboDalItem.setDefaultValue(dataInizioPubbl);		
			dataPubblAlboDalItem.addChangedHandler(new ChangedHandler() {
				
				@Override
				public void onChanged(final ChangedEvent event) {
					manageOnChangedPeriodoPubbl("dataPubblAlboDal");
				}
			});
		}
		
		numGiorniPubblAlboItem = new ExtendedNumericItem("numGiorniPubblAlbo", getTitleNumGiorniPubblAlboItem(), false);
		numGiorniPubblAlboItem.setColSpan(1);
		numGiorniPubblAlboItem.setWidth(70);
		numGiorniPubblAlboItem.setDefaultValue(getDefaultValueNumGiorniPubblAlboItem());
		numGiorniPubblAlboItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredNumGiorniPubblAlboItem()) {
					numGiorniPubblAlboItem.setAttribute("obbligatorio", true);
					numGiorniPubblAlboItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleNumGiorniPubblAlboItem()));
				} else {
					numGiorniPubblAlboItem.setAttribute("obbligatorio", false);
					numGiorniPubblAlboItem.setTitle(getTitleNumGiorniPubblAlboItem());
				}
				return showNumGiorniPubblAlboItem();
			}
		});
		numGiorniPubblAlboItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumGiorniPubblAlboItem();
			}
		}));
		if(isAttivaCompilazioneAutomaticaInPubblAlbo()) {
			numGiorniPubblAlboItem.addChangedBlurHandler(new ChangedHandler() {
			
				@Override
				public void onChanged(final ChangedEvent event) {
					manageOnChangedPeriodoPubbl("numGiorniPubblAlbo");
				}
			});
		}
		
		dataPubblAlboAlItem = new ExtendedDateItem("dataPubblAlboAl", getTitleDataPubblAlboAlItem());
		dataPubblAlboAlItem.setColSpan(1);
		if(getDefaultValueDataPubblAlboAlItem()!=null && !"".equals(getDefaultValueDataPubblAlboAlItem())) {
			dataPubblAlboAlItem.setDefaultValue(getDefaultValueDataPubblAlboAlItem());		
		}
		dataPubblAlboAlItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataPubblAlboAlItem()) {
					dataPubblAlboAlItem.setAttribute("obbligatorio", true);
					dataPubblAlboAlItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataPubblAlboAlItem()));
				} else {
					dataPubblAlboAlItem.setAttribute("obbligatorio", false);
					dataPubblAlboAlItem.setTitle(getTitleDataPubblAlboAlItem());
				}
				return showDataPubblAlboAlItem();
			}
		});
		if(isAttivaCompilazioneAutomaticaInPubblAlbo()) {			
			dataPubblAlboAlItem.addChangedHandler(new ChangedHandler() {
    		
				@Override
				public void onChanged(final ChangedEvent event) {
					manageOnChangedPeriodoPubbl("dataPubblAlboAl");
				}
			});	
			CustomValidator lPeriodoPubblicazioneValidator = new CustomValidator() {
				
				@Override
				protected boolean condition(Object value) {
					Date dataInizioPubbl = dataPubblAlboDalItem.getValueAsDate();
			    	Date dataFinePubbl = dataPubblAlboAlItem.getValueAsDate();
			    	if(dataInizioPubbl != null && dataFinePubbl != null) {
			    		Integer differenceDays = CalendarUtil.getDaysBetween(dataInizioPubbl, dataFinePubbl);
			    		if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
			    			return (differenceDays >= 0);
			    		} else {
			    			return (differenceDays > 0);
			    		}
			    	}		    	
			    	return true;
				}
			};
			if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
				lPeriodoPubblicazioneValidator.setErrorMessage("La data di fine pubblicazione non può essere antecedente a quella di inizio pubblicazione");
			} else {
				lPeriodoPubblicazioneValidator.setErrorMessage("La data di fine pubblicazione deve essere successiva a quella di inizio pubblicazione");
			}		
			//TODO La data di fine pubblicazione non può essere una data passata
			dataPubblAlboAlItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
				
				@Override
				public boolean execute(FormItem formItem, Object value) {
					return isRequiredDataPubblAlboAlItem();
				}
			}), lPeriodoPubblicazioneValidator);
		} else {
			dataPubblAlboAlItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
				
				@Override
				public boolean execute(FormItem formItem, Object value) {
					return isRequiredDataPubblAlboAlItem();
				}
			}));			
		}
		
		flgUrgentePubblAlboItem = new CheckboxItem("flgUrgentePubblAlbo", getTitleFlgUrgentePubblAlboItem());
		flgUrgentePubblAlboItem.setDefaultValue(getDefaultValueAsBooleanFlgUrgentePubblAlboItem());		
		flgUrgentePubblAlboItem.setColSpan(1);
		flgUrgentePubblAlboItem.setWidth("*");
		flgUrgentePubblAlboItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgUrgentePubblAlboItem();
			}
		});		
		flgUrgentePubblAlboItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		dataPubblAlboEntroItem = new DateItem("dataPubblAlboEntro", getTitleDataPubblAlboEntroItem());
		dataPubblAlboEntroItem.setColSpan(1);
		dataPubblAlboEntroItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataPubblAlboEntroItem()) {
					dataPubblAlboEntroItem.setAttribute("obbligatorio", true);
					dataPubblAlboEntroItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataPubblAlboEntroItem()));
				} else {
					dataPubblAlboEntroItem.setAttribute("obbligatorio", false);
					dataPubblAlboEntroItem.setTitle(getTitleDataPubblAlboEntroItem());
				}
				return showDataPubblAlboEntroItem();
			}
		});
		dataPubblAlboEntroItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataPubblAlboEntroItem();
			}
		}));
				
		dataRipubblAlboDalItem = new ExtendedDateItem("dataRipubblAlboDal", getTitleDataRipubblAlboDalItem());
		dataRipubblAlboDalItem.setStartRow(true);
		dataRipubblAlboDalItem.setColSpan(1);
		if(getDefaultValueDataRipubblAlboDalItem()!=null && !"".equals(getDefaultValueDataRipubblAlboDalItem())) {
			dataRipubblAlboDalItem.setDefaultValue(getDefaultValueDataRipubblAlboDalItem());		
		}
		dataRipubblAlboDalItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataRipubblAlboDalItem()) {
					dataRipubblAlboDalItem.setAttribute("obbligatorio", true);
					dataRipubblAlboDalItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataRipubblAlboDalItem()));
				} else {
					dataRipubblAlboDalItem.setAttribute("obbligatorio", false);
					dataRipubblAlboDalItem.setTitle(getTitleDataRipubblAlboDalItem());
				}
				return showDataRipubblAlboDalItem();
			}
		});
		dataRipubblAlboDalItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataRipubblAlboDalItem();
			}
		}));
		if(isAttivaCompilazioneAutomaticaInRipubblAlbo()) {
			dataRipubblAlboDalItem.addChangedHandler(new ChangedHandler() {
				
				@Override
				public void onChanged(final ChangedEvent event) {
					manageOnChangedPeriodoRipubbl("dataRipubblAlboDal");
				}
			});
		}
		
		numGiorniRipubblAlboItem = new ExtendedNumericItem("numGiorniRipubblAlbo", getTitleNumGiorniRipubblAlboItem(), false);
		numGiorniRipubblAlboItem.setColSpan(1);
		numGiorniRipubblAlboItem.setWidth(70);
		numGiorniRipubblAlboItem.setDefaultValue(getDefaultValueNumGiorniRipubblAlboItem());
		numGiorniRipubblAlboItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredNumGiorniRipubblAlboItem()) {
					numGiorniRipubblAlboItem.setAttribute("obbligatorio", true);
					numGiorniRipubblAlboItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleNumGiorniRipubblAlboItem()));
				} else {
					numGiorniRipubblAlboItem.setAttribute("obbligatorio", false);
					numGiorniRipubblAlboItem.setTitle(getTitleNumGiorniRipubblAlboItem());
				}
				return showNumGiorniRipubblAlboItem();
			}
		});
		numGiorniRipubblAlboItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredNumGiorniRipubblAlboItem();
			}
		}));
		if(isAttivaCompilazioneAutomaticaInRipubblAlbo()) {
			numGiorniRipubblAlboItem.addChangedBlurHandler(new ChangedHandler() {
			
				@Override
				public void onChanged(final ChangedEvent event) {
					manageOnChangedPeriodoRipubbl("numGiorniRipubblAlbo");
				}
			});
		}
		
		dataRipubblAlboAlItem = new ExtendedDateItem("dataRipubblAlboAl", getTitleDataRipubblAlboAlItem());
		dataRipubblAlboAlItem.setColSpan(1);
		if(getDefaultValueDataRipubblAlboAlItem()!=null && !"".equals(getDefaultValueDataRipubblAlboAlItem())) {
			dataRipubblAlboAlItem.setDefaultValue(getDefaultValueDataRipubblAlboAlItem());		
		}
		dataRipubblAlboAlItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataRipubblAlboAlItem()) {
					dataRipubblAlboAlItem.setAttribute("obbligatorio", true);
					dataRipubblAlboAlItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataRipubblAlboAlItem()));
				} else {
					dataRipubblAlboAlItem.setAttribute("obbligatorio", false);
					dataRipubblAlboAlItem.setTitle(getTitleDataRipubblAlboAlItem());
				}
				return showDataRipubblAlboAlItem();
			}
		});
		if(isAttivaCompilazioneAutomaticaInRipubblAlbo()) {			
			dataRipubblAlboAlItem.addChangedHandler(new ChangedHandler() {
    		
				@Override
				public void onChanged(final ChangedEvent event) {
					manageOnChangedPeriodoRipubbl("dataRipubblAlboAl");
				}
			});	
			CustomValidator lPeriodoRipubblicazioneValidator = new CustomValidator() {
				
				@Override
				protected boolean condition(Object value) {
					Date dataInizioRipubbl = dataRipubblAlboDalItem.getValueAsDate();
			    	Date dataFineRipubbl = dataRipubblAlboAlItem.getValueAsDate();
			    	if(dataInizioRipubbl != null && dataFineRipubbl != null) {
			    		Integer differenceDays = CalendarUtil.getDaysBetween(dataInizioRipubbl, dataFineRipubbl);
			    		if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
			    			return (differenceDays >= 0);
			    		} else {
			    			return (differenceDays > 0);
			    		}
			    	}		    	
			    	return true;
				}
			};
			if(isConteggiaInteroGiornoCorrenteXPeriodoPubbl()) {
				lPeriodoRipubblicazioneValidator.setErrorMessage("La data di fine ri-pubblicazione non può essere antecedente a quella di inizio ri-pubblicazione");
			} else {
				lPeriodoRipubblicazioneValidator.setErrorMessage("La data di fine ri-pubblicazione deve essere successiva a quella di inizio ri-pubblicazione");
			}		
			//TODO La data di fine ri-pubblicazione non può essere una data passata
			dataRipubblAlboAlItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
				
				@Override
				public boolean execute(FormItem formItem, Object value) {
					return isRequiredDataRipubblAlboAlItem();
				}
			}), lPeriodoRipubblicazioneValidator);
		} else {
			dataRipubblAlboAlItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
				
				@Override
				public boolean execute(FormItem formItem, Object value) {
					return isRequiredDataRipubblAlboAlItem();
				}
			}));			
		}
						
		List<FormItem> items = new ArrayList<FormItem>();		
		items.add(flgPubblAlboItem);
		// se TIPO_DECORRENZA_PUBBL_ALBO non c'è e PUBBL_ALBO_DAL c'è il campo con la data di inizio pubblicazione deve apparire dopo FLG_PUBBL_ALBO se c'è e prima dei giorni
		if(isDataPubblAlboDalBeforeNumGiorniPubblAlbo()) {
			items.add(tipoDecorrenzaPubblAlboItem);
			items.add(dataPubblAlboDalItem);
			items.add(numGiorniPubblAlboItem);			
		} else {
			items.add(numGiorniPubblAlboItem);
			items.add(tipoDecorrenzaPubblAlboItem);
			items.add(dataPubblAlboDalItem);			
		}
		items.add(dataPubblAlboAlItem);
		items.add(flgUrgentePubblAlboItem);
		items.add(dataPubblAlboEntroItem);
		items.add(dataRipubblAlboDalItem);
		items.add(numGiorniRipubblAlboItem);
		items.add(dataRipubblAlboAlItem);		
		
		pubblAlboForm.setFields(items.toArray(new FormItem[items.size()]));
	}
	
	/************************************************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - PUBBLICAZIONE IN AMMINISTRAZIONE TRASPARENTE *
	 **************************************************************************/

	public boolean showDetailSectionPubblAmmTrasp() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("DATI_PUBBL_AMM_TRASP");
	}
	
	public String getTitleDetailSectionPubblAmmTrasp() {
		String label = getLabelAttributoCustomCablato("DATI_PUBBL_AMM_TRASP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Pubblicazione in Amm. Trasparente";
	}
	
	public boolean isRequiredDetailSectionPubblAmmTrasp() {
		return false;
	}
	
	protected void createDetailSectionPubblAmmTrasp() {
		
		createPubblAmmTraspForm();
		
		detailSectionPubblAmmTrasp = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionPubblAmmTrasp(), true, true, isRequiredDetailSectionPubblAmmTrasp(), pubblAmmTraspForm);
	}
	
	public boolean showFlgPubblAmmTraspItem() {
		return showDetailSectionPubblAmmTrasp() && showAttributoCustomCablato("FLG_PUBBL_IN_TRASPARENZA");
	}
	
	public String getTitleFlgPubblAmmTraspItem() {
		String label = getLabelAttributoCustomCablato("FLG_PUBBL_IN_TRASPARENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Da pubblicare";
	}
	
	public boolean isRequiredFlgPubblAmmTraspItem() {
		return showFlgPubblAmmTraspItem() && getFlgObbligatorioAttributoCustomCablato("FLG_PUBBL_IN_TRASPARENZA");
	}
	
	public String getDefaultValueFlgPubblAmmTraspItem() {
		return getValoreFissoAttributoCustomCablato("FLG_PUBBL_IN_TRASPARENZA");
	}
	
	public boolean showAnnoTerminePubblAmmTraspItem() {
		return showDetailSectionPubblAmmTrasp() && (!showFlgPubblAmmTraspItem() || isPubblAmmTrasp()) && showAttributoCustomCablato("ANNO_TERMINE_PUBBL_IN_TRASPARENZA");
	}
	
	public String getTitleAnnoTerminePubblAmmTraspItem() {
		String label = getLabelAttributoCustomCablato("ANNO_TERMINE_PUBBL_IN_TRASPARENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anno di termine pubblicazione";
	}
	
	public boolean isRequiredAnnoTerminePubblAmmTraspItem() {
		return showAnnoTerminePubblAmmTraspItem() && getFlgObbligatorioAttributoCustomCablato("ANNO_TERMINE_PUBBL_IN_TRASPARENZA");
	}
	
	public String getDefaultValueAnnoTerminePubblAmmTraspItem() {
		return getValoreFissoAttributoCustomCablato("ANNO_TERMINE_PUBBL_IN_TRASPARENZA");
	}
	
	public boolean showSezionePubblAmmTraspItem() {
		return showDetailSectionPubblAmmTrasp() && (!showFlgPubblAmmTraspItem() || isPubblAmmTrasp()) && showAttributoCustomCablato("SEZ1_PUBBL_IN_TRASPARENZA");
	}
	
	public String getTitleSezionePubblAmmTraspItem() {
		String label = getLabelAttributoCustomCablato("SEZ1_PUBBL_IN_TRASPARENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sezione di pubblicazione";
	}
	
	public boolean isRequiredSezionePubblAmmTraspItem() {
		return showSezionePubblAmmTraspItem() && getFlgObbligatorioAttributoCustomCablato("SEZ1_PUBBL_IN_TRASPARENZA");
	}
	
	public String getAltriParamLoadComboSezionePubblAmmTraspItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("SEZ1_PUBBL_IN_TRASPARENZA");
	}
	
	public void resetSezionePubblAmmTraspAfterChangedUoProponente() {
		if(getAltriParamLoadComboSezionePubblAmmTraspItem() != null && getAltriParamLoadComboSezionePubblAmmTraspItem().indexOf("$ID_UO_PROPONENTE$") != -1) {
			resetSezionePubblAmmTraspAfterChangedParams();
		}
	}
	
	public void resetSezionePubblAmmTraspAfterChangedParams() {
		if(sezionePubblAmmTraspItem != null) {
			final String value = sezionePubblAmmTraspItem.getValueAsString();
			sezionePubblAmmTraspItem.fetchData(new DSCallback() {
	
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					RecordList data = response.getDataAsRecordList();
					if(value != null && !"".equals(value)) {
						boolean trovato = false;
						if (data.getLength() > 0) {
							for (int i = 0; i < data.getLength(); i++) {
								String key = data.get(i).getAttribute("key");
								if (value.equals(key)) {
									trovato = true;
									break;
								}
							}
						}
						if (!trovato) {
							sezionePubblAmmTraspItem.setValue("");
							sezionePubblAmmTraspItem.fireEvent(new ChangedEvent(sezionePubblAmmTraspItem.getJsObj()));
						}
					}
				}
			});
		}
	}
	
	public boolean showSottoSezionePubblAmmTraspItem() {
		return showDetailSectionPubblAmmTrasp() && (!showFlgPubblAmmTraspItem() || isPubblAmmTrasp()) && showAttributoCustomCablato("SEZ2_PUBBL_IN_TRASPARENZA");
	}
	
	public String getTitleSottoSezionePubblAmmTraspItem() {
		String label = getLabelAttributoCustomCablato("SEZ2_PUBBL_IN_TRASPARENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sotto-sezione di pubblicazione";
	}
	
	public boolean isRequiredSottoSezionePubblAmmTraspItem() {
		return showSottoSezionePubblAmmTraspItem() && getFlgObbligatorioAttributoCustomCablato("SEZ2_PUBBL_IN_TRASPARENZA");
	}
	
	public String getAltriParamLoadComboSottoSezionePubblAmmTraspItem() {
		return getAltriParametriLoadComboAttributoCustomCablato("SEZ2_PUBBL_IN_TRASPARENZA");
	}
	
	public void resetSottoSezionePubblAmmTraspAfterChangedUoProponente() {
		if(getAltriParamLoadComboSottoSezionePubblAmmTraspItem() != null && getAltriParamLoadComboSottoSezionePubblAmmTraspItem().indexOf("$ID_UO_PROPONENTE$") != -1) {
			resetSottoSezionePubblAmmTraspAfterChangedParams();
		}
	}
	
	public void resetSottoSezionePubblAmmTraspAfterChangedParams() {
		if(sottoSezionePubblAmmTraspItem != null) {
			final String value = sottoSezionePubblAmmTraspItem.getValueAsString();
			sottoSezionePubblAmmTraspItem.fetchData(new DSCallback() {
	
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					RecordList data = response.getDataAsRecordList();
					if(value != null && !"".equals(value)) {
						boolean trovato = false;
						if (data.getLength() > 0) {
							for (int i = 0; i < data.getLength(); i++) {
								String key = data.get(i).getAttribute("key");
								if (value.equals(key)) {
									trovato = true;
									break;
								}
							}
						}
						if (!trovato) {
							sottoSezionePubblAmmTraspItem.setValue("");
							sottoSezionePubblAmmTraspItem.fireEvent(new ChangedEvent(sottoSezionePubblAmmTraspItem.getJsObj()));
						}
					}
				}
			});
		}
	}
	
	protected void createPubblAmmTraspForm() {
		
		pubblAmmTraspForm = new DynamicForm();
		pubblAmmTraspForm.setValuesManager(vm);
		pubblAmmTraspForm.setWidth100();
		pubblAmmTraspForm.setPadding(5);
		pubblAmmTraspForm.setWrapItemTitles(false);
		pubblAmmTraspForm.setNumCols(20);
		pubblAmmTraspForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		pubblAmmTraspForm.setTabSet(tabSet);
		pubblAmmTraspForm.setTabID(_TAB_DATI_PUBBL_ID);
		pubblAmmTraspForm.setHeight(1);		
		
		flgPubblAmmTraspItem = new RadioGroupItem("flgPubblAmmTrasp", getTitleFlgPubblAmmTraspItem());
		flgPubblAmmTraspItem.setStartRow(true);
		flgPubblAmmTraspItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgPubblAmmTraspItem.setDefaultValue(getDefaultValueFlgPubblAmmTraspItem());
		flgPubblAmmTraspItem.setVertical(false);
		flgPubblAmmTraspItem.setWrap(false);
		flgPubblAmmTraspItem.setShowDisabled(false);
		if(isRequiredFlgPubblAmmTraspItem()) {
			flgPubblAmmTraspItem.setAttribute("obbligatorio", true);
		}
		flgPubblAmmTraspItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgPubblAmmTraspItem();
			}
		}));
		flgPubblAmmTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isPubblAmmTrasp()) {
					detailSectionPubblBUR.setTitle(getTitleDetailSectionPubblBUR() + " e in Trasparenza");
				} else {
					detailSectionPubblBUR.setTitle(getTitleDetailSectionPubblBUR());
				}
				return showFlgPubblAmmTraspItem();
			}
		});		
		flgPubblAmmTraspItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		annoTerminePubblAmmTraspItem = new AnnoItem("annoTerminePubblAmmTrasp", getTitleAnnoTerminePubblAmmTraspItem());
		annoTerminePubblAmmTraspItem.setColSpan(1);
		annoTerminePubblAmmTraspItem.setDefaultValue(getDefaultValueAnnoTerminePubblAmmTraspItem());		
		annoTerminePubblAmmTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredAnnoTerminePubblAmmTraspItem()) {
					annoTerminePubblAmmTraspItem.setAttribute("obbligatorio", true);
					annoTerminePubblAmmTraspItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleAnnoTerminePubblAmmTraspItem()));
				} else {
					annoTerminePubblAmmTraspItem.setAttribute("obbligatorio", false);
					annoTerminePubblAmmTraspItem.setTitle(getTitleAnnoTerminePubblAmmTraspItem());
				}
				return showAnnoTerminePubblAmmTraspItem();
			}
		});	
		annoTerminePubblAmmTraspItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnnoTerminePubblAmmTraspItem();
			}
		}));
		
		GWTRestDataSource sezionePubblAmmTraspDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		sezionePubblAmmTraspDS.addParam("altriParamLoadCombo", getAltriParamLoadComboSezionePubblAmmTraspItem());
		 
		sezionePubblAmmTraspItem = new SelectItem("sezionePubblAmmTrasp", getTitleSezionePubblAmmTraspItem()) {
			
			@Override
			protected ListGrid builPickListProperties() {
				ListGrid sezionePubblAmmTraspPickListProperties = super.builPickListProperties();	
				sezionePubblAmmTraspPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						GWTRestDataSource sezionePubblAmmTraspDS = (GWTRestDataSource) sezionePubblAmmTraspItem.getOptionDataSource();		
						sezionePubblAmmTraspDS.addParam("uoProponente", getIdUoProponente());						
						sezionePubblAmmTraspItem.setOptionDataSource(sezionePubblAmmTraspDS);
						sezionePubblAmmTraspItem.invalidateDisplayValueCache();
					}
				});
				return sezionePubblAmmTraspPickListProperties;
			}
		};
		sezionePubblAmmTraspItem.setColSpan(1);
		sezionePubblAmmTraspItem.setValueField("key");
		sezionePubblAmmTraspItem.setDisplayField("value");
		sezionePubblAmmTraspItem.setOptionDataSource(sezionePubblAmmTraspDS);		
		sezionePubblAmmTraspItem.setAllowEmptyValue(true);					
		sezionePubblAmmTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredSezionePubblAmmTraspItem()) {
					sezionePubblAmmTraspItem.setAttribute("obbligatorio", true);
					sezionePubblAmmTraspItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleSezionePubblAmmTraspItem()));
				} else {
					sezionePubblAmmTraspItem.setAttribute("obbligatorio", false);
					sezionePubblAmmTraspItem.setTitle(getTitleSezionePubblAmmTraspItem());
				}
				return showSezionePubblAmmTraspItem();
			}
		});
		sezionePubblAmmTraspItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredSezionePubblAmmTraspItem();
			}
		}));
		sezionePubblAmmTraspItem.addChangedHandler(new ChangedHandler() {

			@Override
			public void onChanged(ChangedEvent event) {
				if(sottoSezionePubblAmmTraspItem != null) {
					resetSottoSezionePubblAmmTraspAfterChangedParams();
				}
			}
		});
		
		GWTRestDataSource sottoSezionePubblAmmTraspDS = new GWTRestDataSource("LoadComboValoriDizionarioDataSource", "key", FieldType.TEXT);
		sottoSezionePubblAmmTraspDS.addParam("altriParamLoadCombo", getAltriParamLoadComboSottoSezionePubblAmmTraspItem());
		 		
		sottoSezionePubblAmmTraspItem = new SelectItem("sottoSezionePubblAmmTrasp", getTitleSottoSezionePubblAmmTraspItem()) {
			
			@Override
			protected ListGrid builPickListProperties() {
				ListGrid sottoSezionePubblAmmTraspPickListProperties = super.builPickListProperties();	
				sottoSezionePubblAmmTraspPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						GWTRestDataSource sottoSezionePubblAmmTraspDS = (GWTRestDataSource) sottoSezionePubblAmmTraspItem.getOptionDataSource();		
						sottoSezionePubblAmmTraspDS.addParam("uoProponente", getIdUoProponente());
						sottoSezionePubblAmmTraspDS.addParam("codValoreVincolo", sezionePubblAmmTraspItem.getValueAsString());									
						sottoSezionePubblAmmTraspItem.setOptionDataSource(sottoSezionePubblAmmTraspDS);
						sottoSezionePubblAmmTraspItem.invalidateDisplayValueCache();
					}
				});
				return sottoSezionePubblAmmTraspPickListProperties;
			}
		};
		sottoSezionePubblAmmTraspItem.setColSpan(1);
		sottoSezionePubblAmmTraspItem.setValueField("key");
		sottoSezionePubblAmmTraspItem.setDisplayField("value");
		sottoSezionePubblAmmTraspItem.setOptionDataSource(sottoSezionePubblAmmTraspDS);		
		sottoSezionePubblAmmTraspItem.setAllowEmptyValue(true);			
		sottoSezionePubblAmmTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredSottoSezionePubblAmmTraspItem()) {
					sottoSezionePubblAmmTraspItem.setAttribute("obbligatorio", true);
					sottoSezionePubblAmmTraspItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleSottoSezionePubblAmmTraspItem()));
				} else {
					sottoSezionePubblAmmTraspItem.setAttribute("obbligatorio", false);
					sottoSezionePubblAmmTraspItem.setTitle(getTitleSottoSezionePubblAmmTraspItem());
				}
				return showSottoSezionePubblAmmTraspItem();
			}
		});
		sottoSezionePubblAmmTraspItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredSottoSezionePubblAmmTraspItem();
			}
		}));
		
		pubblAmmTraspForm.setFields(flgPubblAmmTraspItem, annoTerminePubblAmmTraspItem, sezionePubblAmmTraspItem, sottoSezionePubblAmmTraspItem);			
	}
	
	/*************************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - PUBBLICAZIONE AL B.U. *
	 ***************************************************/

	public boolean showDetailSectionPubblBUR() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("DATI_PUBBL_BUR");
	}
	
	public String getTitleDetailSectionPubblBUR() {
		String label = getLabelAttributoCustomCablato("DATI_PUBBL_BUR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Pubblicazione al B.U.";
	}
	
	public boolean isRequiredDetailSectionPubblBUR() {
		return false;
	}
	
	protected void createDetailSectionPubblBUR() {
		
		createPubblBURForm();
		
		detailSectionPubblBUR = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionPubblBUR(), true, true, isRequiredDetailSectionPubblBUR(), pubblBURForm);
	}
	
	public boolean showFlgPubblBURItem() {
		return showDetailSectionPubblBUR() && showAttributoCustomCablato("FLG_PUBBL_BUR");
	}
	
	public String getTitleFlgPubblBURItem() {
		String label = getLabelAttributoCustomCablato("FLG_PUBBL_BUR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Da pubblicare";
	}
	
	public boolean isRequiredFlgPubblBURItem() {
		return showFlgPubblBURItem() && getFlgObbligatorioAttributoCustomCablato("FLG_PUBBL_BUR");
	}
	
	public String getDefaultValueFlgPubblBURItem() {
		return getValoreFissoAttributoCustomCablato("FLG_PUBBL_BUR");
	}
		
	public boolean showAnnoTerminePubblBURItem() {
		return showDetailSectionPubblBUR() && (!showFlgPubblBURItem() || isPubblBUR()) && showAttributoCustomCablato("ANNO_TERMINE_PUBBL_BUR");
	}
	
	public String getTitleAnnoTerminePubblBURItem() {
		String label = getLabelAttributoCustomCablato("ANNO_TERMINE_PUBBL_BUR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Anno di termine pubblicazione";
	}
	
	public boolean isRequiredAnnoTerminePubblBURItem() {
		return showAnnoTerminePubblBURItem() && getFlgObbligatorioAttributoCustomCablato("ANNO_TERMINE_PUBBL_BUR");
	}
	
	public String getDefaultValueAnnoTerminePubblBURItem() {
		return getValoreFissoAttributoCustomCablato("ANNO_TERMINE_PUBBL_BUR");
	}
	
	public boolean showTipoDecorrenzaPubblBURItem() {
		return showDetailSectionPubblBUR() && (!showFlgPubblBURItem() || isPubblBUR()) && showAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_BUR");
	}
	
	public String getTitleTipoDecorrenzaPubblBURItem() {
		String label = getLabelAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_BUR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Decorrenza pubblicazione"; 		
	}
	
	public HashMap<String, String> getValueMapTipoDecorrenzaPubblBURItem() {
		return getValueMapAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_BUR");
	}
	
	public String getDefaultValueTipoDecorrenzaPubblBURItem() {
		return getValoreFissoAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_BUR");
	}
	
	public boolean showDataPubblBURDalItem() {
		return showDetailSectionPubblBUR() && (!showFlgPubblBURItem() || isPubblBUR()) && isDecorrenzaPubblBURPosticipata() && showAttributoCustomCablato("PUBBL_BUR_DAL");
	}
	
	public String getTitleDataPubblBURDalItem() {
		String label = getLabelAttributoCustomCablato("PUBBL_BUR_DAL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "a partire dal";
	}
	
	public boolean isRequiredDataPubblBURDalItem() {
		return showDataPubblBURDalItem() && getFlgObbligatorioAttributoCustomCablato("PUBBL_BUR_DAL");
	}	
	
	public boolean showFlgUrgentePubblBURItem() {
		return showDetailSectionPubblBUR() && (!showFlgPubblBURItem() || isPubblBUR()) && showAttributoCustomCablato("FLG_URGENTE_PUBBL_BUR");
	}
	
	public String getTitleFlgUrgentePubblBURItem() {
		String label = getLabelAttributoCustomCablato("FLG_URGENTE_PUBBL_BUR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "pubblicazione urgente";
	}
	
	public boolean getDefaultValueAsBooleanFlgUrgentePubblBURItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_URGENTE_PUBBL_BUR");
	}
	
	public boolean showDataPubblBUREntroItem() {
		return showDetailSectionPubblBUR() && (!showFlgPubblBURItem() || isPubblBUR()) && isUrgentePubblBUR() && showAttributoCustomCablato("PUBBL_BUR_ENTRO");
	}
	
	public String getTitleDataPubblBUREntroItem() {
		String label = getLabelAttributoCustomCablato("PUBBL_BUR_ENTRO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "entro il";
	}
	
	public boolean isRequiredDataPubblBUREntroItem() {
		return showDataPubblBUREntroItem() && getFlgObbligatorioAttributoCustomCablato("PUBBL_BUR_ENTRO");
	}
	
	protected void createPubblBURForm() {
		
		pubblBURForm = new DynamicForm();
		pubblBURForm.setValuesManager(vm);
		pubblBURForm.setWidth100();
		pubblBURForm.setPadding(5);
		pubblBURForm.setWrapItemTitles(false);
		pubblBURForm.setNumCols(20);
		pubblBURForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		pubblBURForm.setTabSet(tabSet);
		pubblBURForm.setTabID(_TAB_DATI_PUBBL_ID);
		pubblBURForm.setHeight(1);		
		
		flgPubblBURItem = new RadioGroupItem("flgPubblBUR", getTitleFlgPubblBURItem());
		flgPubblBURItem.setStartRow(true);
		flgPubblBURItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgPubblBURItem.setDefaultValue(getDefaultValueFlgPubblBURItem());
		flgPubblBURItem.setVertical(false);
		flgPubblBURItem.setWrap(false);
		flgPubblBURItem.setShowDisabled(false);
		if(isRequiredFlgPubblBURItem()) {
			flgPubblBURItem.setAttribute("obbligatorio", true);
		}
		flgPubblBURItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgPubblBURItem();
			}
		}));
		flgPubblBURItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgPubblBURItem();
			}
		});		
		flgPubblBURItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		annoTerminePubblBURItem = new AnnoItem("annoTerminePubblBUR", getTitleAnnoTerminePubblBURItem());
		annoTerminePubblBURItem.setColSpan(1);
		annoTerminePubblBURItem.setDefaultValue(getDefaultValueAnnoTerminePubblBURItem());		
		annoTerminePubblBURItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {	
				if(isRequiredAnnoTerminePubblBURItem()) {
					annoTerminePubblBURItem.setAttribute("obbligatorio", true);
					annoTerminePubblBURItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleAnnoTerminePubblBURItem()));
				} else {
					annoTerminePubblBURItem.setAttribute("obbligatorio", false);
					annoTerminePubblBURItem.setTitle(getTitleAnnoTerminePubblBURItem());
				}
				return showAnnoTerminePubblBURItem();
			}
		});	
		annoTerminePubblBURItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredAnnoTerminePubblBURItem();
			}
		}));
		
		tipoDecorrenzaPubblBURItem = new SelectItem("tipoDecorrenzaPubblBUR", getTitleTipoDecorrenzaPubblBURItem());
		tipoDecorrenzaPubblBURItem.setWidth(200);		
		Map<String, String> tipoDecorrenzaPubblBURValueMap = getValueMapTipoDecorrenzaPubblBURItem();
		if(tipoDecorrenzaPubblBURValueMap != null && tipoDecorrenzaPubblBURValueMap.keySet().size() > 0) {
			tipoDecorrenzaPubblBURItem.setValueMap(tipoDecorrenzaPubblBURValueMap);			
		} else {
			tipoDecorrenzaPubblBURValueMap = new HashMap<String, String>();
			tipoDecorrenzaPubblBURValueMap.put(_DECORR_PUBBL_STD, "dal giorno successivo all'adozione");
			tipoDecorrenzaPubblBURValueMap.put(_DECORR_PUBBL_POST, "posticipata");
			tipoDecorrenzaPubblBURItem.setValueMap(tipoDecorrenzaPubblBURValueMap);
		}	
		tipoDecorrenzaPubblBURItem.setDefaultValue(getDefaultValueTipoDecorrenzaPubblBURItem());
		tipoDecorrenzaPubblBURItem.setAttribute("obbligatorio", true);
		tipoDecorrenzaPubblBURItem.setAllowEmptyValue(false);
		tipoDecorrenzaPubblBURItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTipoDecorrenzaPubblBURItem();
			}
		}));
		tipoDecorrenzaPubblBURItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showTipoDecorrenzaPubblBURItem();
			}
		});
		tipoDecorrenzaPubblBURItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
			
		dataPubblBURDalItem = new DateItem("dataPubblBURDal", getTitleDataPubblBURDalItem());
		dataPubblBURDalItem.setColSpan(1);
		dataPubblBURDalItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataPubblBURDalItem()) {
					dataPubblBURDalItem.setAttribute("obbligatorio", true);
					dataPubblBURDalItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataPubblBURDalItem()));
				} else {
					dataPubblBURDalItem.setAttribute("obbligatorio", false);
					dataPubblBURDalItem.setTitle(getTitleDataPubblBURDalItem());
				}
				return showDataPubblBURDalItem();
			}
		});
		dataPubblBURDalItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataPubblBURDalItem();
			}
		}));
		
		flgUrgentePubblBURItem = new CheckboxItem("flgUrgentePubblBUR", getTitleFlgUrgentePubblBURItem());
		flgUrgentePubblBURItem.setDefaultValue(getDefaultValueAsBooleanFlgUrgentePubblBURItem());		
		flgUrgentePubblBURItem.setColSpan(1);
		flgUrgentePubblBURItem.setWidth("*");
		flgUrgentePubblBURItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgUrgentePubblBURItem();
			}
		});		
		flgUrgentePubblBURItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		dataPubblBUREntroItem = new DateItem("dataPubblBUREntro", getTitleDataPubblBUREntroItem());
		dataPubblBUREntroItem.setColSpan(1);
		dataPubblBUREntroItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDataPubblBUREntroItem()) {
					dataPubblBUREntroItem.setAttribute("obbligatorio", true);
					dataPubblBUREntroItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleDataPubblBUREntroItem()));
				} else {
					dataPubblBUREntroItem.setAttribute("obbligatorio", false);
					dataPubblBUREntroItem.setTitle(getTitleDataPubblBUREntroItem());
				}
				return showDataPubblBUREntroItem();
			}
		});
		dataPubblBUREntroItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDataPubblBUREntroItem();
			}
		}));
		
		pubblBURForm.setFields(flgPubblBURItem, annoTerminePubblBURItem, tipoDecorrenzaPubblBURItem, dataPubblBURDalItem, flgUrgentePubblBURItem, dataPubblBUREntroItem);			
	}
	
	/********************************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - PUBBLICAZIONE SUL NOTIZIARIO *
	 **********************************************************/

	public boolean showDetailSectionPubblNotiziario() {
//		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("DATI_PUBBL_NOTIZIARIO");
		return showFlgPubblNotiziarioItem();
	}
	
	public String getTitleDetailSectionPubblNotiziario() {
		String label = getLabelAttributoCustomCablato("DATI_PUBBL_NOTIZIARIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Pubblicazione sul notiziario";
	}
	
	public boolean isRequiredDetailSectionPubblNotiziario() {
		return false;
	}
	
	protected void createDetailSectionPubblNotiziario() {
		
		createPubblNotiziarioForm();
		
		detailSectionPubblNotiziario = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionPubblNotiziario(), true, true, isRequiredDetailSectionPubblNotiziario(), pubblNotiziarioForm);
	}
	
	public boolean showFlgPubblNotiziarioItem() {
//		return showDetailSectionPubblNotiziario() && showAttributoCustomCablato("TASK_RESULT_2_FLG_PUBBL_NOTIZIARIO");
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("TASK_RESULT_2_FLG_PUBBL_NOTIZIARIO");
	}
	
	public String getTitleFlgPubblNotiziarioItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_PUBBL_NOTIZIARIO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Da pubblicare";
	}
	
	public boolean isRequiredFlgPubblNotiziarioItem() {
		return showFlgPubblNotiziarioItem() && getFlgObbligatorioAttributoCustomCablato("TASK_RESULT_2_FLG_PUBBL_NOTIZIARIO");
	}
	
	public String getDefaultValueFlgPubblNotiziarioItem() {
		return getValoreFissoAttributoCustomCablato("TASK_RESULT_2_FLG_PUBBL_NOTIZIARIO");
	}
	
	protected void createPubblNotiziarioForm() {
		
		pubblNotiziarioForm = new DynamicForm();
		pubblNotiziarioForm.setValuesManager(vm);
		pubblNotiziarioForm.setWidth100();
		pubblNotiziarioForm.setPadding(5);
		pubblNotiziarioForm.setWrapItemTitles(false);
		pubblNotiziarioForm.setNumCols(20);
		pubblNotiziarioForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		pubblNotiziarioForm.setTabSet(tabSet);
		pubblNotiziarioForm.setTabID(_TAB_DATI_PUBBL_ID);
		pubblNotiziarioForm.setHeight(1);		
		
		flgPubblNotiziarioItem = new RadioGroupItem("flgPubblNotiziario", getTitleFlgPubblNotiziarioItem());
		flgPubblNotiziarioItem.setStartRow(true);
		flgPubblNotiziarioItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgPubblNotiziarioItem.setDefaultValue(getDefaultValueFlgPubblNotiziarioItem());
		flgPubblNotiziarioItem.setVertical(false);
		flgPubblNotiziarioItem.setWrap(false);
		flgPubblNotiziarioItem.setShowDisabled(false);
		if(isRequiredFlgPubblNotiziarioItem()) {
			flgPubblNotiziarioItem.setAttribute("obbligatorio", true);
		}
		flgPubblNotiziarioItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgPubblNotiziarioItem();
			}
		}));
		flgPubblNotiziarioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgPubblNotiziarioItem();
			}
		});		
		flgPubblNotiziarioItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);
			}
		});
		
		pubblNotiziarioForm.setFields(flgPubblNotiziarioItem);			
	}
	
	/***************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - ESECUTIVITA *
	 *****************************************/
	
	public boolean showDetailSectionEsecutivita() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("DATI_ESECUTIVITA");
	}
	
	public String getTitleDetailSectionEsecutivita() {
		String label = getLabelAttributoCustomCablato("DATI_ESECUTIVITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Esecutività";
	}
	
	public boolean isRequiredDetailSectionEsecutivita() {
		return false;
	}
		
	protected void createDetailSectionEsecutivita() {
		
		createEsecutivitaForm();
		
		detailSectionEsecutivita = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionEsecutivita(), true, true, isRequiredDetailSectionEsecutivita(), esecutivitaForm1, esecutivitaForm2);
	}
	
	public boolean showDataEsecutivitaDalItem() {
		return showDetailSectionEsecutivita() && showAttributoCustomCablato("DATA_ESECUTIVITA");
	}
	
	public String getTitleDataEsecutivitaDalItem() {
		String label = getLabelAttributoCustomCablato("DATA_ESECUTIVITA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Esecutività dal";
	}	

	public boolean showFlgImmediatamenteEseguibileItem() {
		return showDetailSectionEsecutivita() && showAttributoCustomCablato("FLG_IMMEDIATAMENTE_ESEGUIBILE");
	}
	
	public String getTitleFlgImmediatamenteEseguibileItem() {
		String label = getLabelAttributoCustomCablato("FLG_IMMEDIATAMENTE_ESEGUIBILE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "immediatamente eseguibile";
	}
	
	public boolean isRequiredFlgImmediatamenteEseguibileItem() {
		return showFlgImmediatamenteEseguibileItem() && getFlgObbligatorioAttributoCustomCablato("FLG_IMMEDIATAMENTE_ESEGUIBILE");
	}
	
	public boolean getDefaultValueAsBooleanFlgImmediatamenteEseguibileItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("FLG_IMMEDIATAMENTE_ESEGUIBILE");
	}
	
	public boolean showMotiviImmediatamenteEseguibileItem() {
		boolean isImmediatamenteEseguibile = showFlgImmediatamenteEseguibileItem() && getValueAsBoolean("flgImmediatamenteEseguibile");
		return showDetailSectionEsecutivita() && isImmediatamenteEseguibile && showAttributoCustomCablato("MOTIVI_IE");
	}
	
	public String getTitleMotiviImmediatamenteEseguibileItem() {
		String label = getLabelAttributoCustomCablato("MOTIVI_IE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Motivi immediata eseguibilità";
	}
	
	public boolean isRequiredMotiviImmediatamenteEseguibileItem() {
		return showMotiviImmediatamenteEseguibileItem() && getFlgObbligatorioAttributoCustomCablato("MOTIVI_IE");
	}
	
	public int getAltezzaInRigheMotiviImmediatamenteEseguibileItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("MOTIVI_IE");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileMotiviImmediatamenteEseguibileItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("MOTIVI_IE");
	}
	
	public boolean getFlgIgnoraGestioneOmissisMotiviImmediatamenteEseguibileItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("MOTIVI_IE");
	}
	
	protected void createEsecutivitaForm() {
		
		esecutivitaForm1 = new DynamicForm();
		esecutivitaForm1.setValuesManager(vm);
		esecutivitaForm1.setWidth100();
		esecutivitaForm1.setPadding(5);
		esecutivitaForm1.setWrapItemTitles(false);
		esecutivitaForm1.setNumCols(20);
		esecutivitaForm1.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		esecutivitaForm1.setTabSet(tabSet);
		esecutivitaForm1.setTabID(_TAB_DATI_PUBBL_ID);
		esecutivitaForm1.setHeight(1);		
		
		dataEsecutivitaDalItem = new DateItem("dataEsecutivitaDal", getTitleDataEsecutivitaDalItem());
		dataEsecutivitaDalItem.setColSpan(1);
		dataEsecutivitaDalItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDataEsecutivitaDalItem();
			}
		});		
		
		flgImmediatamenteEseguibileItem = new CheckboxItem("flgImmediatamenteEseguibile", getTitleFlgImmediatamenteEseguibileItem());
		flgImmediatamenteEseguibileItem.setDefaultValue(getDefaultValueAsBooleanFlgImmediatamenteEseguibileItem());
		flgImmediatamenteEseguibileItem.setColSpan(1);
		flgImmediatamenteEseguibileItem.setWidth("*");
		flgImmediatamenteEseguibileItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgImmediatamenteEseguibileItem();
			}
		});		
		flgImmediatamenteEseguibileItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_PUBBL_ID);				
				motiviImmediatamenteEseguibileItem.redraw();
				if(showMotiviImmediatamenteEseguibileItem()) {
					createMotiviImmediatamenteEseguibileItem();
					esecutivitaForm2.setFields(motiviImmediatamenteEseguibileItem);
				} else {
					esecutivitaForm2.setFields(new FormItem[0]);
				}
			}
		});
				
		esecutivitaForm1.setFields(dataEsecutivitaDalItem, flgImmediatamenteEseguibileItem);	
		
		esecutivitaForm2 = new DynamicForm();
		esecutivitaForm2.setValuesManager(vm);
		esecutivitaForm2.setWidth100();
		esecutivitaForm2.setPadding(5);
		esecutivitaForm2.setWrapItemTitles(false);
		esecutivitaForm2.setNumCols(20);
		esecutivitaForm2.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		esecutivitaForm2.setTabSet(tabSet);
		esecutivitaForm2.setTabID(_TAB_DATI_PUBBL_ID);
		esecutivitaForm2.setHeight(1);		
		
//		if(showMotiviImmediatamenteEseguibileItem()) {
			createMotiviImmediatamenteEseguibileItem();
			esecutivitaForm2.setFields(motiviImmediatamenteEseguibileItem);
//		} else {
//			esecutivitaForm2.setFields(new FormItem[0]);
//		}		
	}
	
	public void createMotiviImmediatamenteEseguibileItem() {
		motiviImmediatamenteEseguibileItem = new CKEditorItem("motiviImmediatamenteEseguibile", -1, "STANDARD", getAltezzaInRigheMotiviImmediatamenteEseguibileItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileMotiviImmediatamenteEseguibileItem(), getFlgIgnoraGestioneOmissisMotiviImmediatamenteEseguibileItem()) {
			
			@Override
			public Boolean validate() {
				if(showMotiviImmediatamenteEseguibileItem()) {
					return super.validate();
				}
				return true;			
			}
			
			@Override
			public void redraw() {
				motiviImmediatamenteEseguibileItem.setTitle(isRequiredMotiviImmediatamenteEseguibileItem() ? FrontendUtil.getRequiredFormItemTitle(getTitleMotiviImmediatamenteEseguibileItem()) : getTitleMotiviImmediatamenteEseguibileItem());
				motiviImmediatamenteEseguibileItem.setRequired(isRequiredMotiviImmediatamenteEseguibileItem());
				motiviImmediatamenteEseguibileItem.setVisible(showMotiviImmediatamenteEseguibileItem());
				super.redraw();
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(isRequiredMotiviImmediatamenteEseguibileItem()) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleMotiviImmediatamenteEseguibileItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleMotiviImmediatamenteEseguibileItem() + "</span>");
				}				
				return lVLayout;
			}
		};
//		motiviImmediatamenteEseguibileItem.setShowTitle(true);
//		motiviImmediatamenteEseguibileItem.setTitleOrientation(TitleOrientation.TOP);
		motiviImmediatamenteEseguibileItem.setColSpan(20);
		motiviImmediatamenteEseguibileItem.setWidth("100%");			
//		motiviImmediatamenteEseguibileItem.setTitle(isRequiredMotiviImmediatamenteEseguibileItem() ? FrontendUtil.getRequiredFormItemTitle(getTitleMotiviImmediatamenteEseguibileItem()) : getTitleMotiviImmediatamenteEseguibileItem());
//		motiviImmediatamenteEseguibileItem.setRequired(isRequiredMotiviImmediatamenteEseguibileItem());
//		motiviImmediatamenteEseguibileItem.setVisible(showMotiviImmediatamenteEseguibileItem());		
		motiviImmediatamenteEseguibileItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredMotiviImmediatamenteEseguibileItem()) {
					motiviImmediatamenteEseguibileItem.setTitle(FrontendUtil.getRequiredFormItemTitle(getTitleMotiviImmediatamenteEseguibileItem()));
					motiviImmediatamenteEseguibileItem.setRequired(true);
				} else {
					motiviImmediatamenteEseguibileItem.setTitle(getTitleMotiviImmediatamenteEseguibileItem());
					motiviImmediatamenteEseguibileItem.setRequired(false);
				}
				return showMotiviImmediatamenteEseguibileItem();
			}
		});
	}

	/*************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - NOTIFICHE *
	 ***************************************/

	public boolean showDetailSectionNotifiche() {
		return showDestNotificaAttoItem();
	}
	
	public String getTitleDetailSectionNotifiche() {
		return getTitleDestNotificaAttoItem();
	}
	
	public boolean isRequiredDetailSectionNotifiche() {
		return isRequiredDestNotificaAttoItem();
	}
	
	protected void createDetailSectionNotifiche() {
		
		createNotificheForm();
		
		detailSectionNotifiche = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionNotifiche(), true, true, isRequiredDetailSectionNotifiche(), notificheForm);
	}
	
	public boolean showDestNotificaAttoItem() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("IND_EMAIL_DEST_NOTIFICA_ATTO");
	}
	
	public String getTitleDestNotificaAttoItem() {
		String label = getLabelAttributoCustomCablato("IND_EMAIL_DEST_NOTIFICA_ATTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Da notificare a";
	}
	
	public boolean isRequiredDestNotificaAttoItem() {
		return showDestNotificaAttoItem() && getFlgObbligatorioAttributoCustomCablato("IND_EMAIL_DEST_NOTIFICA_ATTO");
	}
	
	protected void createNotificheForm() {
		
		notificheForm = new DynamicForm();
		notificheForm.setValuesManager(vm);
		notificheForm.setWidth100();
		notificheForm.setPadding(5);
		notificheForm.setWrapItemTitles(false);
		notificheForm.setNumCols(20);
		notificheForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		notificheForm.setTabSet(tabSet);
		notificheForm.setTabID(_TAB_DATI_PUBBL_ID);
		notificheForm.setHeight(1);		
								 
		GWTRestDataSource destNotificaAttoDS = new GWTRestDataSource("AurigaAutoCompletamentoDataSource");
		
		listaDestNotificaAttoItem = new ComboBoxItem("listaDestNotificaAtto");
		listaDestNotificaAttoItem.setWidth(800);
		listaDestNotificaAttoItem.setColSpan(19);
		listaDestNotificaAttoItem.setShowTitle(false);
		listaDestNotificaAttoItem.setShowPickerIcon(false);
		listaDestNotificaAttoItem.setTextBoxStyle(it.eng.utility.Styles.textItem);
		listaDestNotificaAttoItem.setStartRow(true);
		listaDestNotificaAttoItem.setValueField("indirizzoEmail");
		listaDestNotificaAttoItem.setDisplayField("indirizzoEmail");
		listaDestNotificaAttoItem.setAutoFetchData(false);
		listaDestNotificaAttoItem.setAlwaysFetchMissingValues(true);
		listaDestNotificaAttoItem.setAddUnknownValues(true);
		listaDestNotificaAttoItem.setOptionDataSource(destNotificaAttoDS);
		listaDestNotificaAttoItem.setFetchDelay(500);
		listaDestNotificaAttoItem.setValidateOnChange(false);
		listaDestNotificaAttoItem.setItemHoverFormatter(true, new FormItemHoverFormatter() {

			@Override
			public String getHoverHTML(FormItem item, DynamicForm form) {
				return StringUtil.asHTML((String) listaDestNotificaAttoItem.getValue());
			}
		});
		listaDestNotificaAttoItem.addBlurHandler(new BlurHandler() {
			
			@Override
			public void onBlur(BlurEvent event) {
				listaDestNotificaAttoItem.validate();
			}
		});
		ListGridField descVoceRubricaField = new ListGridField("descVoceRubrica");
		descVoceRubricaField.setWidth("100%");
		descVoceRubricaField.setCellFormatter(new CellFormatter() {

			@Override
			public String format(Object value, ListGridRecord record, int rowNum, int colNum) {

				if (record != null) {
					String res = null;
					String descVoceRubrica = record.getAttribute("descVoceRubrica") != null ? record.getAttributeAsString("descVoceRubrica") : null;
					if (record.getAttributeAsString("tipoIndirizzo") != null && "C".equals(record.getAttributeAsString("tipoIndirizzo"))) {
						res = buildIconHtml("coccarda.png", descVoceRubrica);
						return res;
					} else if (record.getAttributeAsString("tipoIndirizzo") != null && "O".equals(record.getAttributeAsString("tipoIndirizzo"))) { 
						res = buildIconHtml("mail/PEO.png", descVoceRubrica);
						return res;
					} else {
						res = buildIconHtml("mail/mailingList.png", descVoceRubrica);
						return res;
					}
				}
				return null;
			}
		});
		listaDestNotificaAttoItem.setPickListFields(descVoceRubricaField);
		ListGrid listaDestNotificaAttoPickListProperties = new ListGrid();
		listaDestNotificaAttoPickListProperties.setEmptyMessage(I18NUtil.getMessages().list_emptyMessage());
		listaDestNotificaAttoPickListProperties.setShowHeader(false);
		listaDestNotificaAttoPickListProperties.addCellClickHandler(new CellClickHandler() {

			@Override
			public void onCellClick(CellClickEvent event) {
				event.cancel();
				listaDestNotificaAttoItem.setValue(event.getRecord().getAttribute("indirizzoEmail").replace(" ", ""));
				notificheForm.markForRedraw();
			}
		});
		listaDestNotificaAttoPickListProperties.addFetchDataHandler(new FetchDataHandler() {

			@Override
			public void onFilterData(FetchDataEvent event) {	
				String destinatario = listaDestNotificaAttoItem != null && listaDestNotificaAttoItem.getValue() != null ? (String) listaDestNotificaAttoItem.getValue() : null;
				GWTRestDataSource destNotificaAttoDS = (GWTRestDataSource) listaDestNotificaAttoItem.getOptionDataSource();
				destNotificaAttoDS.addParam("destinatario", destinatario);		
				listaDestNotificaAttoItem.setOptionDataSource(destNotificaAttoDS);
				listaDestNotificaAttoItem.invalidateDisplayValueCache();
			}
		});
		listaDestNotificaAttoItem.setPickListProperties(listaDestNotificaAttoPickListProperties);
		listaDestNotificaAttoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDestNotificaAttoItem();
			}
		});
		if(isRequiredDestNotificaAttoItem()) {
			listaDestNotificaAttoItem.setAttribute("obbligatorio", true);
		}
		CustomValidator lDestNotificaAttoValidator = new CustomValidator() {

			@Override
			protected boolean condition(Object value) {
				if(showDestNotificaAttoItem()) {
					if (value == null || value.equals("")) {
						return true;
					}
					RegExp regExp = RegExp.compile(RegExpUtility.indirizzoEmailRegExp());
					String lString = (String) value;
					String[] list = IndirizziEmailSplitter.split(lString);
					boolean res = true;
					for(int i=0; i < list.length; i++){
						if (list[i] == null || list[i].equals(""))
							res = res && true;
						else
							res = res && regExp.test(list[i].trim());
					}
					return res;
				}
				return true;
			}
		};
		lDestNotificaAttoValidator.setErrorMessage(I18NUtil.getMessages().invionotificainteropform_destinatariValidatorErrorMessage());
		listaDestNotificaAttoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredDestNotificaAttoItem();
			}
		}), lDestNotificaAttoValidator);
		
		//Inserimento del pulsante da affiancare alla text di inserimento del destinatario
		lookupRubricaEmailDestinatariButton = new ImgButtonItem("lookupRubricaEmailDestinatariButton", "lookup/rubricaemail.png", I18NUtil.getMessages().invioudmail_detail_lookupRubricaEmailItem_title());
		lookupRubricaEmailDestinatariButton.setShowTitle(false);
		lookupRubricaEmailDestinatariButton.setWidth(16);
		lookupRubricaEmailDestinatariButton.setColSpan(1);
		lookupRubricaEmailDestinatariButton.setValueIconSize(32);
		lookupRubricaEmailDestinatariButton.setStartRow(false);
		lookupRubricaEmailDestinatariButton.setEndRow(true);
		lookupRubricaEmailDestinatariButton.setPrompt(I18NUtil.getMessages().invioudmail_detail_lookupRubricaEmailItem_title());
		lookupRubricaEmailDestinatariButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				InvioMailMultiLookupRubricaEmailPopup lookupRubricaEmailPopup = new InvioMailMultiLookupRubricaEmailPopup(notificheForm, "listaDestNotificaAtto");
				lookupRubricaEmailPopup.show();
			}
		});
		lookupRubricaEmailDestinatariButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDestNotificaAttoItem();
			}
		});
		
		notificheForm.setFields(listaDestNotificaAttoItem, lookupRubricaEmailDestinatariButton);
	}
	
	/**************************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - NOTIFICA A MEZZO MESSI *
	 ****************************************************/
	
	public boolean showDetailSectionNotificaMessi() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("SEZ_NOTIFICA_MESSI");
	}
	
	public String getTitleDetailSectionNotificaMessi() {
		String label = getLabelAttributoCustomCablato("SEZ_NOTIFICA_MESSI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Notifica a mezzo messi";
	}
	
	public boolean isRequiredDetailSectionNotificaMessi() {
		return false;
	}
	
	protected void createDetailSectionNotificaMessi() {
		
		createNotificaMessiForm();
		
		detailSectionNotificaMessi = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionNotificaMessi(), true, true, isRequiredDetailSectionNotificaMessi(), notificaMessiForm);
	}
	
	public boolean showFlgMessiNotificatoriItem() {
		return showDetailSectionNotificaMessi() && showAttributoCustomCablato("TASK_RESULT_2_FLG_MESSI_NOTIFICATORI");
	}
	
	public String getTitleFlgMessiNotificatoriItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_MESSI_NOTIFICATORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "messi notificatori";		
	}
	
	public boolean getDefaultValueAsBooleanFlgMessiNotificatoriItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_MESSI_NOTIFICATORI");
	}
	
	public boolean showDestinatariNotificaMessiItem() {
		return showDetailSectionNotificaMessi() && (!showFlgMessiNotificatoriItem() || getValueAsBoolean("flgMessiNotificatori")) && showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI");
	}
		
	public String getTitleDestinatariNotificaMessiItem() {
		String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Destinatari notifica a mezzo messi";
	}
	
	public boolean isRequiredDestinatariNotificaMessiItem() {
		return showDestinatariNotificaMessiItem() && getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI");
	}
	
	protected void createNotificaMessiForm() {
		
		notificaMessiForm = new DynamicForm();
		notificaMessiForm.setValuesManager(vm);
		notificaMessiForm.setWidth100();
		notificaMessiForm.setPadding(5);
		notificaMessiForm.setWrapItemTitles(false);
		notificaMessiForm.setNumCols(20);
		notificaMessiForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		notificaMessiForm.setTabSet(tabSet);
		notificaMessiForm.setTabID(_TAB_DATI_PUBBL_ID);
		notificaMessiForm.setHeight(1);
		
		flgMessiNotificatoriItem = new CheckboxItem("flgMessiNotificatori", getTitleFlgMessiNotificatoriItem());
		flgMessiNotificatoriItem.setDefaultValue(getDefaultValueAsBooleanFlgMessiNotificatoriItem());
		flgMessiNotificatoriItem.setColSpan(1);
		flgMessiNotificatoriItem.setWidth("*");
		flgMessiNotificatoriItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgMessiNotificatoriItem();
			}
		});		
		flgMessiNotificatoriItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				notificaMessiForm.markForRedraw();				
			}
		});
		
		listaDestinatariNotificaMessiItem = new DestinatariNotificaMessiItem() {
			
			@Override			
			public String getIdUdAtto() {
				return getIdUd();
			}
			
			@Override			
			public void afterGeneraModuloNotifica(final Record recordPreview) {
				
				final String uri = recordPreview.getAttributeAsString("uri");
				final String nomeFile = recordPreview.getAttributeAsString("nomeFile");
				final InfoFileRecord infoFile = new InfoFileRecord(recordPreview.getAttributeAsRecord("infoFile"));
				new PreviewWindowWithCallback(uri, false, infoFile, "FileToExtractBean", nomeFile, new ServiceCallback<Record>() {
					
					@Override
					public void execute(Record object) {
						SC.ask("Vuoi salvare il file generato tra gli allegati dell'atto?", new BooleanCallback() {
							
							@Override
							public void execute(Boolean value) {
								if(value) {
									if (allegatiForm != null) {
										
										RecordList listaAllegati = allegatiForm.getValuesAsRecord().getAttributeAsRecordList("listaAllegati");
										
										Record lRecordModello = new Record();									
										lRecordModello.setAttribute("flgParteDispositivo", false);
										lRecordModello.setAttribute("flgNoPubblAllegato", true);
										lRecordModello.setAttribute("flgPubblicaSeparato", false);	
										lRecordModello.setAttribute("flgDatiSensibili", false);
										lRecordModello.setAttribute("nomeFileAllegato", nomeFile);
										lRecordModello.setAttribute("uriFileAllegato", uri);
										lRecordModello.setAttribute("descrizioneFileAllegato", "");
										lRecordModello.setAttribute("nomeFileAllegatoTif", "");
										lRecordModello.setAttribute("uriFileAllegatoTif", "");
										lRecordModello.setAttribute("remoteUri", false);
										lRecordModello.setAttribute("isChanged", true);
										lRecordModello.setAttribute("nomeFileVerPreFirma", nomeFile);
										lRecordModello.setAttribute("uriFileVerPreFirma", uri);							
										lRecordModello.setAttribute("infoFileVerPreFirma", infoFile);
										lRecordModello.setAttribute("improntaVerPreFirma", infoFile.getImpronta());
										lRecordModello.setAttribute("infoFile", infoFile);
										
										if (listaAllegati == null || listaAllegati.getLength() == 0) {
											listaAllegati = new RecordList();
										}
										listaAllegati.add(lRecordModello);

										Record lRecordForm = new Record();
										lRecordForm.setAttribute("listaAllegati", listaAllegati);
										allegatiForm.setValues(lRecordForm.toMap());
										
										if(listaAllegatiItem != null) {
											if(listaAllegatiItem instanceof AllegatiGridItem) {
												((AllegatiGridItem)listaAllegatiItem).resetCanvasChanged();
											} else if(listaAllegatiItem instanceof AllegatiItem) {
												((AllegatiItem)listaAllegatiItem).resetCanvasChanged();
											}
										}

										if (detailSectionAllegati != null) {
											detailSectionAllegati.openIfhasValue();
										}
									}
								}
							}
						});				
					}
				});				
			}			
			
			@Override			
			public boolean showDescrizioneDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DES");
			}
				
			@Override
			public String getTitleDescrizioneDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DES");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Denominazione/cognome e nome";
			}
			
			@Override
			public boolean isRequiredDescrizioneDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DES");
			}
			
			@Override
			public boolean isEditableDescrizioneDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DES");
			}
			
			@Override
			public boolean showEmailDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_EMAIL");
			}
			
			@Override
			public String getTitleEmailDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_EMAIL");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "E-mail";
			}
			
			@Override
			public boolean isRequiredEmailDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_EMAIL");
			}
			
			@Override
			public boolean isEditableEmailDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_EMAIL");
			}
				
			@Override
			public boolean showIndirizzoDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_INDIRIZZO");
			}
			
			@Override
			public String getTitleIndirizzoDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_INDIRIZZO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Indirizzo";
			}
			
			@Override
			public boolean isRequiredIndirizzoDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_INDIRIZZO");
			}	
			
			@Override
			public boolean isEditableIndirizzoDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_INDIRIZZO");
			}
			
			@Override
			public boolean showAltriDatiDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_ALTRI_DATI");
			}
			
			@Override
			public String getTitleAltriDatiDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_ALTRI_DATI");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Altri dati";
			}
			
			@Override
			public boolean isRequiredAltriDatiDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_ALTRI_DATI");
			}	
			
			@Override
			public boolean isEditableAltriDatiDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_ALTRI_DATI");
			}
			
			@Override
			public boolean showNumeroNotificaDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_NRO_NOTIFICA");
			}
			
			@Override
			public String getTitleNumeroNotificaDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_NRO_NOTIFICA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "N° notifica";
			}
			
			@Override
			public boolean isRequiredNumeroNotificaDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_NRO_NOTIFICA");
			}	
			
			@Override
			public boolean isEditableNumeroNotificaDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_NRO_NOTIFICA");
			}
			
			@Override
			public boolean showDataNotificaDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DATA_NOTIFICA");
			}
			
			@Override
			public String getTitleDataNotificaDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DATA_NOTIFICA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Data notifica";
			}
			
			@Override
			public boolean isRequiredDataNotificaDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DATA_NOTIFICA");
			}	
			
			@Override
			public String getDefaultValueDataNotificaDestinatariNotificaMessi() {
				return getValoreFissoAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DATA_NOTIFICA");
			}
			
			@Override
			public boolean isEditableDataNotificaDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_DATA_NOTIFICA");
			}
			
			@Override
			public boolean showMezzoNotificaDestinatariNotificaMessi() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_MEZZO_NOTIFICA");
			}
			
			@Override
			public String getTitleMezzoNotificaDestinatariNotificaMessi() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_MEZZO_NOTIFICA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Mezzo notifica";
			}
			
			@Override
			public boolean isRequiredMezzoNotificaDestinatariNotificaMessi() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_MEZZO_NOTIFICA");
			}	
			
			@Override
			public HashMap<String, String> getValueMapMezzoNotificaDestinatariNotificaMessi() {
				return getValueMapAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_MEZZO_NOTIFICA");
			}
			
			@Override
			public String getDefaultValueMezzoNotificaDestinatariNotificaMessi() {
				return getValoreFissoAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_MEZZO_NOTIFICA");
			}
			
			@Override
			public boolean isEditableMezzoNotificaDestinatariNotificaMessi() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI_MEZZO_NOTIFICA");
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredDestinatariNotificaMessiItem()) {
					listaDestinatariNotificaMessiItem.setAttribute("obbligatorio", true);				
				} else {
					listaDestinatariNotificaMessiItem.setAttribute("obbligatorio", false);
				}					
				listaDestinatariNotificaMessiItem.storeValue(notificaMessiForm.getValueAsRecordList(listaDestinatariNotificaMessiItem.getName()));			
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showDestinatariNotificaMessiItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI")) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDestinatariNotificaMessiItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDestinatariNotificaMessiItem() + "</span>");
				}				
				return lVLayout;
			}						
		};
		listaDestinatariNotificaMessiItem.setName("listaDestinatariNotificaMessi");
		listaDestinatariNotificaMessiItem.setStartRow(true);
		listaDestinatariNotificaMessiItem.setShowTitle(false);
		listaDestinatariNotificaMessiItem.setColSpan(20);
		listaDestinatariNotificaMessiItem.setNotReplicable(false);		
//		if(getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI")) {			
//			listaDestinatariNotificaMessiItem.setAttribute("obbligatorio", true);
//		}
		listaDestinatariNotificaMessiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDestinatariNotificaMessiItem()) {
					listaDestinatariNotificaMessiItem.setAttribute("obbligatorio", true);				
				} else {
					listaDestinatariNotificaMessiItem.setAttribute("obbligatorio", false);
				}					
				listaDestinatariNotificaMessiItem.storeValue(form.getValueAsRecordList(listaDestinatariNotificaMessiItem.getName()));			
				return showDestinatariNotificaMessiItem();
			}
		});
		
		notificaMessiForm.setFields(flgMessiNotificatoriItem, listaDestinatariNotificaMessiItem);
	}
	
	/****************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - NOTIFICA PEC *
	 ******************************************/
	
	public boolean showDetailSectionNotificaPEC() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("SEZ_NOTIFICA_PEC");
	}
	
	public String getTitleDetailSectionNotificaPEC() {
		String label = getLabelAttributoCustomCablato("SEZ_NOTIFICA_PEC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Notifica PEC";
	}
	
	public boolean isRequiredDetailSectionNotificaPEC() {
		return false;
	}
	
	protected void createDetailSectionNotificaPEC() {
		
		createNotificaPECForm();
		
		detailSectionNotificaPEC = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionNotificaPEC(), true, true, isRequiredDetailSectionNotificaPEC(), notificaPECForm);
	}
	
	public boolean showFlgNotificaPECItem() {
		return showDetailSectionNotificaPEC() && showAttributoCustomCablato("TASK_RESULT_2_FLG_NOTIFICA_PEC");
	}
	
	public String getTitleFlgNotificaPECItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_FLG_NOTIFICA_PEC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "trasmissione PEC";		
	}
	
	public boolean getDefaultValueAsBooleanFlgNotificaPECItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_FLG_NOTIFICA_PEC");
	}
	
	public boolean showDestinatariNotificaPECItem() {
		return showDetailSectionNotificaPEC() && (!showFlgNotificaPECItem() || getValueAsBoolean("flgNotificaPEC")) && showAttributoCustomCablato("DESTINATARI_NOTIFICA_MESSI");
	}
		
	public String getTitleDestinatariNotificaPECItem() {
		String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Destinatari notifica PEC";
	}
	
	public boolean isRequiredDestinatariNotificaPECItem() {
		return showDestinatariNotificaPECItem() && getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC");
	}
	
	protected void createNotificaPECForm() {
		
		notificaPECForm = new DynamicForm();
		notificaPECForm.setValuesManager(vm);
		notificaPECForm.setWidth100();
		notificaPECForm.setPadding(5);
		notificaPECForm.setWrapItemTitles(false);
		notificaPECForm.setNumCols(20);
		notificaPECForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		notificaPECForm.setTabSet(tabSet);
		notificaPECForm.setTabID(_TAB_DATI_PUBBL_ID);
		notificaPECForm.setHeight(1);
		
		flgNotificaPECItem = new CheckboxItem("flgNotificaPEC", getTitleFlgNotificaPECItem());
		flgNotificaPECItem.setDefaultValue(getDefaultValueAsBooleanFlgNotificaPECItem());
		flgNotificaPECItem.setColSpan(1);
		flgNotificaPECItem.setWidth("*");
		flgNotificaPECItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showFlgNotificaPECItem();
			}
		});		
		flgNotificaPECItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				notificaPECForm.markForRedraw();				
			}
		});
		
		listaDestinatariNotificaPECItem = new DestinatariNotificaPECItem() {
			
			@Override			
			public boolean showDescrizioneDestinatariNotificaPEC() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_DES");
			}
				
			@Override
			public String getTitleDescrizioneDestinatariNotificaPEC() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_DES");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Denominazione/cognome e nome";
			}
			
			@Override
			public boolean isRequiredDescrizioneDestinatariNotificaPEC() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_DES");
			}
			
			@Override
			public boolean isEditableDescrizioneDestinatariNotificaPEC() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_DES");
			}
				
			@Override
			public boolean showIndirizzoPECDestinatariNotificaPEC() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_PEC");
			}
			
			@Override
			public String getTitleIndirizzoPECDestinatariNotificaPEC() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_PEC");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "PEC";
			}
			
			@Override
			public boolean isRequiredIndirizzoPECDestinatariNotificaPEC() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_PEC");
			}	
			
			@Override
			public boolean isEditableIndirizzoPECDestinatariNotificaPEC() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_PEC");
			}
			
			@Override
			public boolean showNotaDestinatariNotificaPEC() {
				return showAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_NOTA");
			}
			
			@Override
			public String getTitleNotaDestinatariNotificaPEC() {
				String label = getLabelAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_NOTA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Nota";
			}
			
			@Override
			public boolean isRequiredNotaDestinatariNotificaPEC() {
				return getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_NOTA");
			}	
			
			@Override
			public String getDefaultValueNotaDestinatariNotificaPEC() {
				return getValoreFissoAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_NOTA");
			}
			
			@Override
			public boolean isEditableNotaDestinatariNotificaPEC() {
				return getFlgEditabileAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC_NOTA");
			}						
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredDestinatariNotificaPECItem()) {
					listaDestinatariNotificaPECItem.setAttribute("obbligatorio", true);				
				} else {
					listaDestinatariNotificaPECItem.setAttribute("obbligatorio", false);
				}					
				listaDestinatariNotificaPECItem.storeValue(notificaPECForm.getValueAsRecordList(listaDestinatariNotificaPECItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showDestinatariNotificaPECItem()) {
					return super.skipValidation();
				}
				return true;
			}
			
			@Override
			protected VLayout creaVLayout() {
				VLayout lVLayout = super.creaVLayout();
				lVLayout.setWidth100();
				lVLayout.setPadding(11);
				lVLayout.setMargin(4);
				lVLayout.setIsGroup(true);
				lVLayout.setStyleName(it.eng.utility.Styles.detailSection);
				if(getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC")) {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + FrontendUtil.getRequiredFormItemTitle(getTitleDestinatariNotificaPECItem()) + "</span>");
				} else {
					lVLayout.setGroupTitle("<span class=\"" + it.eng.utility.Styles.headerDetailSectionTitle + "\">" + getTitleDestinatariNotificaPECItem() + "</span>");
				}				
				return lVLayout;
			}						
		};
		listaDestinatariNotificaPECItem.setName("listaDestinatariNotificaPEC");
		listaDestinatariNotificaPECItem.setStartRow(true);
		listaDestinatariNotificaPECItem.setShowTitle(false);
		listaDestinatariNotificaPECItem.setColSpan(20);
		listaDestinatariNotificaPECItem.setNotReplicable(false);		
//		if(getFlgObbligatorioAttributoCustomCablato("DESTINATARI_NOTIFICA_PEC")) {			
//			listaDestinatariNotificaPECItem.setAttribute("obbligatorio", true);
//		}
		listaDestinatariNotificaPECItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredDestinatariNotificaPECItem()) {
					listaDestinatariNotificaPECItem.setAttribute("obbligatorio", true);				
				} else {
					listaDestinatariNotificaPECItem.setAttribute("obbligatorio", false);
				}					
				listaDestinatariNotificaPECItem.storeValue(form.getValueAsRecordList(listaDestinatariNotificaPECItem.getName()));				
				return showDestinatariNotificaPECItem();
			}
		});
		
		notificaPECForm.setFields(flgNotificaPECItem, listaDestinatariNotificaPECItem);
	}
	
	/**************************************************************** 
	 * PUBBLICAZIONE/NOTIFICHE - VISIBILITA' PUBBLICA POST ADOZIONE *
	 ****************************************************************/
		
	public boolean showFlgVisibPubblicaPostAdozioneItem() {
		return showTabPubblicazioneNotifiche() && showAttributoCustomCablato("TASK_RESULT_2_VISIB_PUBBLICA_POST_ADOZIONE");
	}
		
	public String getTitleFlgVisibPubblicaPostAdozioneItem() {
		String label = getLabelAttributoCustomCablato("TASK_RESULT_2_VISIB_PUBBLICA_POST_ADOZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "visibilità aperta a tutti dopo l'adozione";	
	}
	
	public boolean getDefaultValueAsBooleanFlgVisibPubblicaPostAdozioneItem() {
		return getValoreFissoAsBooleanAttributoCustomCablato("TASK_RESULT_2_VISIB_PUBBLICA_POST_ADOZIONE");
	}
	
	protected void createVisibPubblicaPostAdozioneForm() {
		
		visibPubblicaPostAdozioneForm = new DynamicForm();
		visibPubblicaPostAdozioneForm.setValuesManager(vm);
		visibPubblicaPostAdozioneForm.setWidth100();
		visibPubblicaPostAdozioneForm.setPadding(5);
		visibPubblicaPostAdozioneForm.setWrapItemTitles(false);
		visibPubblicaPostAdozioneForm.setNumCols(20);
		visibPubblicaPostAdozioneForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		visibPubblicaPostAdozioneForm.setTabSet(tabSet);
		visibPubblicaPostAdozioneForm.setTabID(_TAB_DATI_SCHEDA_ID);
		visibPubblicaPostAdozioneForm.setHeight(1);
		
		flgVisibPubblicaPostAdozioneItem = new CheckboxItem("flgVisibPubblicaPostAdozione", getTitleFlgVisibPubblicaPostAdozioneItem());
		flgVisibPubblicaPostAdozioneItem.setDefaultValue(getDefaultValueAsBooleanFlgVisibPubblicaPostAdozioneItem());
		flgVisibPubblicaPostAdozioneItem.setColSpan(1);
		flgVisibPubblicaPostAdozioneItem.setWidth("*");			
		flgVisibPubblicaPostAdozioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgVisibPubblicaPostAdozioneItem();
			}
		});
		
		visibPubblicaPostAdozioneForm.setFields(flgVisibPubblicaPostAdozioneItem);			
	}
		
	/*************************** 
	 * TAB MOVIMENTI CONTABILI *
	 ***************************/
	
	public boolean showTabMovimentiContabili() {
		return show_TAB_MOVIMENTI_CONTABILI() && (!isAvvioPropostaAtto() && ((isAttivoSICRA() && showAttributoCustomCablato("MOVIMENTO_SICRA")) || (isAttivoContabilia() && showAttributoCustomCablato("MOVIMENTO_CONTABILIA") && !"".equals(getValueAsString("idPropostaAMC")))));	
	}
	
	public String getTitleTabMovimentiContabili() {
		return "Movimenti contabili";
	}
	
	/**
	 * Metodo per costruire il tab "Movimenti contabili"
	 * 
	 */
	protected void createTabMovimentiContabili() {

		tabMovimentiContabili = new Tab("<b>" + getTitleTabMovimentiContabili() + "</b>");
		tabMovimentiContabili.setAttribute("tabID", _TAB_MOVIMENTI_CONTABILI_ID);
		tabMovimentiContabili.setPrompt(getTitleTabMovimentiContabili());		
		
		VLayout layoutMovimentiContabili = getLayoutMovimentiContabili();
		layoutMovimentiContabili.setHeight100();
		VLayout layoutTabMovimentiContabili = new VLayout();
		layoutTabMovimentiContabili.setWidth100();
		layoutTabMovimentiContabili.setHeight100();
		layoutTabMovimentiContabili.addMember(layoutMovimentiContabili);
		layoutTabMovimentiContabili.setRedrawOnResize(true);
		tabMovimentiContabili.setPane(layoutTabMovimentiContabili);
	}

	/**
	 * Metodo che restituisce il layout del tab "Movimenti contabili"
	 * 
	 */
	public VLayout getLayoutMovimentiContabili() {

		VLayout layoutMovimentiContabili = new VLayout(5);
		
		createMovimentiContabiliForm();
		layoutMovimentiContabili.addMember(movimentiContabiliForm);
		
		return layoutMovimentiContabili;
	}
	
	public void refreshListaMovimentiContabilia(final ServiceCallback<Record> callback) {
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		if(isAttivaRequestMovimentiDaAMC()) {
			lNuovaPropostaAtto2CompletaDataSource.addParam("flgAttivaRequestMovimentiDaAMC", "true");
		}	
		lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("getListaMovimentiContabilia", getRecordToSave(), new DSCallback() {							
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record record = response.getData()[0];
					listaMovimentiContabiliaItem.setData(record.getAttributeAsRecordList("listaMovimentiContabilia"));
					if(record.getAttribute("errorMessageMovimentiContabilia") != null && !"".equals(record.getAttribute("errorMessageMovimentiContabilia"))) {
						listaMovimentiContabiliaItem.setGridEmptyMessage(record.getAttribute("errorMessageMovimentiContabilia"));
					} else {
						listaMovimentiContabiliaItem.setGridEmptyMessage("Nessun dato trovato");
					}					
					redrawTabForms(_TAB_MOVIMENTI_CONTABILI_ID);
					if(callback != null) {
						callback.execute(record);
					}
				} 				
			}
		}, new DSRequest());
	}
	
	protected void createMovimentiContabiliForm() {
		
		movimentiContabiliForm = new DynamicForm();
		movimentiContabiliForm.setValuesManager(vm);
		movimentiContabiliForm.setWidth100();
		movimentiContabiliForm.setPadding(5);
		movimentiContabiliForm.setWrapItemTitles(false);
		movimentiContabiliForm.setNumCols(20);
		movimentiContabiliForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		movimentiContabiliForm.setTabSet(tabSet);
		movimentiContabiliForm.setTabID(_TAB_MOVIMENTI_CONTABILI_ID);
		movimentiContabiliForm.setHeight100();
		
		String lSistAMC = AurigaLayout.getParametroDB("SIST_AMC");
		if(lSistAMC != null) {
			if("CONTABILIA".equalsIgnoreCase(lSistAMC)) {
				listaMovimentiContabiliaItem = new ListaMovimentiContabiliaItem("listaMovimentiContabilia") {
					
					public void onClickRefreshListButton() {
						refreshListaMovimentiContabilia(new ServiceCallback<Record>() {
							
							@Override
							public void execute(Record object) {
								showHideSections();						
								afterShow();
							}
						});
					}
				};
				listaMovimentiContabiliaItem.setGridEmptyMessage("Nessun dato trovato");
				listaMovimentiContabiliaItem.setStartRow(true);
				listaMovimentiContabiliaItem.setShowTitle(false);
				listaMovimentiContabiliaItem.setHeight("95%");
				movimentiContabiliForm.setFields(listaMovimentiContabiliaItem);	
			} else if("CONTABILIA2".equalsIgnoreCase(lSistAMC)) {
				listaMovimentiContabiliaItem = new ListaMovimentiContabilia2Item("listaMovimentiContabilia") {
					
					@Override
					protected boolean showDatiContabiliaDettGsa() {
						return showAttributoCustomCablato("DATI_CONTABILIA_DETT_GSA");
					}
					
					@Override
					protected String getTitleDatiContabiliaDettGsa() {
						String label = getLabelAttributoCustomCablato("DATI_CONTABILIA_DETT_GSA");
						if(label != null && !"".equals(label)) {
							return label;
						}
						return "Dati GSA"; 
					}
					
					@Override
					protected boolean isEditableDatiContabiliaDettGsa() {
						return getFlgEditabileAttributoCustomCablato("DATI_CONTABILIA_DETT_GSA");
					}
					
					@Override
					protected boolean isDatiRilevantiGsa() {
						return isDatiRilevantiGSA();
					}
					
					public void onClickRefreshListButton() {
						refreshListaMovimentiContabilia(new ServiceCallback<Record>() {
							
							@Override
							public void execute(Record object) {
								showHideSections();						
								afterShow();
							}
						});
					}

					@Override
					public boolean isGrigliaEditabile() {
						return isEditableDatiContabiliaDettGsa();
					}
				};
				listaMovimentiContabiliaItem.setGridEmptyMessage("Nessun dato trovato");
				listaMovimentiContabiliaItem.setStartRow(true);
				listaMovimentiContabiliaItem.setShowTitle(false);
				listaMovimentiContabiliaItem.setHeight("95%");
				movimentiContabiliForm.setFields(listaMovimentiContabiliaItem);	
			} else if("SICRA".equalsIgnoreCase(lSistAMC)) {
				listaInvioMovimentiContabiliSICRAItem = new ListaInvioMovimentiContabiliSICRAItem("listaInvioMovimentiContabiliSICRA") {
					
					@Override
					public boolean isEsclusoCIGProposta() {
						return isEsclusoCIG();
					}
					
					@Override
					public String[] getCIGValueMap() {
						return buildCIGValueMap();
					}
					
					@Override
					public HashSet<String> getVociPEGNoVerifDisp() {
						return vociPEGNoVerifDisp;
					}
					
					@Override
					public String getIdUdProposta() {
						return getIdUd();
					}
					
					@Override
					public String getUoProponenteCorrente() {
						return getIdUoProponente();
					}
					
					@Override
					public boolean isEscludiFiltroCdC() {
						return isEscludiFiltroCdCVsAMC();
					}
					
					@Override
					public boolean isGrigliaEditabile() {
						return true;
					}
					
					@Override
					public boolean isShowRefreshListButton() {
						return false;
					}
				};
				listaInvioMovimentiContabiliSICRAItem.setStartRow(true);
				listaInvioMovimentiContabiliSICRAItem.setShowTitle(false);
				listaInvioMovimentiContabiliSICRAItem.setHeight("95%");					
				movimentiContabiliForm.setFields(listaInvioMovimentiContabiliSICRAItem);	
			}
		}
	}
	
	/**************** 
	 * TAB DATI GSA *
	 ****************/
	
	public boolean showTabDatiGSA() {
		return show_TAB_DATI_GSA() && !isAvvioPropostaAtto() && isDatiRilevantiGSA() && showAttributoCustomCablato("DATI_GSA");	
	}

	public String getTitleTabDatiGSA() {
		String label = getLabelAttributoCustomCablato("DATI_GSA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati GSA";
	}
	
	/**
	 * Metodo per costruire il tab "Dati GSA"
	 * 
	 */
	protected void createTabDatiGSA() {

		tabDatiGSA = new Tab("<b>" + getTitleTabDatiGSA() + "</b>");
		tabDatiGSA.setAttribute("tabID", _TAB_DATI_GSA_ID);
		tabDatiGSA.setPrompt(getTitleTabDatiGSA());		
		
		VLayout layoutDatiGSA = getLayoutDatiGSA();
		layoutDatiGSA.setHeight100();
		VLayout layoutTabDatiGSA = new VLayout();
		layoutTabDatiGSA.setWidth100();
		layoutTabDatiGSA.setHeight100();
		layoutTabDatiGSA.addMember(layoutDatiGSA);
		layoutTabDatiGSA.setRedrawOnResize(true);
		tabDatiGSA.setPane(layoutTabDatiGSA);
	}

	/**
	 * Metodo che restituisce il layout del tab "Dati GSA"
	 * 
	 */
	public VLayout getLayoutDatiGSA() {

		VLayout layoutDatiGSA = new VLayout(5);
		
		createDetailSectionMovimentiGSA();
		layoutDatiGSA.addMember(detailSectionMovimentiGSA);
		
		return layoutDatiGSA;
	}
	
	protected void createDetailSectionMovimentiGSA() {
		
		createMovimentiGSAForm();
		
		detailSectionMovimentiGSA = new NuovaPropostaAtto2CompletaDetailSection("Movimenti", true, true, false, movimentiGSAForm);
	}
	
	protected void createMovimentiGSAForm() {
		
		movimentiGSAForm = new DynamicForm();
		movimentiGSAForm.setValuesManager(vm);
		movimentiGSAForm.setWidth100();
		movimentiGSAForm.setPadding(5);
		movimentiGSAForm.setWrapItemTitles(false);
		movimentiGSAForm.setNumCols(20);
		movimentiGSAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		movimentiGSAForm.setTabSet(tabSet);
		movimentiGSAForm.setTabID(_TAB_DATI_GSA_ID);
		movimentiGSAForm.setHeight100();
		
		listaMovimentiGSAItem = new ListaMovimentiGSAItem("listaMovimentiGSA") {
			
			@Override
			public boolean showStrutturaCompetente() {
				return showAttributoCustomCablato("DATI_GSA_UO_COMPETENTE");
			}
			
			@Override
			protected boolean isDatiRilevantiGsa() {
				return isDatiRilevantiGSA();
			}
			
			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
		};
		listaMovimentiGSAItem.setGridEmptyMessage("Nessun dato trovato");
		listaMovimentiGSAItem.setStartRow(true);
		listaMovimentiGSAItem.setShowTitle(false);
		listaMovimentiGSAItem.setHeight("95%");
		
		movimentiGSAForm.setFields(listaMovimentiGSAItem);	
	}
	
	/***************************
	 * TAB DATI SPESA CORRENTE *
	 ***************************/
	
	public boolean showTabDatiSpesaCorrente() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1 && _FLG_NO.equalsIgnoreCase(flgSpesaValoriPossibili[0])) {
			return false;
		}
		return show_TAB_DATI_SPESA_CORRENTE() && (!isAvvioPropostaAtto() && (isAttivoSIB() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA") && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CORRENTE")));
	}
	
	public String getTitleTabDatiSpesaCorrente() {
		String label = getLabelAttributoCustomCablato("LABEL_TAB_DATI_CONT_CORR_SIB");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabDatiSpesaCorrente_prompt();
	}
	
	public boolean isAttivoTabDatiSpesaCorrente() {
		return showTabDatiSpesaCorrente() && isDeterminaConSpesa() && !isDeterminaPersonale() && getValueAsBoolean("flgSpesaCorrente");
	}
	
	public boolean isModalitaGrigliaCorrente() {
		String prenotazioneSpesaSIBDiCorrente = "";
		String[] prenotazioneSpesaSnteIBDiCorrenteValoriPossibili = getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem();
		if(prenotazioneSpesaSnteIBDiCorrenteValoriPossibili != null && prenotazioneSpesaSnteIBDiCorrenteValoriPossibili.length == 1) {
			prenotazioneSpesaSIBDiCorrente = prenotazioneSpesaSnteIBDiCorrenteValoriPossibili[0];
		} else {
			prenotazioneSpesaSIBDiCorrente = getValueAsString("prenotazioneSpesaSIBDiCorrente");
		}
		return prenotazioneSpesaSIBDiCorrente.equals(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B) && getValueAsString("modalitaInvioDatiSpesaARagioneriaCorrente").equals(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1);
	}
	
	public boolean isPresentiDatiContabiliSIBCorrente() {
		return datiContabiliSIBCorrenteForm != null && datiContabiliSIBCorrenteForm.getValueAsRecordList("listaDatiContabiliSIBCorrente") != null && datiContabiliSIBCorrenteForm.getValueAsRecordList("listaDatiContabiliSIBCorrente").getLength() > 0;
	}
	
	public boolean isPresentiDatiStoriciCorrente() {
		return invioDatiSpesaCorrenteForm != null && invioDatiSpesaCorrenteForm.getValueAsRecordList("listaInvioDatiSpesaCorrente") != null && invioDatiSpesaCorrenteForm.getValueAsRecordList("listaInvioDatiSpesaCorrente").getLength() > 0;
	}
	
	/**
	 * Metodo per costruire il tab "Dati spesa corrente"
	 * 
	 */
	protected void createTabDatiSpesaCorrente() {

		tabDatiSpesaCorrente = new Tab("<b>" + getTitleTabDatiSpesaCorrente() + "</b>");
		tabDatiSpesaCorrente.setAttribute("tabID", _TAB_DATI_SPESA_CORRENTE_ID);
		tabDatiSpesaCorrente.setPrompt(getTitleTabDatiSpesaCorrente());
//		if(!showDetailSectionNoteCorrente()) {
//			VLayout layoutDatiSpesaCorrente = getLayoutDatiSpesaCorrente();
//			layoutDatiSpesaCorrente.setHeight100();
//			VLayout layoutTabDatiSpesaCorrente = new VLayout();
//			layoutTabDatiSpesaCorrente.setWidth100();
//			layoutTabDatiSpesaCorrente.setHeight100();
//			layoutTabDatiSpesaCorrente.addMember(layoutDatiSpesaCorrente);
//			layoutTabDatiSpesaCorrente.setRedrawOnResize(true);
//			tabDatiSpesaCorrente.setPane(layoutTabDatiSpesaCorrente);
//		} else {
		tabDatiSpesaCorrente.setPane(createTabPane(getLayoutDatiSpesaCorrente()));
//		}
	}
	
	/**
	 * Metodo che restituisce il layout del tab "Dati spesa corrente"
	 * 
	 */
	protected VLayout getLayoutDatiSpesaCorrente() {
		
		VLayout layoutDatiSpesaCorrente = new VLayout(5);

		createDetailSectionOpzioniSpesaCorrente();
		layoutDatiSpesaCorrente.addMember(detailSectionOpzioniSpesaCorrente);
		
		createDetailSectionDatiContabiliSIBCorrente();
		detailSectionDatiContabiliSIBCorrente.setVisible(false);		
		layoutDatiSpesaCorrente.addMember(detailSectionDatiContabiliSIBCorrente);
		
		createDetailSectionInvioDatiSpesaCorrente();
		detailSectionInvioDatiSpesaCorrente.setVisible(false);		
		layoutDatiSpesaCorrente.addMember(detailSectionInvioDatiSpesaCorrente);
		
		createDetailSectionFileXlsCorrente();
		detailSectionFileXlsCorrente.setVisible(false);		
		layoutDatiSpesaCorrente.addMember(detailSectionFileXlsCorrente);
		
//		createDetailSectionAllegatiCorrente();
//		layoutDatiSpesaCorrente.addMember(detailSectionAllegatiCorrente);
		
		createDetailSectionNoteCorrente();
		layoutDatiSpesaCorrente.addMember(detailSectionNoteCorrente);
		
		return layoutDatiSpesaCorrente;
	}
	
	public boolean showPrenotazioneSpesaSIBDiCorrenteItem() {
		String[] prenotazioneSpesaSIBDiCorrenteValoriPossibili = getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem();
		if(prenotazioneSpesaSIBDiCorrenteValoriPossibili != null && prenotazioneSpesaSIBDiCorrenteValoriPossibili.length == 1) {
			return false; // se la mappa contiene un solo valore nascondo il radio e forzo quel valore
		}
		return isAttivoTabDatiSpesaCorrente() && showAttributoCustomCablato("PRENOT_SPESA_DI_CORR");
	}
		
	public String getTitlePrenotazioneSpesaSIBDiCorrenteItem() {
		String label = getLabelAttributoCustomCablato("PRENOT_SPESA_DI_CORR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_prenotazioneSpesaSIBDi_title();
	}
	
	public boolean isRequiredPrenotazioneSpesaSIBDiCorrenteItem() {
		return showPrenotazioneSpesaSIBDiCorrenteItem() && isDatiSpesaEditabili() && getFlgEditabileAttributoCustomCablato("PRENOT_SPESA_DI_CORR");
	}
	
	public String[] getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem() {
		String[] valoriPossibili = getValoriPossibiliAttributoCustomCablato("PRENOT_SPESA_DI_CORR");
		if(valoriPossibili != null && valoriPossibili.length > 0) {
			return valoriPossibili;			
		} else {
			return new String[] {_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_A, _PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B};
		}
	}
	
	public HashMap<String, String> getValueMapPrenotazioneSpesaSIBDiCorrenteItem() {
		LinkedHashMap<String, String> prenotazioneSpesaSIBDiCorrenteValueMap = getValueMapAttributoCustomCablato("PRENOT_SPESA_DI_CORR");
		if(prenotazioneSpesaSIBDiCorrenteValueMap != null && prenotazioneSpesaSIBDiCorrenteValueMap.size() > 0) {
			return prenotazioneSpesaSIBDiCorrenteValueMap;
		}
		prenotazioneSpesaSIBDiCorrenteValueMap = new LinkedHashMap<String, String>();
		prenotazioneSpesaSIBDiCorrenteValueMap.put(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_A, I18NUtil.getMessages().nuovaPropostaAtto2_detail_prenotazioneSpesaSIBDi_opzioneA());
		prenotazioneSpesaSIBDiCorrenteValueMap.put(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B, I18NUtil.getMessages().nuovaPropostaAtto2_detail_prenotazioneSpesaSIBDi_opzioneB());					
		return prenotazioneSpesaSIBDiCorrenteValueMap;		
	}
	
	public String getDefaultValuePrenotazioneSpesaSIBDiCorrenteItem() {
		return getValoreFissoAttributoCustomCablato("PRENOT_SPESA_DI_CORR");
	}
	
	protected void createDetailSectionOpzioniSpesaCorrente() {
		
		createOpzioniSpesaCorrenteForm();
		
		detailSectionOpzioniSpesaCorrente = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionOpzioniSpesaCorrente_title(), true, true, false, opzioniSpesaCorrenteForm1, opzioniSpesaCorrenteForm2);
	}
	
	protected void createOpzioniSpesaCorrenteForm() {
		
		opzioniSpesaCorrenteForm1 = new DynamicForm();
		opzioniSpesaCorrenteForm1.setValuesManager(vm);
		opzioniSpesaCorrenteForm1.setWidth100();
		opzioniSpesaCorrenteForm1.setPadding(5);
		opzioniSpesaCorrenteForm1.setWrapItemTitles(false);
		opzioniSpesaCorrenteForm1.setNumCols(20);
		opzioniSpesaCorrenteForm1.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniSpesaCorrenteForm1.setTabSet(tabSet);
		opzioniSpesaCorrenteForm1.setTabID(_TAB_DATI_SPESA_CORRENTE_ID);
		opzioniSpesaCorrenteForm1.setHeight(1);				
		
		flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem = new CheckboxItem("flgDisattivaAutoRequestDatiContabiliSIBCorrente", "disattiva caricamento automatico da SIB all'apertura del task");
		flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem.setDefaultValue(false);
		flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem.setStartRow(true);
		flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem.setColSpan(10);
		flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem.setWidth("*");
		
		opzioniSpesaCorrenteForm1.setFields(flgDisattivaAutoRequestDatiContabiliSIBCorrenteItem);
		
		opzioniSpesaCorrenteForm2 = new DynamicForm();
		opzioniSpesaCorrenteForm2.setValuesManager(vm);
		opzioniSpesaCorrenteForm2.setWidth100();
		opzioniSpesaCorrenteForm2.setPadding(5);
		opzioniSpesaCorrenteForm2.setWrapItemTitles(false);
		opzioniSpesaCorrenteForm2.setNumCols(20);
		opzioniSpesaCorrenteForm2.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniSpesaCorrenteForm2.setTabSet(tabSet);
		opzioniSpesaCorrenteForm2.setTabID(_TAB_DATI_SPESA_CORRENTE_ID);				
		opzioniSpesaCorrenteForm2.setHeight(1);				
		
		prenotazioneSpesaSIBDiCorrenteItem = new RadioGroupItem("prenotazioneSpesaSIBDiCorrente", getTitlePrenotazioneSpesaSIBDiCorrenteItem()) {
			
			@Override
			public void setCanEdit(Boolean canEdit) {
				super.setCanEdit(getFlgEditabileAttributoCustomCablato("PRENOT_SPESA_DI_CORR") ? canEdit : false);
			}
		};
		prenotazioneSpesaSIBDiCorrenteItem.setStartRow(true);		
		Map<String, String> prenotazioneSpesaSIBDiCorrenteValueMap = getValueMapPrenotazioneSpesaSIBDiCorrenteItem();
		if(prenotazioneSpesaSIBDiCorrenteValueMap != null && prenotazioneSpesaSIBDiCorrenteValueMap.keySet().size() > 0) {
			prenotazioneSpesaSIBDiCorrenteItem.setValueMap(prenotazioneSpesaSIBDiCorrenteValueMap);
			if(prenotazioneSpesaSIBDiCorrenteValueMap.size() == 1) {
				prenotazioneSpesaSIBDiCorrenteItem.setDefaultValue(prenotazioneSpesaSIBDiCorrenteValueMap.keySet().iterator().next());
			} else {
				prenotazioneSpesaSIBDiCorrenteItem.setDefaultValue(getDefaultValuePrenotazioneSpesaSIBDiCorrenteItem());
			}
		} else {
			prenotazioneSpesaSIBDiCorrenteValueMap = new LinkedHashMap<String, String>();
			prenotazioneSpesaSIBDiCorrenteValueMap.put(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_A, I18NUtil.getMessages().nuovaPropostaAtto2_detail_prenotazioneSpesaSIBDi_opzioneA());
			prenotazioneSpesaSIBDiCorrenteValueMap.put(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B, I18NUtil.getMessages().nuovaPropostaAtto2_detail_prenotazioneSpesaSIBDi_opzioneB());		
			prenotazioneSpesaSIBDiCorrenteItem.setValueMap(prenotazioneSpesaSIBDiCorrenteValueMap);
			prenotazioneSpesaSIBDiCorrenteItem.setDefaultValue(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_A);
		}
		prenotazioneSpesaSIBDiCorrenteItem.setVertical(false);
		prenotazioneSpesaSIBDiCorrenteItem.setWrap(false);
		if(isRequiredPrenotazioneSpesaSIBDiCorrenteItem()) {
			prenotazioneSpesaSIBDiCorrenteItem.setAttribute("obbligatorio", true);
		}
		prenotazioneSpesaSIBDiCorrenteItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredPrenotazioneSpesaSIBDiCorrenteItem();
			}
		}));
		prenotazioneSpesaSIBDiCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showPrenotazioneSpesaSIBDiCorrenteItem();
			}
		});
		prenotazioneSpesaSIBDiCorrenteItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				
				redrawTabForms(_TAB_DATI_SPESA_CORRENTE_ID);
				showHideSections();
			}
		});
		
		modalitaInvioDatiSpesaARagioneriaCorrenteItem = new RadioGroupItem("modalitaInvioDatiSpesaARagioneriaCorrente", I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_title());
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setStartRow(true);
		LinkedHashMap<String, String> modalitaInvioDatiSpesaARagioneriaCorrenteValueMap = new LinkedHashMap<String, String>();
		modalitaInvioDatiSpesaARagioneriaCorrenteValueMap.put(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1, I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_opzioneB1());
		modalitaInvioDatiSpesaARagioneriaCorrenteValueMap.put(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B2, I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_opzioneB2());		
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setValueMap(modalitaInvioDatiSpesaARagioneriaCorrenteValueMap);
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setVertical(false);
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setWrap(false);
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setAttribute("obbligatorio", true);
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setDefaultValue(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1);
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				String prenotazioneSpesaSIBDiCorrente = "";
				String[] prenotazioneSpesaSnteIBDiCorrenteValoriPossibili = getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem();
				if(prenotazioneSpesaSnteIBDiCorrenteValoriPossibili != null && prenotazioneSpesaSnteIBDiCorrenteValoriPossibili.length == 1) {
					prenotazioneSpesaSIBDiCorrente = prenotazioneSpesaSnteIBDiCorrenteValoriPossibili[0];
				} else {
					prenotazioneSpesaSIBDiCorrente = getValueAsString("prenotazioneSpesaSIBDiCorrente");
				}
				return isAttivoTabDatiSpesaCorrente() && prenotazioneSpesaSIBDiCorrente.equals(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B) && isDatiSpesaEditabili();
			}
		}));
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String prenotazioneSpesaSIBDiCorrente = "";
				String[] prenotazioneSpesaSnteIBDiCorrenteValoriPossibili = getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem();
				if(prenotazioneSpesaSnteIBDiCorrenteValoriPossibili != null && prenotazioneSpesaSnteIBDiCorrenteValoriPossibili.length == 1) {
					prenotazioneSpesaSIBDiCorrente = prenotazioneSpesaSnteIBDiCorrenteValoriPossibili[0];
				} else {
					prenotazioneSpesaSIBDiCorrente = getValueAsString("prenotazioneSpesaSIBDiCorrente");
				}
				return prenotazioneSpesaSIBDiCorrente.equals(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B);
			}
		});
		modalitaInvioDatiSpesaARagioneriaCorrenteItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_SPESA_CORRENTE_ID);
				showHideSections();
			}
		});
		
		opzioniSpesaCorrenteForm2.setFields(
			prenotazioneSpesaSIBDiCorrenteItem,
			modalitaInvioDatiSpesaARagioneriaCorrenteItem
		);	
	}
	
	public boolean showDetailSectionDatiContabiliSIBCorrente() {
		String prenotazioneSpesaSIBDiCorrente = "";
		String[] prenotazioneSpesaSnteIBDiCorrenteValoriPossibili = getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem();
		if(prenotazioneSpesaSnteIBDiCorrenteValoriPossibili != null && prenotazioneSpesaSnteIBDiCorrenteValoriPossibili.length == 1) {
			prenotazioneSpesaSIBDiCorrente = prenotazioneSpesaSnteIBDiCorrenteValoriPossibili[0];
		} else {
			prenotazioneSpesaSIBDiCorrente = getValueAsString("prenotazioneSpesaSIBDiCorrente");
		}
		return prenotazioneSpesaSIBDiCorrente.equals(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_A) || isPresentiDatiContabiliSIBCorrente();
	}
		
	protected void createDetailSectionDatiContabiliSIBCorrente() {

		createDatiContabiliSIBCorrenteForm();
		
		detailSectionDatiContabiliSIBCorrente = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionDatiContabiliSIBCorrente_title(), true, true, false, datiContabiliSIBCorrenteForm);
	}
	
	public void refreshListaDatiContabiliSIBCorrente(final ServiceCallback<Record> callback) {
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		if(isAttivaRequestMovimentiDaAMC()) {
			lNuovaPropostaAtto2CompletaDataSource.addParam("flgAttivaRequestMovimentiDaAMC", "true");
		}	
		lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("getListaDatiContabiliSIBCorrente", getRecordToSave(), new DSCallback() {							
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record record = response.getData()[0];
					listaDatiContabiliSIBCorrenteItem.setData(record.getAttributeAsRecordList("listaDatiContabiliSIBCorrente"));
					if(record.getAttribute("errorMessageDatiContabiliSIBCorrente") != null && !"".equals(record.getAttribute("errorMessageDatiContabiliSIBCorrente"))) {
						listaDatiContabiliSIBCorrenteItem.setGridEmptyMessage(record.getAttribute("errorMessageDatiContabiliSIBCorrente"));
					} else {
						listaDatiContabiliSIBCorrenteItem.setGridEmptyMessage(I18NUtil.getMessages().nuovaPropostaAtto2_detail_listaDatiContabiliSIB_emptyMessage());
					}					
					redrawTabForms(_TAB_DATI_SPESA_CORRENTE_ID);
					if(callback != null) {
						callback.execute(record);
					}
				} 				
			}
		}, new DSRequest());
	}
	
	protected void createDatiContabiliSIBCorrenteForm() {
		
		datiContabiliSIBCorrenteForm = new DynamicForm();
		datiContabiliSIBCorrenteForm.setValuesManager(vm);
		datiContabiliSIBCorrenteForm.setWidth100();
		datiContabiliSIBCorrenteForm.setPadding(5);
		datiContabiliSIBCorrenteForm.setWrapItemTitles(false);
		datiContabiliSIBCorrenteForm.setNumCols(20);
		datiContabiliSIBCorrenteForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		datiContabiliSIBCorrenteForm.setTabSet(tabSet);
		datiContabiliSIBCorrenteForm.setTabID(_TAB_DATI_SPESA_CORRENTE_ID);
//		if(!showDetailSectionNoteCorrente()) {
//			datiContabiliSIBCorrenteForm.setHeight100();
//		}
		
		listaDatiContabiliSIBCorrenteItem = new ListaDatiContabiliSIBItem("listaDatiContabiliSIBCorrente") {
			
			@Override
			public String getTitleCodiceGAMIPBM() {
				String label = getLabelAttributoCustomCablato("LABEL_CAMPO_SIB_COD_SECONDARIO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return super.getTitleCodiceGAMIPBM();
			}
			
			@Override
			public boolean isShowDatiStoriciButton() {
				return isModalitaGrigliaCorrente() && isPresentiDatiContabiliSIBCorrente() && isPresentiDatiStoriciCorrente();
			}
			
			public void onClickDatiStoriciButton() {
				DatiContabiliStoriciWindow lDatiContabiliStoriciWindow = new DatiContabiliStoriciWindow("datiContabiliStoriciWindow", invioDatiSpesaCorrenteForm.getValueAsRecordList("listaInvioDatiSpesaCorrente")) {
					
					@Override
					public String getSIBDataSourceName() {
						return "SIBDataSource";
					}
				};
				lDatiContabiliStoriciWindow.show();
			}
			
			public void onClickRefreshListButton() {
				refreshListaDatiContabiliSIBCorrente(new ServiceCallback<Record>() {
					
					@Override
					public void execute(Record object) {
						showHideSections();						
						afterShow();
						controllaTotali(false);
					}
				});
			}
		};
		listaDatiContabiliSIBCorrenteItem.setGridEmptyMessage(I18NUtil.getMessages().nuovaPropostaAtto2_detail_listaDatiContabiliSIB_emptyMessage());
		listaDatiContabiliSIBCorrenteItem.setStartRow(true);
		listaDatiContabiliSIBCorrenteItem.setShowTitle(false);
//		if(!showDetailSectionNoteCorrente()) {
//			listaDatiContabiliSIBCorrenteItem.setHeight("95%");
//		} else {
			listaDatiContabiliSIBCorrenteItem.setHeight(245);
//		}
		listaDatiContabiliSIBCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showDetailSectionDatiContabiliSIBCorrente();
			}
		});
		
		datiContabiliSIBCorrenteForm.setFields(listaDatiContabiliSIBCorrenteItem);	
	}

	public boolean showDetailSectionInvioDatiSpesaCorrente() {
		return isModalitaGrigliaCorrente() && !isPresentiDatiContabiliSIBCorrente();
	}
	
	protected void createDetailSectionInvioDatiSpesaCorrente() {
		
		createInvioDatiSpesaCorrenteForm();
		
		detailSectionInvioDatiSpesaCorrente = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionInvioDatiSpesaCorrente_title(), true, true, false, invioDatiSpesaCorrenteForm);
	}
	
	protected void createInvioDatiSpesaCorrenteForm() {
		
		invioDatiSpesaCorrenteForm = new DynamicForm();
		invioDatiSpesaCorrenteForm.setValuesManager(vm);
		invioDatiSpesaCorrenteForm.setWidth100();
		invioDatiSpesaCorrenteForm.setPadding(5);
		invioDatiSpesaCorrenteForm.setWrapItemTitles(false);
		invioDatiSpesaCorrenteForm.setNumCols(20);
		invioDatiSpesaCorrenteForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		invioDatiSpesaCorrenteForm.setTabSet(tabSet);
		invioDatiSpesaCorrenteForm.setTabID(_TAB_DATI_SPESA_CORRENTE_ID);
//		if(!showDetailSectionNoteCorrente()) {
//			invioDatiSpesaCorrenteForm.setHeight100();
//		}
		
		listaInvioDatiSpesaCorrenteItem = new ListaInvioDatiSpesaItem("listaInvioDatiSpesaCorrente") {
					
			@Override
			public String getTitleCodiceGAMIPBM() {
				String label = getLabelAttributoCustomCablato("LABEL_CAMPO_SIB_COD_SECONDARIO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return super.getTitleCodiceGAMIPBM();
			}
			
			@Override
			public boolean isEsclusoCIGProposta() {
				return isEsclusoCIG();
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
			@Override
			public HashSet<String> getVociPEGNoVerifDisp() {
				return vociPEGNoVerifDisp;
			}
			
			@Override
			public String getSIBDataSourceName() {
				return "SIBDataSource";
			}
			
			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
			
			public void onClickRefreshListButton() {
				refreshListaDatiContabiliSIBCorrente(new ServiceCallback<Record>() {
					
					@Override
					public void execute(Record object) {
						showHideSections();						
						afterShow();
						controllaTotali(false);
					}
				});														
			}
		};
		listaInvioDatiSpesaCorrenteItem.setStartRow(true);
		listaInvioDatiSpesaCorrenteItem.setShowTitle(false);
//		if(!showDetailSectionNoteCorrente()) {
//			listaInvioDatiSpesaCorrenteItem.setHeight("95%");
//		} else {
			listaInvioDatiSpesaCorrenteItem.setHeight(245);
//		}
		listaInvioDatiSpesaCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionInvioDatiSpesaCorrente();
			}
		});
		
		invioDatiSpesaCorrenteForm.setFields(listaInvioDatiSpesaCorrenteItem);	
	}
	
	public boolean showDetailSectionFileXlsCorrente() {
		String prenotazioneSpesaSIBDiCorrente = "";
		String[] prenotazioneSpesaSnteIBDiCorrenteValoriPossibili = getValoriPossibiliPrenotazioneSpesaSIBDiCorrenteItem();
		if(prenotazioneSpesaSnteIBDiCorrenteValoriPossibili != null && prenotazioneSpesaSnteIBDiCorrenteValoriPossibili.length == 1) {
			prenotazioneSpesaSIBDiCorrente = prenotazioneSpesaSnteIBDiCorrenteValoriPossibili[0];
		} else {
			prenotazioneSpesaSIBDiCorrente = getValueAsString("prenotazioneSpesaSIBDiCorrente");
		}
		return prenotazioneSpesaSIBDiCorrente.equals(_PRENOTAZIONE_SPESA_SIB_DI_OPZIONE_B) && getValueAsString("modalitaInvioDatiSpesaARagioneriaCorrente").equals(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B2); 
	}
	
	protected void createDetailSectionFileXlsCorrente() {
		
		createFileXlsCorrenteForm();
		
		detailSectionFileXlsCorrente = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionFileXlsCorrente_title(), true, true, false, fileXlsCorrenteForm);
	}
	
	protected void createFileXlsCorrenteForm() {
		
		fileXlsCorrenteForm = new DynamicForm();
		fileXlsCorrenteForm.setValuesManager(vm);
		fileXlsCorrenteForm.setWidth100();
		fileXlsCorrenteForm.setPadding(5);
		fileXlsCorrenteForm.setWrapItemTitles(false);
		fileXlsCorrenteForm.setNumCols(20);
		fileXlsCorrenteForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		fileXlsCorrenteForm.setTabSet(tabSet);
		fileXlsCorrenteForm.setTabID(_TAB_DATI_SPESA_CORRENTE_ID);
		fileXlsCorrenteForm.setHeight(1);	
		
		fileXlsCorrenteItem = new DocumentItem() {
			
			@Override
			public int getWidth() {
				return 250;
			}
			
			@Override
			public boolean showVisualizzaVersioniMenuItem() {
				return false;
			}
			
			@Override
			public boolean showAcquisisciDaScannerMenuItem() {
				return false;
			}
			
			@Override
			public boolean showFirmaMenuItem() {
				return false;
			}
			
			@Override
			public boolean isFormatoAmmesso(InfoFileRecord info) {	
				String correctName = info != null ? info.getCorrectFileName() : "";
				return correctName.toLowerCase().endsWith(".xls") || correctName.toLowerCase().endsWith(".xlsx");
			}
		};
		fileXlsCorrenteItem.setStartRow(true);
		fileXlsCorrenteItem.setName("fileXlsCorrente");
		fileXlsCorrenteItem.setShowTitle(false);
		fileXlsCorrenteItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionFileXlsCorrente();
			}
		});
		/*
		fileXlsCorrenteItem.setAttribute("obbligatorio", true);
		fileXlsCorrenteItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTabDatiSpesaCorrente() && showDetailSectionFileXlsCorrente() && isDatiSpesaEditabili() && isEsitoTaskSelezionatoOk();
			}
		}));
		*/
		
		nomeFileTracciatoXlsCorrenteItem = new HiddenItem("nomeFileTracciatoXlsCorrente");
		uriFileTracciatoXlsCorrenteItem = new HiddenItem("uriFileTracciatoXlsCorrente");
		
		scaricaTracciatoXlsCorrenteButton = new ImgButtonItem("scaricaTracciatoXlsCorrenteButton", "file/download_manager.png", "Scarica tracciato");
		scaricaTracciatoXlsCorrenteButton.setAlwaysEnabled(true);
		scaricaTracciatoXlsCorrenteButton.setColSpan(1);
		scaricaTracciatoXlsCorrenteButton.setIconWidth(16);
		scaricaTracciatoXlsCorrenteButton.setIconHeight(16);
		scaricaTracciatoXlsCorrenteButton.setIconVAlign(VerticalAlignment.BOTTOM);
		scaricaTracciatoXlsCorrenteButton.setAlign(Alignment.LEFT);
		scaricaTracciatoXlsCorrenteButton.setWidth(16);
		scaricaTracciatoXlsCorrenteButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				if(uriFileTracciatoXlsCorrenteItem.getValue() != null && !"".equals((String) uriFileTracciatoXlsCorrenteItem.getValue())) {
					Record lRecord = new Record();
					if(nomeFileTracciatoXlsCorrenteItem.getValue() != null && !"".equals((String) nomeFileTracciatoXlsCorrenteItem.getValue())) {
						lRecord.setAttribute("displayFilename", nomeFileTracciatoXlsCorrenteItem.getValue());
					} else {
						lRecord.setAttribute("displayFilename", "Tracciato_SIB.xls");
					}
					lRecord.setAttribute("uri", (String) uriFileTracciatoXlsCorrenteItem.getValue());
					lRecord.setAttribute("sbustato", "false");
					lRecord.setAttribute("remoteUri", "true");
					DownloadFile.downloadFromRecord(lRecord, "FileToExtractBean");
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessun tracciato disponibile", "", MessageType.ERROR));
				}
			}
		});
		scaricaTracciatoXlsCorrenteButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionFileXlsCorrente();
			}
		});
		
		fileXlsCorrenteForm.setFields(fileXlsCorrenteItem, nomeFileTracciatoXlsCorrenteItem, uriFileTracciatoXlsCorrenteItem, scaricaTracciatoXlsCorrenteButton);	
	}
	
	public boolean showDetailSectionNoteCorrente() {
		return showNoteCorrenteItem();
	}
	
	public String getTitleDetailSectionNoteCorrente() {
		return getTitleNoteCorrenteItem();
	}
	
	public boolean isRequiredDetailSectionNoteCorrente() {
		return isRequiredNoteCorrenteItem();		
	}
	
	public boolean showNoteCorrenteItem() {
		return showAttributoCustomCablato("NOTE_CONT_CORR");
	}
	
	public String getTitleNoteCorrenteItem() {
		String label = getLabelAttributoCustomCablato("NOTE_CONT_CORR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionNoteCorrente_title();
	}
	
	public boolean isRequiredNoteCorrenteItem() {
		return showNoteCorrenteItem() && getFlgObbligatorioAttributoCustomCablato("NOTE_CONT_CORR");
	}
	
	public int getAltezzaInRigheNoteCorrenteItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("NOTE_CONT_CORR");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileNoteCorrenteItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("NOTE_CONT_CORR");
	}
	
	public boolean getFlgIgnoraGestioneOmissisNoteCorrenteItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("NOTE_CONT_CORR");
	}
	
	protected void createDetailSectionNoteCorrente() {
		
		createNoteCorrenteForm();
		
		detailSectionNoteCorrente = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionNoteCorrente(), true, true, isRequiredDetailSectionNoteCorrente(), noteCorrenteForm);
	}
	
	protected void createNoteCorrenteForm() {
		
		noteCorrenteForm = new DynamicForm();
		noteCorrenteForm.setValuesManager(vm);
		noteCorrenteForm.setWidth100();
		noteCorrenteForm.setPadding(5);
		noteCorrenteForm.setWrapItemTitles(false);
		noteCorrenteForm.setNumCols(20);
		noteCorrenteForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		noteCorrenteForm.setTabSet(tabSet);
		noteCorrenteForm.setTabID(_TAB_DATI_SPESA_CORRENTE_ID);
		noteCorrenteForm.setHeight(1);	
				
		noteCorrenteItem = new CKEditorItem("noteCorrente", -1, "STANDARD", getAltezzaInRigheNoteCorrenteItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileNoteCorrenteItem(), getFlgIgnoraGestioneOmissisNoteCorrenteItem()) {
			
			@Override
			public Boolean validate() {
				if(showNoteCorrenteItem()) {
					return super.validate();
				}
				return true;			
			}
			
			@Override
			public void setCanEdit(Boolean canEdit) {
				super.setCanEdit(getFlgEditabileAttributoCustomCablato("NOTE_CONT_CORR") ? canEdit : false);
			}
		};
		noteCorrenteItem.setShowTitle(false);
		noteCorrenteItem.setColSpan(20);
		noteCorrenteItem.setWidth("100%");
		noteCorrenteItem.setRequired(isRequiredNoteCorrenteItem());
		noteCorrenteItem.setVisible(showNoteCorrenteItem());			
				
		noteCorrenteForm.setFields(noteCorrenteItem);			
	}
	
	/*********************************
	 * TAB DATI SPESA CONTO CAPITALE *
	 *********************************/
	
	public boolean showTabDatiSpesaContoCapitale() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1 && _FLG_NO.equalsIgnoreCase(flgSpesaValoriPossibili[0])) {
			return false;
		}
		return show_TAB_DATI_SPESA_CONTO_CAPITALE() && (!isAvvioPropostaAtto() && (isAttivoSIB() && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA") && showAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CONTO_CAP")));
	}
	
	public String getTitleTabDatiSpesaContoCapitale() {
		String label = getLabelAttributoCustomCablato("LABEL_TAB_DATI_CONT_CAP_SIB");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_tabDatiSpesaContoCapitale_prompt();
	}
	
	public boolean isAttivoTabDatiSpesaContoCapitale() {
		return showTabDatiSpesaContoCapitale() && isDeterminaConSpesa() && !isDeterminaPersonale() && getValueAsBoolean("flgSpesaContoCapitale");
	}
	
	public boolean isModalitaGrigliaContoCapitale() {
		return getValueAsString("modalitaInvioDatiSpesaARagioneriaContoCapitale").equals(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1);
	}
	
	public boolean isPresentiDatiContabiliSIBContoCapitale() {
		return datiContabiliSIBContoCapitaleForm != null && datiContabiliSIBContoCapitaleForm.getValueAsRecordList("listaDatiContabiliSIBContoCapitale") != null && datiContabiliSIBContoCapitaleForm.getValueAsRecordList("listaDatiContabiliSIBContoCapitale").getLength() > 0;
	}
	
	public boolean isPresentiDatiStoriciContoCapitale() {
		return invioDatiSpesaContoCapitaleForm != null && invioDatiSpesaContoCapitaleForm.getValueAsRecordList("listaInvioDatiSpesaContoCapitale") != null && invioDatiSpesaContoCapitaleForm.getValueAsRecordList("listaInvioDatiSpesaContoCapitale").getLength() > 0;
	}
	
	/**
	 * Metodo per costruire il tab "Dati spesa in conto capitale"
	 * 
	 */
	protected void createTabDatiSpesaContoCapitale() {

		tabDatiSpesaContoCapitale = new Tab("<b>" + getTitleTabDatiSpesaContoCapitale() + "</b>");
		tabDatiSpesaContoCapitale.setAttribute("tabID", _TAB_DATI_SPESA_CONTO_CAPITALE_ID);
		tabDatiSpesaContoCapitale.setPrompt(getTitleTabDatiSpesaContoCapitale());
//		if(!showDetailSectionNoteContoCapitale()) {
//			VLayout layoutDatiSpesaContoCapitale = getLayoutDatiSpesaContoCapitale();
//			layoutDatiSpesaContoCapitale.setHeight100();
//			VLayout layoutTabDatiSpesaContoCapitale = new VLayout();
//			layoutTabDatiSpesaContoCapitale.setWidth100();
//			layoutTabDatiSpesaContoCapitale.setHeight100();
//			layoutTabDatiSpesaContoCapitale.addMember(layoutDatiSpesaContoCapitale);
//			layoutTabDatiSpesaContoCapitale.setRedrawOnResize(true);
//			tabDatiSpesaContoCapitale.setPane(layoutTabDatiSpesaContoCapitale);
//		} else {
		tabDatiSpesaContoCapitale.setPane(createTabPane(getLayoutDatiSpesaContoCapitale()));
//		}
	}
	
	/**
	 * Metodo che restituisce il layout del tab "Dati spesa in conto capitale"
	 * 
	 */
	protected VLayout getLayoutDatiSpesaContoCapitale() {
		
		VLayout layoutDatiSpesaContoCapitale = new VLayout(5);
		
		createDetailSectionOpzioniSpesaContoCapitale();
		layoutDatiSpesaContoCapitale.addMember(detailSectionOpzioniSpesaContoCapitale);
		
		createDetailSectionDatiContabiliSIBContoCapitale();
		detailSectionDatiContabiliSIBContoCapitale.setVisible(false);		
		layoutDatiSpesaContoCapitale.addMember(detailSectionDatiContabiliSIBContoCapitale);
		
		createDetailSectionInvioDatiSpesaContoCapitale();
		detailSectionInvioDatiSpesaContoCapitale.setVisible(false);		
		layoutDatiSpesaContoCapitale.addMember(detailSectionInvioDatiSpesaContoCapitale);
		
		createDetailSectionFileXlsContoCapitale();
		detailSectionFileXlsContoCapitale.setVisible(false);		
		layoutDatiSpesaContoCapitale.addMember(detailSectionFileXlsContoCapitale);
		
//		createDetailSectionAllegatiContoCapitale();
//		layoutDatiSpesaContoCapitale.addMember(detailSectionAllegatiContoCapitale);
		
		createDetailSectionNoteContoCapitale();
		layoutDatiSpesaContoCapitale.addMember(detailSectionNoteContoCapitale);
		
		return layoutDatiSpesaContoCapitale;
	}
	
	protected void createDetailSectionOpzioniSpesaContoCapitale() {
		
		createOpzioniSpesaContoCapitaleForm();
		
		detailSectionOpzioniSpesaContoCapitale = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionOpzioniSpesaContoCapitale_title(), true, true, false, opzioniSpesaContoCapitaleForm1, opzioniSpesaContoCapitaleForm2);
	}
	
	public LinkedHashMap<String, String> buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap() {
		LinkedHashMap<String, String> modalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap = new LinkedHashMap<String, String>();
		modalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap.put(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1, I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_opzioneB1());
		modalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap.put(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B2, I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_opzioneB2());		
		if(getValueAsBoolean("flgImpegniContoCapitaleGiaRilasciati")) {
			modalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap.put(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B3, I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_opzioneB3());					
		}
		if(getValueAsBoolean("flgSoloSubImpSubCrono")) {
			modalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap.put(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B4, I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_opzioneB4());					
		}
		return modalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap;
	}
	
	protected void createOpzioniSpesaContoCapitaleForm() {
		
		opzioniSpesaContoCapitaleForm1 = new DynamicForm();
		opzioniSpesaContoCapitaleForm1.setValuesManager(vm);
		opzioniSpesaContoCapitaleForm1.setWidth100();
		opzioniSpesaContoCapitaleForm1.setPadding(5);
		opzioniSpesaContoCapitaleForm1.setWrapItemTitles(false);
		opzioniSpesaContoCapitaleForm1.setNumCols(20);
		opzioniSpesaContoCapitaleForm1.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniSpesaContoCapitaleForm1.setTabSet(tabSet);
		opzioniSpesaContoCapitaleForm1.setTabID(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
		opzioniSpesaContoCapitaleForm1.setHeight(1);
		
		flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem = new CheckboxItem("flgDisattivaAutoRequestDatiContabiliSIBContoCapitale", "disattiva caricamento automatico da SIB all'apertura del task");
		flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem.setDefaultValue(false);
		flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem.setStartRow(true);
		flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem.setColSpan(10);
		flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem.setWidth("*");		
		
		opzioniSpesaContoCapitaleForm1.setFields(flgDisattivaAutoRequestDatiContabiliSIBContoCapitaleItem);
		
		opzioniSpesaContoCapitaleForm2 = new DynamicForm();
		opzioniSpesaContoCapitaleForm2.setValuesManager(vm);
		opzioniSpesaContoCapitaleForm2.setWidth100();
		opzioniSpesaContoCapitaleForm2.setPadding(5);
		opzioniSpesaContoCapitaleForm2.setWrapItemTitles(false);
		opzioniSpesaContoCapitaleForm2.setNumCols(20);
		opzioniSpesaContoCapitaleForm2.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opzioniSpesaContoCapitaleForm2.setTabSet(tabSet);
		opzioniSpesaContoCapitaleForm2.setTabID(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
		opzioniSpesaContoCapitaleForm2.setHeight(1);
		
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem = new RadioGroupItem("modalitaInvioDatiSpesaARagioneriaContoCapitale", I18NUtil.getMessages().nuovaPropostaAtto2_detail_modalitaInvioDatiSpesaARagioneria_title());
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setStartRow(true);		
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValueMap(buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap());
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setVertical(false);
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setWrap(false);
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setAttribute("obbligatorio", true);
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setDefaultValue(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B1);
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isAttivoTabDatiSpesaContoCapitale() && isDatiSpesaEditabili();
			}
		}));
		modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
				showHideSections();
			}
		});
	
		opzioniSpesaContoCapitaleForm2.setFields(modalitaInvioDatiSpesaARagioneriaContoCapitaleItem);	
	}
	
	public boolean showDetailSectionDatiContabiliSIBContoCapitale() {
		return isPresentiDatiContabiliSIBContoCapitale();
	}
	
	protected void createDetailSectionDatiContabiliSIBContoCapitale() {

		createDatiContabiliSIBContoCapitaleForm();
		
		detailSectionDatiContabiliSIBContoCapitale = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionDatiContabiliSIBContoCapitale_title(), true, true, false, datiContabiliSIBContoCapitaleForm);
	}
	
	public void refreshListaDatiContabiliSIBContoCapitale(final ServiceCallback<Record> callback) {
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		if(isAttivaRequestMovimentiDaAMC()) {
			lNuovaPropostaAtto2CompletaDataSource.addParam("flgAttivaRequestMovimentiDaAMC", "true");
		}	
		lNuovaPropostaAtto2CompletaDataSource.performCustomOperation("getListaDatiContabiliSIBContoCapitale", getRecordToSave(), new DSCallback() {							
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record record = response.getData()[0];
					listaDatiContabiliSIBContoCapitaleItem.setData(record.getAttributeAsRecordList("listaDatiContabiliSIBContoCapitale"));
					if(record.getAttribute("errorMessageDatiContabiliSIBContoCapitale") != null && !"".equals(record.getAttribute("errorMessageDatiContabiliSIBContoCapitale"))) {						
						listaDatiContabiliSIBContoCapitaleItem.setGridEmptyMessage(record.getAttribute("errorMessageDatiContabiliSIBContoCapitale"));
					} else {
						listaDatiContabiliSIBContoCapitaleItem.setGridEmptyMessage(I18NUtil.getMessages().nuovaPropostaAtto2_detail_listaDatiContabiliSIB_emptyMessage());						
					}
					redrawTabForms(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
					if(callback != null) {
						callback.execute(record);
					}					
				} 				
			}
		}, new DSRequest());
	}
	
	protected void createDatiContabiliSIBContoCapitaleForm() {
		
		datiContabiliSIBContoCapitaleForm = new DynamicForm();
		datiContabiliSIBContoCapitaleForm.setValuesManager(vm);
		datiContabiliSIBContoCapitaleForm.setWidth100();
		datiContabiliSIBContoCapitaleForm.setPadding(5);
		datiContabiliSIBContoCapitaleForm.setWrapItemTitles(false);
		datiContabiliSIBContoCapitaleForm.setNumCols(20);
		datiContabiliSIBContoCapitaleForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		datiContabiliSIBContoCapitaleForm.setTabSet(tabSet);
		datiContabiliSIBContoCapitaleForm.setTabID(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
//		if(!showDetailSectionNoteContoCapitale()) {
//			datiContabiliSIBContoCapitaleForm.setHeight100();
//		}
		
		listaDatiContabiliSIBContoCapitaleItem = new ListaDatiContabiliSIBItem("listaDatiContabiliSIBContoCapitale") {
			
			@Override
			public String getTitleCodiceGAMIPBM() {
				String label = getLabelAttributoCustomCablato("LABEL_CAMPO_SIB_COD_SECONDARIO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return super.getTitleCodiceGAMIPBM();
			}
			
			@Override
			public boolean isShowDatiStoriciButton() {
				return isModalitaGrigliaContoCapitale() && isPresentiDatiContabiliSIBContoCapitale() && isPresentiDatiStoriciContoCapitale();
			}
			
			public void onClickDatiStoriciButton() {
				DatiContabiliStoriciWindow lDatiContabiliStoriciWindow = new DatiContabiliStoriciWindow("datiContabiliStoriciWindow", invioDatiSpesaContoCapitaleForm.getValueAsRecordList("listaInvioDatiSpesaContoCapitale")) {
					
					@Override
					public String getSIBDataSourceName() {
						return "SIBDataSource";
					}
				};
				lDatiContabiliStoriciWindow.show();
			}
			
			public void onClickRefreshListButton() {
				refreshListaDatiContabiliSIBContoCapitale(new ServiceCallback<Record>() {
					
					@Override
					public void execute(Record object) {
						showHideSections();
						afterShow();
						controllaTotali(false);
					}
				});
			}
		};
		listaDatiContabiliSIBContoCapitaleItem.setGridEmptyMessage(I18NUtil.getMessages().nuovaPropostaAtto2_detail_listaDatiContabiliSIB_emptyMessage());
		listaDatiContabiliSIBContoCapitaleItem.setStartRow(true);
		listaDatiContabiliSIBContoCapitaleItem.setShowTitle(false);
//		if(!showDetailSectionNoteContoCapitale()) {
//			listaDatiContabiliSIBContoCapitaleItem.setHeight("95%");
//		} else {
			listaDatiContabiliSIBContoCapitaleItem.setHeight(245);			
//		}
		listaDatiContabiliSIBContoCapitaleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showDetailSectionDatiContabiliSIBContoCapitale();
			}
		});
		
		datiContabiliSIBContoCapitaleForm.setFields(listaDatiContabiliSIBContoCapitaleItem);	
	}
	
	public boolean showDetailSectionInvioDatiSpesaContoCapitale() {
		return isModalitaGrigliaContoCapitale() && !isPresentiDatiContabiliSIBContoCapitale();
	}
	
	protected void createDetailSectionInvioDatiSpesaContoCapitale() {
		
		createInvioDatiSpesaContoCapitaleForm();
		
		detailSectionInvioDatiSpesaContoCapitale = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionInvioDatiSpesaContoCapitale_title(), true, true, false, invioDatiSpesaContoCapitaleForm);
	}
	
	protected void createInvioDatiSpesaContoCapitaleForm() {
		
		invioDatiSpesaContoCapitaleForm = new DynamicForm();
		invioDatiSpesaContoCapitaleForm.setValuesManager(vm);
		invioDatiSpesaContoCapitaleForm.setWidth100();
		invioDatiSpesaContoCapitaleForm.setPadding(5);
		invioDatiSpesaContoCapitaleForm.setWrapItemTitles(false);
		invioDatiSpesaContoCapitaleForm.setNumCols(20);
		invioDatiSpesaContoCapitaleForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		invioDatiSpesaContoCapitaleForm.setTabSet(tabSet);
		invioDatiSpesaContoCapitaleForm.setTabID(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
//		if(!showDetailSectionNoteContoCapitale()) {
//			invioDatiSpesaContoCapitaleForm.setHeight100();
//		}
		
		listaInvioDatiSpesaContoCapitaleItem = new ListaInvioDatiSpesaItem("listaInvioDatiSpesaContoCapitale") {
			
			@Override
			public boolean showNumeroCrono() {
				return AurigaLayout.getParametroDBAsBoolean("SHOW_CRONO_IN_DATI_CONTO_CAP_SIB");
			}
			
			@Override
			public String getTitleCodiceGAMIPBM() {
				String label = getLabelAttributoCustomCablato("LABEL_CAMPO_SIB_COD_SECONDARIO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return super.getTitleCodiceGAMIPBM();
			}
			
			@Override
			public boolean isEsclusoCIGProposta() {
				return isEsclusoCIG();
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
			@Override
			public HashSet<String> getVociPEGNoVerifDisp() {
				return vociPEGNoVerifDisp;
			}
			
			@Override
			public String getSIBDataSourceName() {
				return "SIBDataSource";
			}
			
			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
			
			public void onClickRefreshListButton() {
				refreshListaDatiContabiliSIBContoCapitale(new ServiceCallback<Record>() {
					
					@Override
					public void execute(Record object) {
						showHideSections();
						afterShow();
						controllaTotali(false);
					}
				});
			}
		};
		listaInvioDatiSpesaContoCapitaleItem.setStartRow(true);
		listaInvioDatiSpesaContoCapitaleItem.setShowTitle(false);
//		if(!showDetailSectionNoteContoCapitale()) {
//			listaInvioDatiSpesaContoCapitaleItem.setHeight("95%");
//		} else {
			listaInvioDatiSpesaContoCapitaleItem.setHeight(245);	
//		}
		listaInvioDatiSpesaContoCapitaleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionInvioDatiSpesaContoCapitale();
			}
		});
		
		invioDatiSpesaContoCapitaleForm.setFields(listaInvioDatiSpesaContoCapitaleItem);	
	}
	
	public boolean showDetailSectionFileXlsContoCapitale() {
		return getValueAsString("modalitaInvioDatiSpesaARagioneriaContoCapitale").equals(_MODALITA_INVIO_DATI_SPESA_RAGIONERIA_OPZIONE_B2);
	}
	
	protected void createDetailSectionFileXlsContoCapitale() {
		
		createFileXlsContoCapitaleForm();
		
		detailSectionFileXlsContoCapitale = new NuovaPropostaAtto2CompletaDetailSection(I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionFileXlsContoCapitale_title(), true, true, false, fileXlsContoCapitaleForm);
	}
	
	protected void createFileXlsContoCapitaleForm() {
		
		fileXlsContoCapitaleForm = new DynamicForm();
		fileXlsContoCapitaleForm.setValuesManager(vm);
		fileXlsContoCapitaleForm.setWidth100();
		fileXlsContoCapitaleForm.setPadding(5);
		fileXlsContoCapitaleForm.setWrapItemTitles(false);
		fileXlsContoCapitaleForm.setNumCols(20);
		fileXlsContoCapitaleForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		fileXlsContoCapitaleForm.setTabSet(tabSet);
		fileXlsContoCapitaleForm.setTabID(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
		fileXlsContoCapitaleForm.setHeight(1);
		
		fileXlsContoCapitaleItem = new DocumentItem() {
			
			@Override
			public int getWidth() {
				return 250;
			}
			
			@Override
			public boolean showVisualizzaVersioniMenuItem() {
				return false;
			}
			
			@Override
			public boolean showAcquisisciDaScannerMenuItem() {
				return false;
			}
			
			@Override
			public boolean showFirmaMenuItem() {
				return false;
			}		
			
			@Override
			public boolean isFormatoAmmesso(InfoFileRecord info) {	
				String correctName = info != null ? info.getCorrectFileName() : "";
				return correctName.toLowerCase().endsWith(".xls") || correctName.toLowerCase().endsWith(".xlsx");
			}
		};
		fileXlsContoCapitaleItem.setStartRow(true);
		fileXlsContoCapitaleItem.setName("fileXlsContoCapitale");
		fileXlsContoCapitaleItem.setShowTitle(false);
		fileXlsContoCapitaleItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionFileXlsContoCapitale();
			}
		});
		/*
		fileXlsContoCapitaleItem.setAttribute("obbligatorio", true);
		fileXlsContoCapitaleItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTabDatiSpesaContoCapitale() && showDetailSectionFileXlsContoCapitale() && isDatiSpesaEditabili() && isEsitoTaskSelezionatoOk();
			}
		}));
		*/
		
		nomeFileTracciatoXlsContoCapitaleItem = new HiddenItem("nomeFileTracciatoXlsContoCapitale");
		uriFileTracciatoXlsContoCapitaleItem = new HiddenItem("uriFileTracciatoXlsContoCapitale");
		
		scaricaTracciatoXlsContoCapitaleButton = new ImgButtonItem("scaricaTracciatoXlsContoCapitaleButton", "file/download_manager.png", "Scarica tracciato");
		scaricaTracciatoXlsContoCapitaleButton.setAlwaysEnabled(true);
		scaricaTracciatoXlsContoCapitaleButton.setColSpan(1);
		scaricaTracciatoXlsContoCapitaleButton.setIconWidth(16);
		scaricaTracciatoXlsContoCapitaleButton.setIconHeight(16);
		scaricaTracciatoXlsContoCapitaleButton.setIconVAlign(VerticalAlignment.BOTTOM);
		scaricaTracciatoXlsContoCapitaleButton.setAlign(Alignment.LEFT);
		scaricaTracciatoXlsContoCapitaleButton.setWidth(16);
		scaricaTracciatoXlsContoCapitaleButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				if(uriFileTracciatoXlsContoCapitaleItem.getValue() != null && !"".equals((String) uriFileTracciatoXlsContoCapitaleItem.getValue())) {
					Record lRecord = new Record();
					if(nomeFileTracciatoXlsContoCapitaleItem.getValue() != null && !"".equals((String) nomeFileTracciatoXlsContoCapitaleItem.getValue())) {
						lRecord.setAttribute("displayFilename", nomeFileTracciatoXlsContoCapitaleItem.getValue());
					} else {
						lRecord.setAttribute("displayFilename", "Tracciato_SIB.xls");
					}
					lRecord.setAttribute("uri", (String) uriFileTracciatoXlsContoCapitaleItem.getValue());
					lRecord.setAttribute("sbustato", "false");
					lRecord.setAttribute("remoteUri", "true");
					DownloadFile.downloadFromRecord(lRecord, "FileToExtractBean");
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessun tracciato disponibile", "", MessageType.ERROR));
				}
			}
		});
		scaricaTracciatoXlsContoCapitaleButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionFileXlsContoCapitale();
			}
		});
		
		fileXlsContoCapitaleForm.setFields(fileXlsContoCapitaleItem, nomeFileTracciatoXlsContoCapitaleItem, uriFileTracciatoXlsContoCapitaleItem, scaricaTracciatoXlsContoCapitaleButton);	
	}
	
	public boolean showDetailSectionNoteContoCapitale() {
		return showNoteContoCapitaleItem();
	}
	
	public String getTitleDetailSectionNoteContoCapitale() {
		return getTitleNoteContoCapitaleItem();
	}
	
	public boolean isRequiredDetailSectionNoteContoCapitale() {
		return isRequiredNoteContoCapitaleItem();		
	}
	
	public boolean showNoteContoCapitaleItem() {
		return showAttributoCustomCablato("NOTE_CONT_CAP");
	}
	
	public String getTitleNoteContoCapitaleItem() {
		String label = getLabelAttributoCustomCablato("NOTE_CONT_CAP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return I18NUtil.getMessages().nuovaPropostaAtto2_detail_detailSectionNoteContoCapitale_title();
	}
	
	public boolean isRequiredNoteContoCapitaleItem() {
		return showNoteContoCapitaleItem() && getFlgObbligatorioAttributoCustomCablato("NOTE_CONT_CAP");
	}
	
	public int getAltezzaInRigheNoteContoCapitaleItem() {
		Integer altezzaInRighe = getAltezzaInRigheAttributoCustomCablato("NOTE_CONT_CAP");
		return altezzaInRighe != null ? altezzaInRighe.intValue() : 10;
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileNoteContoCapitaleItem() {
		return getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato("NOTE_CONT_CAP");
	}
	
	public boolean getFlgIgnoraGestioneOmissisNoteContoCapitaleItem() {
		return getFlgIgnoraGestioneOmissisAttributoCustomCablato("NOTE_CONT_CAP");
	}
	
	protected void createDetailSectionNoteContoCapitale() {
		
		createNoteContoCapitaleForm();
		
		detailSectionNoteContoCapitale = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionNoteContoCapitale(), true, true, isRequiredDetailSectionNoteContoCapitale(), noteContoCapitaleForm);
	}
	
	protected void createNoteContoCapitaleForm() {
		
		noteContoCapitaleForm = new DynamicForm();
		noteContoCapitaleForm.setValuesManager(vm);
		noteContoCapitaleForm.setWidth100();
		noteContoCapitaleForm.setPadding(5);
		noteContoCapitaleForm.setWrapItemTitles(false);
		noteContoCapitaleForm.setNumCols(20);
		noteContoCapitaleForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		noteContoCapitaleForm.setTabSet(tabSet);
		noteContoCapitaleForm.setTabID(_TAB_DATI_SPESA_CONTO_CAPITALE_ID);
		noteContoCapitaleForm.setHeight(1);
				
		noteContoCapitaleItem = new CKEditorItem("noteContoCapitale", -1, "STANDARD", getAltezzaInRigheNoteContoCapitaleItem(), -1, "", false, false, getFlgAbilitaIniezioneCkEditorDaFileNoteContoCapitaleItem(), getFlgIgnoraGestioneOmissisNoteContoCapitaleItem()) {
			
			@Override
			public Boolean validate() {
				if(showNoteContoCapitaleItem()) {
					return super.validate();
				}
				return true;			
			}
			
			@Override
			public void setCanEdit(Boolean canEdit) {
				super.setCanEdit(getFlgEditabileAttributoCustomCablato("NOTE_CONT_CAP") ? canEdit : false);
			}
		};
		noteContoCapitaleItem.setShowTitle(false);
		noteContoCapitaleItem.setColSpan(20);
		noteContoCapitaleItem.setWidth("100%");
		noteContoCapitaleItem.setRequired(isRequiredNoteContoCapitaleItem());
		noteContoCapitaleItem.setVisible(showNoteContoCapitaleItem());
				
		noteContoCapitaleForm.setFields(noteContoCapitaleItem);			
	}
	
	/********************************** 
	 * TAB AGGREGATO/SMISTAMENTO ACTA *
	 **********************************/	
	
	public boolean showTabAggregatoSmistamentoACTA() {		
		String fascSmistACTA = AurigaLayout.getParametroDB("FASC_SMIST_ACTA");
		return show_TAB_AGGREGATO_SMISTAMENTO_ACTA() && (!isAvvioPropostaAtto() && fascSmistACTA != null && (_MANDATORY.equalsIgnoreCase(fascSmistACTA) || _OPTIONAL.equalsIgnoreCase(fascSmistACTA)));
	}
	
	public String getTitleTabAggregatoSmistamentoACTA() {
		String label = AurigaLayout.getParametroDB("LABEL_TAB_ACTA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Aggregazione documentale/smistamento ACTA";
	}
	
	/**
	 * Metodo per costruire il tab "Aggregato/smistamento ACTA"
	 * 
	 */
	protected void createTabAggregatoSmistamentoACTA() {

		tabAggregatoSmistamentoACTA = new Tab("<b>" + getTitleTabAggregatoSmistamentoACTA() + "</b>");
		tabAggregatoSmistamentoACTA.setAttribute("tabID", _TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		tabAggregatoSmistamentoACTA.setPrompt(getTitleTabAggregatoSmistamentoACTA());
		tabAggregatoSmistamentoACTA.setPane(createTabPane(getLayoutAggregatoSmistamentoACTA()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Aggregato/smistamento ACTA"
	 * 
	 */
	public VLayout getLayoutAggregatoSmistamentoACTA() {

		VLayout layoutAggregatoSmistamentoACTA = new VLayout(5);
		
		createDetailSectionAggregatoSmistamentoACTA();
		layoutAggregatoSmistamentoACTA.addMember(detailSectionAggregatoSmistamentoACTA);
		
		return layoutAggregatoSmistamentoACTA;
	}
	
	public String getTitleDetailSectionAggregatoSmistamentoACTA() {
		if(AurigaLayout.getParametroDBAsBoolean("HIDE_SMIST_TAB_ACTA")) {
			return "Indicazione struttura aggregativa";
		}		
		return "Indicazione struttura aggregativa/smistamento";
	}
	
	public boolean isRequiredDetailSectionAggregatoSmistamentoACTA() {
		String fascSmistACTA = AurigaLayout.getParametroDB("FASC_SMIST_ACTA");
		return showTabAggregatoSmistamentoACTA() && fascSmistACTA != null && _MANDATORY.equalsIgnoreCase(fascSmistACTA);
	}
	
	public boolean isRequiredAggregatoACTA() {
		// Se FASC_SMIST_ACTA = optional rendere comunque obbligatoria la scelta del fascicolo se il campo TASK_RESULT_2_FONDI_PNRR_RADIO è visibile e se il valore selezionato (internal value) è SI 
		String fascSmistACTA = AurigaLayout.getParametroDB("FASC_SMIST_ACTA");
		return showTabAggregatoSmistamentoACTA() && fascSmistACTA != null && isFondiPNRRRadio();		
	}
	
	public boolean showSmistamentoACTAForms() {		
		return !AurigaLayout.getParametroDBAsBoolean("HIDE_SMIST_TAB_ACTA");		
	}
	
	public boolean showVisualizzaScaricaFileACTAForm() {
		String uriPdfCompilazioneTabACTA = AurigaLayout.getParametroDB("URI_PDF_COMPILAZIONE_TAB_ACTA");
		String uriXlsElencoFascSottofasc = AurigaLayout.getParametroDB("URI_XLS_ELENCO_FASC_SOTTOFASC");
		return (uriPdfCompilazioneTabACTA != null && !"".equals(uriPdfCompilazioneTabACTA)) || (uriXlsElencoFascSottofasc != null && !"".equals(uriXlsElencoFascSottofasc));		
	}
	
	protected void createDetailSectionAggregatoSmistamentoACTA() {
		
		createFlgAggregatoACTAForm();		
		createAggregatoACTAForm();	
		createFlgSmistamentoACTAForm();		
		createSmistamentoACTAForm();
		createVisualizzaScaricaFileACTAForm();
		
		detailSectionAggregatoSmistamentoACTA = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionAggregatoSmistamentoACTA(), true, true, isRequiredDetailSectionAggregatoSmistamentoACTA(), flgAggregatoACTAForm, aggregatoACTAForm, flgSmistamentoACTAForm, smistamentoACTAForm, visualizzaScaricaFileACTAForm);
	}	
	
	protected void createFlgAggregatoACTAForm() {
		
		flgAggregatoACTAForm = new DynamicForm();
		flgAggregatoACTAForm.setValuesManager(vm);
		flgAggregatoACTAForm.setWidth100();
		flgAggregatoACTAForm.setPadding(5);
		flgAggregatoACTAForm.setWrapItemTitles(false);
		flgAggregatoACTAForm.setNumCols(20);
		flgAggregatoACTAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		flgAggregatoACTAForm.setTabSet(tabSet);
		flgAggregatoACTAForm.setTabID(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		flgAggregatoACTAForm.setHeight(1);		
	
		flgAggregatoACTAItem = new CheckboxItem("flgAggregatoACTA", "STRUTTURA AGGREGATIVA") {
			
			@Override
			public void setCanEdit(Boolean canEdit) {
				super.setCanEdit(canEdit);
				setTextBoxStyle(it.eng.utility.Styles.formTitle);
			}
		};
//		flgAggregatoACTAItem.setLabelAsTitle(true);
//		flgAggregatoACTAItem.setShowTitle(true);
//		flgAggregatoACTAItem.setTitleOrientation(TitleOrientation.RIGHT);        		
		flgAggregatoACTAItem.setDefaultValue(false);
		flgAggregatoACTAItem.setColSpan(1);
		flgAggregatoACTAItem.setWidth("*");
		flgAggregatoACTAItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {	
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgSmistamentoACTAItem.setValue(false);						
				} 
				redrawTabForms(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
			}
		});
		
		flgAggregatoACTAForm.setFields(flgAggregatoACTAItem);			
	}
	
	protected void createAggregatoACTAForm() {
		
		aggregatoACTAForm = new DynamicForm();
		aggregatoACTAForm.setLeft(100);
		aggregatoACTAForm.setBorder("1px solid grey");
		aggregatoACTAForm.setValuesManager(vm);
		aggregatoACTAForm.setWidth100();
		aggregatoACTAForm.setMargin(10);
		aggregatoACTAForm.setPadding(5);
		aggregatoACTAForm.setCellPadding(5);
		aggregatoACTAForm.setWrapItemTitles(false);
		aggregatoACTAForm.setNumCols(20);
		aggregatoACTAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		aggregatoACTAForm.setTabSet(tabSet);
		aggregatoACTAForm.setTabID(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		aggregatoACTAForm.setHeight(1);	
		
		flgIndiceClassificazioneACTAItem = new CheckboxItem("flgIndiceClassificazioneACTA", "");
		flgIndiceClassificazioneACTAItem.setStartRow(true);
		flgIndiceClassificazioneACTAItem.setDefaultValue(false);
		flgIndiceClassificazioneACTAItem.setColSpan(1);
		flgIndiceClassificazioneACTAItem.setWidth("*");
		flgIndiceClassificazioneACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA")) {
					item.setCanEdit(editing);								
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
		flgIndiceClassificazioneACTAItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgFascicoloACTAItem.setValue(false);						
				} 
				aggregatoACTAForm.markForRedraw();
			}
		});
		
		codIndiceClassificazioneACTAItem = new ExtendedTextItem("codIndiceClassificazioneACTA", "Indice classificazione esteso");
		codIndiceClassificazioneACTAItem.setColSpan(15);
		codIndiceClassificazioneACTAItem.setWidth(766);
		codIndiceClassificazioneACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA") && getValueAsBoolean("flgIndiceClassificazioneACTA")) {
					item.setCanEdit(editing);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
		codIndiceClassificazioneACTAItem.setAttribute("obbligatorio", true);
		codIndiceClassificazioneACTAItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
		
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return getValueAsBoolean("flgIndiceClassificazioneACTA");
			}
		}));
		codIndiceClassificazioneACTAItem.addChangedBlurHandler(new ChangedHandler(
				) {
			
			@Override
			public void onChanged(ChangedEvent event) {
				aggregatoACTAForm.clearErrors(true);
				aggregatoACTAForm.setValue("flgPresenzaClassificazioneACTA", false);
				verificaPresenzaIndiceClassificazioneACTA(new ServiceCallback<Boolean>() {
					
					@Override
					public void execute(Boolean presenzaIndiceClassificazione) {
						if(presenzaIndiceClassificazione != null && presenzaIndiceClassificazione) {
							aggregatoACTAForm.setValue("flgPresenzaClassificazioneACTA", true);							
						}
						aggregatoACTAForm.markForRedraw();
					}
					
					@Override
					public void manageError() {
						aggregatoACTAForm.markForRedraw();
					}
				});
			}
		});
		
		flgPresenzaClassificazioneACTAItem = new HiddenItem("flgPresenzaClassificazioneACTA");
		flgPresenzaClassificazioneACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(!getValueAsBoolean("flgAggregatoACTA") || !getValueAsBoolean("flgIndiceClassificazioneACTA")) {
					item.clearValue();								
				}
				return false;
			}
		});
		
		ImgButtonItem iconaClassificazioneACTAPresente = new ImgButtonItem("iconaClassificazioneACTAPresente", "ok.png", "Indice di classif. esteso presente in ACTA");
		iconaClassificazioneACTAPresente.setAlwaysEnabled(true);
		iconaClassificazioneACTAPresente.setColSpan(1);
		iconaClassificazioneACTAPresente.setIconWidth(16);
		iconaClassificazioneACTAPresente.setIconHeight(16);
		iconaClassificazioneACTAPresente.setIconVAlign(VerticalAlignment.BOTTOM);
		iconaClassificazioneACTAPresente.setAlign(Alignment.LEFT);
		iconaClassificazioneACTAPresente.setWidth(16);
		iconaClassificazioneACTAPresente.setRedrawOnChange(true);
		iconaClassificazioneACTAPresente.setShowIfCondition(new FormItemIfFunction() {

			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return getValueAsBoolean("flgPresenzaClassificazioneACTA");
			}
		});
		
		flgFascicoloACTAItem = new CheckboxItem("flgFascicoloACTA", "");
		flgFascicoloACTAItem.setStartRow(true);
		flgFascicoloACTAItem.setDefaultValue(false);
		flgFascicoloACTAItem.setColSpan(1);
		flgFascicoloACTAItem.setWidth("*");
		flgFascicoloACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA")) {
					item.setCanEdit(editing);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
		flgFascicoloACTAItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgIndiceClassificazioneACTAItem.setValue(false);						
				} 
				aggregatoACTAForm.markForRedraw();
			}
		});
		
		codVoceTitolarioACTAItem = new ExtendedTextItem("codVoceTitolarioACTA", "Voce di titolario");
		codVoceTitolarioACTAItem.setKeyPressFilter("[0-9a-zA-Z.]");		
		codVoceTitolarioACTAItem.setWidth(200);		
		codVoceTitolarioACTAItem.setItemHoverFormatter(true, new FormItemHoverFormatter() {

			@Override
			public String getHoverHTML(FormItem item, DynamicForm form) {
				return "Indicare i codici dei vari livelli di classificazione separati con \".\", ad es: 50.50.3";
			}
		});
		codVoceTitolarioACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA") && getValueAsBoolean("flgFascicoloACTA")) {
					item.setCanEdit(editing);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
		codVoceTitolarioACTAItem.setAttribute("obbligatorio", true);
		codVoceTitolarioACTAItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
		
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return getValueAsBoolean("flgFascicoloACTA");
			}
		}));
		codVoceTitolarioACTAItem.addChangedBlurHandler(new ChangedHandler(
				) {
			
			@Override
			public void onChanged(ChangedEvent event) {
				aggregatoACTAForm.clearErrors(true);
				aggregatoACTAForm.setValue("idFascicoloACTA", "");
				recuperaIdFascicoloDossierACTA(new ServiceCallback<String>() {
					
					@Override
					public void execute(String idFascicoloDossier) {
						if(idFascicoloDossier != null && !"".equals(idFascicoloDossier)) {
							aggregatoACTAForm.setValue("idFascicoloACTA", idFascicoloDossier);							
						}
						aggregatoACTAForm.markForRedraw();
					}
					
					@Override
					public void manageError() {
						aggregatoACTAForm.markForRedraw();
					}
				});
			}
		});
		
		codFascicoloACTAItem = new ExtendedTextItem("codFascicoloACTA", "Numero fascicolo/dossier");
		codFascicoloACTAItem.setWidth(200);
		codFascicoloACTAItem.setItemHoverFormatter(true, new FormItemHoverFormatter() {

			@Override
			public String getHoverHTML(FormItem item, DynamicForm form) {
				return "Indicare il n.ro del fascicolo o dossier senza il cod. AOO che va nel campo successivo";
			}
		});
		codFascicoloACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA") && getValueAsBoolean("flgFascicoloACTA")) {
					item.setCanEdit(editing);					
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
		codFascicoloACTAItem.setAttribute("obbligatorio", true);
		codFascicoloACTAItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
		
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return getValueAsBoolean("flgFascicoloACTA");
			}
		}));
		codFascicoloACTAItem.addChangedBlurHandler(new ChangedHandler(
				) {
			
			@Override
			public void onChanged(ChangedEvent event) {
				aggregatoACTAForm.clearErrors(true);
				aggregatoACTAForm.setValue("idFascicoloACTA", "");
				recuperaIdFascicoloDossierACTA(new ServiceCallback<String>() {
					
					@Override
					public void execute(String idFascicoloDossier) {
						if(idFascicoloDossier != null && !"".equals(idFascicoloDossier)) {
							aggregatoACTAForm.setValue("idFascicoloACTA", idFascicoloDossier);							
						}
						aggregatoACTAForm.markForRedraw();
					}
					
					@Override
					public void manageError() {
						aggregatoACTAForm.markForRedraw();
					}
				});
			}
		});
		
		suffissoCodFascicoloACTAItem = new ExtendedTextItem("suffissoCodFascicoloACTA", "/");
		suffissoCodFascicoloACTAItem.setWidth(200);
		suffissoCodFascicoloACTAItem.setItemHoverFormatter(true, new FormItemHoverFormatter() {

			@Override
			public String getHoverHTML(FormItem item, DynamicForm form) {
				return "Indicare il cod. AOO dell'AOO cui appartiene il fascicolo/dossier";
			}
		});
		suffissoCodFascicoloACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA") && getValueAsBoolean("flgFascicoloACTA")) {
					item.setCanEdit(editing);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
//		suffissoCodFascicoloACTAItem.setAttribute("obbligatorio", true); //lo commento altrimenti si vede l'asterisco con il trattino
		suffissoCodFascicoloACTAItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
		
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return getValueAsBoolean("flgFascicoloACTA");
			}
		}));
		suffissoCodFascicoloACTAItem.addChangedBlurHandler(new ChangedHandler(
				) {
			
			@Override
			public void onChanged(ChangedEvent event) {
				aggregatoACTAForm.clearErrors(true);
				aggregatoACTAForm.setValue("idFascicoloACTA", "");
				recuperaIdFascicoloDossierACTA(new ServiceCallback<String>() {
					
					@Override
					public void execute(String idFascicoloDossier) {
						if(idFascicoloDossier != null && !"".equals(idFascicoloDossier)) {
							aggregatoACTAForm.setValue("idFascicoloACTA", idFascicoloDossier);							
						}
						aggregatoACTAForm.markForRedraw();
					}
					
					@Override
					public void manageError() {
						aggregatoACTAForm.markForRedraw();
					}
				});
			}
		});
		
		codSottofascicoloACTAItem = new ExtendedNumericItem("codSottofascicoloACTA", "Numero sotto-fascicolo", false);
		codSottofascicoloACTAItem.setWidth(200);		
		codSottofascicoloACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgAggregatoACTA") && getValueAsBoolean("flgFascicoloACTA")) {
					item.setCanEdit(editing);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return AurigaLayout.getParametroDBAsBoolean("ATTIVA_SOTTOFASC_ACTA");
			}
		});
		codSottofascicoloACTAItem.addChangedBlurHandler(new ChangedHandler(
				) {
			
			@Override
			public void onChanged(ChangedEvent event) {
				aggregatoACTAForm.clearErrors(true);
				aggregatoACTAForm.setValue("idFascicoloACTA", "");
				recuperaIdFascicoloDossierACTA(new ServiceCallback<String>() {
					
					@Override
					public void execute(String idFascicoloDossier) {
						if(idFascicoloDossier != null && !"".equals(idFascicoloDossier)) {
							aggregatoACTAForm.setValue("idFascicoloACTA", idFascicoloDossier);							
						}
						aggregatoACTAForm.markForRedraw();
					}
					
					@Override
					public void manageError() {
						aggregatoACTAForm.markForRedraw();
					}
				});
			}
		});
		
		idFascicoloACTAItem = new HiddenItem("idFascicoloACTA");
		idFascicoloACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(!getValueAsBoolean("flgAggregatoACTA") || !getValueAsBoolean("flgFascicoloACTA")) {
					item.clearValue();								
				}
				return false;
			}
		});
		
		ImgButtonItem iconaFascicoloACTAPresente = new ImgButtonItem("iconaFascicoloACTAPresente", "ok.png", "Fascicolo/dossier presente in ACTA");
		iconaFascicoloACTAPresente.setAlwaysEnabled(true);
		iconaFascicoloACTAPresente.setColSpan(1);
		iconaFascicoloACTAPresente.setIconWidth(16);
		iconaFascicoloACTAPresente.setIconHeight(16);
		iconaFascicoloACTAPresente.setIconVAlign(VerticalAlignment.BOTTOM);
		iconaFascicoloACTAPresente.setAlign(Alignment.LEFT);
		iconaFascicoloACTAPresente.setWidth(16);
		iconaFascicoloACTAPresente.setRedrawOnChange(true);
		iconaFascicoloACTAPresente.setShowIfCondition(new FormItemIfFunction() {

			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return !"".equals(getValueAsString("idFascicoloACTA"));
			}
		});
		
		aggregatoACTAForm.setFields(
			flgIndiceClassificazioneACTAItem, 
			codIndiceClassificazioneACTAItem, 
			flgPresenzaClassificazioneACTAItem, 
			iconaClassificazioneACTAPresente,
			flgFascicoloACTAItem,
			codVoceTitolarioACTAItem,
			codFascicoloACTAItem,
			suffissoCodFascicoloACTAItem,
			codSottofascicoloACTAItem,
			idFascicoloACTAItem,
			iconaFascicoloACTAPresente
		);			
	}
	
	public String getCodAOOXSelNodoACTA() {
		return getValueAsString("codAOOXSelNodoACTA");
	}
	
	public String getCodStrutturaXSelNodoACTA() {
		return getValueAsString("codStrutturaXSelNodoACTA");
	}
			
	public void verificaPresenzaIndiceClassificazioneACTA(final ServiceCallback<Boolean> callback) {
		if(!"".equals(getValueAsString("codIndiceClassificazioneACTA"))) {
			Record lRecord = new Record();			
			lRecord.setAttribute("indiceClassificazioneEstesa", getValueAsString("codIndiceClassificazioneACTA"));
			GWTRestDataSource lACTADataSource = new GWTRestDataSource("ACTADataSource");
			lACTADataSource.addParam("aooCode", getCodAOOXSelNodoACTA());
			lACTADataSource.addParam("structurCode", getCodStrutturaXSelNodoACTA());
			lACTADataSource.performCustomOperation("getClassificazioneEstesa", lRecord, new DSCallback() {							
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
						if(callback != null) {
							callback.execute(response.getData()[0].getAttributeAsBoolean("presenzaIndiceClassificazione"));
						} 
					} else {
						if(callback != null) {
							callback.execute(null);
						} 
					}
				}
			});
		}
	}

	public void recuperaIdFascicoloDossierACTA(final ServiceCallback<String> callback) {
		if(!"".equals(getValueAsString("codVoceTitolarioACTA")) && !"".equals(getValueAsString("codFascicoloACTA")) && !"".equals(getValueAsString("suffissoCodFascicoloACTA"))) {
			Record lRecord = new Record();			
			lRecord.setAttribute("descrizioneVoceTitolario", getValueAsString("codVoceTitolarioACTA"));
			lRecord.setAttribute("codiceFascicoloDossier", getValueAsString("codFascicoloACTA"));
			lRecord.setAttribute("suffissoCodiceFascicoloDossier", getValueAsString("suffissoCodFascicoloACTA"));
			lRecord.setAttribute("codiceSottofascicoloDossier", getValueAsString("codSottofascicoloACTA"));			
			GWTRestDataSource lACTADataSource = new GWTRestDataSource("ACTADataSource");
			lACTADataSource.addParam("aooCode", getCodAOOXSelNodoACTA());
			lACTADataSource.addParam("structurCode", getCodStrutturaXSelNodoACTA());			
			lACTADataSource.performCustomOperation("getFascicoloDossierInVoceTitolario", lRecord, new DSCallback() {							
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
						if(callback != null) {
							callback.execute(response.getData()[0].getAttributeAsString("idFascicoloDossier"));
						} 
					} else {
						if(callback != null) {
							callback.execute(null);
						} 
					}
				}
			});
		}
	}

	protected void createFlgSmistamentoACTAForm() {
		
		flgSmistamentoACTAForm = new DynamicForm();
		flgSmistamentoACTAForm.setValuesManager(vm);
		flgSmistamentoACTAForm.setWidth100();
		flgSmistamentoACTAForm.setPadding(5);
		flgSmistamentoACTAForm.setWrapItemTitles(false);
		flgSmistamentoACTAForm.setNumCols(20);
		flgSmistamentoACTAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		flgSmistamentoACTAForm.setTabSet(tabSet);
		flgSmistamentoACTAForm.setTabID(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		flgSmistamentoACTAForm.setHeight(1);		
	
		flgSmistamentoACTAItem = new CheckboxItem("flgSmistamentoACTA", "SMISTAMENTO") {
			
			@Override
			public void setCanEdit(Boolean canEdit) {
				super.setCanEdit(canEdit);
				setTextBoxStyle(it.eng.utility.Styles.formTitle);
			}
		};
//		flgSmistamentoACTAItem.setLabelAsTitle(true);
//		flgSmistamentoACTAItem.setShowTitle(true);
//		flgSmistamentoACTAItem.setTitleOrientation(TitleOrientation.RIGHT);        
		flgSmistamentoACTAItem.setDefaultValue(false);
		flgSmistamentoACTAItem.setColSpan(1);
		flgSmistamentoACTAItem.setWidth("*");
		flgSmistamentoACTAItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {						
				if (event.getValue() != null && (Boolean) event.getValue()) {
					flgAggregatoACTAItem.setValue(false);						
				} 
				redrawTabForms(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
			}
		});
		
		flgSmistamentoACTAForm.setFields(flgSmistamentoACTAItem);			
	}
	
	protected void createSmistamentoACTAForm() {
		
		smistamentoACTAForm = new DynamicForm();
		smistamentoACTAForm.setBorder("1px solid grey");
		smistamentoACTAForm.setLeft(100);
		smistamentoACTAForm.setValuesManager(vm);
		smistamentoACTAForm.setWidth100();
		smistamentoACTAForm.setMargin(10);
		smistamentoACTAForm.setPadding(5);
		smistamentoACTAForm.setCellPadding(5);
		smistamentoACTAForm.setWrapItemTitles(false);
		smistamentoACTAForm.setNumCols(20);
		smistamentoACTAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		smistamentoACTAForm.setTabSet(tabSet);
		smistamentoACTAForm.setTabID(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		smistamentoACTAForm.setHeight(1);
		
		GWTRestDataSource nodiSmistamentoActaDS = new GWTRestDataSource("ACTADataSource", "idNodo", FieldType.TEXT);
				
		idNodoSmistamentoACTAItem = new SelectItem("idNodoSmistamentoACTA", "Nodo a cui smistare") {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);				
				smistamentoACTAForm.clearErrors(true);				
				smistamentoACTAForm.setValue("desNodoSmistamentoACTA", record.getAttributeAsString("codiceNodo"));				
			}
	
			@Override
			protected void clearSelect() {
				super.clearSelect();
				smistamentoACTAForm.clearErrors(true);				
				smistamentoACTAForm.setValue("idNodoSmistamentoACTA", "");
				smistamentoACTAForm.setValue("desNodoSmistamentoACTA", "");				
			};
	
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					smistamentoACTAForm.clearErrors(true);				
					smistamentoACTAForm.setValue("idNodoSmistamentoACTA", "");
					smistamentoACTAForm.setValue("desNodoSmistamentoACTA", "");
				}
			}
			
			@Override
			protected ListGrid builPickListProperties() {
				ListGrid idNodoSmistamentoACTAPickListProperties = super.builPickListProperties();	
				idNodoSmistamentoACTAPickListProperties.addFetchDataHandler(new FetchDataHandler() {

					@Override
					public void onFilterData(FetchDataEvent event) {
						GWTRestDataSource nodiSmistamentoActaDS = (GWTRestDataSource) idNodoSmistamentoACTAItem.getOptionDataSource();		
						nodiSmistamentoActaDS.addParam("aooCode", getCodAOOXSelNodoACTA());
						nodiSmistamentoActaDS.addParam("structurCode", getCodStrutturaXSelNodoACTA());
						idNodoSmistamentoACTAItem.setOptionDataSource(nodiSmistamentoActaDS);
						idNodoSmistamentoACTAItem.invalidateDisplayValueCache();
					}
				});
				return idNodoSmistamentoACTAPickListProperties;
			}
		};
		idNodoSmistamentoACTAItem.setColSpan(15);
		idNodoSmistamentoACTAItem.setWidth(766);
		idNodoSmistamentoACTAItem.setValueField("idNodo");
		idNodoSmistamentoACTAItem.setDisplayField("codiceNodo");
		idNodoSmistamentoACTAItem.setOptionDataSource(nodiSmistamentoActaDS);		
		idNodoSmistamentoACTAItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(getValueAsBoolean("flgSmistamentoACTA")) {
					item.setCanEdit(editing);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return true;
			}
		});
		idNodoSmistamentoACTAItem.setAttribute("obbligatorio", true);
		idNodoSmistamentoACTAItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {				
				return showSmistamentoACTAForms() && getValueAsBoolean("flgSmistamentoACTA");
			}
		}));
		
		desNodoSmistamentoACTAItem = new HiddenItem("desNodoSmistamentoACTA");
	
		smistamentoACTAForm.setFields(idNodoSmistamentoACTAItem, desNodoSmistamentoACTAItem);			
	}
	
	protected void createVisualizzaScaricaFileACTAForm() {
		
		visualizzaScaricaFileACTAForm = new DynamicForm();
		visualizzaScaricaFileACTAForm.setLeft(100);
		visualizzaScaricaFileACTAForm.setValuesManager(vm);
		visualizzaScaricaFileACTAForm.setWidth100();
		visualizzaScaricaFileACTAForm.setMargin(10);
		visualizzaScaricaFileACTAForm.setPadding(5);
		visualizzaScaricaFileACTAForm.setCellPadding(5);
		visualizzaScaricaFileACTAForm.setWrapItemTitles(false);
		visualizzaScaricaFileACTAForm.setNumCols(20);
		visualizzaScaricaFileACTAForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		visualizzaScaricaFileACTAForm.setTabSet(tabSet);
		visualizzaScaricaFileACTAForm.setTabID(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		visualizzaScaricaFileACTAForm.setHeight(1);
			
		visualizzaPdfCompilazioneTabACTAButton = new ImgButtonItem("visualizzaPdfCompilazioneTabACTAButton", "file/preview.png", "Visualizza guida per la compilazione della sezione");
		visualizzaPdfCompilazioneTabACTAButton.setAlwaysEnabled(true);
		visualizzaPdfCompilazioneTabACTAButton.setColSpan(1);
		visualizzaPdfCompilazioneTabACTAButton.setIconWidth(16);
		visualizzaPdfCompilazioneTabACTAButton.setIconHeight(16);
		visualizzaPdfCompilazioneTabACTAButton.setIconVAlign(VerticalAlignment.BOTTOM);
		visualizzaPdfCompilazioneTabACTAButton.setAlign(Alignment.LEFT);
		visualizzaPdfCompilazioneTabACTAButton.setWidth(16);
		visualizzaPdfCompilazioneTabACTAButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				final String uriPdfCompilazioneTabACTA = AurigaLayout.getParametroDB("URI_PDF_COMPILAZIONE_TAB_ACTA");
				if(uriPdfCompilazioneTabACTA != null && !"".equals(uriPdfCompilazioneTabACTA)) {
					Record infoFilePdf = new Record();
					infoFilePdf.setAttribute("correctFileName", "Guida_Compilazione_Sezione_ACTA.pdf");
					infoFilePdf.setAttribute("mimetype", "application/pdf");					
					infoFilePdf.setAttribute("firmato", false);
					infoFilePdf.setAttribute("convertibile", false);
					infoFilePdf.setAttribute("bytes", 0);					
					new PreviewWindow(uriPdfCompilazioneTabACTA, true, new InfoFileRecord(infoFilePdf), "FileToExtractBean", "Guida_Compilazione_Sezione_ACTA.pdf") {
						
						@Override
						public boolean isModal() {
							return isEnablePreviewModal();
						}								
					};
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessuna guida di compilazione scheda disponibile", "", MessageType.ERROR));
				}
			}
		});
		visualizzaPdfCompilazioneTabACTAButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String uriPdfCompilazioneTabACTA = AurigaLayout.getParametroDB("URI_PDF_COMPILAZIONE_TAB_ACTA");
				return uriPdfCompilazioneTabACTA != null && !"".equals(uriPdfCompilazioneTabACTA);
			}
		});
		
		scaricaXlsElencoFascSottofascButton = new ImgButtonItem("scaricaXlsElencoFascSottofascButton", "file/download_manager.png", "Scarica elenco fascicoli/sotto-fascicoli");
		scaricaXlsElencoFascSottofascButton.setAlwaysEnabled(true);
		scaricaXlsElencoFascSottofascButton.setColSpan(1);
		scaricaXlsElencoFascSottofascButton.setIconWidth(16);
		scaricaXlsElencoFascSottofascButton.setIconHeight(16);
		scaricaXlsElencoFascSottofascButton.setIconVAlign(VerticalAlignment.BOTTOM);
		scaricaXlsElencoFascSottofascButton.setAlign(Alignment.LEFT);
		scaricaXlsElencoFascSottofascButton.setWidth(16);
		scaricaXlsElencoFascSottofascButton.addIconClickHandler(new IconClickHandler() {

			@Override
			public void onIconClick(IconClickEvent event) {
				String uriXlsElencoFascSottofasc = AurigaLayout.getParametroDB("URI_XLS_ELENCO_FASC_SOTTOFASC");
				if(uriXlsElencoFascSottofasc != null && !"".equals(uriXlsElencoFascSottofasc)) {
					Record lRecord = new Record();
					lRecord.setAttribute("displayFilename", "Elenco_Fascicoli_Sottofascicoli_ACTA.xls");
					lRecord.setAttribute("uri", uriXlsElencoFascSottofasc);
					lRecord.setAttribute("sbustato", "false");
					lRecord.setAttribute("remoteUri", "true");
					DownloadFile.downloadFromRecord(lRecord, "FileToExtractBean");
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessun elenco fascicoli/sotto-fascicoli disponibile", "", MessageType.ERROR));
				}
			}
		});
		scaricaXlsElencoFascSottofascButton.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				String uriXlsElencoFascSottofasc = AurigaLayout.getParametroDB("URI_XLS_ELENCO_FASC_SOTTOFASC");
				return uriXlsElencoFascSottofasc != null && !"".equals(uriXlsElencoFascSottofasc);
			}
		});
		
		visualizzaScaricaFileACTAForm.setFields(visualizzaPdfCompilazioneTabACTAButton, scaricaXlsElencoFascSottofascButton);			
	}
		
	/****************** 
	 * TAB OPERE ADSP *
	 ******************/	
	
	public boolean showTabOpereADSP() {
		return show_TAB_OPERE_ADSP() && showDetailSectionOpereADSP();
	}
	
	public String getTitleTabOpereADSP() {
		return getTitleDetailSectionOpereADSP();
	}
	
	/**
	 * Metodo per costruire il tab "Opere" di ADSP
	 * 
	 */
	protected void createTabOpereADSP() {

		tabOpereADSP = new Tab("<b>" + getTitleTabOpereADSP() + "</b>");
		tabOpereADSP.setAttribute("tabID", _TAB_OPERE_ADSP_ID);
		tabOpereADSP.setPrompt(getTitleTabOpereADSP());
		tabOpereADSP.setPane(createTabPane(getLayoutOpereADSP()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Opere" di ADSP
	 * 
	 */
	public VLayout getLayoutOpereADSP() {

		VLayout layoutOpereADSP = new VLayout(5);
		
		createDetailSectionOpereADSP();
		layoutOpereADSP.addMember(detailSectionOpereADSP);
		
		return layoutOpereADSP;
	}
	
	public boolean showDetailSectionOpereADSP() {
		return showOpereADSPItem();
	}
	
	public String getTitleDetailSectionOpereADSP() {
		return getTitleOpereADSPItem();
	}
	
	public boolean isRequiredDetailSectionOpereADSP() {
		return isRequiredOpereADSPItem();
	}
	
	protected void createDetailSectionOpereADSP() {
		
		createOpereADSPForm();		
		
		detailSectionOpereADSP = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionOpereADSP(), true, true, isRequiredDetailSectionOpereADSP(), opereADSPForm);
	}	
	
	public boolean showOpereADSPItem() {
		return showAttributoCustomCablato("PERIZIA_ADSP");
	}
	
	public String getTitleOpereADSPItem() {
		String label = getLabelAttributoCustomCablato("PERIZIA_ADSP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Opera/e";
	}
	
	public boolean isRequiredOpereADSPItem() {
		return showOpereADSPItem() && getFlgObbligatorioAttributoCustomCablato("PERIZIA_ADSP");
	}
	
	public boolean isNotReplicableOpereADSPItem() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("PERIZIA_ADSP");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}	
	
	protected void createOpereADSPForm() {
		
		opereADSPForm = new DynamicForm();
		opereADSPForm.setValuesManager(vm);
		opereADSPForm.setWidth100();
		opereADSPForm.setPadding(5);
		opereADSPForm.setWrapItemTitles(false);		
		opereADSPForm.setNumCols(20);
		opereADSPForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		opereADSPForm.setTabSet(tabSet);
		opereADSPForm.setTabID(_TAB_OPERE_ADSP_ID);
		opereADSPForm.setHeight(1);
				
		listaOpereADSPItem = new PeriziaItem() {
			
			@Override
			public boolean skipValidation() {
				if(showOpereADSPItem()) {
					return super.skipValidation();
				}
				return true;
			}
		};
		listaOpereADSPItem.setName("listaOpereADSP");
		listaOpereADSPItem.setShowTitle(false);
		listaOpereADSPItem.setColSpan(20);		
		if(isNotReplicableOpereADSPItem()) {
			listaOpereADSPItem.setNotReplicable(true);
		}
		if(isRequiredOpereADSPItem()) {
			listaOpereADSPItem.setAttribute("obbligatorio", true);
		}
		listaOpereADSPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showOpereADSPItem();
			}
		});	
		
		opereADSPForm.setFields(listaOpereADSPItem);	
	}
	
	/*************************** 
	 * TAB DATI CONTABILI ADSP *
	 ***************************/	
	
	public boolean showTabDatiContabiliADSP() {
		return show_TAB_DATI_CONTABILI_ADSP() && showDetailSectionDatiContabiliADSP();
	}
	
	public String getTitleTabDatiContabiliADSP() {
		return getTitleDetailSectionDatiContabiliADSP();
	}
	
	/**
	 * Metodo per costruire il tab "Dati contabili" di ADSP
	 * 
	 */
	protected void createTabDatiContabiliADSP() {

		tabDatiContabiliADSP = new Tab("<b>" + getTitleTabDatiContabiliADSP() + "</b>");
		tabDatiContabiliADSP.setAttribute("tabID", _TAB_DATI_CONTABILI_ADSP_ID);
		tabDatiContabiliADSP.setPrompt(getTitleTabDatiContabiliADSP());
		tabDatiContabiliADSP.setPane(createTabPane(getLayoutDatiContabiliADSP()));
		/* NON VOGLIO SBIANCARE I VALORI DI OPERE, CIG E CUP IN LISTA, QUANDO NON SONO PRESENTI NELLE RELATIVE VALUEMAP (VERRA' DATO POI UN ERRORE IN SALVATAGGIO)
		tabDatiContabiliADSP.addTabSelectedHandler(new TabSelectedHandler() {
			
			@Override
			public void onTabSelected(TabSelectedEvent event) {
				if(listaDatiContabiliADSPItem != null) {	
					listaDatiContabiliADSPItem.reloadCIGCUPValueMap();
					listaDatiContabiliADSPItem.reloadOpereADSPValueMap();
				}
			} 
		});
		*/
	}

	/**
	 * Metodo che restituisce il layout del tab "Dati contabili" di ADSP
	 * 
	 */
	public VLayout getLayoutDatiContabiliADSP() {

		VLayout layoutDatiContabiliADSP = new VLayout(5);
		
		createDetailSectionDatiContabiliADSP();
		layoutDatiContabiliADSP.addMember(detailSectionDatiContabiliADSP);
		
		return layoutDatiContabiliADSP;
	}
	
	public boolean showDetailSectionDatiContabiliADSP() {
		return showDatiContabiliADSPItem();
	}
	
	public String getTitleDetailSectionDatiContabiliADSP() {
		return getTitleDatiContabiliADSPItem();
	}
	
	public boolean isRequiredDetailSectionDatiContabiliADSP() {
		return isRequiredDatiContabiliADSPItem();		
	}
	
	protected void createDetailSectionDatiContabiliADSP() {
		
		createDatiContabiliADSPForm();	
		
		detailSectionDatiContabiliADSP = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDatiContabiliADSP(), true, true, isRequiredDetailSectionDatiContabiliADSP(), datiContabiliADSPForm);
	}	
	
	public boolean showDatiContabiliADSPItem() {
		return showAttributoCustomCablato("DATI_CONTABILI_ADSP");
	}
	
	public String getTitleDatiContabiliADSPItem() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati contabili";
	}
	
	public boolean isRequiredDatiContabiliADSPItem() {
		return showDatiContabiliADSPItem() && getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP");
	}
	
	protected void createDatiContabiliADSPForm() {
		
		datiContabiliADSPForm = new DynamicForm();
		datiContabiliADSPForm.setValuesManager(vm);
		datiContabiliADSPForm.setWidth100();
		datiContabiliADSPForm.setPadding(5);
		datiContabiliADSPForm.setWrapItemTitles(false);		
		datiContabiliADSPForm.setNumCols(20);
		datiContabiliADSPForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		datiContabiliADSPForm.setTabSet(tabSet);
		datiContabiliADSPForm.setTabID(_TAB_DATI_CONTABILI_ADSP_ID);
		datiContabiliADSPForm.setHeight(1);
		
		/*
		listaDatiContabiliADSPItem = new DatiContabiliADSPItem() {
				
			@Override
			public boolean showEsercizioDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_ESERCIZIO");
			}
			
			@Override
			public String getTitleEsercizioDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_ESERCIZIO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Esercizio";
			}
			
			@Override
			public boolean isRequiredEsercizioDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_ESERCIZIO");
			}
			
			@Override
			public boolean showCapitoloDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_CAPITOLO");
			}
				
			@Override
			public String getTitleCapitoloDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_CAPITOLO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Capitolo";
			}
			
			@Override
			public boolean isRequiredCapitoloDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_CAPITOLO");
			}
			
			@Override
			public boolean showContoDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_CONTO");
			}
				
			@Override
			public String getTitleContoDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_CONTO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Conto";
			}
			
			@Override
			public boolean isRequiredContoDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_CONTO");
			}
			
			@Override
			public boolean showDecretoCIGDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CIG");
			}
			
			@Override
			public String getTitleDecretoCIGDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CIG");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "CIG";
			}
			
			@Override
			public boolean isRequiredDecretoCIGDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CIG");
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
			@Override
			public RecordList getCIGCUPRecordList() {
				return buildCIGCUPRecordList();
			}
			
			@Override
			public boolean showDecretoCUPDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CUP");
			}
			
			@Override
			public String getTitleDecretoCUPDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CUP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "CUP";
			}
			
			@Override
			public boolean isRequiredDecretoCUPDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CUP");
			}				
			
			@Override
			public boolean showDecretoImportoDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_IMP");
			}
			
			@Override
			public String getTitleDecretoImportoDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_IMP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Importo (&euro;)";
			}
			
			@Override
			public boolean isRequiredDecretoImportoDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_IMP");
			}
			
			@Override
			public boolean showDecretoOperaDatiContabiliADSP() {
				return showOpereADSPItem() && showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_OPERA");
			}
			
			@Override
			public String getTitleDecretoOperaDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_OPERA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Opera";
			}
			
			@Override
			public boolean isRequiredDecretoOperaDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_OPERA");
			}
			
			@Override
			public LinkedHashMap<String, String> getOpereADSPValueMap() {
				if(showOpereADSPItem()) {
					LinkedHashMap<String, String> listaOpereADSPValueMap = new LinkedHashMap<String, String>();
					RecordList listaOpereADSP = opereADSPForm.getValueAsRecordList("listaOpereADSP");
					if(listaOpereADSP != null) {
						for(int i=0; i < listaOpereADSP.getLength(); i++) {
							listaOpereADSPValueMap.put(listaOpereADSP.get(i).getAttribute("codiceRapido"), listaOpereADSP.get(i).getAttribute("codiceRapido") + " - " + listaOpereADSP.get(i).getAttribute("descrizione"));						
						}
					}
					return listaOpereADSPValueMap;
				}
				return null;
			}
			
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non vengono ricaricate le valueMap delle operi CIG e CUP (con eventuale sbiancamento della select se il valore selezionato non è presente), quindi lo faccio comunque prima della validazione				
				reloadCIGCUPValueMap();
				// se il tab non viene aperto non vengono ricaricate le valueMap delle opere (con eventuale sbiancamento della select se il valore selezionato non è presente), quindi lo faccio comunque prima della validazione				
				reloadOpereADSPValueMap();
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showDatiContabiliADSPItem()) {
					return super.skipValidation();
				}
				return true;
			}
		};
		listaDatiContabiliADSPItem.setName("listaDatiContabiliADSP");
		listaDatiContabiliADSPItem.setShowTitle(false);
		listaDatiContabiliADSPItem.setColSpan(20);		
		listaDatiContabiliADSPItem.setNotReplicable(false);
		if(isRequiredDatiContabiliADSPItem()) {
			listaDatiContabiliADSPItem.setAttribute("obbligatorio", true);
		}
		listaDatiContabiliADSPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDatiContabiliADSPItem();
			}
		});	 		
		*/
	
		
		listaDatiContabiliADSPItem = new ListaDatiContabiliADSPItem("listaDatiContabiliADSP") {
			
			@Override
			public boolean isDisattivaIntegrazioneSistemaContabile() {
				return getFlgDisattivaIntegrazioneSistemaContabile();
			}
			
			@Override
			public boolean showEsercizioDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_ESERCIZIO");
			}
			
			@Override
			public String getTitleEsercizioDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_ESERCIZIO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Esercizio";
			}
			
			@Override
			public boolean isRequiredEsercizioDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_ESERCIZIO");
			}
			
			@Override
			public boolean showCapitoloDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_CAPITOLO");
			}
				
			@Override
			public String getTitleCapitoloDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_CAPITOLO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Capitolo";
			}
			
			@Override
			public boolean isRequiredCapitoloDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_CAPITOLO");
			}
			
			@Override
			public boolean showContoDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_CONTO");
			}
				
			@Override
			public String getTitleContoDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_CONTO");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Conto";
			}
			
			@Override
			public boolean isRequiredContoDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_CONTO");
			}
			
			@Override
			public boolean showDecretoCIGDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CIG");
			}
			
			@Override
			public String getTitleDecretoCIGDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CIG");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "CIG";
			}
			
			@Override
			public boolean isRequiredDecretoCIGDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CIG");
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
			@Override
			public RecordList getCIGCUPRecordList() {
				return buildCIGCUPRecordList();
			}
			
			@Override
			public boolean showDecretoCUPDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CUP");
			}
			
			@Override
			public String getTitleDecretoCUPDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CUP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "CUP";
			}
			
			@Override
			public boolean isRequiredDecretoCUPDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_CUP");
			}				
			
			@Override
			public boolean showDecretoImportoDatiContabiliADSP() {
				return showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_IMP");
			}
			
			@Override
			public String getTitleDecretoImportoDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_IMP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Importo (&euro;)";
			}
			
			@Override
			public boolean isRequiredDecretoImportoDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_IMP");
			}

			@Override
			public boolean showDecretoOperaDatiContabiliADSP() {
				return showOpereADSPItem() && showAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_OPERA");
			}
			
			@Override
			public String getTitleDecretoOperaDatiContabiliADSP() {
				String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_OPERA");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Opera";
			}
			
			@Override
			public boolean isRequiredDecretoOperaDatiContabiliADSP() {
				return getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ADSP_DECRETO_OPERA");
			}
			
			@Override
			public LinkedHashMap<String, String> getOpereADSPValueMap() {
				if(showOpereADSPItem()) {
					LinkedHashMap<String, String> listaOpereADSPValueMap = new LinkedHashMap<String, String>();
					RecordList listaOpereADSP = opereADSPForm.getValueAsRecordList("listaOpereADSP");
					if(listaOpereADSP != null) {
						for(int i=0; i < listaOpereADSP.getLength(); i++) {
							listaOpereADSPValueMap.put(listaOpereADSP.get(i).getAttribute("codiceRapido"), listaOpereADSP.get(i).getAttribute("codiceRapido") + " - " + listaOpereADSP.get(i).getAttribute("descrizione"));						
						}
					}
					return listaOpereADSPValueMap;
				}
				return null;
			}
			
			@Override
			public Boolean validate() {
				if(showDatiContabiliADSPItem()) {
					/* NON VOGLIO SBIANCARE I VALORI DI OPERE, CIG E CUP IN LISTA, QUANDO NON SONO PRESENTI NELLE RELATIVE VALUEMAP (VERRA' DATO POI UN ERRORE IN SALVATAGGIO)
					// se il tab non viene aperto non vengono ricaricate le valueMap delle operi CIG e CUP (con eventuale sbiancamento della select se il valore selezionato non è presente), quindi lo faccio comunque prima della validazione				
					reloadCIGCUPValueMap();
					// se il tab non viene aperto non vengono ricaricate le valueMap delle opere (con eventuale sbiancamento della select se il valore selezionato non è presente), quindi lo faccio comunque prima della validazione				
					reloadOpereADSPValueMap();
					*/					
					return super.validate();
				} else {
					return true;
				}
			}						
			
			@Override
			public void onClickRefreshListButton() {
				Layout.showWaitPopup("Allineamento col sistema contabile in corso...");
				final GWTRestDataSource lContabilitaADSPDataSource = new GWTRestDataSource("ContabilitaADSPDataSource");
				lContabilitaADSPDataSource.performCustomOperation("allineamentoConSistemaContabileADSP", getRecordToSave(), new DSCallback() {							
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						Layout.hideWaitPopup();
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record record = response.getData()[0];
							listaDatiContabiliADSPItem.setData(record.getAttributeAsRecordList("listaDatiContabiliADSP"));							
						} 				
					}
				}, new DSRequest());
			}
			
			@Override
			public void onClickVerificaDisponibilitaImportoButton() {
				
				RecordList datiContabiliList = getRecordToSave().getAttributeAsRecordList("listaDatiContabiliADSP");
				if(datiContabiliList.getLength()<1) {
					return;
				}
				
				Layout.showWaitPopup("Verifica disponibilita importo in corso...");

				/*Verifico l'importo*/
				final GWTRestDataSource lContabilitaADSPDataSource = new GWTRestDataSource("ContabilitaADSPDataSource");
				String cdrUOCompetente = (cdrUOCompetenteItem.getValue() != null) ? String.valueOf(cdrUOCompetenteItem.getValue()) : null;
				lContabilitaADSPDataSource.extraparam.put("cdrUOCompetente", cdrUOCompetente);
				lContabilitaADSPDataSource.extraparam.put("forzaCtrlDisponibilita", "true");
				Boolean flgSenzaImpegniCont = (Boolean) ((flgSenzaImpegniContItem.getValue() != null) ? (flgSenzaImpegniContItem.getValue()) : null);
				lContabilitaADSPDataSource.extraparam.put("flgSenzaImpegniCont", flgSenzaImpegniCont!=null && flgSenzaImpegniCont==true ? "true" : "false");
				String idUd = (idUdHiddenItem.getValue() != null) ? String.valueOf(idUdHiddenItem.getValue()) : null;
				lContabilitaADSPDataSource.extraparam.put("idUd", idUd); 

				String stringMap = listaDatiContabiliADSPItem.getMappaKeyCapitoli()!=null ? listaDatiContabiliADSPItem.getMappaKeyCapitoli().toString() : "";
				lContabilitaADSPDataSource.extraparam.put("mappaKeyCapitoli", stringMap);
				
				Record listaDatiContabiliADSPBean = new Record();
				listaDatiContabiliADSPBean.setAttribute("listaDatiContabiliADSP", datiContabiliList);
				
				
				lContabilitaADSPDataSource.performCustomOperation("verificaDisponibilitaImportoMultiple", listaDatiContabiliADSPBean, new DSCallback() {							
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							
							Layout.hideWaitPopup();
							
							final Record record = response.getData()[0];
							
							RecordList listaDatiContabiliADSP = record.getAttributeAsRecordList("listaDatiContabiliADSP");
							final RecordList listaProposteConcorrenti = record.getAttributeAsRecordList("listaProposteConcorrenti");
							
							listaDatiContabiliADSPItem.setData(listaDatiContabiliADSP);
							listaDatiContabiliADSPItem.redraw();
							
							if(record.getAttributeAsBoolean("inError")) {
								
								SC.warn(record.getAttributeAsString("defaultMessage"), new BooleanCallback() {
									
									@Override
									public void execute(Boolean value) {
										if(listaProposteConcorrenti.getLength() > 0) {

											RecordList listaErrori = new RecordList();
											for (int i = 0; i < listaProposteConcorrenti.getLength(); i++) {
												Record propostaConcorrente = listaProposteConcorrenti.get(i);
												
												Record recordErrore = new Record();
												recordErrore.setAttribute("estremiProposta", propostaConcorrente.getAttribute("estremiProposta"));
												recordErrore.setAttribute("oggettoProposta", propostaConcorrente.getAttribute("oggettoProposta"));
												recordErrore.setAttribute("importoProposta", propostaConcorrente.getAttribute("importoProposta"));
												recordErrore.setAttribute("capitoloProposta", propostaConcorrente.getAttribute("capitoloProposta"));
												recordErrore.setAttribute("contoProposta", propostaConcorrente.getAttribute("contoProposta"));
												listaErrori.add(recordErrore);

											}
											ErroreProposteConcorrentiPopUp errorePopup = new ErroreProposteConcorrentiPopUp(nomeEntita, listaErrori,
													LARG_POPUP_ERR_MASS, ALT_POPUP_ERR_MASS, "Atti in iter che insistono sullo stesso capitolo/conto") {
												
												@Override
												public void manageOnClick() {
													closeWindow();
												};
											};
											errorePopup.show();
										
										}
									}
								});								
							}												
						} 				
					}
				}, new DSRequest());
			}

			@Override
			public void onClickDeleteMovimentiListButton() {
				
				if(getFlgDisattivaIntegrazioneSistemaContabile()) {
					RecordList recordList = new RecordList();
					listaDatiContabiliADSPItem.setData(recordList);	
				}else {
					manageStatoAtto(new DSCallback() {
						
						@Override
						public void execute(DSResponse dsResponse, Object data, DSRequest dsRequest) {
							onClickDeleteMovimentiListButtonAfterManageStato();	
						}
					});	
				}											
			}

			/**
			 * 
			 */
			public void onClickDeleteMovimentiListButtonAfterManageStato() {
				Integer statoAtto = (Integer) ((statoAttoContabilitaItem.getValue() != null) ? (statoAttoContabilitaItem.getValue()) : null);
				if(statoAtto!=null && (statoAtto==99 || statoAtto>0)) {
					return;
				}
				
				Layout.showWaitPopup("Cancellazione dati contabili in corso...");
				final GWTRestDataSource lContabilitaADSPDataSource = new GWTRestDataSource("ContabilitaADSPDataSource");
				lContabilitaADSPDataSource.performCustomOperation("cancellaMovimentiContabili", getRecordToSave(), new DSCallback() {							
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						Layout.hideWaitPopup();
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record record = response.getData()[0];
							listaDatiContabiliADSPItem.setData(record.getAttributeAsRecordList("listaDatiContabiliADSP"));	
							flgSavedAttoSuSistemaContabileItem.setValue(record.getAttributeAsBoolean("flgSavedAttoSuSistemaContabile"));
						} 				
					}
				}, new DSRequest());
			}
			
			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}

			@Override
			protected String recuperacdR() {
				String cdrUOCompetente = (cdrUOCompetenteItem.getValue() != null) ? String.valueOf(cdrUOCompetenteItem.getValue()) : null;
				return cdrUOCompetente;
			}

			@Override
			public void onClickImportXlsButton(final String uriFileImportExcel, final String mimetype) {
				
				manageStatoAtto(new DSCallback() {
					
					@Override
					public void execute(DSResponse dsResponse, Object data, DSRequest dsRequest) {
						onClickImportXlsButtonAfterManageStato(uriFileImportExcel, mimetype);	
					}
				});				
			}

			/**
			 * @param uriFileImportExcel
			 * @param mimetype
			 */
			public void onClickImportXlsButtonAfterManageStato(String uriFileImportExcel, String mimetype) {
				Integer statoAtto = (Integer) ((statoAttoContabilitaItem.getValue() != null) ? (statoAttoContabilitaItem.getValue()) : null);
				if(statoAtto!=null && (statoAtto==99 || statoAtto>0)) {
					return;
				}
				
				Layout.showWaitPopup("Caricamento dati contabili in corso...");
				final GWTRestDataSource lContabilitaADSPDataSource = new GWTRestDataSource("ContabilitaADSPDataSource");
				lContabilitaADSPDataSource.extraparam.put("uriExcel", uriFileImportExcel);
				lContabilitaADSPDataSource.extraparam.put("mimetype", mimetype);
				String cdrUOCompetente = (cdrUOCompetenteItem.getValue() != null) ? String.valueOf(cdrUOCompetenteItem.getValue()) : null;
				lContabilitaADSPDataSource.extraparam.put("cdrUOCompetente", cdrUOCompetente);
				Boolean flgSenzaImpegniCont = (Boolean) ((flgSenzaImpegniContItem.getValue() != null) ? (flgSenzaImpegniContItem.getValue()) : null);
				lContabilitaADSPDataSource.extraparam.put("flgSenzaImpegniCont", flgSenzaImpegniCont!=null && flgSenzaImpegniCont==true ? "true" : "false");
				String idUd = (idUdHiddenItem.getValue() != null) ? String.valueOf(idUdHiddenItem.getValue()) : null;
				lContabilitaADSPDataSource.extraparam.put("idUd", idUd);
				String stringMap = listaDatiContabiliADSPItem.getMappaKeyCapitoli()!=null ? listaDatiContabiliADSPItem.getMappaKeyCapitoli().toString() : "";
				lContabilitaADSPDataSource.extraparam.put("mappaKeyCapitoli", stringMap);
				
				lContabilitaADSPDataSource.performCustomOperation("importaDatiContabiliFromExcel", getRecordToSave(), new DSCallback() {							
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						Layout.hideWaitPopup();
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record record = response.getData()[0];
							RecordList data = record.getAttributeAsRecordList("listaDatiContabiliADSP");
							for(int i=0; i<data.getLength(); i++) {
								String id = data.get(i).getAttribute("id");
								if(id==null || "".equalsIgnoreCase(id)) {
									data.get(i).setAttribute("id", "NEW_" + i);
								}
							}						
							int numDatiContabiliPresente = listaDatiContabiliADSPItem.getData().getLength();
							listaDatiContabiliADSPItem.setData(data);	
							flgSavedAttoSuSistemaContabileItem.setValue(record.getAttributeAsBoolean("flgSavedAttoSuSistemaContabile"));
							RecordList listaExcelDatiContabiliADSPInError = record.getAttributeAsRecordList("listaExcelDatiContabiliADSPInError");
							if(listaExcelDatiContabiliADSPInError != null && listaExcelDatiContabiliADSPInError.getLength() > 0) {
								RecordList listaErrori = new RecordList();
								int recordInWarning = 0;
								for (int i = 0; i < listaExcelDatiContabiliADSPInError.getLength(); i++) {
									Record recordInError = listaExcelDatiContabiliADSPInError.get(i);
									String numeroRiga = recordInError.getAttribute("numeroRiga");
									String motivo = recordInError.getAttribute("motivo");
									
									if(motivo.startsWith("WARNING")) {
										recordInWarning++;
									}
									
									Record recordErrore = new Record();
									recordErrore.setAttribute("idError", numeroRiga);
									recordErrore.setAttribute("descrizione", motivo);
									listaErrori.add(recordErrore);
									
								}
								RecordList listaDatiContabiliADSP = record.getAttributeAsRecordList("listaDatiContabiliADSP");
								int numRecordTotali = (listaDatiContabiliADSP!=null ? 
										listaDatiContabiliADSP.getLength() + listaExcelDatiContabiliADSPInError.getLength() : 
											listaExcelDatiContabiliADSPInError.getLength()) - numDatiContabiliPresente - recordInWarning;
								ErroreMassivoPopup errorePopup = new ErroreMassivoPopup(nomeEntita, "Numero riga", listaErrori, numRecordTotali, LARG_POPUP_ERR_MASS,
										ALT_POPUP_ERR_MASS, "Righe in errore\\warning dell'excel importato", recordInWarning, "Descrizione errore\\warning");
								errorePopup.show();
							}
						} 				
					}
				}, new DSRequest());
			}

			@Override
			public void onClickDownloadTemplateExcelButton() {
				String uriFileExcel = AurigaLayout.getParametroDB("URI_EXCEL_DATI_CONTABILI");
				if(uriFileExcel != null && !"".equals(uriFileExcel)) {
					Record lRecord = new Record();
					lRecord.setAttribute("displayFilename", "Dati_contabili.xlsx");
					lRecord.setAttribute("uri", uriFileExcel);
					lRecord.setAttribute("sbustato", "false");
					lRecord.setAttribute("remoteUri", "true");
					DownloadFile.downloadFromRecord(lRecord, "FileToExtractBean");			
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessuna lista dati contabili disponibile", "", MessageType.ERROR));
				}	
			}

			@Override
			protected void manageStatoAtto(final DSCallback callback) {
				Integer statoAtto = (Integer) ((statoAttoContabilitaItem.getValue() != null) ? (statoAttoContabilitaItem.getValue()) : null);
				
				final GWTRestDataSource lContabilitaADSPDataSource = new GWTRestDataSource("ContabilitaADSPDataSource");
				
				if (statoAtto != null) {
					
					/*Se è uguale a 1 riportiamo la proposta allo stato 0=InBozza richiamando WS di attoInBozza*/
					if (statoAtto == 1) {
						invokeAttoInBozzaContabilitaADSP(lContabilitaADSPDataSource, callback);
					} 
					/*Se è maggiore di 1 lanciamo errore e blocchiamo loperazione */
					else if (statoAtto > 1) {
						SC.warn("I movimenti sono già definitivi in contabilità. Per poterli modificare la Ragioneria deve prima annullare le registrazioni definitive");
						callback.execute(null,null,null);
					}
					
					/*Se è uguale a 99 significa che in fase di load non è riuscito a recuperare lo stato dell'atto quindi rifacciamo la chiamata*/
					else if (statoAtto == 99) {
						lContabilitaADSPDataSource.performCustomOperation("verificaStatoAttoContabilita", getRecordToSave(), new DSCallback() {							
							@Override
							public void execute(DSResponse response, Object rawData, DSRequest request) {
								if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
									Record record = response.getData()[0];
									Integer statoAtto = record.getAttributeAsInt("statoAttoContabilita");	
									statoAttoContabilitaItem.setValue(statoAtto);
									if(statoAtto == 1) {
										invokeAttoInBozzaContabilitaADSP(lContabilitaADSPDataSource, callback);
									}
									else if(statoAtto>1) {
										SC.warn("I movimenti sono già definitivi in contabilità. Per poterli modificare la Ragioneria deve prima annullare le registrazioni definitive");
										callback.execute(null,null,null);
									}
									else if(statoAtto==99) {
										SC.warn("Non è posibile verificare lo stato dell'atto sul sistema contabile.\nRirovare o contattare l'assistenza.");
										callback.execute(null,null,null);
									}
									else {
										callback.execute(null,null,null);
									}
								} 	
								callback.execute(null,null,null);
							}
						}, new DSRequest());											
					}else {
						callback.execute(null,null,null);
					}
				}else {
					callback.execute(null,null,null);
				}
			}

			@Override
			protected Integer recuperaStatoAtto() {
				Integer statoAtto = (Integer) ((statoAttoContabilitaItem.getValue() != null) ? (statoAttoContabilitaItem.getValue()) : null);
				return statoAtto;
			}	
			
			
			@Override
			protected Boolean recuperaflgSenzaImpegniCont() {
				Boolean flgSenzaImpegniCont = (Boolean) ((flgSenzaImpegniContItem.getValue() != null) ? (flgSenzaImpegniContItem.getValue()) : null);
				return flgSenzaImpegniCont;
			}
			
			@Override
			protected String recuperaidUd() {
				String idUd = (idUdHiddenItem.getValue() != null) ? String.valueOf(idUdHiddenItem.getValue()) : null;
				return idUd;
			}
			
		};
		listaDatiContabiliADSPItem.setStartRow(true);
		listaDatiContabiliADSPItem.setShowTitle(false);
		listaDatiContabiliADSPItem.setHeight(245);		
		listaDatiContabiliADSPItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDatiContabiliADSPItem();
			}
		});
		
		flgSavedAttoSuSistemaContabileItem = new HiddenItem("flgSavedAttoSuSistemaContabile");
		statoAttoContabilitaItem = new HiddenItem("statoAttoContabilita");
		
		datiContabiliADSPForm.setFields(listaDatiContabiliADSPItem, flgSavedAttoSuSistemaContabileItem, statoAttoContabilitaItem);
	}
	
	public boolean getFlgDisattivaIntegrazioneSistemaContabile() {
		String listaIdTipoAttoNoContabilita = AurigaLayout.getParametroDB("ID_DOC_TYPE_SENZA_SCRITTURA_CONTABILITA");
			if(listaIdTipoAttoNoContabilita!=null && !listaIdTipoAttoNoContabilita.equalsIgnoreCase("")) {
				String[] setIdTipoAttoNoContabilita = listaIdTipoAttoNoContabilita.split(";");			
				for(String IdTipoAttoNoContabilita: setIdTipoAttoNoContabilita) {
					if(IdTipoAttoNoContabilita.equalsIgnoreCase(tipoDocumento)) {
						return true;
					}
				}
			}		
			return false;		
	}
	
	public boolean getFlgDisattivaIntegrazioneSistemaContabile(String tipoDocumento) {
		String listaIdTipoAttoNoContabilita = AurigaLayout.getParametroDB("ID_DOC_TYPE_SENZA_SCRITTURA_CONTABILITA");
			if(listaIdTipoAttoNoContabilita!=null && !listaIdTipoAttoNoContabilita.equalsIgnoreCase("")) {
				String[] setIdTipoAttoNoContabilita = listaIdTipoAttoNoContabilita.split(";");			
				for(String IdTipoAttoNoContabilita: setIdTipoAttoNoContabilita) {
					if(IdTipoAttoNoContabilita.equalsIgnoreCase(tipoDocumento)) {
						return true;
					}
				}
			}		
			return false;		
	}

	/****************************** 
	 * TAB DATI CONTABILI ATERSIR *
	 ******************************/	
	
	public boolean showTabDatiContabiliATERSIR() {
		return show_TAB_DATI_CONTABILI_ATERSIR() && showAttributoCustomCablato("DATI_CONTABILI_ATERSIR");
	}

	public String getTitleTabDatiContabiliATERSIR() {
		return getTitleDetailSectionDatiContabiliATERSIR();
	}
	
	public boolean showDetailSectionDatiContabiliATERSIR() {
		return showDatiContabiliATERSIRItem();
	}
	
	public String getTitleDetailSectionDatiContabiliATERSIR() {
		return getTitleDatiContabiliATERSIRItem();
	}
	
	public boolean isRequiredDetailSectionDatiContabiliATERSIR() {
		return isRequiredDatiContabiliATERSIRItem();		
	}
	
	
	public boolean showDatiContabiliATERSIRItem() {
		return showAttributoCustomCablato("DATI_CONTABILI_ATERSIR");
	}

	public String getTitleDatiContabiliATERSIRItem() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI_ATERSIR");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati contabili";
	}
	
	public boolean isRequiredDatiContabiliATERSIRItem() {
		return showDatiContabiliATERSIRItem() && getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_ATERSIR");
	}
	
	protected void createTabDatiContabiliATERSIR() {

		tabDatiContabiliATERSIR = new Tab("<b>" + getTitleTabDatiContabiliAVB() + "</b>");
		tabDatiContabiliATERSIR.setAttribute("tabID", _TAB_DATI_CONTABILI_ATERSIR_ID);
		tabDatiContabiliATERSIR.setPrompt(getTitleTabDatiContabiliATERSIR());
		tabDatiContabiliATERSIR.setPane(createTabPane(getLayoutDatiContabiliATERSIR()));
	}
	
	public VLayout getLayoutDatiContabiliATERSIR() {

		VLayout layoutDatiContabiliATERSIR = new VLayout(5);
		
		createDetailSectionDatiContabiliATERSIR();
		layoutDatiContabiliATERSIR.addMember(detailSectionDatiContabiliATERSIR);
		
		return layoutDatiContabiliATERSIR;
	}
	
	protected void createDetailSectionDatiContabiliATERSIR() {
		
		createDatiContabiliATERSIRForm();	
		
		detailSectionDatiContabiliATERSIR = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDatiContabiliATERSIR(), true, true, isRequiredDetailSectionDatiContabiliATERSIR(), datiContabiliATERSIRForm);
	}	
	
	protected void createDatiContabiliATERSIRForm() {
		
		datiContabiliATERSIRForm = new DynamicForm();
		datiContabiliATERSIRForm.setValuesManager(vm);
		datiContabiliATERSIRForm.setWidth100();
		datiContabiliATERSIRForm.setPadding(5);
		datiContabiliATERSIRForm.setWrapItemTitles(false);		
		datiContabiliATERSIRForm.setNumCols(20);
		datiContabiliATERSIRForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		datiContabiliATERSIRForm.setTabSet(tabSet);
		datiContabiliATERSIRForm.setTabID(_TAB_DATI_CONTABILI_ATERSIR_ID);
		datiContabiliATERSIRForm.setHeight(1);
		
		listaDatiContabiliATERSIRItem = new ListaDatiContabiliATERSIRItem("listaDatiContabiliATERSIR") {

			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
			@Override
			public RecordList getCIGCUPRecordList() {
				return buildCIGCUPRecordList();
			}
			
			@Override
			public Boolean validate() {
				if(showDatiContabiliATERSIRItem()) {
					/* NON VOGLIO SBIANCARE I VALORI DI OPERE, CIG E CUP IN LISTA, QUANDO NON SONO PRESENTI NELLE RELATIVE VALUEMAP (VERRA' DATO POI UN ERRORE IN SALVATAGGIO)
					// se il tab non viene aperto non vengono ricaricate le valueMap delle operi CIG e CUP (con eventuale sbiancamento della select se il valore selezionato non Ã¨ presente), quindi lo faccio comunque prima della validazione				
					reloadCIGCUPValueMap();
					// se il tab non viene aperto non vengono ricaricate le valueMap delle opere (con eventuale sbiancamento della select se il valore selezionato non Ã¨ presente), quindi lo faccio comunque prima della validazione				
					reloadOpereADSPValueMap();
					*/					
					return super.validate();
				} else {
					return true;
				}
			}	
			
			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
		};
		listaDatiContabiliATERSIRItem.setStartRow(true);
		listaDatiContabiliATERSIRItem.setShowTitle(false);
		listaDatiContabiliATERSIRItem.setHeight(245);
		listaDatiContabiliATERSIRItem.setName("listaDatiContabiliATERSIR");
		listaDatiContabiliATERSIRItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDatiContabiliATERSIRItem();
			}
		});
		
		datiContabiliATERSIRForm.setFields(listaDatiContabiliATERSIRItem);
	}
	
	/*************************** 
	 * TAB DATI CONTABILI AVB *
	 ***************************/	
	
	public boolean showTabDatiContabiliAVB() {
		return show_TAB_DATI_CONTABILI_AVB() && showAttributoCustomCablato("DATI_CONTABILI_AVB");
	}
	
	public String getTitleTabDatiContabiliAVB() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI_AVB");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati contabili";
	}	
	
	/**
	 * Metodo per costruire il tab "Dati contabili" di AVB
	 * 
	 */
	protected void createTabDatiContabiliAVB() {

		tabDatiContabiliAVB = new Tab("<b>" + getTitleTabDatiContabiliAVB() + "</b>");
		tabDatiContabiliAVB.setAttribute("tabID", _TAB_DATI_CONTABILI_AVB_ID);
		tabDatiContabiliAVB.setPrompt(getTitleTabDatiContabiliAVB());
		tabDatiContabiliAVB.setPane(createTabPane(getLayoutDatiContabiliAVB()));
	}

	/**
	 * Metodo che restituisce il layout del tab "Dati contabili" di AVB
	 * 
	 */
	public VLayout getLayoutDatiContabiliAVB() {

		VLayout layoutImpegniAVB = new VLayout(5);
		
		createDetailSectionImpegniAVB();
		layoutImpegniAVB.addMember(detailSectionImpegniAVB);
		
		createDetailSectionAccertamentiAVB();
		layoutImpegniAVB.addMember(detailSectionAccertamentiAVB);
		
		createDetailSectionLiquidazioniAVB();
		layoutImpegniAVB.addMember(detailSectionLiquidazioniAVB);
		
		return layoutImpegniAVB;
	}
	
	public boolean showDetailSectionImpegniAVB() {
		return showImpegniAVBItem();
	}
	
	public String getTitleDetailSectionImpegniAVB() {
		return getTitleImpegniAVBItem();
	}
	
	public boolean isRequiredDetailSectionImpegniAVB() {
		return isRequiredImpegniAVBItem();		
	}
	
	protected void createDetailSectionImpegniAVB() {
		
		createImpegniAVBForm();	
		
		detailSectionImpegniAVB = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionImpegniAVB(), true, true, isRequiredDetailSectionImpegniAVB(), impegniAVBForm);
	}	
	
	public boolean showImpegniAVBItem() {
		return showTabDatiContabiliAVB() && showAttributoCustomCablato("DATI_CONTABILI_AVB_IMP");
	}
	
	public String getTitleImpegniAVBItem() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI_AVB_IMP");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Impegni";
	}
	
	public boolean isRequiredImpegniAVBItem() {
		return showImpegniAVBItem() && getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_AVB_IMP");
	}	
	
	protected void createImpegniAVBForm() {
		
		impegniAVBForm = new DynamicForm();
		impegniAVBForm.setValuesManager(vm);
		impegniAVBForm.setWidth100();
		impegniAVBForm.setPadding(5);
		impegniAVBForm.setWrapItemTitles(false);		
		impegniAVBForm.setNumCols(20);
		impegniAVBForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		impegniAVBForm.setTabSet(tabSet);
		impegniAVBForm.setTabID(_TAB_DATI_CONTABILI_AVB_ID);
		impegniAVBForm.setHeight(1);
		
		listaImpegniAVBItem = new ListaDatiContabiliAVBItem("listaImpegniAVB") {
			
			@Override
			public boolean isEsclusoCIGProposta() {
				return isEsclusoCIG();
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
//			@Override
//			public HashSet<String> getVociPEGNoVerifDisp() {
//				return vociPEGNoVerifDisp;
//			}
			
			@Override
			public String getIdUdProposta() {
				return getIdUd();
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
//			@Override
//			public boolean isEscludiFiltroCdC() {
//				return isEscludiFiltroCdCVsAMC();
//			}
			
			@Override
			public boolean isShowRefreshListButton() {
				return false;
			}

			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
			
			@Override
			public TipoDatiContabiliAVBEnum getTipoDatiContabiliAVB() {
				return TipoDatiContabiliAVBEnum.IMPEGNI;
			}
		};
		listaImpegniAVBItem.setStartRow(true);
		listaImpegniAVBItem.setShowTitle(false);
		listaImpegniAVBItem.setHeight(245);		
		listaImpegniAVBItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionImpegniAVB();
			}
		});
		
		impegniAVBForm.setFields(listaImpegniAVBItem);					
	}	

	public boolean showDetailSectionAccertamentiAVB() {
		return showAccertamentiAVBItem();
	}
	
	public String getTitleDetailSectionAccertamentiAVB() {
		return getTitleAccertamentiAVBItem();
	}
	
	public boolean isRequiredDetailSectionAccertamentiAVB() {
		return isRequiredAccertamentiAVBItem();		
	}
	
	protected void createDetailSectionAccertamentiAVB() {
		
		createAccertamentiAVBForm();	
		
		detailSectionAccertamentiAVB = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionAccertamentiAVB(), true, true, isRequiredDetailSectionAccertamentiAVB(), accertamentiAVBForm);
	}	
	
	public boolean showAccertamentiAVBItem() {
		return showTabDatiContabiliAVB() && showAttributoCustomCablato("DATI_CONTABILI_AVB_ACC");
	}
	
	public String getTitleAccertamentiAVBItem() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI_AVB_ACC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Accertamenti";
	}
	
	public boolean isRequiredAccertamentiAVBItem() {
		return showAccertamentiAVBItem() && getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_AVB_ACC");
	}
	
	protected void createAccertamentiAVBForm() {
		
		accertamentiAVBForm = new DynamicForm();
		accertamentiAVBForm.setValuesManager(vm);
		accertamentiAVBForm.setWidth100();
		accertamentiAVBForm.setPadding(5);
		accertamentiAVBForm.setWrapItemTitles(false);		
		accertamentiAVBForm.setNumCols(20);
		accertamentiAVBForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		accertamentiAVBForm.setTabSet(tabSet);
		accertamentiAVBForm.setTabID(_TAB_DATI_CONTABILI_AVB_ID);
		accertamentiAVBForm.setHeight(1);
		
		listaAccertamentiAVBItem = new ListaDatiContabiliAVBItem("listaAccertamentiAVB") {
			
			@Override
			public boolean isEsclusoCIGProposta() {
				return isEsclusoCIG();
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
//			@Override
//			public HashSet<String> getVociPEGNoVerifDisp() {
//				return vociPEGNoVerifDisp;
//			}
			
			@Override
			public String getIdUdProposta() {
				return getIdUd();
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
//			@Override
//			public boolean isEscludiFiltroCdC() {
//				return isEscludiFiltroCdCVsAMC();
//			}
			
			@Override
			public boolean isShowRefreshListButton() {
				return false;
			}

			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
			
			@Override
			public TipoDatiContabiliAVBEnum getTipoDatiContabiliAVB() {
				return TipoDatiContabiliAVBEnum.ACCERTAMENTI;
			}
		};
		listaAccertamentiAVBItem.setStartRow(true);
		listaAccertamentiAVBItem.setShowTitle(false);
		listaAccertamentiAVBItem.setHeight(245);		
		listaAccertamentiAVBItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionAccertamentiAVB();
			}
		});
		
		accertamentiAVBForm.setFields(listaAccertamentiAVBItem);					
	}
	
	public boolean showDetailSectionLiquidazioniAVB() {
		return showLiquidazioniAVBItem();
	}
	
	public String getTitleDetailSectionLiquidazioniAVB() {
		return getTitleLiquidazioniAVBItem();
	}
	
	public boolean isRequiredDetailSectionLiquidazioniAVB() {
		return isRequiredLiquidazioniAVBItem();		
	}
	
	protected void createDetailSectionLiquidazioniAVB() {
		
		createLiquidazioniAVBForm();	
		
		detailSectionLiquidazioniAVB = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionLiquidazioniAVB(), true, true, isRequiredDetailSectionLiquidazioniAVB(), liquidazioniAVBForm);
	}	
	
	public boolean showLiquidazioniAVBItem() {
		return showTabDatiContabiliAVB() && showAttributoCustomCablato("DATI_CONTABILI_AVB_LIQ");
	}
	
	public String getTitleLiquidazioniAVBItem() {
		String label = getLabelAttributoCustomCablato("DATI_CONTABILI_AVB_LIQ");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Liquidazioni";
	}
	
	public boolean isRequiredLiquidazioniAVBItem() {
		return showLiquidazioniAVBItem() && getFlgObbligatorioAttributoCustomCablato("DATI_CONTABILI_AVB_LIQ");
	}
	
	protected void createLiquidazioniAVBForm() {
		
		liquidazioniAVBForm = new DynamicForm();
		liquidazioniAVBForm.setValuesManager(vm);
		liquidazioniAVBForm.setWidth100();
		liquidazioniAVBForm.setPadding(5);
		liquidazioniAVBForm.setWrapItemTitles(false);		
		liquidazioniAVBForm.setNumCols(20);
		liquidazioniAVBForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		liquidazioniAVBForm.setTabSet(tabSet);
		liquidazioniAVBForm.setTabID(_TAB_DATI_CONTABILI_AVB_ID);
		liquidazioniAVBForm.setHeight(1);
		
		listaLiquidazioniAVBItem = new ListaDatiContabiliAVBItem("listaLiquidazioniAVB") {
			
			@Override
			public boolean isEsclusoCIGProposta() {
				return isEsclusoCIG();
			}
			
			@Override
			public String[] getCIGValueMap() {
				return buildCIGValueMap();
			}
			
//			@Override
//			public HashSet<String> getVociPEGNoVerifDisp() {
//				return vociPEGNoVerifDisp;
//			}
			
			@Override
			public String getIdUdProposta() {
				return getIdUd();
			}
			
			@Override
			public String getUoProponenteCorrente() {
				return getIdUoProponente();
			}
			
//			@Override
//			public boolean isEscludiFiltroCdC() {
//				return isEscludiFiltroCdCVsAMC();
//			}
			
			@Override
			public boolean isShowRefreshListButton() {
				return false;
			}

			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}
			
			@Override
			public TipoDatiContabiliAVBEnum getTipoDatiContabiliAVB() {
				return TipoDatiContabiliAVBEnum.LIQUIDAZIONI;
			}
		};
		listaLiquidazioniAVBItem.setStartRow(true);
		listaLiquidazioniAVBItem.setShowTitle(false);
		listaLiquidazioniAVBItem.setHeight(245);		
		listaLiquidazioniAVBItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDetailSectionLiquidazioniAVB();
			}
		});
		
		liquidazioniAVBForm.setFields(listaLiquidazioniAVBItem);					
	}
	
	/*********************** 
	 * TAB TRASPARENZA AVB *
	 ***********************/
	
	public boolean showTabTrasparenzaAVB() {
		return show_TAB_DATI_TRASP_AVB() && showAttributoCustomCablato("DATI_TRASP_AVB");
	}
	
	
	public String getTitleTabTrasparenzaAVB() {
		String label = getLabelAttributoCustomCablato("DATI_TRASP_AVB");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Trasparenza";
	}
	
	/**
	 * Metodo per costruire il tab "Trasparenza" di AVB
	 * 
	 */
	
	protected void createTabTrasparenzaAVB() {
		tabTrasparenzaAVB = new Tab("<b>" + getTitleTabTrasparenzaAVB() + "</b>");
		tabTrasparenzaAVB.setAttribute("tabID", _TAB_DATI_TRASP_AVB_ID);
		tabTrasparenzaAVB.setPrompt(getTitleTabTrasparenzaAVB());
		tabTrasparenzaAVB.setPane(createTabPane(getLayoutTrasparenzaAVB()));
	}
	
	/**
	 * Metodo che restituisce il layout del tab "Trasparenza" di AVB
	 * 
	 */
	
	public VLayout getLayoutTrasparenzaAVB() {

		VLayout layoutTrasparenzaAVB = new VLayout(5);
		
		/* Se è visibile il tab trasparenza di AVB il campo CATEGORIA_RISCHIO deve comparire lì, per primo, altrimenti resta sul primo tab */
		if(showTabTrasparenzaAVB()) {
			createDetailSectionCategoriaRischio();
			layoutTrasparenzaAVB.addMember(detailSectionCategoriaRischio);
		}
		
		createDetailSectionErogVantaggiEconomiciTrasp();
		layoutTrasparenzaAVB.addMember(detailSectionErogVantaggiEconomiciTrasp);
		
		createDetailSectionInterventiTrasp();
		layoutTrasparenzaAVB.addMember(detailSectionInterventiTrasp);
		
		createDetailSectionAltriProvvedimentiTrasp();
		layoutTrasparenzaAVB.addMember(detailSectionAltriProvvedimentiTrasp);
		
		createDetailSectionDettaglioTrasparenza();
		layoutTrasparenzaAVB.addMember(detailSectionDettaglioTrasparenza);
		
		createDetailSectionBeneficiariTrasparenza();
		layoutTrasparenzaAVB.addMember(detailSectionBeneficiariTrasparenza);
		
		return layoutTrasparenzaAVB;
	}
	
	public boolean showDetailSectionErogVantaggiEconomici() {
		return showTabTrasparenzaAVB() && showAttributoCustomCablato("EROG_VANT_ECON");
	}	
	
	public boolean showDetailSectionErogVantaggiEconomiciTabTrasp() {
		return showDetailSectionErogVantaggiEconomici() && showDetailSectionErogVantaggiEconomiciFlgInterventiAltriProvv();
	}
	
	public boolean showDetailSectionErogVantaggiEconomiciFlgInterventiAltriProvv() {
		return !_FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi")) && !_FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"));
	}
	
	public String getTitleDetailSectionErogVantaggiEconomici() {
		String label = getLabelAttributoCustomCablato("EROG_VANT_ECON");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Erogazione vantaggi economici";
	}
	
	protected void createDetailSectionErogVantaggiEconomiciTrasp() {
		
		createErogVantaggiEconomiciTraspForm();
		
		detailSectionErogVantaggiEconomiciTrasp = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionErogVantaggiEconomici(), true, true, false, erogVantaggiEconomiciTraspForm);
	}
	
	public boolean showFlgErogVantaggiEconomiciItem() {
		return showDetailSectionErogVantaggiEconomici() && showAttributoCustomCablato("EROG_VANTAGGI_ECONOMICI");
	}
	
	public String getTitleFlgErogVantaggiEconomiciItem() {
		String label = getLabelAttributoCustomCablato("EROG_VANTAGGI_ECONOMICI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Erogazione vantaggi economici";
	}
	
	public boolean isRequiredFlgErogVantaggiEconomiciItem() {
		return showFlgErogVantaggiEconomiciItem() && getFlgObbligatorioAttributoCustomCablato("EROG_VANTAGGI_ECONOMICI");
	}
	
	public String getDefaultValueFlgErogVantaggiEconomiciItem() {
		return getValoreFissoAttributoCustomCablato("EROG_VANTAGGI_ECONOMICI");
	}
	
	public boolean showTipoTrasparenzaVantEconItem() {
		return showDetailSectionErogVantaggiEconomici() && showAttributoCustomCablato("TRASPARENZA_TIP_VANT_ECON") && _FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"));
	}
	
	public String getTitleTipoTrasparenzaVantEconItem() {
		String label = getLabelAttributoCustomCablato("TRASPARENZA_TIP_VANT_ECON");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipologia"; 		
	}
		
	public boolean isRequiredTipoTrasparenzaVantEconItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASPARENZA_TIP_VANT_ECON");
	}
	
	public String getDefaultValueTipoTrasparenzaVantEconItem() {
		return getValoreFissoAttributoCustomCablato("TRASPARENZA_TIP_VANT_ECON");
	}
	
	public boolean showSottotipoTrasparenzaVantEconItem() {
		return showDetailSectionErogVantaggiEconomici() && showAttributoCustomCablato("TRASPARENZA_SOTTOTIP_VANT_ECON") && _FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"));
	}	
	
	public String getTitleSottotipoTrasparenzaVantEconItem() {
		String label = getLabelAttributoCustomCablato("TRASPARENZA_SOTTOTIP_VANT_ECON");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sottotipologia"; 		
	}
	
	public boolean isRequiredSottotipoTrasparenzaVantEconItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASPARENZA_SOTTOTIP_VANT_ECON");
	}
		
	public String getDefaultValueSottotipoTrasparenzaVantEconItem() {
		return getValoreFissoAttributoCustomCablato("TRASPARENZA_SOTTOTIP_VANT_ECON");
	}
	
	protected void createErogVantaggiEconomiciTraspForm() {

		erogVantaggiEconomiciTraspForm = new DynamicForm();
		erogVantaggiEconomiciTraspForm.setValuesManager(vm);
		erogVantaggiEconomiciTraspForm.setWidth100();
		erogVantaggiEconomiciTraspForm.setPadding(5);
		erogVantaggiEconomiciTraspForm.setWrapItemTitles(false);
		erogVantaggiEconomiciTraspForm.setNumCols(20);
		erogVantaggiEconomiciTraspForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		erogVantaggiEconomiciTraspForm.setTabSet(tabSet);
		erogVantaggiEconomiciTraspForm.setTabID(_TAB_DATI_TRASP_AVB_ID);
		erogVantaggiEconomiciTraspForm.setHeight(1);	
		
		flgErogVantaggiEconomiciItem = new RadioGroupItem("flgErogVantaggiEconomici", getTitleFlgErogVantaggiEconomiciItem());
		flgErogVantaggiEconomiciItem.setStartRow(true);
		flgErogVantaggiEconomiciItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgErogVantaggiEconomiciItem.setDefaultValue(getDefaultValueFlgErogVantaggiEconomiciItem());
		flgErogVantaggiEconomiciItem.setVertical(false);
		flgErogVantaggiEconomiciItem.setWrap(false);
		flgErogVantaggiEconomiciItem.setShowDisabled(false);
		if(isRequiredFlgErogVantaggiEconomiciItem()) {
			flgErogVantaggiEconomiciItem.setAttribute("obbligatorio", true);
		}
		flgErogVantaggiEconomiciItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgErogVantaggiEconomiciItem();
			}
		}));
		flgErogVantaggiEconomiciItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgErogVantaggiEconomiciItem();
			}
		});		
		flgErogVantaggiEconomiciItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
				showHideSections();
				if(_FLG_NO.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"))) {
					tipoTrasparenzaVantEconItem.clearValue();
					flgBeneficiariObbligXTipoTraspVantEconItem.clearValue();
					sottotipoTrasparenzaVantEconItem.clearValue();
					flgBeneficiariObbligXSottotipoTraspVantEconItem.clearValue();					
					tipoInterventiItem.clearValue();
					flgBeneficiariObbligXTipoInterventiItem.clearValue();
					sottotipoInterventiItem.clearValue();
					flgBeneficiariObbligXSottotipoInterventiItem.clearValue();					
					tipoAltriProvvedimentiItem.clearValue();
					flgBeneficiariObbligXTipoAltriProvvedimentiItem.clearValue();
					sottotipoAltriProvvedimentiItem.clearValue();
					flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.clearValue();		
					//TODO non devo cancellare flgInterventi
//					interventiTraspForm.clearValues();
					//TODO non devo cancellare flgAltriProvvedimenti
//					altriProvvedimentiTraspForm.clearValues();
					dettaglioTrasparenzaForm.clearValues();
				}
			}
		});
		
		tipoTrasparenzaVantEconDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		tipoTrasparenzaVantEconDataSource.addParam("nomeCombo", "VLRTIPO");
		tipoTrasparenzaVantEconDataSource.addParam("valoreChiave", "VANTAGGI");
		
		tipoTrasparenzaVantEconItem = new SelectItem("tipoTrasparenzaVantEcon", getTitleTipoTrasparenzaVantEconItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);
				erogVantaggiEconomiciTraspForm.setValue("flgBeneficiariObbligXTipoTraspVantEcon", record.getAttributeAsBoolean("flgBeneficiariObblig"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				erogVantaggiEconomiciTraspForm.setValue("tipoTrasparenzaVantEcon", "");
				erogVantaggiEconomiciTraspForm.setValue("flgBeneficiariObbligXTipoTraspVantEcon", "");
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					erogVantaggiEconomiciTraspForm.setValue("tipoTrasparenzaVantEcon", "");
					erogVantaggiEconomiciTraspForm.setValue("flgBeneficiariObbligXTipoTraspVantEcon", "");
				}
			}
		};
		tipoTrasparenzaVantEconItem.setOptionDataSource(tipoTrasparenzaVantEconDataSource);
		tipoTrasparenzaVantEconItem.setValueField("key");
		tipoTrasparenzaVantEconItem.setDisplayField("value");
		tipoTrasparenzaVantEconItem.setWidth(700);
		tipoTrasparenzaVantEconItem.setDefaultValue(getDefaultValueTipoTrasparenzaVantEconItem());
		tipoTrasparenzaVantEconItem.setStartRow(true);
		if(isRequiredTipoTrasparenzaVantEconItem()) {
			tipoTrasparenzaVantEconItem.setAttribute("obbligatorio", true);
		} else {
			tipoTrasparenzaVantEconItem.setAllowEmptyValue(true);			
		}
		tipoTrasparenzaVantEconItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTipoTrasparenzaVantEconItem() && isRequiredTipoTrasparenzaVantEconItem();
			}
		}));		
		tipoTrasparenzaVantEconItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"))) {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB") ? editing : false);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return showTipoTrasparenzaVantEconItem();
			}
		});
		tipoTrasparenzaVantEconItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedTipoTrasparenzaVantEcon();
			}
		});
		
		flgBeneficiariObbligXTipoTraspVantEconItem = new HiddenItem("flgBeneficiariObbligXTipoTraspVantEcon");
		
		sottotipoTrasparenzaVantEconDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		sottotipoTrasparenzaVantEconDataSource.addParam("nomeCombo", "VLRSOTTOTIPO");
//		sottotipoTrasparenzaVantEconDataSource.addParam("valoreChiave", "");
		
		sottotipoTrasparenzaVantEconItem = new SelectItem("sottotipoTrasparenzaVantEcon", getTitleSottotipoTrasparenzaVantEconItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);
				erogVantaggiEconomiciTraspForm.setValue("flgBeneficiariObbligXSottotipoTraspVantEcon", record.getAttributeAsBoolean("flgBeneficiariObblig"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				erogVantaggiEconomiciTraspForm.setValue("sottotipoTrasparenzaVantEcon", "");
				erogVantaggiEconomiciTraspForm.setValue("flgBeneficiariObbligXSottotipoTraspVantEcon", "");
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					erogVantaggiEconomiciTraspForm.setValue("sottotipoTrasparenzaVantEcon", "");
					erogVantaggiEconomiciTraspForm.setValue("flgBeneficiariObbligXSottotipoTraspVantEcon", "");
				}
			}
		};
		sottotipoTrasparenzaVantEconItem.setOptionDataSource(sottotipoTrasparenzaVantEconDataSource);
		sottotipoTrasparenzaVantEconItem.setValueField("key");
		sottotipoTrasparenzaVantEconItem.setDisplayField("value");
		sottotipoTrasparenzaVantEconItem.setWidth(700);
		sottotipoTrasparenzaVantEconItem.setDefaultValue(getDefaultValueSottotipoTrasparenzaVantEconItem());
		sottotipoTrasparenzaVantEconItem.setStartRow(true);
		if(isRequiredSottotipoTrasparenzaVantEconItem()) {
			sottotipoTrasparenzaVantEconItem.setAttribute("obbligatorio", true);
		} else {
			sottotipoTrasparenzaVantEconItem.setAllowEmptyValue(true);			
		}
		sottotipoTrasparenzaVantEconItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showSottotipoTrasparenzaVantEconItem() && isRequiredSottotipoTrasparenzaVantEconItem();
			}
		}));
		sottotipoTrasparenzaVantEconItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"))) {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB") ? editing : false);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return showSottotipoTrasparenzaVantEconItem();
			}
		});
		sottotipoTrasparenzaVantEconItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedSottotipoTrasparenzaVantEcon();
			}
		});
		
		flgBeneficiariObbligXSottotipoTraspVantEconItem = new HiddenItem("flgBeneficiariObbligXSottotipoTraspVantEcon");
		
		erogVantaggiEconomiciTraspForm.setFields(flgErogVantaggiEconomiciItem, tipoTrasparenzaVantEconItem, flgBeneficiariObbligXTipoTraspVantEconItem, sottotipoTrasparenzaVantEconItem, flgBeneficiariObbligXSottotipoTraspVantEconItem);
	}
	
	public boolean showDetailSectionInterventiTrasp() {
		return showTabTrasparenzaAVB() && showAttributoCustomCablato("SEZ_INTERVENTI");
	}
	
	public boolean showDetailSectionInterventiTraspTabTrasp() {
		return showDetailSectionInterventiTrasp() && showDetailSectionInterventiFlgErogVantaggiEconomiciAltriProvv();
	}
	
	public boolean showDetailSectionInterventiFlgErogVantaggiEconomiciAltriProvv() {
		return !_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici")) && !_FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"));		
	}
	
	public String getTitleDetailSectionInterventiTrasp() {
		String label = getLabelAttributoCustomCablato("SEZ_INTERVENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Interventi";
	}
	
	protected void createDetailSectionInterventiTrasp() {

		createInterventiTraspForm();

		detailSectionInterventiTrasp = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionInterventiTrasp(), true, true, false, interventiTraspForm);
	}
	
	public boolean showFlgInterventiItem() {
		return showDetailSectionInterventiTrasp() && showAttributoCustomCablato("INTERVENTI");
	}
	
	public String getTitleFlgInterventiItem() {
		String label = getLabelAttributoCustomCablato("INTERVENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Interventi";
	}
	
	public boolean isRequiredFlgInterventiItem() {
		return showFlgInterventiItem() && getFlgObbligatorioAttributoCustomCablato("INTERVENTI");
	}	
	
	public String getDefaultValueFlgInterventiItem() {
		return getValoreFissoAttributoCustomCablato("INTERVENTI");
	}
	
	public boolean showTipoInterventiItem() {
		return showDetailSectionInterventiTrasp() && showAttributoCustomCablato("TRASPARENZA_TIP_INTERVENTI") && _FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"));
	}
	
	public String getTitleTipoInterventiItem() {
		String label = getLabelAttributoCustomCablato("TRASPARENZA_TIP_INTERVENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipologia"; 		
	}
	
	public boolean isRequiredTipoInterventiItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASPARENZA_TIP_INTERVENTI");
	}	
	
	public String getDefaultValueTipoInterventiItem() {
		return getValoreFissoAttributoCustomCablato("TRASPARENZA_TIP_INTERVENTI");
	}
	
	public String getValoreChiaveLoadComboTipoInterventiItem() {
		String valoreChiaveLoadCombo = getTipoLoadComboAttributoCustomCablato("TRASPARENZA_TIP_INTERVENTI");
		return valoreChiaveLoadCombo != null && !"".equals(valoreChiaveLoadCombo) ? valoreChiaveLoadCombo : "INTERVENTI";
	}
	
	public boolean showSottotipoInterventiItem() {
		return showDetailSectionInterventiTrasp() && showAttributoCustomCablato("TRASPARENZA_SOTTOTIP_INTERVENTI") && _FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"));
	}	
	
	public String getTitleSottotipoInterventiItem() {
		String label = getLabelAttributoCustomCablato("TRASPARENZA_SOTTOTIP_INTERVENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sottotipologia"; 		
	}
	
	public boolean isRequiredSottotipoInterventiItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASPARENZA_SOTTOTIP_INTERVENTI");
	}	
		
	public String getDefaultValueSottotipoInterventiItem() {
		return getValoreFissoAttributoCustomCablato("TRASPARENZA_SOTTOTIP_INTERVENTI");
	}
	
	protected void createInterventiTraspForm() {

		interventiTraspForm = new DynamicForm();
		interventiTraspForm.setValuesManager(vm);
		interventiTraspForm.setWidth100();
		interventiTraspForm.setPadding(5);
		interventiTraspForm.setWrapItemTitles(false);
		interventiTraspForm.setNumCols(20);
		interventiTraspForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		interventiTraspForm.setTabSet(tabSet);
		interventiTraspForm.setTabID(_TAB_DATI_TRASP_AVB_ID);
		interventiTraspForm.setHeight(1);	
		
		flgInterventiItem = new RadioGroupItem("flgInterventi", getTitleFlgInterventiItem());
		flgInterventiItem.setStartRow(true);
		flgInterventiItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgInterventiItem.setDefaultValue(getDefaultValueFlgInterventiItem());
		flgInterventiItem.setVertical(false);
		flgInterventiItem.setWrap(false);
		flgInterventiItem.setShowDisabled(false);
		if(isRequiredFlgInterventiItem()) {
			flgInterventiItem.setAttribute("obbligatorio", true);
		}
		flgInterventiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgInterventiItem();
			}
		}));
		flgInterventiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgInterventiItem();
			}
		});		
		flgInterventiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
				showHideSections();
				if(_FLG_NO.equalsIgnoreCase(getValueAsString("flgInterventi"))) {					
					tipoTrasparenzaVantEconItem.clearValue();
					flgBeneficiariObbligXTipoTraspVantEconItem.clearValue();
					sottotipoTrasparenzaVantEconItem.clearValue();
					flgBeneficiariObbligXSottotipoTraspVantEconItem.clearValue();					
					tipoInterventiItem.clearValue();
					flgBeneficiariObbligXTipoInterventiItem.clearValue();
					sottotipoInterventiItem.clearValue();
					flgBeneficiariObbligXSottotipoInterventiItem.clearValue();					
					tipoAltriProvvedimentiItem.clearValue();
					flgBeneficiariObbligXTipoAltriProvvedimentiItem.clearValue();
					sottotipoAltriProvvedimentiItem.clearValue();
					flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.clearValue();	
					//TODO non devo cancellare flgErogVantaggiEconomici
//					erogVantaggiEconomiciTraspForm.clearValues();
					//TODO non devo cancellare flgAltriProvvedimenti
//					altriProvvedimentiTraspForm.clearValues();
					dettaglioTrasparenzaForm.clearValues();
				}
			}
		});
		
		tipoInterventiDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		tipoInterventiDataSource.addParam("nomeCombo", "VLRTIPO");
		tipoInterventiDataSource.addParam("valoreChiave", getValoreChiaveLoadComboTipoInterventiItem());
		
		tipoInterventiItem = new SelectItem("tipoInterventi", getTitleTipoInterventiItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);
				interventiTraspForm.setValue("flgBeneficiariObbligXTipoInterventi", record.getAttributeAsBoolean("flgBeneficiariObblig"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				interventiTraspForm.setValue("tipoInterventi", "");
				interventiTraspForm.setValue("flgBeneficiariObbligXTipoInterventi", "");
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					interventiTraspForm.setValue("tipoInterventi", "");
					interventiTraspForm.setValue("flgBeneficiariObbligXTipoInterventi", "");
				}
			}
		};
		tipoInterventiItem.setOptionDataSource(tipoInterventiDataSource);
		tipoInterventiItem.setValueField("key");
		tipoInterventiItem.setDisplayField("value");
		tipoInterventiItem.setWidth(700);
		tipoInterventiItem.setDefaultValue(getDefaultValueTipoInterventiItem());
		tipoInterventiItem.setStartRow(true);
		if(isRequiredTipoInterventiItem()) {
			tipoInterventiItem.setAttribute("obbligatorio", true);
		} else {
			tipoInterventiItem.setAllowEmptyValue(true);			
		}
		tipoInterventiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTipoInterventiItem() && isRequiredTipoInterventiItem();
			}
		}));
		tipoInterventiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"))) {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB") ? editing : false);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return showTipoInterventiItem();
			}
		});
		tipoInterventiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedTipoInterventi();
			}
		});
		
		flgBeneficiariObbligXTipoInterventiItem = new HiddenItem("flgBeneficiariObbligXTipoInterventi");
		
		sottotipoInterventiDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		sottotipoInterventiDataSource.addParam("nomeCombo", "VLRSOTTOTIPO");
//		sottotipoInterventiDataSource.addParam("valoreChiave", "");
		
		sottotipoInterventiItem = new SelectItem("sottotipoInterventi", getTitleSottotipoInterventiItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);
				interventiTraspForm.setValue("flgBeneficiariObbligXSottotipoInterventi", record.getAttributeAsBoolean("flgBeneficiariObblig"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				interventiTraspForm.setValue("sottotipoInterventi", "");	
				interventiTraspForm.setValue("flgBeneficiariObbligXSottotipoInterventi", "");	
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					interventiTraspForm.setValue("sottotipoInterventi", "");
					interventiTraspForm.setValue("flgBeneficiariObbligXSottotipoInterventi", "");
				}
			}
		};
		sottotipoInterventiItem.setOptionDataSource(sottotipoInterventiDataSource);
		sottotipoInterventiItem.setValueField("key");
		sottotipoInterventiItem.setDisplayField("value");
		sottotipoInterventiItem.setWidth(700);
		sottotipoInterventiItem.setDefaultValue(getDefaultValueSottotipoInterventiItem());
		sottotipoInterventiItem.setStartRow(true);
		if(isRequiredSottotipoInterventiItem()) {
			sottotipoInterventiItem.setAttribute("obbligatorio", true);
		} else {
			sottotipoInterventiItem.setAllowEmptyValue(true);			
		}
		sottotipoInterventiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showSottotipoInterventiItem() && isRequiredSottotipoInterventiItem();
			}
		}));
		sottotipoInterventiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"))) {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB") ? editing : false);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return showSottotipoInterventiItem();
			}
		});
		sottotipoInterventiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedSottotipoInterventi();
			}
		});
		
		flgBeneficiariObbligXSottotipoInterventiItem = new HiddenItem("flgBeneficiariObbligXSottotipoInterventi");
		
		interventiTraspForm.setFields(flgInterventiItem, tipoInterventiItem, flgBeneficiariObbligXTipoInterventiItem, sottotipoInterventiItem, flgBeneficiariObbligXSottotipoInterventiItem);
	}
	
	public boolean showDetailSectionAltriProvvedimentiTrasp() {
		return showTabTrasparenzaAVB() && showAttributoCustomCablato("ALTRI_PROVVED");
	}
	
	public boolean showDetailSectionAltriProvvedimentiTraspTabTrasp() {
		return showDetailSectionAltriProvvedimentiTrasp() && showDetailSectionAltriProvvFlgErogVantaggiEconomiciInterventi();
	}
	
	public boolean showDetailSectionAltriProvvFlgErogVantaggiEconomiciInterventi() {
		return !_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici")) && !_FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"));		
	}
	
	public String getTitleDetailSectionAltriProvvedimentiTrasp() {
		String label = getLabelAttributoCustomCablato("ALTRI_PROVVED");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri provvedimenti";
	}
	
	protected void createDetailSectionAltriProvvedimentiTrasp() {

		createAltriProvvedimentiTraspForm();

		detailSectionAltriProvvedimentiTrasp = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionAltriProvvedimentiTrasp(), true, true, false, altriProvvedimentiTraspForm);
	}
	
	public boolean showFlgAltriProvvedimentiItem() {
		return showDetailSectionAltriProvvedimentiTrasp() && showAttributoCustomCablato("ALTR_PROVVEDIMENTI");
	}
	
	public String getTitleFlgAltriProvvedimentiItem() {
		String label = getLabelAttributoCustomCablato("ALTR_PROVVEDIMENTI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Altri provvedimenti";
	}
	
	public boolean isRequiredFlgAltriProvvedimentiItem() {
		return showFlgAltriProvvedimentiItem() && getFlgObbligatorioAttributoCustomCablato("ALTR_PROVVEDIMENTI");
	}	
	
	public String getDefaultValueFlgAltriProvvedimentiItem() {
		return getValoreFissoAttributoCustomCablato("ALTR_PROVVEDIMENTI");
	}
	
	public boolean showTipoAltriProvvedimentiItem() {
		return showDetailSectionAltriProvvedimentiTrasp() && showAttributoCustomCablato("TRASPARENZA_TIP_ALTRI_PROVV") && _FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"));
	}
	
	public String getTitleTipoAltriProvvedimentiItem() {
		String label = getLabelAttributoCustomCablato("TRASPARENZA_TIP_ALTRI_PROVV");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Tipologia"; 		
	}
	
	public boolean isRequiredTipoAltriProvvedimentiItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASPARENZA_TIP_ALTRI_PROVV");
	}	
	
	public String getDefaultValueTipoAltriProvvedimentiItem() {
		return getValoreFissoAttributoCustomCablato("TRASPARENZA_TIP_ALTRI_PROVV");
	}
	
	public boolean showSottotipoAltriProvvedimentiItem() {
		return showDetailSectionAltriProvvedimentiTrasp() && showAttributoCustomCablato("TRASPARENZA_SOTTOTIP_ALTRI_PROVV") && _FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"));
	}	
	
	public String getTitleSottotipoAltriProvvedimentiItem() {
		String label = getLabelAttributoCustomCablato("TRASPARENZA_SOTTOTIP_ALTRI_PROVV");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Sottotipologia"; 		
	}
	
	public boolean isRequiredSottotipoAltriProvvedimentiItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASPARENZA_SOTTOTIP_ALTRI_PROVV");
	}	
		
	public String getDefaultValueSottotipoAltriProvvedimentiItem() {
		return getValoreFissoAttributoCustomCablato("TRASPARENZA_SOTTOTIP_ALTRI_PROVV");
	}
	
	protected void createAltriProvvedimentiTraspForm() {

		altriProvvedimentiTraspForm = new DynamicForm();
		altriProvvedimentiTraspForm.setValuesManager(vm);
		altriProvvedimentiTraspForm.setWidth100();
		altriProvvedimentiTraspForm.setPadding(5);
		altriProvvedimentiTraspForm.setWrapItemTitles(false);
		altriProvvedimentiTraspForm.setNumCols(20);
		altriProvvedimentiTraspForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		altriProvvedimentiTraspForm.setTabSet(tabSet);
		altriProvvedimentiTraspForm.setTabID(_TAB_DATI_TRASP_AVB_ID);
		altriProvvedimentiTraspForm.setHeight(1);	
		
		flgAltriProvvedimentiItem = new RadioGroupItem("flgAltriProvvedimenti", getTitleFlgAltriProvvedimentiItem());
		flgAltriProvvedimentiItem.setStartRow(true);
		flgAltriProvvedimentiItem.setValueMap(_FLG_SI, _FLG_NO);		
		flgAltriProvvedimentiItem.setDefaultValue(getDefaultValueFlgAltriProvvedimentiItem());
		flgAltriProvvedimentiItem.setVertical(false);
		flgAltriProvvedimentiItem.setWrap(false);
		flgAltriProvvedimentiItem.setShowDisabled(false);
		if(isRequiredFlgAltriProvvedimentiItem()) {
			flgAltriProvvedimentiItem.setAttribute("obbligatorio", true);
		}
		flgAltriProvvedimentiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return isRequiredFlgAltriProvvedimentiItem();
			}
		}));
		flgAltriProvvedimentiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showFlgAltriProvvedimentiItem();
			}
		});		
		flgAltriProvvedimentiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
				showHideSections();
				if(_FLG_NO.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"))) {					
					tipoTrasparenzaVantEconItem.clearValue();
					flgBeneficiariObbligXTipoTraspVantEconItem.clearValue();
					sottotipoTrasparenzaVantEconItem.clearValue();
					flgBeneficiariObbligXSottotipoTraspVantEconItem.clearValue();					
					tipoInterventiItem.clearValue();
					flgBeneficiariObbligXTipoInterventiItem.clearValue();
					sottotipoInterventiItem.clearValue();
					flgBeneficiariObbligXSottotipoInterventiItem.clearValue();					
					tipoAltriProvvedimentiItem.clearValue();
					flgBeneficiariObbligXTipoAltriProvvedimentiItem.clearValue();
					sottotipoAltriProvvedimentiItem.clearValue();
					flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.clearValue();					
					//TODO non devo cancellare flgErogVantaggiEconomici
//					erogVantaggiEconomiciTraspForm.clearValues();
					//TODO non devo cancellare flgInterventi
//					interventiTraspForm.clearValues();
					dettaglioTrasparenzaForm.clearValues();					
				}
			}
		});
		
		tipoAltriProvvedimentiDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		tipoAltriProvvedimentiDataSource.addParam("nomeCombo", "VLRTIPO");
		tipoAltriProvvedimentiDataSource.addParam("valoreChiave", "PROVVEDIMENTI");
		
		tipoAltriProvvedimentiItem = new SelectItem("tipoAltriProvvedimenti", getTitleTipoAltriProvvedimentiItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);
				altriProvvedimentiTraspForm.setValue("flgBeneficiariObbligXTipoAltriProvvedimenti", record.getAttributeAsBoolean("flgBeneficiariObblig"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				altriProvvedimentiTraspForm.setValue("tipoAltriProvvedimenti", "");
				altriProvvedimentiTraspForm.setValue("flgBeneficiariObbligXTipoAltriProvvedimenti", "");
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					altriProvvedimentiTraspForm.setValue("tipoAltriProvvedimenti", "");
					altriProvvedimentiTraspForm.setValue("flgBeneficiariObbligXTipoAltriProvvedimenti", "");
				}
			}
		};
		tipoAltriProvvedimentiItem.setOptionDataSource(tipoAltriProvvedimentiDataSource);
		tipoAltriProvvedimentiItem.setValueField("key");
		tipoAltriProvvedimentiItem.setDisplayField("value");
		tipoAltriProvvedimentiItem.setWidth(700);
		tipoAltriProvvedimentiItem.setDefaultValue(getDefaultValueTipoAltriProvvedimentiItem());
		tipoAltriProvvedimentiItem.setStartRow(true);
		if(isRequiredTipoAltriProvvedimentiItem()) {
			tipoAltriProvvedimentiItem.setAttribute("obbligatorio", true);
		} else {
			tipoAltriProvvedimentiItem.setAllowEmptyValue(true);			
		}
		tipoAltriProvvedimentiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showTipoAltriProvvedimentiItem() && isRequiredTipoAltriProvvedimentiItem();
			}
		}));
		tipoAltriProvvedimentiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"))) {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB") ? editing : false);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return showTipoAltriProvvedimentiItem();
			}
		});
		tipoAltriProvvedimentiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedTipoAltriProvvedimenti();
			}
		});
		
		flgBeneficiariObbligXTipoAltriProvvedimentiItem = new HiddenItem("flgBeneficiariObbligXTipoAltriProvvedimenti");
		
		sottotipoAltriProvvedimentiDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		sottotipoAltriProvvedimentiDataSource.addParam("nomeCombo", "VLRSOTTOTIPO");
//		sottotipoAltriProvvedimentiDataSource.addParam("valoreChiave", "");
		
		sottotipoAltriProvvedimentiItem = new SelectItem("sottotipoAltriProvvedimenti", getTitleSottotipoAltriProvvedimentiItem()) {
			
			@Override
			public void onOptionClick(Record record) {
				super.onOptionClick(record);
				altriProvvedimentiTraspForm.setValue("flgBeneficiariObbligXSottotipoAltriProvvedimenti", record.getAttributeAsBoolean("flgBeneficiariObblig"));
			}			
			
			@Override
			protected void clearSelect() {
				super.clearSelect();
				altriProvvedimentiTraspForm.setValue("sottotipoAltriProvvedimenti", "");	
				altriProvvedimentiTraspForm.setValue("flgBeneficiariObbligXSottotipoAltriProvvedimenti", "");	
			};		
			
			@Override
			public void setValue(String value) {
				super.setValue(value);
				if (value == null || "".equals(value)) {
					altriProvvedimentiTraspForm.setValue("sottotipoAltriProvvedimenti", "");
					altriProvvedimentiTraspForm.setValue("flgBeneficiariObbligXSottotipoAltriProvvedimenti", "");
				}
			}
		};
		sottotipoAltriProvvedimentiItem.setOptionDataSource(sottotipoAltriProvvedimentiDataSource);
		sottotipoAltriProvvedimentiItem.setValueField("key");
		sottotipoAltriProvvedimentiItem.setDisplayField("value");
		sottotipoAltriProvvedimentiItem.setWidth(700);
		sottotipoAltriProvvedimentiItem.setDefaultValue(getDefaultValueSottotipoAltriProvvedimentiItem());
		sottotipoAltriProvvedimentiItem.setStartRow(true);
		if(isRequiredSottotipoAltriProvvedimentiItem()) {
			sottotipoAltriProvvedimentiItem.setAttribute("obbligatorio", true);
		} else {
			sottotipoAltriProvvedimentiItem.setAllowEmptyValue(true);			
		}
		sottotipoAltriProvvedimentiItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showSottotipoAltriProvvedimentiItem() && isRequiredSottotipoAltriProvvedimentiItem();
			}
		}));
		sottotipoAltriProvvedimentiItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"))) {
					item.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB") ? editing : false);
				} else {
					item.clearValue();
					item.setCanEdit(false);									
				}
				return showSottotipoAltriProvvedimentiItem();
			}
		});
		sottotipoAltriProvvedimentiItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedSottotipoAltriProvvedimenti();
			}
		});
		
		flgBeneficiariObbligXSottotipoAltriProvvedimentiItem = new HiddenItem("flgBeneficiariObbligXSottotipoAltriProvvedimenti");
		
		altriProvvedimentiTraspForm.setFields(flgAltriProvvedimentiItem, tipoAltriProvvedimentiItem, flgBeneficiariObbligXTipoAltriProvvedimentiItem, sottotipoAltriProvvedimentiItem, flgBeneficiariObbligXSottotipoAltriProvvedimentiItem);
	}
	
	public boolean showDetailSectionDettaglioTrasparenza() {
		return showTabTrasparenzaAVB() && showAttributoCustomCablato("DETTAGLIO_TRASPARENZA") && (_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici")) || _FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi")) || _FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti")));
	}
	
	public String getTitleDetailSectionDettaglioTrasparenza() {
		String label = getLabelAttributoCustomCablato("DETTAGLIO_TRASPARENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "";
	}

	protected void createDetailSectionDettaglioTrasparenza() {

		createDettaglioTrasparenzaForm();

		detailSectionDettaglioTrasparenza = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDettaglioTrasparenza(), true, true, false, dettaglioTrasparenzaForm);
	}
	
	public boolean showNormaTrasparenzaVantEconItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_DETTAGLIO_NORMA_TITOLO");
	}
	
	public String getTitleNormaTrasparenzaVantEconItem() {
		String label = getLabelAttributoCustomCablato("TRASP_DETTAGLIO_NORMA_TITOLO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Norma/titolo attribuzione"; 		
	}
	
	public boolean isRequiredNormaTrasparenzaVantEconItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASP_DETTAGLIO_NORMA_TITOLO");
	}
	
	public boolean showModalitaIndividuazioneBeneficiarioItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_MOD_INDIVIDUAZIONE");
	}
	
	public String getTitleModalitaIndividuazioneBeneficiarioItem() {
		String label = getLabelAttributoCustomCablato("TRASP_MOD_INDIVIDUAZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Modalità individuazione beneficiario"; 		
	}
	
	public boolean isRequiredModalitaIndividuazioneBeneficiarioItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASP_MOD_INDIVIDUAZIONE");
	}
	
	public boolean showEstremiDocumentiPrincipaliFascicoloItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_ESTREMI_DOC_FASC");
	}
	
	public String getTitleEstremiDocumentiPrincipaliFascicoloItem() {
		String label = getLabelAttributoCustomCablato("TRASP_ESTREMI_DOC_FASC");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Estremi documenti principali fascicolo"; 		
	}
	
	public boolean showAvvisiPerLaCompilazioneItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_AVVISI_COMPILAZIONE");
	}
	
	public String getTitleAvvisiPerLaCompilazioneItem() {
		String label = getLabelAttributoCustomCablato("TRASP_AVVISI_COMPILAZIONE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Avvisi per la compilazione"; 		
	}
	
	public boolean showUfficioCompetenteTabTraspItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_UFFICIO_COMPETENTE");
	}
	
	public String getTitleUfficioCompetenteTabTraspItem() {
		String label = getLabelAttributoCustomCablato("TRASP_UFFICIO_COMPETENTE");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Ufficio competente"; 		
	}
	
	public boolean showResponsabileProcedimentoTabTraspItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_RESP_PROCEDIMENTO");
	}
	
	public String getTitleResponsabileProcedimentoTabTraspItem() {
		String label = getLabelAttributoCustomCablato("TRASP_RESP_PROCEDIMENTO");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Responsabile procedimento L. 241/90"; 		
	}
	
	public boolean showDataAvvioProcedimentoTabTraspItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_DATA_AVVIO_PROCED");
	}
	
	public String getTitleDataAvvioProcedimentoTabTraspItem() {
		String label = getLabelAttributoCustomCablato("TRASP_DATA_AVVIO_PROCED");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Data avvio del procedimento"; 		
	}
	
	public boolean isRequiredDataAvvioProcedimentoTabTraspItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASP_DATA_AVVIO_PROCED");
	}
	
	public String getDefaultValueDataAvvioProcedimentoTabTraspItem() {
		return getValoreFissoAttributoCustomCablato("TRASP_DATA_AVVIO_PROCED");
	}
	
	public boolean showOggettoProvvedimentoItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_OGGETTO_PROVV");
	}
	
	public String getTitleOggettoProvvedimentoItem() {
		String label = getLabelAttributoCustomCablato("TRASP_OGGETTO_PROVV");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Oggetto provvedimento"; 		
	}
	
	public boolean showDurataRapportoGiuridicoItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_TIPO_DURATA_RAPP_GIU");
	}
	
	public String getTitleDurataRapportoGiuridicoItem() {
		String label = getLabelAttributoCustomCablato("TRASP_TIPO_DURATA_RAPP_GIU");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Durata rapporto giuridico"; 		
	}
		
	public String getDefaultValueDurataRapportoGiuridicoItem() {
		return getValoreFissoAttributoCustomCablato("TRASP_TIPO_DURATA_RAPP_GIU");
	}
		
	public boolean showNumeroMesiDurataRapportoItem() {
		if(showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_NUM_MESI")) {
			return _DURATA_RAPP_GIURID_NUM_MESI.equalsIgnoreCase(getValueAsString("durataRapportoGiuridico"));
		}
		return false;
	}
	
	public String getTitleNumeroMesiDurataRapportoItem() {
		String label = getLabelAttributoCustomCablato("TRASP_NUM_MESI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Numero mesi"; 		
	}
	
	public boolean isRequiredNumeroMesiDurataRapportoItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASP_NUM_MESI");
	}
	
	public String getDefaultValueNumeroMesiDurataRapportoItem() {
		return getValoreFissoAttributoCustomCablato("TRASP_NUM_MESI");
	}
	
	public boolean showDalDurataRapportoItem() {
		if(showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_RAPPORTO_DAL")) {
			return _DURATA_RAPP_GIURID_DA_AL.equalsIgnoreCase(getValueAsString("durataRapportoGiuridico"));
		}
		return false;
	}
	
	public String getTitleDalDurataRapportoItem() {
		String label = getLabelAttributoCustomCablato("TRASP_RAPPORTO_DAL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dal"; 		
	}
	
	public boolean isRequiredDalDurataRapportoItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASP_RAPPORTO_DAL");
	}
	
	public String getDefaultValueDalDurataRapportoItem() {
		return getValoreFissoAttributoCustomCablato("TRASP_RAPPORTO_DAL");
	}
	
	public boolean showAlDurataRapportoItem() {
		if(showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("TRASP_RAPPORTO_AL")) {
			return _DURATA_RAPP_GIURID_DA_AL.equalsIgnoreCase(getValueAsString("durataRapportoGiuridico"));
		}
		return false;
	}
	
	public String getTitleAlDurataRapportoItem() {
		String label = getLabelAttributoCustomCablato("TRASP_RAPPORTO_AL");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "al"; 		
	}
	
	public boolean isRequiredAlDurataRapportoItem() {
		return getFlgObbligatorioAttributoCustomCablato("TRASP_RAPPORTO_AL");
	}
	
	public String getDefaultValueAlDurataRapportoItem() {
		return getValoreFissoAttributoCustomCablato("TRASP_RAPPORTO_AL");
	}
	
	public boolean showAllegatiObbligatoriTrasparenzaItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("LISTA_DESCRIZIONE_ALLEGATI_OBBLIGATORI");
	}
	
	public String getTitleListaAllegatiObbligatoriTrasparenzaItem() {
		String label = getLabelAttributoCustomCablato("LISTA_DESCRIZIONE_ALLEGATI_OBBLIGATORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Elenco allegati obbligatori"; 		
	}
	
	public boolean showAllegatiNonObbligatoriTrasparenzaItem() {
		return showDetailSectionDettaglioTrasparenza() && showAttributoCustomCablato("LISTA_DESCRIZIONE_ALLEGATI_NON_OBBLIGATORI");
	}

	public String getTitleListaAllegatiNonObbligatoriTrasparenzaItem() {
		String label = getLabelAttributoCustomCablato("LISTA_DESCRIZIONE_ALLEGATI_NON_OBBLIGATORI");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Elenco allegati non obbligatori"; 		
	}

	protected void createDettaglioTrasparenzaForm() {

		dettaglioTrasparenzaForm = new DynamicForm();
		dettaglioTrasparenzaForm.setValuesManager(vm);
		dettaglioTrasparenzaForm.setWidth100();
		dettaglioTrasparenzaForm.setPadding(5);
		dettaglioTrasparenzaForm.setWrapItemTitles(false);
		dettaglioTrasparenzaForm.setNumCols(11);
		dettaglioTrasparenzaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		dettaglioTrasparenzaForm.setTabSet(tabSet);
		dettaglioTrasparenzaForm.setTabID(_TAB_DATI_TRASP_AVB_ID);
		dettaglioTrasparenzaForm.setHeight(1);

		normaTrasparenzaVantEconDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		normaTrasparenzaVantEconDataSource.addParam("nomeCombo", "VLR01");
		String chiaveTipo = "";
		if(flgErogVantaggiEconomiciItem!=null && flgErogVantaggiEconomiciItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgErogVantaggiEconomiciItem.getValueAsString())) {
			chiaveTipo = tipoTrasparenzaVantEconItem.getValueAsString() != null ? tipoTrasparenzaVantEconItem.getValueAsString() : "";
		} else if(flgInterventiItem!=null && flgInterventiItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgInterventiItem.getValueAsString())) {
			chiaveTipo = tipoInterventiItem.getValueAsString() != null ? tipoInterventiItem.getValueAsString() : "";
		} else if(flgAltriProvvedimentiItem!=null && flgAltriProvvedimentiItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgAltriProvvedimentiItem.getValueAsString())) {
			chiaveTipo = tipoAltriProvvedimentiItem.getValueAsString() != null ? tipoAltriProvvedimentiItem.getValueAsString() : "";
		}
		normaTrasparenzaVantEconDataSource.addParam("valoreChiave", chiaveTipo);
	
		normaTrasparenzaVantEconItem = new SelectItem("normaTrasparenzaVantEcon", getTitleNormaTrasparenzaVantEconItem());
		normaTrasparenzaVantEconItem.setWidth(700);
		normaTrasparenzaVantEconItem.setColSpan(10);
		normaTrasparenzaVantEconItem.setOptionDataSource(normaTrasparenzaVantEconDataSource);		
		normaTrasparenzaVantEconItem.setValueField("key");
		normaTrasparenzaVantEconItem.setDisplayField("value");
		normaTrasparenzaVantEconItem.setStartRow(true);
		if(isRequiredNormaTrasparenzaVantEconItem()) {
			normaTrasparenzaVantEconItem.setAttribute("obbligatorio", true);
		} else {
			normaTrasparenzaVantEconItem.setAllowEmptyValue(true);			
		}
		normaTrasparenzaVantEconItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showNormaTrasparenzaVantEconItem() && isRequiredNormaTrasparenzaVantEconItem();
			}
		}));
		normaTrasparenzaVantEconItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNormaTrasparenzaVantEconItem();
			}
		});
		normaTrasparenzaVantEconItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				afterChangedNormaTrasparenzaVantEcon();
			}
		});
		
		modalitaIndividuazioneBeneficiarioDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		modalitaIndividuazioneBeneficiarioDataSource.addParam("nomeCombo", "VLR02");
		
		modalitaIndividuazioneBeneficiarioItem = new SelectItem("modalitaIndividuazioneBeneficiario", getTitleModalitaIndividuazioneBeneficiarioItem());
		modalitaIndividuazioneBeneficiarioItem.setWidth(700);
		modalitaIndividuazioneBeneficiarioItem.setColSpan(10);
		modalitaIndividuazioneBeneficiarioItem.setOptionDataSource(modalitaIndividuazioneBeneficiarioDataSource);
		modalitaIndividuazioneBeneficiarioItem.setValueField("key");
		modalitaIndividuazioneBeneficiarioItem.setDisplayField("value");
		modalitaIndividuazioneBeneficiarioItem.setStartRow(true);
		if(isRequiredModalitaIndividuazioneBeneficiarioItem()) {
			modalitaIndividuazioneBeneficiarioItem.setAttribute("obbligatorio", true);
		} else {
			modalitaIndividuazioneBeneficiarioItem.setAllowEmptyValue(true);			
		}
		modalitaIndividuazioneBeneficiarioItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showModalitaIndividuazioneBeneficiarioItem() && isRequiredModalitaIndividuazioneBeneficiarioItem();
			}
		}));
		modalitaIndividuazioneBeneficiarioItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showModalitaIndividuazioneBeneficiarioItem();
			}
		});
		modalitaIndividuazioneBeneficiarioItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
			}
		});
		
		estremiDocumentiPrincipaliFascicoloItem = new TextItem("estremiDocumentiPrincipaliFascicolo", getTitleEstremiDocumentiPrincipaliFascicoloItem());
		estremiDocumentiPrincipaliFascicoloItem.setWidth(700);
		estremiDocumentiPrincipaliFascicoloItem.setColSpan(10);
		estremiDocumentiPrincipaliFascicoloItem.setStartRow(true);
		estremiDocumentiPrincipaliFascicoloItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showEstremiDocumentiPrincipaliFascicoloItem();
			}
		});
		
		avvisiPerLaCompilazioneItem = new TextItem("avvisiPerLaCompilazione", getTitleAvvisiPerLaCompilazioneItem());
		avvisiPerLaCompilazioneItem.setWidth(700);
		avvisiPerLaCompilazioneItem.setColSpan(10);		
		avvisiPerLaCompilazioneItem.setStartRow(true);
		avvisiPerLaCompilazioneItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAvvisiPerLaCompilazioneItem();
			}
		});
		
		ufficioCompetenteTabTraspItem = new TextItem("ufficioCompetenteTabTrasp", getTitleUfficioCompetenteTabTraspItem());
		ufficioCompetenteTabTraspItem.setWidth(700);
		ufficioCompetenteTabTraspItem.setColSpan(10);
		ufficioCompetenteTabTraspItem.setStartRow(true);
		ufficioCompetenteTabTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
//				if(showProponentiItem()) {
//					if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
//						RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
//						if(listaProponenti != null && listaProponenti.getLength() > 0) {
//							if(listaProponenti.get(0).getAttribute("idUo") != null && !"".equals(listaProponenti.get(0).getAttribute("idUo"))) {
//								ufficioCompetenteTabTraspItem.setValue(listaProponenti.get(0).getAttribute("descrizione"));
//							}			
//						}
//					}
//				} else {
//					if(isAbilToSelUffPropEsteso()) {
//						RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
//						if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
//							if(listaUfficioProponente.get(0).getAttribute("idUo") != null && !"".equals(listaUfficioProponente.get(0).getAttribute("idUo"))) {
//								ufficioCompetenteTabTraspItem.setValue(listaUfficioProponente.get(0).getAttribute("descrizione"));
//							}
//						}
//					} else if (getValueAsString("ufficioProponente") != null && !"".equals(getValueAsString("ufficioProponente"))) {
//						ufficioCompetenteTabTraspItem.setValue(getValueAsString("desUfficioProponente"));
//					}						
//				}
//				return showUfficioCompetenteTabTraspItem();
				// per il momento li nascondiamo sempre
				return false;
			}
		});
		
		responsabileProcedimentoTabTraspItem = new TextItem("responsabileProcedimentoTabTrasp", getTitleResponsabileProcedimentoTabTraspItem());
		responsabileProcedimentoTabTraspItem.setWidth(700);
		responsabileProcedimentoTabTraspItem.setColSpan(10);
		responsabileProcedimentoTabTraspItem.setStartRow(true);
		responsabileProcedimentoTabTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
//				if(isRdPUgualeAdottante()) {
//					RecordList listaAdottante = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaAdottante") : null;
//					if(listaAdottante != null && listaAdottante.getLength() > 0) {
//						responsabileProcedimentoTabTraspItem.setValue(listaAdottante.get(0).getAttribute("desDirigenteAdottante"));
//					}
//				} else {
//					RecordList listaRdP = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaRdP") : null;
//					if(listaRdP != null && listaRdP.getLength() > 0) {
//						responsabileProcedimentoTabTraspItem.setValue(listaRdP.get(0).getAttribute("desResponsabileDiProcedimento"));
//					}
//				}	
//				return showResponsabileProcedimentoTabTraspItem();
				// per il momento li nascondiamo sempre
				return false;
			}
		});
		
		dataAvvioProcedimentoTabTraspItem = new DateItem("dataAvvioProcedimento", getTitleDataAvvioProcedimentoTabTraspItem());		
		dataAvvioProcedimentoTabTraspItem.setDateFormatter(DateDisplayFormat.TOEUROPEANSHORTDATE);
		dataAvvioProcedimentoTabTraspItem.setColSpan(1);
		dataAvvioProcedimentoTabTraspItem.setStartRow(true);
		dataAvvioProcedimentoTabTraspItem.setDefaultValue(getDefaultValueDataAvvioProcedimentoTabTraspItem());			
		if(isRequiredDataAvvioProcedimentoTabTraspItem()) {
			dataAvvioProcedimentoTabTraspItem.setAttribute("obbligatorio", true);
		}
		dataAvvioProcedimentoTabTraspItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showDataAvvioProcedimentoTabTraspItem() && isRequiredDataAvvioProcedimentoTabTraspItem();
			}
		}));
		dataAvvioProcedimentoTabTraspItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDataAvvioProcedimentoTabTraspItem();
			}
		});
		
		oggettoProvvedimentoItem = new TextItem("oggettoProvvedimento", getTitleOggettoProvvedimentoItem());
		oggettoProvvedimentoItem.setWidth(700);
		oggettoProvvedimentoItem.setColSpan(10);
		oggettoProvvedimentoItem.setStartRow(true);
		oggettoProvvedimentoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
//				return showOggettoProvvedimentoItem();
				// per il momento li nascondiamo sempre
				return false;
			}
		});
		
		durataRapportoGiuridicoItem = new RadioGroupItem("durataRapportoGiuridico", getTitleDurataRapportoGiuridicoItem());
		durataRapportoGiuridicoItem.setColSpan(5);
		durataRapportoGiuridicoItem.setWidth(250);
		durataRapportoGiuridicoItem.setStartRow(true);
		durataRapportoGiuridicoItem.setValueMap(_DURATA_RAPP_GIURID_NUM_MESI, _DURATA_RAPP_GIURID_DA_AL, _DURATA_RAPP_GIURID_NON_APPLICABILE);
		durataRapportoGiuridicoItem.setDefaultValue(getDefaultValueDurataRapportoGiuridicoItem());		
		durataRapportoGiuridicoItem.setVertical(false);
		durataRapportoGiuridicoItem.setWrap(false);
		durataRapportoGiuridicoItem.setShowDisabled(false);		
		durataRapportoGiuridicoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {				
				return showDurataRapportoGiuridicoItem();
			}
		});		
		durataRapportoGiuridicoItem.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
			}
		});
		
		numeroMesiDurataRapportoItem = new NumericItem("numeroMesiDurataRapporto", getTitleNumeroMesiDurataRapportoItem());
		numeroMesiDurataRapportoItem.setColSpan(1);
		numeroMesiDurataRapportoItem.setStartRow(true);		
		numeroMesiDurataRapportoItem.setDefaultValue(getDefaultValueNumeroMesiDurataRapportoItem());
		if(isRequiredNumeroMesiDurataRapportoItem()) {
			numeroMesiDurataRapportoItem.setAttribute("obbligatorio", true);			
		} 
		numeroMesiDurataRapportoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showNumeroMesiDurataRapportoItem() && isRequiredNumeroMesiDurataRapportoItem();
			}
		}));
		numeroMesiDurataRapportoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showNumeroMesiDurataRapportoItem();
			}
		});		
		
		dalDurataRapportoItem = new DateItem("dalDurataRapporto", getTitleDalDurataRapportoItem());
		dalDurataRapportoItem.setDateFormatter(DateDisplayFormat.TOEUROPEANSHORTDATE);
		dalDurataRapportoItem.setColSpan(1);
		dalDurataRapportoItem.setStartRow(true);
		dalDurataRapportoItem.setDefaultValue(getDefaultValueDalDurataRapportoItem());
		if(isRequiredDalDurataRapportoItem()) {
			dalDurataRapportoItem.setAttribute("obbligatorio", true);
		}
		dalDurataRapportoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showDalDurataRapportoItem() && isRequiredDalDurataRapportoItem();
			}
		}));
		dalDurataRapportoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDalDurataRapportoItem();
			}
		});		
		
		alDurataRapportoItem = new DateItem("alDurataRapporto", getTitleAlDurataRapportoItem());
		alDurataRapportoItem.setDateFormatter(DateDisplayFormat.TOEUROPEANSHORTDATE);
		alDurataRapportoItem.setColSpan(1);
		alDurataRapportoItem.setDefaultValue(getDefaultValueAlDurataRapportoItem());
		if(isRequiredAlDurataRapportoItem()) {
			alDurataRapportoItem.setAttribute("obbligatorio", true);
		}
		alDurataRapportoItem.setValidators(new RequiredIfValidator(new RequiredIfFunction() {
			
			@Override
			public boolean execute(FormItem formItem, Object value) {
				return showAlDurataRapportoItem() && isRequiredAlDurataRapportoItem();
			}
		}));
		alDurataRapportoItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAlDurataRapportoItem();
			}
		});		
		
		listaAllegatiObbligatoriTrasparenzaItem = new TextItem("listaAllegatiObbligatoriTrasparenza", getTitleListaAllegatiObbligatoriTrasparenzaItem());
		listaAllegatiObbligatoriTrasparenzaItem.setWidth(700);
		listaAllegatiObbligatoriTrasparenzaItem.setColSpan(10);		
		listaAllegatiObbligatoriTrasparenzaItem.setStartRow(true);
		listaAllegatiObbligatoriTrasparenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAllegatiObbligatoriTrasparenzaItem();
			}
		});
		
		listaIdAllegatiObbligatoriTrasparenzaItem = new HiddenItem("listaIdAllegatiObbligatoriTrasparenza");
		
		listaAllegatiNonObbligatoriTrasparenzaItem = new TextItem("listaAllegatiNonObbligatoriTrasparenza", getTitleListaAllegatiNonObbligatoriTrasparenzaItem());
		listaAllegatiNonObbligatoriTrasparenzaItem.setWidth(700);
		listaAllegatiNonObbligatoriTrasparenzaItem.setColSpan(10);		
		listaAllegatiNonObbligatoriTrasparenzaItem.setStartRow(true);
		listaAllegatiNonObbligatoriTrasparenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showAllegatiNonObbligatoriTrasparenzaItem();
			}
		});
		
		listaIdAllegatiNonObbligatoriTrasparenzaItem = new HiddenItem("listaIdAllegatiNonObbligatoriTrasparenza");
		
		dettaglioTrasparenzaForm.setFields(
			normaTrasparenzaVantEconItem, 
			modalitaIndividuazioneBeneficiarioItem, 
			estremiDocumentiPrincipaliFascicoloItem, 
			avvisiPerLaCompilazioneItem, 
			ufficioCompetenteTabTraspItem, 
			responsabileProcedimentoTabTraspItem, 
			dataAvvioProcedimentoTabTraspItem, 
			oggettoProvvedimentoItem, 
			durataRapportoGiuridicoItem, 
			numeroMesiDurataRapportoItem, 
			dalDurataRapportoItem, 
			alDurataRapportoItem, 
			listaAllegatiObbligatoriTrasparenzaItem, 
			listaIdAllegatiObbligatoriTrasparenzaItem, 
			listaAllegatiNonObbligatoriTrasparenzaItem, 
			listaIdAllegatiNonObbligatoriTrasparenzaItem
		);
	}
	
	public boolean showDetailSectionBeneficiariTrasparenza() {
		return showBeneficiariTrasparenzaItem();
	}	
	
	public String getTitleDetailSectionBeneficiariTrasparenza() {
		return getTitleBeneficiariTrasparenzaItem();
	}
	
	public boolean isRequiredDetailSectionBeneficiariTrasparenza() {
		return isRequiredBeneficiariTrasparenzaItem();
	}
	
	protected void createDetailSectionBeneficiariTrasparenza() {
		
		createBeneficiariTrasparenzaForm();
		
		detailSectionBeneficiariTrasparenza = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionBeneficiariTrasparenza(), true, true, isRequiredDetailSectionBeneficiariTrasparenza(), beneficiariTrasparenzaForm);
	}
	
	public boolean showBeneficiariTrasparenzaItem() {
		return showTabTrasparenzaAVB() && showAttributoCustomCablato("BENEFICIARI_TRASPARENZA") /*&& (_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici")) || _FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi")) || _FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti")))*/;
	}
	
	public boolean isRequiredBeneficiariTrasparenzaItem() {
		if(showBeneficiariTrasparenzaItem()) {
			if(getFlgObbligatorioAttributoCustomCablato("BENEFICIARI_TRASPARENZA")) {
				return true;
			} else if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"))) {
				String tipo = tipoTrasparenzaVantEconItem.getValueAsString() != null ? tipoTrasparenzaVantEconItem.getValueAsString() : "";
				boolean flgBeneficiariObbligXTipo = !"".equals(tipo) && flgBeneficiariObbligXTipoTraspVantEconItem.getValue() != null && (Boolean) flgBeneficiariObbligXTipoTraspVantEconItem.getValue();
				String sottotipo = sottotipoTrasparenzaVantEconItem.getValueAsString() != null ? sottotipoTrasparenzaVantEconItem.getValueAsString() : "";
				boolean flgBeneficiariObbligXSottotipo = !"".equals(sottotipo) && flgBeneficiariObbligXSottotipoTraspVantEconItem.getValue() != null && (Boolean) flgBeneficiariObbligXSottotipoTraspVantEconItem.getValue();
				return flgBeneficiariObbligXTipo || flgBeneficiariObbligXSottotipo;
			} else if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"))) {
				String tipo = tipoInterventiItem.getValueAsString() != null ? tipoInterventiItem.getValueAsString() : "";
				boolean flgBeneficiariObbligXTipo = !"".equals(tipo) && flgBeneficiariObbligXTipoInterventiItem.getValue() != null && (Boolean) flgBeneficiariObbligXTipoInterventiItem.getValue();
				String sottotipo = sottotipoInterventiItem.getValueAsString() != null ? sottotipoInterventiItem.getValueAsString() : "";
				boolean flgBeneficiariObbligXSottotipo = !"".equals(sottotipo) && flgBeneficiariObbligXSottotipoInterventiItem.getValue() != null && (Boolean) flgBeneficiariObbligXSottotipoInterventiItem.getValue();
				return flgBeneficiariObbligXTipo || flgBeneficiariObbligXSottotipo;
			} else if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"))) {
				String tipo = tipoAltriProvvedimentiItem.getValueAsString() != null ? tipoAltriProvvedimentiItem.getValueAsString() : "";
				boolean flgBeneficiariObbligXTipo = !"".equals(tipo) && flgBeneficiariObbligXTipoAltriProvvedimentiItem.getValue() != null && (Boolean) flgBeneficiariObbligXTipoAltriProvvedimentiItem.getValue();
				String sottotipo = sottotipoAltriProvvedimentiItem.getValueAsString() != null ? sottotipoAltriProvvedimentiItem.getValueAsString() : "";
				boolean flgBeneficiariObbligXSottotipo = !"".equals(sottotipo) && flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.getValue() != null && (Boolean) flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.getValue();
				return flgBeneficiariObbligXTipo || flgBeneficiariObbligXSottotipo;
			}
		}
		return false;
	}
	
	public String getTitleBeneficiariTrasparenzaItem() {
		String label = getLabelAttributoCustomCablato("BENEFICIARI_TRASPARENZA");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Beneficiari";
	}
	
	public boolean isNotReplicableBeneficiariTrasparenzaItem() {
		Integer maxNumValori = getMaxNumValoriAttributoCustomCablato("BENEFICIARI_TRASPARENZA");
		return maxNumValori != null && maxNumValori.intValue() == 1;
	}		
	
	protected void createBeneficiariTrasparenzaForm() {
		
		beneficiariTrasparenzaForm = new DynamicForm();
		beneficiariTrasparenzaForm.setValuesManager(vm);
		beneficiariTrasparenzaForm.setWidth100();
		beneficiariTrasparenzaForm.setPadding(5);
		beneficiariTrasparenzaForm.setWrapItemTitles(false);
		beneficiariTrasparenzaForm.setNumCols(12);
		beneficiariTrasparenzaForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		beneficiariTrasparenzaForm.setTabSet(tabSet);
		beneficiariTrasparenzaForm.setTabID(_TAB_DATI_TRASP_AVB_ID);
		beneficiariTrasparenzaForm.setHeight(1);
		
		/*
		listaBeneficiariTrasparenzaItem = new DestVantaggioItem() {
			
			@Override
			public boolean isBeneficiariTrasparenza() {
				return true;
			}
			
			@Override
			public boolean showTipo() {
				return showAttributoCustomCablato("TIPO_BENEF_TRASP");
			}
			
			@Override
			public String getTitleTipo() {
				String label = getLabelAttributoCustomCablato("TIPO_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Tipo";
			}
			
			@Override
			public boolean isRequiredTipo() {
				return getFlgObbligatorioAttributoCustomCablato("TIPO_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableTipo() {
				return getFlgEditabileAttributoCustomCablato("TIPO_BENEF_TRASP");
			}
			
			@Override
			public boolean showTipoPersona() {
				return showAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public String getTitleTipoPersona() {
				String label = getLabelAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Persona";
			}
			
			@Override
			public boolean isRequiredTipoPersona() {
				return getFlgObbligatorioAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public HashMap<String, String> getValueMapTipoPersona() {
				return getValueMapAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public String getDefaultValueTipoPersona() {
				return getValoreFissoAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableTipoPersona() {
				return getFlgEditabileAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public boolean showCognome() {
				return showAttributoCustomCablato("COGNOME_BENEF_TRASP");
			}
			
			@Override
			public String getTitleCognome() {
				String label = getLabelAttributoCustomCablato("COGNOME_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Cognome";
			}
			
			@Override
			public boolean isRequiredCognome() {
				return getFlgObbligatorioAttributoCustomCablato("COGNOME_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableCognome() {
				return getFlgEditabileAttributoCustomCablato("COGNOME_BENEF_TRASP");
			}
			
			@Override
			public boolean showNome() {
				return showAttributoCustomCablato("NOME_BENEF_TRASP");
			}
			
			@Override
			public String getTitleNome() {
				String label = getLabelAttributoCustomCablato("NOME_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Nome";
			}
			
			@Override
			public boolean isRequiredNome() {
				return getFlgObbligatorioAttributoCustomCablato("NOME_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableNome() {
				return getFlgEditabileAttributoCustomCablato("NOME_BENEF_TRASP");
			}
			
			@Override
			public boolean showRagioneSociale() {
				return showAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
			}
			
			@Override
			public String getTitleRagioneSociale() {
				String label = getLabelAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Ragione sociale";
			}
			
			@Override
			public boolean isRequiredRagioneSociale() {
				return getFlgObbligatorioAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableRagioneSociale() {
				return getFlgEditabileAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
			}
			
			@Override
			public boolean showCodFiscalePIVA() {
				return showAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
			}
			
			@Override
			public String getTitleCodFiscalePIVA() {
				String label = getLabelAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "C.F./P.I.";
			}
			
			@Override
			public String getTitleCodFiscale() {
				String label = getLabelAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label.substring(0, label.indexOf("/"));
				}
				return "C.F.";
			}
			
			@Override
			public boolean isRequiredCodFiscalePIVA() {
				return getFlgObbligatorioAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableCodFiscalePIVA() {
				return getFlgEditabileAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
			}
			 
			@Override
			public boolean showImporto() {
				return showAttributoCustomCablato("IMPORTO_BENEF_TRASP");
			}
			
			@Override
			public String getTitleImporto() {
				String label = getLabelAttributoCustomCablato("IMPORTO_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Importo (&euro;)";
			}
			
			@Override
			public boolean isRequiredImporto() {
				return getFlgObbligatorioAttributoCustomCablato("IMPORTO_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableImporto() {
				return getFlgEditabileAttributoCustomCablato("IMPORTO_BENEF_TRASP");
			}
			
			@Override
			public boolean showFlgPrivacy() {
				return showAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
			}
				
			@Override
			public String getTitleFlgPrivacy() {
				String label = getLabelAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "dati protetti da privacy";
			}
			
			@Override
			public boolean getDefaultValueAsBooleanFlgPrivacy() {
				return getValoreFissoAsBooleanAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
			}		
			
			@Override
			public boolean isEditableFlgPrivacy() {
				return getFlgEditabileAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
			}
				
			@Override
			public Boolean validate() {
				// se il tab non viene aperto non viene chiamato lo showIf e di conseguenza non viene settato l'attributo "obbligatorio" sul ReplicableItem quindi non scatta la validazione
				if(isRequiredBeneficiariTrasparenzaItem()) {
					listaBeneficiariTrasparenzaItem.setAttribute("obbligatorio", true);
					detailSectionBeneficiariTrasparenza.setRequired(true);
				} else {
					listaBeneficiariTrasparenzaItem.setAttribute("obbligatorio", false);
					detailSectionBeneficiariTrasparenza.setRequired(false);
				}
				listaBeneficiariTrasparenzaItem.storeValue(beneficiariTrasparenzaForm.getValueAsRecordList(listaBeneficiariTrasparenzaItem.getName()));
				return super.validate();
			}
			
			@Override
			public boolean skipValidation() {
				if(showBeneficiariTrasparenzaItem()) {
					return super.skipValidation();
				}
				return true;
			}				
		};
		listaBeneficiariTrasparenzaItem.setName("listaBeneficiariTrasparenza");
		listaBeneficiariTrasparenzaItem.setShowTitle(false);
		listaBeneficiariTrasparenzaItem.setColSpan(20);
		if(isNotReplicableBeneficiariTrasparenzaItem()) {
			listaBeneficiariTrasparenzaItem.setNotReplicable(true);
		}		
//		if(getFlgObbligatorioAttributoCustomCablato("BENEFICIARI_TRASPARENZA") || _FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"))) {
//			listaBeneficiariTrasparenzaItem.setAttribute("obbligatorio", true);
//		}
		listaBeneficiariTrasparenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredBeneficiariTrasparenzaItem()) {
					listaBeneficiariTrasparenzaItem.setAttribute("obbligatorio", true);
					detailSectionBeneficiariTrasparenza.setRequired(true);
				} else {
					listaBeneficiariTrasparenzaItem.setAttribute("obbligatorio", false);
					detailSectionBeneficiariTrasparenza.setRequired(false);
				}
				listaBeneficiariTrasparenzaItem.storeValue(form.getValueAsRecordList(listaBeneficiariTrasparenzaItem.getName()));
				return showBeneficiariTrasparenzaItem();
			}
		});	
		*/
		
		listaBeneficiariTrasparenzaItem = new ListaBeneficiariTrasparenzaItem("listaBeneficiariTrasparenza") {
			
			@Override
			public boolean showTipo() {
				return showAttributoCustomCablato("TIPO_BENEF_TRASP");
			}
			
			@Override
			public String getTitleTipo() {
				String label = getLabelAttributoCustomCablato("TIPO_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Tipo";
			}
			
			@Override
			public boolean isRequiredTipo() {
				return getFlgObbligatorioAttributoCustomCablato("TIPO_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableTipo() {
				return getFlgEditabileAttributoCustomCablato("TIPO_BENEF_TRASP");
			}
			
			@Override
			public boolean showTipoPersona() {
				return showAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public String getTitleTipoPersona() {
				String label = getLabelAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Persona";
			}
			
			@Override
			public boolean isRequiredTipoPersona() {
				return getFlgObbligatorioAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public HashMap<String, String> getValueMapTipoPersona() {
				return getValueMapAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public String getDefaultValueTipoPersona() {
				return getValoreFissoAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableTipoPersona() {
				return getFlgEditabileAttributoCustomCablato("TIPO_PERSONA_BENEF_TRASP");
			}
			
			@Override
			public boolean showCognome() {
				return showAttributoCustomCablato("COGNOME_BENEF_TRASP");
			}
			
			@Override
			public String getTitleCognome() {
				String label = getLabelAttributoCustomCablato("COGNOME_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Cognome";
			}
			
			@Override
			public boolean isRequiredCognome() {
				return getFlgObbligatorioAttributoCustomCablato("COGNOME_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableCognome() {
				return getFlgEditabileAttributoCustomCablato("COGNOME_BENEF_TRASP");
			}
			
			@Override
			public boolean showNome() {
				return showAttributoCustomCablato("NOME_BENEF_TRASP");
			}
			
			@Override
			public String getTitleNome() {
				String label = getLabelAttributoCustomCablato("NOME_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Nome";
			}
			
			@Override
			public boolean isRequiredNome() {
				return getFlgObbligatorioAttributoCustomCablato("NOME_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableNome() {
				return getFlgEditabileAttributoCustomCablato("NOME_BENEF_TRASP");
			}
			
			@Override
			public boolean showRagioneSociale() {
				return showAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
			}
			
			@Override
			public String getTitleRagioneSociale() {
				String label = getLabelAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Ragione sociale";
			}
			
			@Override
			public boolean isRequiredRagioneSociale() {
				return getFlgObbligatorioAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableRagioneSociale() {
				return getFlgEditabileAttributoCustomCablato("RAG_SOC_BENEF_TRASP");
			}
			
			@Override
			public boolean showCodFiscalePIVA() {
				return showAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
			}
			
			@Override
			public String getTitleCodFiscalePIVA() {
				String label = getLabelAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "C.F./P.I.";
			}
			
			@Override
			public String getTitleCodFiscale() {
				String label = getLabelAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					if(label.indexOf("/") != -1) {
						return label.substring(0, label.indexOf("/"));
					} else {
						return label;
					}
				}
				return "C.F.";
			}
			
			@Override
			public boolean isRequiredCodFiscalePIVA() {
				return getFlgObbligatorioAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableCodFiscalePIVA() {
				return getFlgEditabileAttributoCustomCablato("CF_PIVA_BENEF_TRASP");
			}
			 
			@Override
			public boolean showImporto() {
				return showAttributoCustomCablato("IMPORTO_BENEF_TRASP");
			}
			
			@Override
			public String getTitleImporto() {
				String label = getLabelAttributoCustomCablato("IMPORTO_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "Importo (&euro;)";
			}
			
			@Override
			public boolean isRequiredImporto() {
				return getFlgObbligatorioAttributoCustomCablato("IMPORTO_BENEF_TRASP");
			}
			
			@Override
			public boolean isEditableImporto() {
				return getFlgEditabileAttributoCustomCablato("IMPORTO_BENEF_TRASP");
			}
			
			@Override
			public boolean showFlgPrivacy() {
				return showAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
			}
				
			@Override
			public String getTitleFlgPrivacy() {
				String label = getLabelAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
				if(label != null && !"".equals(label)) {
					return label;
				}
				return "dati protetti da privacy";
			}
			
			@Override
			public boolean getDefaultValueAsBooleanFlgPrivacy() {
				return getValoreFissoAsBooleanAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
			}		
			
			@Override
			public boolean isEditableFlgPrivacy() {
				return getFlgEditabileAttributoCustomCablato("FLG_PRIVACY_BENEF_TRASP");
			}
			
			@Override
			public Boolean validate() {				
				if(showBeneficiariTrasparenzaItem()) {
					return super.validate();
				} else {
					return true;
				}				
			}
			
			@Override
			public boolean hasDatiSensibili() {
				if(showBeneficiariTrasparenzaItem()) {
					return super.hasDatiSensibili();
				} else {
					return false;
				}			
			}
			
			@Override
			public void onClickImportXlsButton(String uriFileImportExcel, String mimetype) {
				manageImportListaBeneficiari(uriFileImportExcel, mimetype);			
			}

			private void manageImportListaBeneficiari(String uriFileImportExcel, String mimetype) {

				Layout.showWaitPopup("Caricamento beneficiari in corso...");
				final GWTRestDataSource lBeneficiariTrasparenzaDataSource = new GWTRestDataSource("BeneficiariTrasparenzaDataSource");
				lBeneficiariTrasparenzaDataSource.extraparam.put("uriExcel", uriFileImportExcel);
				lBeneficiariTrasparenzaDataSource.extraparam.put("mimetype", mimetype);
				
				HashMap<String, String> mappaObbligatorieta = createMappaObbligatorieta(listaBeneficiariTrasparenzaItem);
				
				Record record = new Record();
				record.setAttribute("uriExcel", uriFileImportExcel);
				record.setAttribute("mimetype", mimetype);
				record.setAttribute("mappaObbligatorieta", new Record(mappaObbligatorieta));
								
				lBeneficiariTrasparenzaDataSource.performCustomOperation("importaDestVantaggioFromExcel", record, new DSCallback() {							
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						Layout.hideWaitPopup();
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record record = response.getData()[0];
							RecordList data = record.getAttributeAsRecordList("listaDestVantaggioBean");
							for(int i=0; i<data.getLength(); i++) {
								String id = data.get(i).getAttribute("id");
								if(id==null || "".equalsIgnoreCase(id)) {
									data.get(i).setAttribute("id", "NEW_" + count++);
								}
							}						
							listaBeneficiariTrasparenzaItem.setData(data);	
							RecordList listaErroreRigaExcel = record.getAttributeAsRecordList("listaErroreRigaExcelBean");
							if(listaErroreRigaExcel != null && listaErroreRigaExcel.getLength() >          0) {
								RecordList listaErrori = new RecordList();
								for (int i = 0; i < listaErroreRigaExcel.getLength(); i++) {
									Record recordInError = listaErroreRigaExcel.get(i);
									String numeroRiga = recordInError.getAttribute("numeroRiga");
									String motivo = recordInError.getAttribute("motivo");
									
									Record recordErrore = new Record();
									recordErrore.setAttribute("idError", numeroRiga);
									recordErrore.setAttribute("descrizione", motivo);
									listaErrori.add(recordErrore);
									
								}
								RecordList listaDestVantaggioBean = record.getAttributeAsRecordList("listaDestVantaggioBean");
								int numRecordTotali = listaDestVantaggioBean!=null ? listaDestVantaggioBean.getLength() + listaErroreRigaExcel.getLength() : listaErroreRigaExcel.getLength();
								ErroreMassivoPopup errorePopup = new ErroreMassivoPopup(nomeEntita, "Numero riga", listaErrori, numRecordTotali, LARG_POPUP_ERR_MASS,
										ALT_POPUP_ERR_MASS, "Righe in errore dell'excel importato");
								errorePopup.show();
							}
						} 				
					}
				}, new DSRequest());				
			}

			@Override
			public void onClickDownloadTemplateExcelButton() {
				String uriFileExcel = AurigaLayout.getParametroDB("URI_EXCEL_BENEFICIARI");
				if(uriFileExcel != null && !"".equals(uriFileExcel)) {
					Record lRecord = new Record();
					lRecord.setAttribute("displayFilename", "Beneficiari.xlsx");
					lRecord.setAttribute("uri", uriFileExcel);
					lRecord.setAttribute("sbustato", "false");
					lRecord.setAttribute("remoteUri", "true");
					DownloadFile.downloadFromRecord(lRecord, "FileToExtractBean");	
				} else {
					AurigaLayout.addMessage(new MessageBean("Nessuna lista beneficiari disponibile", "", MessageType.ERROR));
				}							
			}

			@Override
			public boolean isGrigliaEditabile() {
				return true;
			}	
		};
		listaBeneficiariTrasparenzaItem.setShowTitle(false);
		listaBeneficiariTrasparenzaItem.setColSpan(20);	
		listaBeneficiariTrasparenzaItem.setHeight(245);	
		listaBeneficiariTrasparenzaItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				if(isRequiredBeneficiariTrasparenzaItem()) {
					detailSectionBeneficiariTrasparenza.setRequired(true);
				} else {
					detailSectionBeneficiariTrasparenza.setRequired(false);
				}
				return showBeneficiariTrasparenzaItem();
			}
		});	
		
		beneficiariTrasparenzaForm.setFields(listaBeneficiariTrasparenzaItem);	
	}
	
	protected HashMap<String, String> createMappaObbligatorieta(
			ListaBeneficiariTrasparenzaItem listaBeneficiariTrasparenzaItem) {
		
		HashMap<String, String> mappaObbligatorieta = new HashMap<String, String>();
		mappaObbligatorieta.put("tipoPersona", listaBeneficiariTrasparenzaItem.isRequiredTipoPersona() ? "true" : "false");
		mappaObbligatorieta.put("nome", listaBeneficiariTrasparenzaItem.isRequiredNome() ? "true" : "false");
		mappaObbligatorieta.put("cognome", listaBeneficiariTrasparenzaItem.isRequiredCognome() ? "true" : "false");
		mappaObbligatorieta.put("ragioneSociale", listaBeneficiariTrasparenzaItem.isRequiredRagioneSociale() ? "true" : "false");
		mappaObbligatorieta.put("codFiscalePIVA", listaBeneficiariTrasparenzaItem.isRequiredCodFiscalePIVA() ? "true" : "false");
		mappaObbligatorieta.put("importo", listaBeneficiariTrasparenzaItem.isRequiredImporto() ? "true" : "false");
		mappaObbligatorieta.put("tipo", listaBeneficiariTrasparenzaItem.isRequiredTipo() ? "true" : "false");
		
		return mappaObbligatorieta;
	}

	public void afterChangedTipoTrasparenzaVantEcon() {
		aggiornaLoadComboSottotipoTrasparenzaVantEcon(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				aggiornaLoadComboNormaTitoloAttribuzione(true, new ServiceCallback<String>() {
					
					@Override
					public void execute(String value) {
						aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
							
							@Override
							public void execute(String value) {
								aggiornaLoadComboAllegatiTrasparenzaVantEcon();
								redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
							}
						});
					}
				});
			}
		});
	}
	
	public void afterChangedSottotipoTrasparenzaVantEcon() {
		aggiornaLoadComboNormaTitoloAttribuzione(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
					
					@Override
					public void execute(String value) {
						aggiornaLoadComboAllegatiTrasparenzaVantEcon();
						redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
					}
				});
			}
		});
	}
	
	public void afterChangedTipoInterventi() {
		aggiornaLoadComboSottotipoInterventi(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				aggiornaLoadComboNormaTitoloAttribuzione(true, new ServiceCallback<String>() {
					
					@Override
					public void execute(String value) {
						aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
							
							@Override
							public void execute(String value) {
								aggiornaLoadComboAllegatiInterventi();
								redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
							}
						});
					}
				});
			}
		});
	}
	
	public void afterChangedSottotipoInterventi() {
		aggiornaLoadComboNormaTitoloAttribuzione(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
					
					@Override
					public void execute(String value) {
						aggiornaLoadComboAllegatiInterventi();
						redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
					}
				});
			}
		});
	}
	
	public void afterChangedTipoAltriProvvedimenti() {
		aggiornaLoadComboSottotipoAltriProvvedimenti(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				aggiornaLoadComboNormaTitoloAttribuzione(true, new ServiceCallback<String>() {
					
					@Override
					public void execute(String value) {
						aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
							
							@Override
							public void execute(String value) {
								aggiornaLoadComboAllegatiAltriProvvedimenti();
								redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
							}
						});
					}
				});
			}
		});
	}
	
	public void afterChangedSottotipoAltriProvvedimenti() {
		aggiornaLoadComboNormaTitoloAttribuzione(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
					
					@Override
					public void execute(String value) {
						aggiornaLoadComboAllegatiAltriProvvedimenti();
						redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
					}
				});
			}
		});
	}
	
	public void afterChangedNormaTrasparenzaVantEcon() {
		aggiornaLoadComboModalitaIndividuazioneBeneficiario(true, new ServiceCallback<String>() {
			
			@Override
			public void execute(String value) {
				if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgErogVantaggiEconomici"))) {
					aggiornaLoadComboAllegatiTrasparenzaVantEcon();
				} else if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgInterventi"))) {
					aggiornaLoadComboAllegatiInterventi();
				} else if(_FLG_SI.equalsIgnoreCase(getValueAsString("flgAltriProvvedimenti"))) {
					aggiornaLoadComboAllegatiAltriProvvedimenti();
				}
				redrawTabForms(_TAB_DATI_TRASP_AVB_ID);
			}
		});
	}
	
	public void aggiornaLoadComboSottotipoTrasparenzaVantEcon(boolean onCascadeAfterChanged, final ServiceCallback<String> callback) {
		if(onCascadeAfterChanged) {
			sottotipoTrasparenzaVantEconItem.clearValue();
			flgBeneficiariObbligXSottotipoTraspVantEconItem.clearValue();
		}
		sottotipoTrasparenzaVantEconDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		sottotipoTrasparenzaVantEconDataSource.addParam("nomeCombo", "VLRSOTTOTIPO");
		String chiaveTipo = tipoTrasparenzaVantEconItem.getValueAsString() != null ? tipoTrasparenzaVantEconItem.getValueAsString() : "";
		sottotipoTrasparenzaVantEconDataSource.addParam("valoreChiave", chiaveTipo);
		sottotipoTrasparenzaVantEconItem.setOptionDataSource(sottotipoTrasparenzaVantEconDataSource);
		if(onCascadeAfterChanged) {
			if(!"".equals(chiaveTipo)) {
				sottotipoTrasparenzaVantEconItem.fetchData(new DSCallback() {
					
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() > 0) {
								if (data.getLength() == 1) {
									sottotipoTrasparenzaVantEconItem.setValue(data.get(0).getAttribute(sottotipoTrasparenzaVantEconItem.getValueFieldName()));
									flgBeneficiariObbligXSottotipoTraspVantEconItem.setValue(data.get(0).getAttributeAsBoolean("flgBeneficiariObblig"));
//									sottotipoTrasparenzaVantEconItem.fireEvent(new ChangedEvent(sottotipoTrasparenzaVantEconItem.getJsObj()));							
								}
							}						
						}
						if(callback != null) {
							callback.execute(sottotipoTrasparenzaVantEconItem.getValueAsString());
						}
					}
				});
			} else if(callback != null) {
				callback.execute(sottotipoTrasparenzaVantEconItem.getValueAsString());
			}	
		}
	}
	
	public void aggiornaLoadComboSottotipoInterventi(boolean onCascadeAfterChanged, final ServiceCallback<String> callback) {
		if(onCascadeAfterChanged) {
			sottotipoInterventiItem.clearValue();
			flgBeneficiariObbligXSottotipoInterventiItem.clearValue();
		}
		sottotipoInterventiDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		sottotipoInterventiDataSource.addParam("nomeCombo", "VLRSOTTOTIPO");
		String chiaveTipo = tipoInterventiItem.getValueAsString() != null ? tipoInterventiItem.getValueAsString() : "";
		sottotipoInterventiDataSource.addParam("valoreChiave", chiaveTipo);
		sottotipoInterventiItem.setOptionDataSource(sottotipoInterventiDataSource);
		if(onCascadeAfterChanged) {
			if(!"".equals(chiaveTipo)) {
				sottotipoInterventiItem.fetchData(new DSCallback() {
					
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() > 0) {
								if (data.getLength() == 1) {
									sottotipoInterventiItem.setValue(data.get(0).getAttribute(sottotipoInterventiItem.getValueFieldName()));									
									flgBeneficiariObbligXSottotipoInterventiItem.setValue(data.get(0).getAttributeAsBoolean("flgBeneficiariObblig"));
//									sottotipoInterventiItem.fireEvent(new ChangedEvent(sottotipoInterventiItem.getJsObj()));							
								}
							}								
						}
						if(callback != null) {
							callback.execute(sottotipoInterventiItem.getValueAsString());
						}	
					}
				});
			} else if(callback != null) {
				callback.execute(sottotipoInterventiItem.getValueAsString());
			}			
		}
	}
	
	public void aggiornaLoadComboSottotipoAltriProvvedimenti(boolean onCascadeAfterChanged, final ServiceCallback<String> callback) {
		if(onCascadeAfterChanged) {
			sottotipoAltriProvvedimentiItem.clearValue();
			flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.clearValue();
		}
		sottotipoAltriProvvedimentiDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		sottotipoAltriProvvedimentiDataSource.addParam("nomeCombo", "VLRSOTTOTIPO");
		String chiaveTipo = tipoAltriProvvedimentiItem.getValueAsString() != null ? tipoAltriProvvedimentiItem.getValueAsString() : "";
		sottotipoAltriProvvedimentiDataSource.addParam("valoreChiave", chiaveTipo);
		sottotipoAltriProvvedimentiItem.setOptionDataSource(sottotipoAltriProvvedimentiDataSource);
		if(onCascadeAfterChanged) {
			if(!"".equals(chiaveTipo)) {
				sottotipoAltriProvvedimentiItem.fetchData(new DSCallback() {
					
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() > 0) {
								if (data.getLength() == 1) {
									sottotipoAltriProvvedimentiItem.setValue(data.get(0).getAttribute(sottotipoAltriProvvedimentiItem.getValueFieldName()));									
									flgBeneficiariObbligXSottotipoAltriProvvedimentiItem.setValue(data.get(0).getAttributeAsBoolean("flgBeneficiariObblig"));
//									sottotipoAltriProvvedimentiItem.fireEvent(new ChangedEvent(sottotipoAltriProvvedimentiItem.getJsObj()));							
								}
							}								
						}
						if(callback != null) {
							callback.execute(sottotipoAltriProvvedimentiItem.getValueAsString());
						}	
					}
				});
			} else if(callback != null) {
				callback.execute(sottotipoAltriProvvedimentiItem.getValueAsString());
			}			
		}
	}
		
	public void aggiornaLoadComboNormaTitoloAttribuzione(boolean onCascadeAfterChanged, final ServiceCallback<String> callback) {
		if(onCascadeAfterChanged) {
			normaTrasparenzaVantEconItem.clearValue();
		}
		normaTrasparenzaVantEconDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		normaTrasparenzaVantEconDataSource.addParam("nomeCombo", "VLR01");
		String chiaveTipo = "";
		if(flgErogVantaggiEconomiciItem!=null && flgErogVantaggiEconomiciItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgErogVantaggiEconomiciItem.getValueAsString())) {
			chiaveTipo = tipoTrasparenzaVantEconItem.getValueAsString() != null ? tipoTrasparenzaVantEconItem.getValueAsString() : "";
		} else if(flgInterventiItem!=null && flgInterventiItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgInterventiItem.getValueAsString())) {			
			chiaveTipo = tipoInterventiItem.getValueAsString() != null ? tipoInterventiItem.getValueAsString() : "";
		} else if(flgAltriProvvedimentiItem!=null && flgAltriProvvedimentiItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgAltriProvvedimentiItem.getValueAsString())) {			
			chiaveTipo = tipoAltriProvvedimentiItem.getValueAsString() != null ? tipoAltriProvvedimentiItem.getValueAsString() : "";
		}
		normaTrasparenzaVantEconDataSource.addParam("valoreChiave", chiaveTipo);
		normaTrasparenzaVantEconItem.setOptionDataSource(normaTrasparenzaVantEconDataSource);
		if(onCascadeAfterChanged) {	
			if(!"".equals(chiaveTipo)) {
				normaTrasparenzaVantEconItem.fetchData(new DSCallback() {
					
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() > 0) {
								if (data.getLength() == 1) {
									normaTrasparenzaVantEconItem.setValue(data.get(0).getAttribute(normaTrasparenzaVantEconItem.getValueFieldName()));
//									normaTrasparenzaVantEconItem.fireEvent(new ChangedEvent(normaTrasparenzaVantEconItem.getJsObj()));							
								}
							}							
						}
						if(callback != null) {
							callback.execute(normaTrasparenzaVantEconItem.getValueAsString());
						}
					}
				});
			} else if(callback != null) {
				callback.execute(normaTrasparenzaVantEconItem.getValueAsString());
			}			
		}
	}
	
	public void aggiornaLoadComboModalitaIndividuazioneBeneficiario(boolean onCascadeAfterChanged, final ServiceCallback<String> callback) {
		if(onCascadeAfterChanged) {
			modalitaIndividuazioneBeneficiarioItem.clearValue();
		}
		modalitaIndividuazioneBeneficiarioDataSource = new GWTRestDataSource("LoadComboTrasparenzaDataSource");
		modalitaIndividuazioneBeneficiarioDataSource.addParam("nomeCombo", "VLR02");
		String chiaveTipo = "";
		if(flgErogVantaggiEconomiciItem!=null && flgErogVantaggiEconomiciItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgErogVantaggiEconomiciItem.getValueAsString())) {
			chiaveTipo = tipoTrasparenzaVantEconItem.getValueAsString() != null ? tipoTrasparenzaVantEconItem.getValueAsString() : "";
		} else if(flgInterventiItem!=null && flgInterventiItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgInterventiItem.getValueAsString())) {			
			chiaveTipo = tipoInterventiItem.getValueAsString() != null ? tipoInterventiItem.getValueAsString() : "";
		} else if(flgAltriProvvedimentiItem!=null && flgAltriProvvedimentiItem.getValueAsString()!=null && _FLG_SI.equalsIgnoreCase(flgAltriProvvedimentiItem.getValueAsString())) {			
			chiaveTipo = tipoAltriProvvedimentiItem.getValueAsString() != null ? tipoAltriProvvedimentiItem.getValueAsString() : "";
		}
		String chiaveNorma = normaTrasparenzaVantEconItem.getValueAsString() != null ? normaTrasparenzaVantEconItem.getValueAsString() : "";
		modalitaIndividuazioneBeneficiarioDataSource.addParam("valoreChiave", chiaveTipo+"|$|"+chiaveNorma);
		modalitaIndividuazioneBeneficiarioItem.setOptionDataSource(modalitaIndividuazioneBeneficiarioDataSource);
		if(onCascadeAfterChanged) {		
			if(!"".equals(chiaveTipo)/* && !"".equals(chiaveNorma)*/) {
				modalitaIndividuazioneBeneficiarioItem.fetchData(new DSCallback() {
					
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
							RecordList data = response.getDataAsRecordList();
							if (data.getLength() > 0) {
								if (data.getLength() == 1) {
									modalitaIndividuazioneBeneficiarioItem.setValue(data.get(0).getAttribute(modalitaIndividuazioneBeneficiarioItem.getValueFieldName()));
//									modalitaIndividuazioneBeneficiarioItem.fireEvent(new ChangedEvent(modalitaIndividuazioneBeneficiarioItem.getJsObj()));							
								}
							}							
						}
						if(callback != null) {
							callback.execute(modalitaIndividuazioneBeneficiarioItem.getValueAsString());
						}
					}
				});
			} else if(callback != null) {
				callback.execute(modalitaIndividuazioneBeneficiarioItem.getValueAsString());
			}			
		}
	}

	public void aggiornaLoadComboAllegatiTrasparenzaVantEcon() {
		elencoAllegatiDataSource = new GWTRestDataSource("LoadComboTrasparenzaAllegatiDataSource");
		elencoAllegatiDataSource.addParam("nomeCombo", "VLR03");
		String chiaveTipo = tipoTrasparenzaVantEconItem.getValueAsString() != null ? tipoTrasparenzaVantEconItem.getValueAsString() : "";
		String chiaveSottotipo = sottotipoTrasparenzaVantEconItem.getValueAsString() != null ? sottotipoTrasparenzaVantEconItem.getValueAsString() : "";
		String chiaveNorma = normaTrasparenzaVantEconItem.getValueAsString() != null ? normaTrasparenzaVantEconItem.getValueAsString() : "";
		elencoAllegatiDataSource.addParam("valoreChiave", chiaveTipo+"|$|"+chiaveSottotipo+"|$|"+chiaveNorma);
		if(!"".equals(chiaveTipo)/* && !"".equals(chiaveSottotipo) && !"".equals(chiaveNorma)*/) {
			aggiornaElencoAllegati();
		}
	}
	
	public void aggiornaLoadComboAllegatiInterventi() {
		elencoAllegatiDataSource = new GWTRestDataSource("LoadComboTrasparenzaAllegatiDataSource");
		elencoAllegatiDataSource.addParam("nomeCombo", "VLR03");
		String chiaveTipo = tipoInterventiItem.getValueAsString() != null ? tipoInterventiItem.getValueAsString() : "";
		String chiaveSottotipo = sottotipoInterventiItem.getValueAsString() != null ? sottotipoInterventiItem.getValueAsString() : "";
		String chiaveNorma = normaTrasparenzaVantEconItem.getValueAsString() != null ? normaTrasparenzaVantEconItem.getValueAsString() : "";
		elencoAllegatiDataSource.addParam("valoreChiave", chiaveTipo+"|$|"+chiaveSottotipo+"|$|"+chiaveNorma);
		if(!"".equals(chiaveTipo)/* && !"".equals(chiaveSottotipo) && !"".equals(chiaveNorma)*/) {
			aggiornaElencoAllegati();
		}
	}
	
	public void aggiornaLoadComboAllegatiAltriProvvedimenti() {
		elencoAllegatiDataSource = new GWTRestDataSource("LoadComboTrasparenzaAllegatiDataSource");
		elencoAllegatiDataSource.addParam("nomeCombo", "VLR03");
		String chiaveTipo = tipoAltriProvvedimentiItem.getValueAsString() != null ? tipoAltriProvvedimentiItem.getValueAsString() : "";
		String chiaveSottotipo = sottotipoAltriProvvedimentiItem.getValueAsString() != null ? sottotipoAltriProvvedimentiItem.getValueAsString() : "";
		String chiaveNorma = normaTrasparenzaVantEconItem.getValueAsString() != null ? normaTrasparenzaVantEconItem.getValueAsString() : "";
		elencoAllegatiDataSource.addParam("valoreChiave", chiaveTipo+"|$|"+chiaveSottotipo+"|$|"+chiaveNorma);
		if(!"".equals(chiaveTipo)/* && !"".equals(chiaveSottotipo) && !"".equals(chiaveNorma)*/) {
			aggiornaElencoAllegati();
		}
	}
	
	public void aggiornaElencoAllegati() {
		elencoAllegatiDataSource.fetchData(null, new DSCallback() {
			
			@Override
			public void execute(DSResponse dsResponse, Object data, DSRequest dsRequest) {
				RecordList list = dsResponse.getDataAsRecordList();
				if(list!=null && list.getLength()>0) {
					listaAllegatiObbligatoriTrasparenzaItem.setValue(list.get(0).getAttribute("listaAllegatiObbligatoriTrasparenza"));
					listaIdAllegatiObbligatoriTrasparenzaItem.setValue(list.get(0).getAttribute("listaIdAllegatiObbligatoriTrasparenza"));
					listaAllegatiNonObbligatoriTrasparenzaItem.setValue(list.get(0).getAttribute("listaAllegatiNonObbligatoriTrasparenza"));
					listaIdAllegatiNonObbligatoriTrasparenzaItem.setValue(list.get(0).getAttribute("listaIdAllegatiNonObbligatoriTrasparenza"));
					avvisiPerLaCompilazioneItem.setValue(list.get(0).getAttribute("avviso"));
				}
			}
		});
	}
	
	public void manageLoadSelectInTabTrasp(FormItem item, String keyValue, String displayValue, String paramCIToAdd) {
		if (item != null) {
			String key = keyValue != null ? keyValue : null;
			String display = displayValue != null ? displayValue : null;
			if(paramCIToAdd != null && !"".equals(paramCIToAdd)) {
				if(item.getOptionDataSource() != null && (item.getOptionDataSource() instanceof GWTRestDataSource)) {
					GWTRestDataSource optionDS = (GWTRestDataSource) item.getOptionDataSource();
					if (key != null && !"".equals(key)) {
						optionDS.addParam(paramCIToAdd, key);
					} else {
						optionDS.addParam(paramCIToAdd, null);
					}
					item.setOptionDataSource(optionDS);
				}
			}									
			if (key != null && !"".equals(key)) {
				if (display != null && !"".equals(display)) {
					if (item.getValueMap() != null ) {
						if(!item.getValueMap().containsKey(key)){                                 
							item.getValueMap().put(key, display);
						}
					} else {
						LinkedHashMap<String, String> valueMap = new LinkedHashMap<String, String>();
						valueMap.put(key, display);
						item.setValueMap(valueMap);	
					}
				}	
				item.setValue(key); 
			}
		}
	}
	
	/***************************** 
	 * TAB DATI LIQUIDAZIONE AVB *
	 *****************************/	
	
	public boolean showTabDatiLiquidazioneAVB() {
		return show_TAB_DATI_LIQUIDAZIONE_AVB() && showDetailSectionDatiLiquidazioneAVB();
	}
	
	public String getTitleTabDatiLiquidazioneAVB() {
		return getTitleDetailSectionDatiLiquidazioneAVB();
	}
	
	/**
	 * Metodo per costruire il tab "Dati liquidazione" di AVB
	 * 
	 */
	protected void createTabDatiLiquidazioneAVB() {

		tabDatiLiquidazioneAVB = new Tab("<b>" + getTitleTabDatiLiquidazioneAVB() + "</b>");
		tabDatiLiquidazioneAVB.setAttribute("tabID", _TAB_DATI_LIQUIDAZIONE_AVB_ID);
		tabDatiLiquidazioneAVB.setPrompt(getTitleTabDatiLiquidazioneAVB());
		tabDatiLiquidazioneAVB.setPane(createTabPane(getLayoutDatiLiquidazioneAVB()));

	}
	
	/**
	 * Metodo che restituisce il layout del tab "Dati liquidazione" di AVB
	 * 
	 */
	public VLayout getLayoutDatiLiquidazioneAVB() {

		VLayout layoutDatiLiquidazioneAVB = new VLayout(5);
		
		createDetailSectionDatiLiquidazioneAVB();
		layoutDatiLiquidazioneAVB.addMember(detailSectionDatiLiquidazioneAVB);
		
		return layoutDatiLiquidazioneAVB;
	}
	
	public boolean showDetailSectionDatiLiquidazioneAVB() {
		return showDatiLiquidazioneAVBItem();
	}
	
	public String getTitleDetailSectionDatiLiquidazioneAVB() {
		return getTitleDatiLiquidazioneAVBItem();
	}
	
	public boolean isRequiredDetailSectionDatiLiquidazioneAVB() {
		return isRequiredDatiLiquidazioneAVBItem();		
	}
	
	protected void createDetailSectionDatiLiquidazioneAVB() {
		
		createDatiLiquidazioneAVBForm();	
		
		detailSectionDatiLiquidazioneAVB = new NuovaPropostaAtto2CompletaDetailSection(getTitleDetailSectionDatiLiquidazioneAVB(), true, true, isRequiredDetailSectionDatiLiquidazioneAVB(), datiLiquidazioneAVBForm);
	}	
	
	public boolean showDatiLiquidazioneAVBItem() {
		return showAttributoCustomCablato("DATI-CONT-LIQ-AVB");
	}
	
	public String getTitleDatiLiquidazioneAVBItem() {
		String label = getLabelAttributoCustomCablato("DATI-CONT-LIQ-AVB");
		if(label != null && !"".equals(label)) {
			return label;
		}
		return "Dati liquidazione";
	}
	
	public boolean isRequiredDatiLiquidazioneAVBItem() {
		return showDatiLiquidazioneAVBItem() && getFlgObbligatorioAttributoCustomCablato("DATI-CONT-LIQ-AVB");
	}
	
	protected void createDatiLiquidazioneAVBForm() {
		
		datiLiquidazioneAVBForm = new DynamicForm();
		datiLiquidazioneAVBForm.setValuesManager(vm);
		datiLiquidazioneAVBForm.setWidth100();
		datiLiquidazioneAVBForm.setPadding(5);
		datiLiquidazioneAVBForm.setWrapItemTitles(false);		
		datiLiquidazioneAVBForm.setNumCols(20);
		datiLiquidazioneAVBForm.setColWidths(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "*", "*");
		datiLiquidazioneAVBForm.setTabSet(tabSet);
		datiLiquidazioneAVBForm.setTabID(_TAB_DATI_LIQUIDAZIONE_AVB_ID);
		datiLiquidazioneAVBForm.setHeight(1);
		
		listaUriExcelToDeleteItem = new HiddenItem("listaXlsToDeleteDatiLiqAVB");
		
		datiLiquidazioneAVBItem = new ListaDatiLiquidazioneAVBItem("listaDatiLiquidazioneAVB") {
			
			@Override
			public Boolean validate() {
				if(showDatiLiquidazioneAVBItem()) {
					return super.validate();
				} else {
					return true;
				}
			}

			@Override
			public void afterOnClickDeleteButton(List<String> listaUriXls) {
				listaUriExcelToDeleteItem.setValue(listaUriXls);
				
			}						
		};
		datiLiquidazioneAVBItem.setStartRow(true);
		datiLiquidazioneAVBItem.setShowTitle(false);
		datiLiquidazioneAVBItem.setHeight(245);		
		datiLiquidazioneAVBItem.setShowIfCondition(new FormItemIfFunction() {
			
			@Override
			public boolean execute(FormItem item, Object value, DynamicForm form) {
				return showDatiLiquidazioneAVBItem();
			}
		});
		
		datiLiquidazioneAVBForm.setFields(listaUriExcelToDeleteItem, datiLiquidazioneAVBItem);
	}
	
	/*******************************************************************************************************************************************************************/

	
	public void openSections() {	
		
		String currentTabID = tabSet.getSelectedTab() != null ? tabSet.getSelectedTab().getAttribute("tabID") : null;
		if(currentTabID != null) {			
			for(DynamicForm form : getTabForms(currentTabID)) {
				if(form.getDetailSection() != null) {
					form.getDetailSection().open();
				}
			}
		} else {
			for(DynamicForm form : getTabForms(_TAB_DATI_SCHEDA_ID)) {
				if(form.getDetailSection() != null) {
					form.getDetailSection().open();
				}
			}
		}
	}
	
	@Override
	public void editNewRecord() {
		
		super.editNewRecord();
		
		if(ufficioProponenteItem != null) {
			if (getUfficioProponenteValueMap().size() == 1) {
				String key = getUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
				String value = getUfficioProponenteValueMap().get(key);
				ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
				if(value != null && !"".equals(value)) {
					codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
					desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));					
				}
				flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
				afterSelezioneUoProponente();
			} else if (getSelezioneUfficioProponenteValueMap().size() == 1) {
				String key = getSelezioneUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
				String value = getSelezioneUfficioProponenteValueMap().get(key);
				ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
				if(value != null && !"".equals(value)) {
					codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
					desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));				
				}
				flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
				afterSelezioneUoProponente();
			} 
		}
		
		/*
		if(ufficioGareAcquistiItem != null) {
			final String idUoLavoro = AurigaLayout.getIdUoLavoro();		
			if(idUoLavoro != null && !"".equals(idUoLavoro)) {				
				ufficioGareAcquistiItem.fetchData(new DSCallback() {
		
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						RecordList data = response.getDataAsRecordList();
						boolean trovato = false;
						if (data.getLength() > 0) {						
							for (int i = 0; i < data.getLength(); i++) {
								String key = data.get(i).getAttribute("key");
								if (idUoLavoro.equals(key)) {
									trovato = true;
									break;
								}
							}
						}
						if (trovato) {
							ufficioGareAcquistiItem.setValue(idUoLavoro);
							ufficioGareAcquistiItem.fireEvent(new ChangedEvent(ufficioGareAcquistiItem.getJsObj()));
						}					
					}
				});
			}
		}
		*/
		
		if(listaUfficioGareAcquistiItem != null) {
			listaUfficioGareAcquistiItem.getUoDaPreimpostare(new ServiceCallback<Record>() {

				@Override
				public void execute(Record object) {
					RecordList listaUfficioGareAcquisti = new RecordList();
					listaUfficioGareAcquisti.add(object);
					listaUfficioGareAcquistiItem.drawAndSetValue(listaUfficioGareAcquisti);					
				}
			});
		}
		
		vociPEGNoVerifDisp = new HashSet<String>();
		
		if(materiaTipoAttoItem != null) {
			resetMateriaTipoAttoAfterChangedParams();
		}			
		
		if(modalitaInvioDatiSpesaARagioneriaContoCapitaleItem != null) {
			modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValueMap(buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap());
		}
		
		afterSelezioneScrivaniaAdottante();
		afterSelezioneScrivaniaRdP();
		
		redrawCKEditorItems();
		enableDisableTabs();
		showHideSections();
		openSections();
	}
	
	@Override
	public void editNewRecord(Map initialValues) {
		
		if(ufficioProponenteItem != null) {
			manageLoadSelectInEditNewRecord(initialValues, ufficioProponenteItem, "ufficioProponente", new String[] {"codUfficioProponente", "desUfficioProponente"}, " - ", "idUo");
		}
//		manageLoadSelectInEditNewRecord(initialValues, ufficioGareAcquistiItem, "ufficioGareAcquisti", new String[] {"desUfficioGareAcquisti"}, "", "key");		
		manageLoadSelectInEditNewRecord(initialValues, materiaTipoAttoItem, "materiaTipoAtto", new String[] {"desMateriaTipoAtto"}, "", "key");
		manageLoadSelectInEditNewRecord(initialValues, idNodoSmistamentoACTAItem, "idNodoSmistamentoACTA", new String[] {"desNodoSmistamentoACTA"}, "", "idNodo");
		
		initialValues.put("codProcedimentoRdPUgualeAdottante", initialValues.get("codProcedimento"));
		initialValues.put("codProcedimentoRdP", initialValues.get("codProcedimento"));
		manageLoadSelectInEditNewRecord(initialValues, codProcedimentoRdPUgualeAdottanteItem, "codProcedimento", new String[] {"desProcedimento"}, "", "key");
		manageLoadSelectInEditNewRecord(initialValues, codProcedimentoRdPItem, "codProcedimento", new String[] {"desProcedimento"}, "", "key");
		
		/* Inizio Trasparenza AVB */
//		manageLoadSelectInEditNewRecord(initialValues, sottotipoTrasparenzaVantEconItem, "sottotipoTrasparenzaVantEcon", "desSottotipoTrasparenzaVantEcon", "key");
//		manageLoadSelectInEditNewRecord(initialValues, sottotipoInterventiItem, "sottotipoInterventi", "desSottotipoInterventi", "key");
//		manageLoadSelectInEditNewRecord(initialValues, sottotipoAltriProvvedimentiItem, "sottotipoAltriProvvedimenti", "desSottotipoAltriProvvedimenti", "key");
//		manageLoadSelectInEditNewRecord(initialValues, normaTrasparenzaVantEconItem, "normaTrasparenzaVantEcon", "desNormaTrasparenzaVantEcon", "key");
//		manageLoadSelectInEditNewRecord(initialValues, modalitaIndividuazioneBeneficiarioItem, "modalitaIndividuazioneBeneficiario", "desModalitaIndividuazioneBeneficiario", "key");
//		// ATTENZIONE: non posso leggere listaUfficioProponente come RecordList da initialValues perchè mi arriva come ArrayList
//		// RecordList listaUfficioProponente = initialValues.get("listaUfficioProponente") != null ? (RecordList) initialValues.get("listaUfficioProponente") : null;		
//		ArrayList<Map> listaUfficioProponente = (ArrayList<Map>) initialValues.get(listaUfficioProponente);		
//		if(listaUfficioProponente != null && listaUfficioProponente.size() > 0) {
//			initialValues.put("ufficioCompetenteTabTrasp", listaUfficioProponente.get(0).get("descrizione"));
//		}
//		// ATTENZIONE: non posso leggere listaRdP come RecordList da initialValues perchè mi arriva come ArrayList
//		// RecordList listaRdP = initialValues.get("listaRdP") != null ? (RecordList) initialValues.get("listaRdP") : null;
//		ArrayList<Map> listaRdP = (ArrayList<Map>) initialValues.get("listaRdP");		
//		if(listaRdP != null && listaRdP.size() > 0) {
//			initialValues.put("responsabileProcedimentoTabTrasp", listaRdP.get(0).get("desResponsabileDiProcedimento"));
//		}
		/* Fine Trasparenza AVB */
		
		// Elimino le informazioni dei file dei ckeditor dal record prima di fare l'edit record
		fixCkeditorValueInEditRecord(initialValues, "luogoOrdMobilita");
		fixCkeditorValueInEditRecord(initialValues, "descrizioneOrdMobilita");		
		fixCkeditorValueInEditRecord(initialValues, "oggettoHtml");	
		fixCkeditorValueInEditRecord(initialValues, "attiPresupposti");	
		fixCkeditorValueInEditRecord(initialValues, "motivazioni");	
		fixCkeditorValueInEditRecord(initialValues, "premessa");			
		fixCkeditorValueInEditRecord(initialValues, "rifNormativiLiberi");	
		fixCkeditorValueInEditRecord(initialValues, "dispositivo");	
		fixCkeditorValueInEditRecord(initialValues, "premessa2");	
		fixCkeditorValueInEditRecord(initialValues, "dispositivo2");	
		fixCkeditorValueInEditRecord(initialValues, "motiviImmediatamenteEseguibile");
		fixCkeditorValueInEditRecord(initialValues, "noteCorrente");
		fixCkeditorValueInEditRecord(initialValues, "noteContoCapitale");
		
		// Salvo le stringhe dei ckeditor
		String luogoOrdMobilitaCkeditorString = (String) initialValues.get("luogoOrdMobilita");
		String descrizioneOrdMobilitaCkeditorString = (String) initialValues.get("descrizioneOrdMobilita");		
		String oggettoHtmlCkeditorString = (String) initialValues.get("oggettoHtml");	
		String attiPresuppostiCkeditorString = (String) initialValues.get("attiPresupposti");	
		String motivazioniCkeditorString = (String) initialValues.get("motivazioni");	
		String premessaCkeditorString = (String) initialValues.get("premessa");			
		String rifNormativiLiberiCkeditorString = (String) initialValues.get("rifNormativiLiberi");	
		String dispositivoCkeditorString = (String) initialValues.get("dispositivo");	
		String premessa2CkeditorString = (String) initialValues.get("premessa2");	
		String dispositivo2CkeditorString = (String) initialValues.get("dispositivo2");	
		String motiviImmediatamenteEseguibileCkeditorString = (String) initialValues.get("motiviImmediatamenteEseguibile");
		String noteCorrenteCkeditorString = (String) initialValues.get("noteCorrente");
		String noteContoCapitaleCkeditorString = (String) initialValues.get("noteContoCapitale");
		
		// Salvo le stringhe dei file alternativi ai ckeditor
		String luogoOrdMobilitaFileString = (String) initialValues.get("luogoOrdMobilitaFile");
		String descrizioneOrdMobilitaFileString = (String) initialValues.get("descrizioneOrdMobilitaFile");		
		String oggettoHtmlFileString = (String) initialValues.get("oggettoHtmlFile");	
		String attiPresuppostiFileString = (String) initialValues.get("attiPresuppostiFile");	
		String motivazioniFileString = (String) initialValues.get("motivazioniFile");	
		String premessaFileString = (String) initialValues.get("premessaFile");			
		String rifNormativiLiberiFileString = (String) initialValues.get("rifNormativiLiberiFile");	
		String dispositivoFileString = (String) initialValues.get("dispositivoFile");	
		String premessa2FileString = (String) initialValues.get("premessa2File");	
		String dispositivo2FileString = (String) initialValues.get("dispositivo2File");	
		String motiviImmediatamenteEseguibileFileString = (String) initialValues.get("motiviImmediatamenteEseguibileFile");
		String noteCorrenteFileString = (String) initialValues.get("noteCorrente");
		String noteContoCapitaleFileString = (String) initialValues.get("noteContoCapitale");
		
		super.editNewRecord(initialValues);
		
		Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
		if(recordOpzUOCompetente != null) {
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoRespUffValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie").get(i);
					idScrivaniaVistoRespUffValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoRespUffItem.setValueMap(idScrivaniaVistoRespUffValueMap);				
			} 
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoDirSup1ValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie").get(i);
					idScrivaniaVistoDirSup1ValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoDirSup1Item.setValueMap(idScrivaniaVistoDirSup1ValueMap);
			}
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoDirSup2ValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie").get(i);
					idScrivaniaVistoDirSup2ValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoDirSup2Item.setValueMap(idScrivaniaVistoDirSup2ValueMap);
			}
		}
		
		if(initialValues.get("flgErogVantaggiEconomici") != null && _FLG_SI.equalsIgnoreCase((String) initialValues.get("flgErogVantaggiEconomici"))) {
			aggiornaLoadComboSottotipoTrasparenzaVantEcon(false, null);			
			aggiornaLoadComboNormaTitoloAttribuzione(false, null);			
			aggiornaLoadComboModalitaIndividuazioneBeneficiario(false, null);			
			aggiornaLoadComboAllegatiTrasparenzaVantEcon();
		} else if(initialValues.get("flgInterventi") != null && _FLG_SI.equalsIgnoreCase((String) initialValues.get("flgInterventi"))) {						
			aggiornaLoadComboSottotipoInterventi(false, null);			
			aggiornaLoadComboNormaTitoloAttribuzione(false, null);			
			aggiornaLoadComboModalitaIndividuazioneBeneficiario(false, null);			
			aggiornaLoadComboAllegatiInterventi();
		} else if(initialValues.get("flgAltriProvvedimenti") != null && _FLG_SI.equalsIgnoreCase((String) initialValues.get("flgAltriProvvedimenti"))) {						
			aggiornaLoadComboSottotipoAltriProvvedimenti(false, null);			
			aggiornaLoadComboNormaTitoloAttribuzione(false, null);			
			aggiornaLoadComboModalitaIndividuazioneBeneficiario(false, null);			
			aggiornaLoadComboAllegatiAltriProvvedimenti();
		}
		
		if(ufficioProponenteItem != null) {
			if(ufficioProponenteItem.getValue() == null || "".equals(ufficioProponenteItem.getValue())) {
				if (getUfficioProponenteValueMap().size() == 1) {
					String key = getUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
					String value = getUfficioProponenteValueMap().get(key);
					ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
					if(value != null && !"".equals(value)) {
						codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
						desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));
					}
					flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
					afterSelezioneUoProponente();
				} else if (getSelezioneUfficioProponenteValueMap().size() == 1) {
					String key = getSelezioneUfficioProponenteValueMap().keySet().toArray(new String[1])[0];
					String value = getSelezioneUfficioProponenteValueMap().get(key);
					ufficioProponenteItem.setValue((key != null && key.startsWith("UO")) ? key.substring(2) : key);
					if(value != null && !"".equals(value)) {
						codUfficioProponenteItem.setValue(value.substring(0, value.indexOf(" - ")));
						desUfficioProponenteItem.setValue(value.substring(value.indexOf(" - ") + 3));				
					}
					flgUfficioProponenteGareItem.setValue(getFlgUfficioProponenteGareMap().get(key));
					afterSelezioneUoProponente();
				}
			}
		}
		
		/*
		if(ufficioGareAcquistiItem != null) {
			final String idUoLavoro = AurigaLayout.getIdUoLavoro();		
			if(idUoLavoro != null && !"".equals(idUoLavoro)) {				
				ufficioGareAcquistiItem.fetchData(new DSCallback() {
		
					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						RecordList data = response.getDataAsRecordList();
						boolean trovato = false;
						if (data.getLength() > 0) {						
							for (int i = 0; i < data.getLength(); i++) {
								String key = data.get(i).getAttribute("key");
								if (idUoLavoro.equals(key)) {
									trovato = true;
									break;
								}
							}
						}
						if (trovato) {
							ufficioGareAcquistiItem.setValue(idUoLavoro);
							ufficioGareAcquistiItem.fireEvent(new ChangedEvent(ufficioGareAcquistiItem.getJsObj()));
						}					
					}
				});
			}
		}
		*/
		
		if(listaUfficioGareAcquistiItem != null) {
			// ATTENZIONE: non posso leggere listaUfficioGareAcquisti come RecordList da initialValues perchè mi arriva come ArrayList
			// RecordList listaUfficioGareAcquisti = initialValues.get("listaUfficioGareAcquisti") != null ? (RecordList) initialValues.get("listaUfficioGareAcquisti") : null;	
			RecordList listaUfficioGareAcquisti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioGareAcquisti") : null;
			if(listaUfficioGareAcquisti == null || listaUfficioGareAcquisti.getLength() == 0) {
				listaUfficioGareAcquistiItem.getUoDaPreimpostare(new ServiceCallback<Record>() {
	
					@Override
					public void execute(Record object) {
						RecordList listaUfficioGareAcquisti = new RecordList();
						listaUfficioGareAcquisti.add(object);
						listaUfficioGareAcquistiItem.drawAndSetValue(listaUfficioGareAcquisti);
					}
				});
			}
		}
		
		vociPEGNoVerifDisp = new HashSet<String>();
		
		if(materiaTipoAttoItem != null) {
			resetMateriaTipoAttoAfterChangedParams();
		}	
		
		if(modalitaInvioDatiSpesaARagioneriaContoCapitaleItem != null) {
			modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValueMap(buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap());
			modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValue((String) initialValues.get("modalitaInvioDatiSpesaARagioneriaContoCapitale"));
		}
		
		afterSelezioneScrivaniaAdottante();
		afterSelezioneScrivaniaRdP();
				
		// Devo settare manualmente i valori dei CKEditor
		if (luogoOrdMobilitaItem != null) {
			luogoOrdMobilitaItem.setValue(luogoOrdMobilitaCkeditorString);
			luogoOrdMobilitaItem.setFileValue(luogoOrdMobilitaFileString);
		}
		if (descrizioneOrdMobilitaItem != null) {
			descrizioneOrdMobilitaItem.setValue(descrizioneOrdMobilitaCkeditorString);
			descrizioneOrdMobilitaItem.setFileValue(descrizioneOrdMobilitaFileString);
		}		
		if (oggettoHtmlItem != null) {
			oggettoHtmlItem.setValue(oggettoHtmlCkeditorString);
			oggettoHtmlItem.setFileValue(oggettoHtmlFileString);
		}
		if(attiPresuppostiItem != null) {
			attiPresuppostiItem.setValue(attiPresuppostiCkeditorString);
			attiPresuppostiItem.setFileValue(attiPresuppostiFileString);
		}
		if(motivazioniItem != null) {
			motivazioniItem.setValue(motivazioniCkeditorString);
			motivazioniItem.setFileValue(motivazioniFileString);
		}
		if(premessaItem != null) {
			premessaItem.setValue(premessaCkeditorString);
			premessaItem.setFileValue(premessaFileString);
		}
		if(rifNormativiLiberiItem != null) {
			rifNormativiLiberiItem.setValue(rifNormativiLiberiCkeditorString);
			rifNormativiLiberiItem.setFileValue(rifNormativiLiberiFileString);
		}		
		if(dispositivoItem != null) {
			dispositivoItem.setValue(dispositivoCkeditorString);
			dispositivoItem.setFileValue(dispositivoFileString);
		}
		if(premessa2Item != null) {
			premessa2Item.setValue(premessa2CkeditorString);
			premessa2Item.setFileValue(premessa2FileString);
		}
		if(dispositivo2Item != null) {
			dispositivo2Item.setValue(dispositivo2CkeditorString);
			dispositivo2Item.setFileValue(dispositivo2FileString);
		}
		if(motiviImmediatamenteEseguibileItem != null) {
			motiviImmediatamenteEseguibileItem.setValue(motiviImmediatamenteEseguibileCkeditorString);
			motiviImmediatamenteEseguibileItem.setFileValue(motiviImmediatamenteEseguibileFileString);
		}
		if(noteCorrenteItem != null) {
			noteCorrenteItem.setValue(noteCorrenteCkeditorString);
			noteCorrenteItem.setFileValue(noteCorrenteFileString);
		}
		if(noteContoCapitaleItem != null) {
			noteContoCapitaleItem.setValue(noteContoCapitaleCkeditorString);
			noteContoCapitaleItem.setFileValue(noteContoCapitaleFileString);
		}
		
		if(listaAllegatiItem != null) {
			if(listaAllegatiItem instanceof AllegatiGridItem) {
				((AllegatiGridItem) listaAllegatiItem).setFlgPubblicaAllegatiSeparati(initialValues.get("flgPubblicaAllegatiSeparati") != null ? (Boolean) initialValues.get("flgPubblicaAllegatiSeparati") : false);
			} else if(listaAllegatiItem instanceof AllegatiItem) {
				((AllegatiItem) listaAllegatiItem).setFlgPubblicaAllegatiSeparati(initialValues.get("flgPubblicaAllegatiSeparati") != null ? (Boolean) initialValues.get("flgPubblicaAllegatiSeparati") : false);
			}
			// Controllo se devo inserire anche gli allegati dell'initialValues
			if (initialValues.get("flgCopiaAllegatiPareri") != null && (Boolean) initialValues.get("flgCopiaAllegatiPareri")) {
				listaAllegatiItem.setValue(initialValues.get("listaAllegati"));
			}
		}
		
		redrawCKEditorItems();
		enableDisableTabs();
		showHideSections();		
		openSections();
	}
		
	@Override
	public void editRecord(Record record) {		
		
		if(ufficioProponenteItem != null) {
			manageLoadSelectInEditRecord(record, ufficioProponenteItem, "ufficioProponente", new String[] {"codUfficioProponente", "desUfficioProponente"}, " - ", "idUo");
		}
//		manageLoadSelectInEditRecord(record, ufficioGareAcquistiItem, "ufficioGareAcquisti", new String[] {"desUfficioGareAcquisti"}, "", "key");
		manageLoadSelectInEditRecord(record, materiaTipoAttoItem, "materiaTipoAtto", new String[] {"desMateriaTipoAtto"}, "", "key");
		manageLoadSelectInEditRecord(record, idNodoSmistamentoACTAItem, "idNodoSmistamentoACTA", new String[] {"desNodoSmistamentoACTA"}, "", "idNodo");
		
		record.setAttribute("codProcedimentoRdPUgualeAdottante", record.getAttribute("codProcedimento"));
		record.setAttribute("codProcedimentoRdP", record.getAttribute("codProcedimento"));
		manageLoadSelectInEditRecord(record, codProcedimentoRdPUgualeAdottanteItem, "codProcedimento", new String[] {"desProcedimento"}, "", "key");
		manageLoadSelectInEditRecord(record, codProcedimentoRdPItem, "codProcedimento", new String[] {"desProcedimento"}, "", "key");
		
		/* Inizio Trasparenza AVB */
//		manageLoadSelectInEditRecord(record, sottotipoTrasparenzaVantEconItem, "sottotipoTrasparenzaVantEcon", "desSottotipoTrasparenzaVantEcon", "key");
//		manageLoadSelectInEditRecord(record, sottotipoInterventiItem, "sottotipoInterventi", "desSottotipoInterventi", "key");
//		manageLoadSelectInEditRecord(record, sottotipoAltriProvvedimentiItem, "sottotipoAltriProvvedimenti", "desSottotipoAltriProvvedimenti", "key");
//		manageLoadSelectInEditRecord(record, normaTrasparenzaVantEconItem, "normaTrasparenzaVantEcon", "desNormaTrasparenzaVantEcon", "key");
//		manageLoadSelectInEditRecord(record, modalitaIndividuazioneBeneficiarioItem, "modalitaIndividuazioneBeneficiario", "desModalitaIndividuazioneBeneficiario", "key");
//		RecordList listaUfficioProponente = record.getAttributeAsRecordList("listaUfficioProponente");
//		if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {			
//			record.setAttribute("ufficioCompetenteTabTrasp", listaUfficioProponente.get(0).getAttribute("descrizione"));
//		}
//		RecordList listaRdP = record.getAttributeAsRecordList("listaRdP");
//		if(listaRdP != null && listaRdP.getLength() > 0) {			
//			record.setAttribute("responsabileProcedimentoTabTrasp", listaRdP.get(0).getAttribute("desResponsabileDiProcedimento"));
//		}
		/* Fine Trasparenza AVB */
		
		// Elimino le informazioni dei file dei ckeditor dal record prima di fare l'edit record
		fixCkeditorValueInEditRecord(record, "luogoOrdMobilita");
		fixCkeditorValueInEditRecord(record, "descrizioneOrdMobilita");		
		fixCkeditorValueInEditRecord(record, "oggettoHtml");	
		fixCkeditorValueInEditRecord(record, "attiPresupposti");	
		fixCkeditorValueInEditRecord(record, "motivazioni");	
		fixCkeditorValueInEditRecord(record, "premessa");			
		fixCkeditorValueInEditRecord(record, "rifNormativiLiberi");	
		fixCkeditorValueInEditRecord(record, "dispositivo");	
		fixCkeditorValueInEditRecord(record, "premessa2");	
		fixCkeditorValueInEditRecord(record, "dispositivo2");	
		fixCkeditorValueInEditRecord(record, "motiviImmediatamenteEseguibile");
		fixCkeditorValueInEditRecord(record, "noteCorrente");
		fixCkeditorValueInEditRecord(record, "noteContoCapitale");
		
		// Salvo le stringhe dei ckeditor
		String luogoOrdMobilitaCkeditorString = record.getAttribute("luogoOrdMobilita");
		String descrizioneOrdMobilitaCkeditorString = record.getAttribute("descrizioneOrdMobilita");		
		String oggettoHtmlCkeditorString = record.getAttribute("oggettoHtml");	
		String attiPresuppostiCkeditorString = record.getAttribute("attiPresupposti");	
		String motivazioniCkeditorString = record.getAttribute("motivazioni");	
		String premessaCkeditorString = record.getAttribute("premessa");			
		String rifNormativiLiberiCkeditorString = record.getAttribute("rifNormativiLiberi");	
		String dispositivoCkeditorString = record.getAttribute("dispositivo");	
		String premessa2CkeditorString = record.getAttribute("premessa2");	
		String dispositivo2CkeditorString = record.getAttribute("dispositivo2");	
		String motiviImmediatamenteEseguibileCkeditorString = record.getAttribute("motiviImmediatamenteEseguibile");
		String noteCorrenteCkeditorString = record.getAttribute("noteCorrente");
		String noteContoCapitaleCkeditorString = record.getAttribute("noteContoCapitale");
		
		// Salvo le stringhe dei file alternativi ai ckeditor
		String luogoOrdMobilitaFileString = record.getAttribute("luogoOrdMobilitaFile");
		String descrizioneOrdMobilitaFileString = record.getAttribute("descrizioneOrdMobilitaFile");		
		String oggettoHtmlFileString = record.getAttribute("oggettoHtmlFile");	
		String attiPresuppostiFileString = record.getAttribute("attiPresuppostiFile");	
		String motivazioniFileString = record.getAttribute("motivazioniFile");	
		String premessaFileString = record.getAttribute("premessaFile");			
		String rifNormativiLiberiFileString = record.getAttribute("rifNormativiLiberiFile");	
		String dispositivoFileString = record.getAttribute("dispositivoFile");	
		String premessa2FileString = record.getAttribute("premessa2File");	
		String dispositivo2FileString = record.getAttribute("dispositivo2File");	
		String motiviImmediatamenteEseguibileFileString = record.getAttribute("motiviImmediatamenteEseguibileFile");
		String noteCorrenteFileString = record.getAttribute("noteCorrente");
		String noteContoCapitaleFileString = record.getAttribute("noteContoCapitale");
		
		super.editRecord(record);
		
		if(listaDatiContabiliADSPItem!=null && listaDatiContabiliADSPItem.getGrid()!=null) {
			if(!getFlgDisattivaIntegrazioneSistemaContabile(record.getAttribute("tipoDocumento"))) {
				listaDatiContabiliADSPItem.getGrid().hideField("disponibilitaImporto");
				listaDatiContabiliADSPItem.getGrid().getFieldByName("disponibilitaImporto").setHidden(true);
				listaDatiContabiliADSPItem.getGrid().getFieldByName("disponibilitaImporto").setCanHide(false);
				listaDatiContabiliADSPItem.getGrid().hideField("imponibile");
				listaDatiContabiliADSPItem.getGrid().getFieldByName("imponibile").setHidden(true);
				listaDatiContabiliADSPItem.getGrid().getFieldByName("imponibile").setCanHide(false);
			}else {
				listaDatiContabiliADSPItem.getGrid().hideField("statoSistemaContabile");
				listaDatiContabiliADSPItem.getGrid().getFieldByName("statoSistemaContabile").setHidden(true);
				listaDatiContabiliADSPItem.getGrid().getFieldByName("statoSistemaContabile").setCanHide(false);
			}
		}
				
		Record recordOpzUOCompetente = ruoliForm != null ? ruoliForm.getValuesAsRecord().getAttributeAsRecord("opzUOCompetente") : null;
		if(recordOpzUOCompetente != null) {
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoRespUffValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoRespUffValoriSelectScrivanie").get(i);
					idScrivaniaVistoRespUffValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoRespUffItem.setValueMap(idScrivaniaVistoRespUffValueMap);				
			} 
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoDirSup1ValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup1ValoriSelectScrivanie").get(i);
					idScrivaniaVistoDirSup1ValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoDirSup1Item.setValueMap(idScrivaniaVistoDirSup1ValueMap);
			}
			if(recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie") != null) {
				LinkedHashMap<String, String> idScrivaniaVistoDirSup2ValueMap = new LinkedHashMap<String, String>();
				for(int i = 0; i < recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie").getLength(); i++) {
					Record lRecord = recordOpzUOCompetente.getAttributeAsRecordList("flgVistoDirSup2ValoriSelectScrivanie").get(i);
					idScrivaniaVistoDirSup2ValueMap.put(lRecord.getAttribute("key"), lRecord.getAttribute("value"));
				}
				idScrivaniaVistoDirSup2Item.setValueMap(idScrivaniaVistoDirSup2ValueMap);
			}
		}
		
		if(record.getAttributeAsString("flgErogVantaggiEconomici") != null && _FLG_SI.equalsIgnoreCase(record.getAttributeAsString("flgErogVantaggiEconomici"))) {
			aggiornaLoadComboSottotipoTrasparenzaVantEcon(false, null);
			aggiornaLoadComboNormaTitoloAttribuzione(false, null);
			aggiornaLoadComboModalitaIndividuazioneBeneficiario(false, null);
			aggiornaLoadComboAllegatiTrasparenzaVantEcon();
		} else if(record.getAttributeAsString("flgInterventi") != null && _FLG_SI.equalsIgnoreCase(record.getAttributeAsString("flgInterventi"))) {						
			aggiornaLoadComboSottotipoInterventi(false, null);
			aggiornaLoadComboNormaTitoloAttribuzione(false, null);
			aggiornaLoadComboModalitaIndividuazioneBeneficiario(false, null);
			aggiornaLoadComboAllegatiInterventi();
		} else if(record.getAttributeAsString("flgAltriProvvedimenti") != null && _FLG_SI.equalsIgnoreCase(record.getAttributeAsString("flgAltriProvvedimenti"))) {						
			aggiornaLoadComboSottotipoAltriProvvedimenti(false, null);
			aggiornaLoadComboNormaTitoloAttribuzione(false, null);
			aggiornaLoadComboModalitaIndividuazioneBeneficiario(false, null);
			aggiornaLoadComboAllegatiAltriProvvedimenti();
		}
		
		vociPEGNoVerifDisp = new HashSet<String>();
		if(record.getAttributeAsRecordList("listaVociPEGNoVerifDisp") != null) {
			for(int i = 0; i < record.getAttributeAsRecordList("listaVociPEGNoVerifDisp").getLength(); i++) {
				vociPEGNoVerifDisp.add(record.getAttributeAsRecordList("listaVociPEGNoVerifDisp").get(i).getAttribute("key"));
			}
		}
		
		if(materiaTipoAttoItem != null) {
			resetMateriaTipoAttoAfterChangedParams();
		}	
		
		if(modalitaInvioDatiSpesaARagioneriaContoCapitaleItem != null) {
			modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValueMap(buildModalitaInvioDatiSpesaARagioneriaContoCapitaleValueMap());
			modalitaInvioDatiSpesaARagioneriaContoCapitaleItem.setValue(record.getAttribute("modalitaInvioDatiSpesaARagioneriaContoCapitale"));
		}
		
		afterSelezioneScrivaniaAdottante();
		afterSelezioneScrivaniaRdP();
		
		// Quando sono in un task i dati di pubblicazione vengono caricati dalla CallExecAtt (vedi TaskNuovaPropostaAtto2CompletaDetail)
//		if(dataInizioPubblicazioneItem != null) {
//			dataInizioPubblicazioneItem.setValue(getDataInizioPubblicazioneValue());
//		}
//		if(giorniPubblicazioneItem != null) {
//			giorniPubblicazioneItem.setValue(getGiorniPubblicazioneValue());
//		}
		if(AurigaLayout.isAttivoClienteCMMI()) {
			if(dataPubblAlboDalItem != null && getDataInizioPubblicazioneValue() != null) {
				dataPubblAlboDalItem.setValue(getDataInizioPubblicazioneValue());
			}
			if(numGiorniPubblAlboItem != null && getGiorniPubblicazioneValue() != null && !"".equals(getGiorniPubblicazioneValue())) {
				numGiorniPubblAlboItem.setValue(getGiorniPubblicazioneValue());
			}
		}		
		
		// Devo settare manualmente i valori dei CKEditor
		if (luogoOrdMobilitaItem != null) {
			luogoOrdMobilitaItem.setValue(luogoOrdMobilitaCkeditorString);
			luogoOrdMobilitaItem.setFileValue(luogoOrdMobilitaFileString);
		}
		if (descrizioneOrdMobilitaItem != null) {
			descrizioneOrdMobilitaItem.setValue(descrizioneOrdMobilitaCkeditorString);
			descrizioneOrdMobilitaItem.setFileValue(descrizioneOrdMobilitaFileString);
		}		
		if(oggettoHtmlItem != null) {
			oggettoHtmlItem.setValue(oggettoHtmlCkeditorString);
			oggettoHtmlItem.setFileValue(oggettoHtmlFileString);
		}
		if(attiPresuppostiItem != null) {
			attiPresuppostiItem.setValue(attiPresuppostiCkeditorString);
			attiPresuppostiItem.setFileValue(attiPresuppostiFileString);
		}
		if(motivazioniItem != null) {
			motivazioniItem.setValue(motivazioniCkeditorString);
			motivazioniItem.setFileValue(motivazioniFileString);
		}
		if(premessaItem != null) {
			premessaItem.setValue(premessaCkeditorString);
			premessaItem.setFileValue(premessaFileString);
		}		
		if(rifNormativiLiberiItem != null) {
			rifNormativiLiberiItem.setValue(rifNormativiLiberiCkeditorString);
			rifNormativiLiberiItem.setFileValue(rifNormativiLiberiFileString);
		}
		if(dispositivoItem != null) {
			dispositivoItem.setValue(dispositivoCkeditorString);
			dispositivoItem.setFileValue(dispositivoFileString);
		}
		if(premessa2Item != null) {
			premessa2Item.setValue(premessa2CkeditorString);
			premessa2Item.setFileValue(premessa2FileString);
		}
		if(dispositivo2Item != null) {
			dispositivo2Item.setValue(dispositivo2CkeditorString);
			dispositivo2Item.setFileValue(dispositivo2FileString);
		}
		if(motiviImmediatamenteEseguibileItem != null) {
			motiviImmediatamenteEseguibileItem.setValue(motiviImmediatamenteEseguibileCkeditorString);
			motiviImmediatamenteEseguibileItem.setFileValue(motiviImmediatamenteEseguibileFileString);
		}
		if(noteCorrenteItem != null) {
			noteCorrenteItem.setValue(noteCorrenteCkeditorString);
			noteCorrenteItem.setFileValue(noteCorrenteFileString);
		}
		if(noteContoCapitaleItem != null) {
			noteContoCapitaleItem.setValue(noteContoCapitaleCkeditorString);
			noteContoCapitaleItem.setFileValue(noteContoCapitaleFileString);
		}
		
		
		if(listaAllegatiItem != null) {
			if(listaAllegatiItem instanceof AllegatiGridItem) {
				((AllegatiGridItem) listaAllegatiItem).setFlgPubblicaAllegatiSeparati(record.getAttributeAsBoolean("flgPubblicaAllegatiSeparati"));
			} else if(listaAllegatiItem instanceof AllegatiItem) {
				((AllegatiItem) listaAllegatiItem).setFlgPubblicaAllegatiSeparati(record.getAttributeAsBoolean("flgPubblicaAllegatiSeparati"));
			}
		}
		
		if(listaMovimentiContabiliaItem != null) {
			if(record.getAttribute("errorMessageMovimentiContabilia") != null && !"".equals(record.getAttribute("errorMessageMovimentiContabilia"))) {
				listaMovimentiContabiliaItem.setGridEmptyMessage(record.getAttribute("errorMessageMovimentiContabilia"));
			} else {
				listaMovimentiContabiliaItem.setGridEmptyMessage("Nessun dato trovato");
			}	
		}
		
		redrawCKEditorItems();
		enableDisableTabs();
		showHideSections();
		openSections();
		
		/****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******
		Record recordEmendamenti = new Record();
		recordEmendamenti.setAttribute("listaEmendamenti", record.getAttributeAsRecordList("listaEmendamenti"));
		emendamentiWindow.initContent(recordEmendamenti);
		****** [EMEND] ELIMINA RIGA PER EMENDAMENTI ******/
	}
	
	private void fixCkeditorValueInEditRecord(Record record, String attrName) {
		if (record.getAttribute(attrName) != null) {
			String value =  record.getAttribute(attrName);
			if (value.indexOf(SEPARATORE_FILE_DA_INIETTARE) != -1) {
				record.setAttribute(attrName, value.substring(0, value.indexOf(SEPARATORE_FILE_DA_INIETTARE)));
			}
		}
	}
	
	private void fixCkeditorValueInEditRecord(Map mappa, String attrName) {
		if ((mappa.get(attrName) != null) && (mappa.get(attrName) instanceof String)) {
			String value =  (String) mappa.get(attrName);
			if (value.indexOf(SEPARATORE_FILE_DA_INIETTARE) != -1) {
				mappa.put(attrName, value.substring(0, value.indexOf(SEPARATORE_FILE_DA_INIETTARE)));
			}
		}
	}
	
	/**
	 * Metodo che abilita/disabilita i tab
	 * 
	 */
	public void enableDisableTabs() {
		
		if(tabSet != null) {
			for (Tab tab : tabSet.getTabs()) {
				if(tab != null) {
					String tabID = tab.getAttribute("tabID");
					if(tabID.equals("SPESAPERS")) {
						if(isDeterminaPersonale()) {					
							tabSet.enableTab(tab);
						} else {
							tabSet.disableTab(tab);
						}
					} else if(tabID.equals("SPESACORR")) {
						if(isDeterminaConSpesaCorrente()) {					
							tabSet.enableTab(tab);
						} else {
							tabSet.disableTab(tab);
						}
					} else if(tabID.equals("SPESACCAP")) {
						if(isDeterminaConSpesaContoCapitale()) {					
							tabSet.enableTab(tab);
						} else {
							tabSet.disableTab(tab);
						}
					} else if(tabID.equals("DATICONT")) {
						if(isDeterminaConSpesaCorrente() || isDeterminaConSpesaContoCapitale() || isDeterminaPersonale()) {					
							tabSet.disableTab(tab);
						} else {
							tabSet.enableTab(tab);
						}
					}						
					if(!isAvvioPropostaAtto()) {
						if(tabDatiSpesaCorrente != null) {
							if(isAttivoTabDatiSpesaCorrente()) {
								tabSet.enableTab(tabDatiSpesaCorrente);			
							} else {
								tabSet.disableTab(tabDatiSpesaCorrente);							
							}
						}	
						if(tabDatiSpesaContoCapitale != null) {
							if(isAttivoTabDatiSpesaContoCapitale()) {
								tabSet.enableTab(tabDatiSpesaContoCapitale);			
							} else {
								tabSet.disableTab(tabDatiSpesaContoCapitale);							
							}
						}	
					}
				}
			}
		}
	}
	
	/**
	 * Metodo che mostra/nasconde le sezioni
	 * 
	 */
	public void showHideSections() {
		
		if(detailSectionRegistrazione != null) {			
			if(showDetailSectionRegistrazione()) {
				detailSectionRegistrazione.show();	
				detailSectionRegistrazione.setRequired(isRequiredDetailSectionRegistrazione());
			} else {
				detailSectionRegistrazione.hide();	
			}
		}
		
//		if(detailSectionPubblicazione != null) {			
//			if(showDetailSectionPubblicazione()) {
//				detailSectionPubblicazione.show();	
//				detailSectionPubblicazione.setRequired(isRequiredDetailSectionPubblicazione());
//			} else {
//				detailSectionPubblicazione.hide();	
//			}
//		}
		
		if(detailSectionEmendamento != null) {
			if(showDetailSectionEmendamento()) {				
				detailSectionEmendamento.show();
				detailSectionEmendamento.setRequired(isRequiredDetailSectionEmendamento());
			} else {
				detailSectionEmendamento.hide();	
			}
		}
		
		if(detailSectionDestinatariAtto != null) {
			if(showDetailSectionDestinatariAtto()) {				
				detailSectionDestinatariAtto.show();
				detailSectionDestinatariAtto.setRequired(isRequiredDetailSectionDestinatariAtto());				
			} else {
				detailSectionDestinatariAtto.hide();	
			}
		}
		
		if(detailSectionDestinatariPCAtto != null) {
			if(showDetailSectionDestinatariPCAtto()) {				
				detailSectionDestinatariPCAtto.show();
				detailSectionDestinatariPCAtto.setRequired(isRequiredDetailSectionDestinatariPCAtto());
			} else {
				detailSectionDestinatariPCAtto.hide();	
			}
		}
		
		if(detailSectionTipoProposta != null) {
			if(showDetailSectionTipoProposta()) {				
				detailSectionTipoProposta.show();
				detailSectionTipoProposta.setRequired(isRequiredDetailSectionTipoProposta());
			} else {
				detailSectionTipoProposta.hide();	
			}
		}
		
		if(detailSectionCircoscrizioni != null) {
			if(showDetailSectionCircoscrizioni()) {				
				detailSectionCircoscrizioni.show();
				detailSectionCircoscrizioni.setRequired(isRequiredDetailSectionCircoscrizioni());
			} else {
				detailSectionCircoscrizioni.hide();	
			}
		}
		
		if(detailSectionInterpellanza != null) {
			if(showDetailSectionInterpellanza()) {				
				detailSectionInterpellanza.show();
				detailSectionInterpellanza.setRequired(isRequiredDetailSectionInterpellanza());
			} else {
				detailSectionInterpellanza.hide();	
			}
		}
		
		if(detailSectionOrdMobilita != null) {
			if(showDetailSectionOrdMobilita()) {				
				detailSectionOrdMobilita.show();
				detailSectionOrdMobilita.setRequired(isRequiredDetailSectionOrdMobilita());
			} else {
				detailSectionOrdMobilita.hide();	
			}			
		}
		
		if(detailSectionRuoli != null) {
			if(showDetailSectionRuoli()) {				
				detailSectionRuoli.show();
				detailSectionRuoli.setRequired(isRequiredDetailSectionRuoli());
			} else {
				detailSectionRuoli.hide();	
			}
		}
		
		if(detailSectionVistiDirSuperiori != null) {
			if(showDetailSectionVistiDirSuperiori()) {				
				detailSectionVistiDirSuperiori.show();
				detailSectionVistiDirSuperiori.setRequired(isRequiredDetailSectionVistiDirSuperiori());
			} else {
				detailSectionVistiDirSuperiori.hide();	
			}
		}
		
		if(detailSectionParereCircoscrizioni != null) {
			if(showDetailSectionParereCircoscrizioni()) {				
				detailSectionParereCircoscrizioni.show();
				detailSectionParereCircoscrizioni.setRequired(isRequiredDetailSectionParereCircoscrizioni());
			} else {
				detailSectionParereCircoscrizioni.hide();	
			}
		}
		
		if(detailSectionParereCommissioni != null) {
			if(showDetailSectionParereCommissioni()) {				
				detailSectionParereCommissioni.show();
				detailSectionParereCommissioni.setRequired(isRequiredDetailSectionParereCommissioni());
			} else {
				detailSectionParereCommissioni.hide();	
			}
		}
		
		if(detailSectionDesOgg != null) {
			if(showDetailSectionDesOgg()) {				
				detailSectionDesOgg.show();
				detailSectionDesOgg.setRequired(isRequiredDetailSectionDesOgg());
			} else {
				detailSectionDesOgg.hide();	
			}
		}
		
		if(detailSectionOggetto != null) {
			if(showDetailSectionOggetto()) {				
				detailSectionOggetto.show();
				detailSectionOggetto.setRequired(isRequiredDetailSectionOggetto());
			} else {
				detailSectionOggetto.hide();	
			}
		}
		
		if(detailSectionAttoRiferimento != null) {
			if(showDetailSectionAttoRiferimento()) {				
				detailSectionAttoRiferimento.show();
				detailSectionAttoRiferimento.setRequired(isRequiredDetailSectionAttoRiferimento() || isDeterminaAggiudicaProceduraGara() || isDeterminaRimodulazioneSpesaGaraAggiudicata());					
			} else {
				detailSectionAttoRiferimento.hide();	
			}			
		}
		
		if(detailSectionCaratteristicheProvvedimento != null) {
			if(showDetailSectionCaratteristicheProvvedimento()) {				
				detailSectionCaratteristicheProvvedimento.show();
				detailSectionCaratteristicheProvvedimento.setRequired(isRequiredDetailSectionCaratteristicheProvvedimento());
			} else {
				detailSectionCaratteristicheProvvedimento.hide();	
			}
		}
		
		if(detailSectionDestVantaggio != null) {
			if(showDetailSectionDestVantaggio()) {				
				detailSectionDestVantaggio.show();
				detailSectionDestVantaggio.setRequired(isRequiredDetailSectionDestVantaggio());				
			} else {
				detailSectionDestVantaggio.hide();	
			}
		}
		
		if(detailSectionRuoliEVistiXDatiContabili != null) {
			if(showDetailSectionRuoliEVistiXDatiContabili()) {				
				detailSectionRuoliEVistiXDatiContabili.show();
				detailSectionRuoliEVistiXDatiContabili.setRequired(isRequiredDetailSectionRuoliEVistiXDatiContabili());
				if(vistiXDatiContabiliForm != null) {					
					if(showVistiXDatiContabiliForm()) {
						vistiXDatiContabiliForm.show();
					} else {
						vistiXDatiContabiliForm.hide();
					}
				}
			} else {
				detailSectionRuoliEVistiXDatiContabili.hide();	
			}
		}
		
		if(detailSectionCIG != null) {
			if(showDetailSectionCIG()) {				
				detailSectionCIG.show();
				detailSectionCIG.setRequired(isRequiredDetailSectionCIG());
			} else {
				detailSectionCIG.hide();	
			}
		}
		
		if(detailSectionCUI != null) {
			if(showDetailSectionCUI()) {				
				detailSectionCUI.show();
				detailSectionCUI.setRequired(isRequiredDetailSectionCUI());
			} else {
				detailSectionCUI.hide();	
			}
		}
		
		if(detailSectionCategoriaRischio != null) {
			if(showDetailSectionCategoriaRischio()) {				
				detailSectionCategoriaRischio.show();
				detailSectionCategoriaRischio.setRequired(isRequiredDetailSectionCategoriaRischio());
			} else {
				detailSectionCategoriaRischio.hide();	
			}
		}
		
		if(detailSectionSubfolderRda != null) {
			if(showDetailSectionSubfolderRda()) {				
				detailSectionSubfolderRda.show();
				detailSectionSubfolderRda.setRequired(isRequiredDetailSectionSubfolderRda());
			} else {
				detailSectionSubfolderRda.hide();	
			}
		}
				
		if(detailSectionClassFasc != null) {
			if(showDetailSectionClassFasc()) {				
				detailSectionClassFasc.show();
				detailSectionClassFasc.setRequired(isRequiredDetailSectionClassFasc());
			} else {
				detailSectionClassFasc.hide();	
			}
		}
		
		if(detailSectionUploadPdfAtto != null) {
			if(showDetailSectionUploadPdfAtto()) {				
				detailSectionUploadPdfAtto.show();
				detailSectionUploadPdfAtto.setRequired(isRequiredDetailSectionUploadPdfAtto());
			} else {
				detailSectionUploadPdfAtto.hide();	
			}
		}
		
		if(detailSectionRiferimentiNormativi != null) {
			if(showDetailSectionRiferimentiNormativi()) {				
				detailSectionRiferimentiNormativi.show();
				detailSectionRiferimentiNormativi.setRequired(isRequiredDetailSectionRiferimentiNormativi());
			} else {
				detailSectionRiferimentiNormativi.hide();	
			}
		}
		
		if(detailSectionAttiPresupposti != null) {
			if(showDetailSectionAttiPresupposti()) {				
				detailSectionAttiPresupposti.show();
				detailSectionAttiPresupposti.setRequired(isRequiredDetailSectionAttiPresupposti());
			} else {
				detailSectionAttiPresupposti.hide();	
			}
		}
		
		if(detailSectionMotivazioni != null) {
			if(showDetailSectionMotivazioni()) {				
				detailSectionMotivazioni.show();
				detailSectionMotivazioni.setRequired(isRequiredDetailSectionMotivazioni());
			} else {
				detailSectionMotivazioni.hide();	
			}
		}
		
		if(detailSectionPremessa != null) {
			if(showDetailSectionPremessa()) {				
				detailSectionPremessa.show();
				detailSectionPremessa.setRequired(isRequiredDetailSectionPremessa());
			} else {
				detailSectionPremessa.hide();	
			}
		}		
		
		if(detailSectionRifNormativiLiberi != null) {
			if(showDetailSectionRifNormativiLiberi()) {				
				detailSectionRifNormativiLiberi.show();
				detailSectionRifNormativiLiberi.setRequired(isRequiredDetailSectionRifNormativiLiberi());
			} else {
				detailSectionRifNormativiLiberi.hide();	
			}
		}
		
		if(detailSectionDispositivo != null) {
			if(showDetailSectionDispositivo()) {				
				detailSectionDispositivo.show();
				detailSectionDispositivo.setRequired(isRequiredDetailSectionDispositivo());
			} else {
				detailSectionDispositivo.hide();	
			}
		}
		
		if(detailSectionPremessa2 != null) {
			if(showDetailSectionPremessa2()) {				
				detailSectionPremessa2.show();
				detailSectionPremessa2.setRequired(isRequiredDetailSectionPremessa2());
			} else {
				detailSectionPremessa2.hide();	
			}
		}
		
		if(detailSectionDispositivo2 != null) {
			if(showDetailSectionDispositivo2()) {				
				detailSectionDispositivo2.show();
				detailSectionDispositivo2.setRequired(isRequiredDetailSectionDispositivo2());
			} else {
				detailSectionDispositivo2.hide();	
			}
		}
		
		if(detailSectionOpzioniTesto != null) {
			if(showDetailSectionOpzioniTesto()) {				
				detailSectionOpzioniTesto.show();
				detailSectionOpzioniTesto.setRequired(isRequiredDetailSectionOpzioniTesto());
			} else {
				detailSectionOpzioniTesto.hide();	
			}
		}
		
		if(detailSectionOpzioniAvanzateTesto != null) {
			if(showDetailSectionOpzioniAvanzateTesto()) {				
				detailSectionOpzioniAvanzateTesto.show();
				detailSectionOpzioniAvanzateTesto.setRequired(isRequiredDetailSectionOpzioniAvanzateTesto());
			} else {
				detailSectionOpzioniAvanzateTesto.hide();	
			}
		}

		if(detailSectionOpzioniIter != null) {
			if(showDetailSectionOpzioniIter()) {				
				detailSectionOpzioniIter.show();
				detailSectionOpzioniIter.setRequired(isRequiredDetailSectionOpzioniIter());
			} else {
				detailSectionOpzioniIter.hide();	
			}
		}
		
		if(detailSectionOpzioniVisibilita != null) {
			if(showDetailSectionOpzioniVisibilita()) {				
				detailSectionOpzioniVisibilita.show();
				detailSectionOpzioniVisibilita.setRequired(isRequiredDetailSectionOpzioniVisibilita());
			} else {
				detailSectionOpzioniVisibilita.hide();	
			}
		}
		
		if(detailSectionPubblAlbo != null) {
			if(showDetailSectionPubblAlbo()) {				
				detailSectionPubblAlbo.show();
				detailSectionPubblAlbo.setRequired(isRequiredDetailSectionPubblAlbo());
			} else {
				detailSectionPubblAlbo.hide();	
			}
		}
		
		if(detailSectionPubblAmmTrasp != null) {
			if(showDetailSectionPubblAmmTrasp()) {				
				detailSectionPubblAmmTrasp.show();
				detailSectionPubblAmmTrasp.setRequired(isRequiredDetailSectionPubblAmmTrasp());
			} else {
				detailSectionPubblAmmTrasp.hide();	
			}
		}
		
		if(detailSectionPubblBUR != null) {
			if(showDetailSectionPubblBUR()) {				
				detailSectionPubblBUR.show();
				detailSectionPubblBUR.setRequired(isRequiredDetailSectionPubblBUR());
			} else {
				detailSectionPubblBUR.hide();	
			}
		}
		
		if(detailSectionPubblNotiziario != null) {
			if(showDetailSectionPubblNotiziario()) {				
				detailSectionPubblNotiziario.show();
				detailSectionPubblNotiziario.setRequired(isRequiredDetailSectionPubblNotiziario());
			} else {
				detailSectionPubblNotiziario.hide();	
			}
		}
		
		if(detailSectionEsecutivita != null) {
			if(showDetailSectionEsecutivita()) {				
				detailSectionEsecutivita.show();
				detailSectionEsecutivita.setRequired(isRequiredDetailSectionEsecutivita());
			} else {
				detailSectionEsecutivita.hide();	
			}
		}
		
		if(detailSectionNotifiche != null) {
			if(showDetailSectionNotifiche()) {				
				detailSectionNotifiche.show();
				detailSectionNotifiche.setRequired(isRequiredDetailSectionNotifiche());
			} else {
				detailSectionNotifiche.hide();	
			}
		}
		
		if(detailSectionNotificaMessi != null) {
			if(showDetailSectionNotificaMessi()) {				
				detailSectionNotificaMessi.show();
				detailSectionNotificaMessi.setRequired(isRequiredDetailSectionNotificaMessi());
			} else {
				detailSectionNotificaMessi.hide();	
			}
		}
		
		if(detailSectionNotificaPEC != null) {
			if(showDetailSectionNotificaPEC()) {				
				detailSectionNotificaPEC.show();
				detailSectionNotificaPEC.setRequired(isRequiredDetailSectionNotificaPEC());
			} else {
				detailSectionNotificaPEC.hide();	
			}
		}
		
		if(detailSectionDatiContabiliSIBCorrente != null) {
			if(showDetailSectionDatiContabiliSIBCorrente()) {				
				detailSectionDatiContabiliSIBCorrente.show();
			} else {
				detailSectionDatiContabiliSIBCorrente.hide();	
			}
		}
		
		if(detailSectionInvioDatiSpesaCorrente != null) {			
			if(showDetailSectionInvioDatiSpesaCorrente()) {				
				detailSectionInvioDatiSpesaCorrente.show();
			} else {
				detailSectionInvioDatiSpesaCorrente.hide();	
			}
		}
		
		if(detailSectionFileXlsCorrente != null) {			
			if(showDetailSectionFileXlsCorrente()) {								
				detailSectionFileXlsCorrente.show();
			} else {
				detailSectionFileXlsCorrente.hide();	
			}
		}
		
		if(detailSectionNoteCorrente != null) {
			if(showDetailSectionNoteCorrente()) {				
				detailSectionNoteCorrente.show();				
			} else {
				detailSectionNoteCorrente.hide();	
			}
		}
		
		if(detailSectionDatiContabiliSIBContoCapitale != null) {
			if(showDetailSectionDatiContabiliSIBContoCapitale()) {
				detailSectionDatiContabiliSIBContoCapitale.show();
			} else {
				detailSectionDatiContabiliSIBContoCapitale.hide();	
			}
		}
		
		if(detailSectionInvioDatiSpesaContoCapitale != null) {
			if(showDetailSectionInvioDatiSpesaContoCapitale()) {
				detailSectionInvioDatiSpesaContoCapitale.show();
			} else {
				detailSectionInvioDatiSpesaContoCapitale.hide();	
			}
		}
		
		if(detailSectionFileXlsContoCapitale != null) {
			if(showDetailSectionFileXlsContoCapitale()) {
				detailSectionFileXlsContoCapitale.show();
			} else {
				detailSectionFileXlsContoCapitale.hide();	
			}
		}
		
		if(detailSectionNoteContoCapitale != null) {
			if(showDetailSectionNoteContoCapitale()) {				
				detailSectionNoteContoCapitale.show();				
			} else {
				detailSectionNoteContoCapitale.hide();	
			}
		}
		
		if(detailSectionAggregatoSmistamentoACTA != null) {
			detailSectionAggregatoSmistamentoACTA.setRequired(isRequiredDetailSectionAggregatoSmistamentoACTA());			
			if(flgSmistamentoACTAForm != null) {
				if(showSmistamentoACTAForms()) {
					flgSmistamentoACTAForm.show();					
				} else {
					flgSmistamentoACTAForm.hide();					
				}
			}
			if(smistamentoACTAForm != null) {
				if(showSmistamentoACTAForms()) {
					smistamentoACTAForm.show();
				} else {
					smistamentoACTAForm.hide();
				}
			}
			if(visualizzaScaricaFileACTAForm != null) {
				if(showVisualizzaScaricaFileACTAForm()) {
					visualizzaScaricaFileACTAForm.show();
				} else {
					visualizzaScaricaFileACTAForm.hide();
				}
			}			
		}
		
		if(detailSectionOpereADSP != null) {
			if(showDetailSectionOpereADSP()) {				
				detailSectionOpereADSP.show();
				detailSectionOpereADSP.setRequired(isRequiredDetailSectionOpereADSP());
			} else {
				detailSectionOpereADSP.hide();	
			}
		}
		
		if(detailSectionDatiContabiliATERSIR != null) {
			if(showDetailSectionDatiContabiliATERSIR()) {				
				detailSectionDatiContabiliATERSIR.show();
				detailSectionDatiContabiliATERSIR.setRequired(isRequiredDetailSectionDatiContabiliATERSIR());
			} else {
				detailSectionDatiContabiliATERSIR.hide();	
			}
		}
		
		
		if(detailSectionDatiContabiliADSP != null) {
			if(showDetailSectionDatiContabiliADSP()) {				
				detailSectionDatiContabiliADSP.show();
				detailSectionDatiContabiliADSP.setRequired(isRequiredDetailSectionDatiContabiliADSP());
			} else {
				detailSectionDatiContabiliADSP.hide();	
			}
		}
		
		if(detailSectionImpegniAVB != null) {
			if(showDetailSectionImpegniAVB()) {				
				detailSectionImpegniAVB.show();
				detailSectionImpegniAVB.setRequired(isRequiredDetailSectionImpegniAVB());
			} else {
				detailSectionImpegniAVB.hide();	
			}
		}
		
		if(detailSectionAccertamentiAVB != null) {
			if(showDetailSectionAccertamentiAVB()) {				
				detailSectionAccertamentiAVB.show();
				detailSectionAccertamentiAVB.setRequired(isRequiredDetailSectionAccertamentiAVB());
			} else {
				detailSectionAccertamentiAVB.hide();	
			}
		}
		
		if(detailSectionLiquidazioniAVB != null) {
			if(showDetailSectionLiquidazioniAVB()) {				
				detailSectionLiquidazioniAVB.show();
				detailSectionLiquidazioniAVB.setRequired(isRequiredDetailSectionLiquidazioniAVB());
			} else {
				detailSectionLiquidazioniAVB.hide();	
			}
		}
		
		if(detailSectionErogVantaggiEconomiciTrasp != null) {
			if(showDetailSectionErogVantaggiEconomiciTabTrasp()) {
				detailSectionErogVantaggiEconomiciTrasp.show();
			} else {
				detailSectionErogVantaggiEconomiciTrasp.hide();
			}
		}
		
		if(detailSectionInterventiTrasp != null) {
			if(showDetailSectionInterventiTraspTabTrasp()) {
				detailSectionInterventiTrasp.show();
			} else {
				detailSectionInterventiTrasp.hide();
			}
		}
		
		if(detailSectionAltriProvvedimentiTrasp != null) {
			if(showDetailSectionAltriProvvedimentiTraspTabTrasp()) {
				detailSectionAltriProvvedimentiTrasp.show();
			} else {
				detailSectionAltriProvvedimentiTrasp.hide();
			}
		}
		
		if(detailSectionDettaglioTrasparenza!=null) {
			if(showDetailSectionDettaglioTrasparenza()) {
				detailSectionDettaglioTrasparenza.show();
			} else {
				detailSectionDettaglioTrasparenza.hide();
			}
		}
		
		if(detailSectionBeneficiariTrasparenza != null) {
			if(showDetailSectionBeneficiariTrasparenza()) {				
				detailSectionBeneficiariTrasparenza.show();
				detailSectionBeneficiariTrasparenza.setRequired(isRequiredDetailSectionBeneficiariTrasparenza());				
			} else {
				detailSectionBeneficiariTrasparenza.hide();	
			}
		}
		
		if(detailSectionDatiLiquidazioneAVB != null) {
			if(showDetailSectionDatiLiquidazioneAVB()) {				
				detailSectionDatiLiquidazioneAVB.show();
				detailSectionDatiLiquidazioneAVB.setRequired(isRequiredDetailSectionDatiLiquidazioneAVB());
			} else {
				detailSectionDatiLiquidazioneAVB.hide();	
			}
		}
	}
	
	public void redrawCKEditorItems() {
		if(luogoOrdMobilitaItem != null) {
			luogoOrdMobilitaItem.redraw();			
		}
		if(motiviImmediatamenteEseguibileItem != null) {
			motiviImmediatamenteEseguibileItem.redraw();						
		}	
	}	
	
	public DynamicForm[] getTabForms(String tabID) {
		
		ArrayList<DynamicForm> listaTabForms = new ArrayList<DynamicForm>();
		for(DynamicForm form : vm.getMembers()) {
			if(form.getTabID() != null && form.getTabID().equalsIgnoreCase(tabID)) {
				listaTabForms.add(form);
			}
		}
		return listaTabForms.toArray(new DynamicForm[listaTabForms.size()]);
	}
	
	public void addTabValues(Record record, String tabID) {
		
		for(DynamicForm form : getTabForms(tabID)) {
			addFormValues(record, form);
		}
	}
	
	public void redrawTabForms(String tabID) {
		
		for(DynamicForm form : getTabForms(tabID)) {
			form.markForRedraw();
		}
	}
	
	public Record getRecordToSave() {
		
		final Record lRecordToSave = new Record();
		
		lRecordToSave.setAttribute("parametriTipoAtto", recordParametriTipoAtto);
		lRecordToSave.setAttribute("idFolder", getIdFolderProc());
		lRecordToSave.setAttribute("idProcess", getIdProcessTask());
		
		if(!(this instanceof TaskFlussoInterface)) {
			Record recordEvento = getRecordEventoXInfoModelli();
			if(recordEvento != null) {
				lRecordToSave.setAttribute("idModCopertina", recordEvento != null ? recordEvento.getAttribute("idModCopertina") : "");
				lRecordToSave.setAttribute("nomeModCopertina", recordEvento != null ? recordEvento.getAttribute("nomeModCopertina") : "");
				lRecordToSave.setAttribute("idModCopertinaFinale", recordEvento != null ? recordEvento.getAttribute("idModCopertinaFinale") : "");
				lRecordToSave.setAttribute("nomeModCopertinaFinale", recordEvento != null ? recordEvento.getAttribute("nomeModCopertinaFinale") : "");
				lRecordToSave.setAttribute("idModAllegatiParteIntSeparati", recordEvento != null ? recordEvento.getAttribute("idModAllegatiParteIntSeparati") : "");
				lRecordToSave.setAttribute("nomeModAllegatiParteIntSeparati", recordEvento != null ? recordEvento.getAttribute("nomeModAllegatiParteIntSeparati") : "");
				lRecordToSave.setAttribute("uriModAllegatiParteIntSeparati", recordEvento != null ? recordEvento.getAttribute("uriModAllegatiParteIntSeparati") : "");
				lRecordToSave.setAttribute("tipoModAllegatiParteIntSeparati", recordEvento != null ? recordEvento.getAttribute("tipoModAllegatiParteIntSeparati") : "");
				lRecordToSave.setAttribute("idModAllegatiParteIntSeparatiXPubbl", recordEvento != null ? recordEvento.getAttribute("idModAllegatiParteIntSeparatiXPubbl") : "");
				lRecordToSave.setAttribute("nomeModAllegatiParteIntSeparatiXPubbl", recordEvento != null ? recordEvento.getAttribute("nomeModAllegatiParteIntSeparatiXPubbl") : "");
				lRecordToSave.setAttribute("uriModAllegatiParteIntSeparatiXPubbl", recordEvento != null ? recordEvento.getAttribute("uriModAllegatiParteIntSeparatiXPubbl") : "");
				lRecordToSave.setAttribute("tipoModAllegatiParteIntSeparatiXPubbl", recordEvento != null ? recordEvento.getAttribute("tipoModAllegatiParteIntSeparatiXPubbl") : "");
				lRecordToSave.setAttribute("flgAppendiceDaUnire", recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAppendiceDaUnire") : null);
				lRecordToSave.setAttribute("idModAppendice", recordEvento != null ? recordEvento.getAttribute("idModAppendice") : "");
				lRecordToSave.setAttribute("nomeModAppendice", recordEvento != null ? recordEvento.getAttribute("nomeModAppendice") : "");
				lRecordToSave.setAttribute("idModello", recordEvento != null ? recordEvento.getAttribute("idModAssDocTask") : "");
				lRecordToSave.setAttribute("nomeModello", recordEvento != null ? recordEvento.getAttribute("nomeModAssDocTask") : "");
				lRecordToSave.setAttribute("displayFilenameModello", recordEvento != null ? recordEvento.getAttribute("displayFilenameModAssDocTask") : "");
				lRecordToSave.setAttribute("idUoDirAdottanteSIB", recordEvento != null ? recordEvento.getAttribute("idUoDirAdottanteSIB") : "");
				lRecordToSave.setAttribute("codUoDirAdottanteSIB", recordEvento != null ? recordEvento.getAttribute("codUoDirAdottanteSIB") : "");
				lRecordToSave.setAttribute("desUoDirAdottanteSIB", recordEvento != null ? recordEvento.getAttribute("desUoDirAdottanteSIB") : "");
				// mi passo avanti l'informazione se è attivo l'upload del pdf atto, in quel caso lo salvo
				lRecordToSave.setAttribute("flgAttivaUploadPdfAtto", recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAttivaUploadPdfAtto") : false);
				lRecordToSave.setAttribute("flgAttivaUploadPdfAttoOmissis", recordEvento != null ? recordEvento.getAttributeAsBoolean("flgAttivaUploadPdfAttoOmissis") : false);
			}
		}
		
		addTabValues(lRecordToSave, _TAB_DATI_SCHEDA_ID);
		if(showTabDatiDispositivo()) {
			addTabValues(lRecordToSave, _TAB_DATI_DISPOSITIVO_ID);
		}
		if(showTabDatiDispositivo2()) {
			addTabValues(lRecordToSave, _TAB_DATI_DISPOSITIVO_2_ID);
		}
		addTabValues(lRecordToSave, _TAB_ALLEGATI_ID);	
		if(showTabDocFasc()) {
			addTabValues(lRecordToSave, _TAB_DOC_FASC_ID);
		}
		if(showTabPubblicazioneNotifiche()) {
			addTabValues(lRecordToSave, _TAB_DATI_PUBBL_ID);
		}
		if(showTabMovimentiContabili()) {
			addTabValues(lRecordToSave, _TAB_MOVIMENTI_CONTABILI_ID);
		}
		if(showTabDatiGSA()) {
			addTabValues(lRecordToSave, _TAB_DATI_GSA_ID);
		}
		if(isAttivoTabDatiSpesaCorrente()) {
			addTabValues(lRecordToSave, _TAB_DATI_SPESA_CORRENTE_ID);
		}
		if(isAttivoTabDatiSpesaContoCapitale()) {
			addTabValues(lRecordToSave, _TAB_DATI_SPESA_CONTO_CAPITALE_ID);
		}
		if(showTabAggregatoSmistamentoACTA()) {
			addTabValues(lRecordToSave, _TAB_AGGREGATO_SMISTAMENTO_ACTA_ID);
		}
		if(showTabOpereADSP()) {
			addTabValues(lRecordToSave, _TAB_OPERE_ADSP_ID);
		}
		if(showTabDatiContabiliATERSIR()) {
			addTabValues(lRecordToSave, _TAB_DATI_CONTABILI_ATERSIR_ID);
		}
		if(showTabDatiContabiliADSP()) {
			addTabValues(lRecordToSave, _TAB_DATI_CONTABILI_ADSP_ID);
		}
		if(showTabDatiContabiliAVB()) {
			addTabValues(lRecordToSave, _TAB_DATI_CONTABILI_AVB_ID);
		}
		if(showTabTrasparenzaAVB()) {
			addTabValues(lRecordToSave, _TAB_DATI_TRASP_AVB_ID);
		}
		if(showTabDatiLiquidazioneAVB()) {
			addTabValues(lRecordToSave, _TAB_DATI_LIQUIDAZIONE_AVB_ID);
		}
		
//		if(getValueAsDate("dataInizioPubblicazione") == null) {
//			lRecordToSave.setAttribute("dataInizioPubblicazione", getDataInizioPubblicazioneValue());
//		}
//		if("".equals(getValueAsString("giorniPubblicazione"))) {
//			lRecordToSave.setAttribute("giorniPubblicazione", getGiorniPubblicazioneValue());
//		}
		if(AurigaLayout.isAttivoClienteCMMI()) {
			if(showDataPubblAlboDalItem() && getValueAsDate("dataPubblAlboDal") == null) {
				lRecordToSave.setAttribute("dataPubblAlboDal", getDataInizioPubblicazioneValue());
			}
			if(showNumGiorniPubblAlboItem() && "".equals(getValueAsString("numGiorniPubblAlbo"))) {
				lRecordToSave.setAttribute("numGiorniPubblAlbo", getGiorniPubblicazioneValue());
			}
		}

		if(showProponentiItem()) {
			// se la sezione non è replicabile passo i valori di quella riga come UO di registrazione
			if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
				RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
				if(listaProponenti != null && listaProponenti.getLength() > 0) {
					lRecordToSave.setAttribute("ufficioProponente", listaProponenti.get(0).getAttribute("idUo"));		
					lRecordToSave.setAttribute("codUfficioProponente", listaProponenti.get(0).getAttribute("codRapido"));
					lRecordToSave.setAttribute("desUfficioProponente", listaProponenti.get(0).getAttribute("descrizione"));				
				}
			} else {
				RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
				if(listaProponenti != null && listaProponenti.getLength() == 1) {
					lRecordToSave.setAttribute("ufficioProponente", listaProponenti.get(0).getAttribute("idUo"));		
					lRecordToSave.setAttribute("codUfficioProponente", listaProponenti.get(0).getAttribute("codRapido"));
					lRecordToSave.setAttribute("desUfficioProponente", listaProponenti.get(0).getAttribute("descrizione"));				
				}
			}
		} else {
			if(isAbilToSelUffPropEsteso()) {
				RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
				if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
					lRecordToSave.setAttribute("ufficioProponente", listaUfficioProponente.get(0).getAttribute("idUo"));		
					lRecordToSave.setAttribute("codUfficioProponente", listaUfficioProponente.get(0).getAttribute("codRapido"));
					lRecordToSave.setAttribute("desUfficioProponente", listaUfficioProponente.get(0).getAttribute("descrizione"));				
				}
			}
		}
		
		if(showUfficioCompetenteItem()) {
			RecordList listaUfficioCompetente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioCompetente") : null;
			if(listaUfficioCompetente != null && listaUfficioCompetente.getLength() > 0) {
				lRecordToSave.setAttribute("ufficioCompetente", listaUfficioCompetente.get(0).getAttribute("idUo"));				
				lRecordToSave.setAttribute("codUfficioCompetente", listaUfficioCompetente.get(0).getAttribute("codRapido"));
				lRecordToSave.setAttribute("desUfficioCompetente", listaUfficioCompetente.get(0).getAttribute("descrizione"));
			}
		} else {
			if(showProponentiItem()) {
				if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
					RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
					if(listaProponenti != null && listaProponenti.getLength() > 0) {
						if(listaProponenti.get(0).getAttribute("idUo") != null && !"".equals(listaProponenti.get(0).getAttribute("idUo"))) {
							lRecordToSave.setAttribute("ufficioCompetente", listaProponenti.get(0).getAttribute("idUo"));				
							lRecordToSave.setAttribute("codUfficioCompetente", listaProponenti.get(0).getAttribute("codRapido"));
							lRecordToSave.setAttribute("desUfficioCompetente", listaProponenti.get(0).getAttribute("descrizione"));			
						}		
					}
				}
			} else {
				if(isAbilToSelUffPropEsteso()) {
					RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
					if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
						if(listaUfficioProponente.get(0).getAttribute("idUo") != null && !"".equals(listaUfficioProponente.get(0).getAttribute("idUo"))) {
							lRecordToSave.setAttribute("ufficioCompetente", listaUfficioProponente.get(0).getAttribute("idUo"));				
							lRecordToSave.setAttribute("codUfficioCompetente", listaUfficioProponente.get(0).getAttribute("codRapido"));
							lRecordToSave.setAttribute("desUfficioCompetente", listaUfficioProponente.get(0).getAttribute("descrizione"));			
						}
					}
				} else if (getValueAsString("ufficioProponente") != null && !"".equals(getValueAsString("ufficioProponente"))) {
					lRecordToSave.setAttribute("ufficioCompetente", getValueAsString("ufficioProponente"));				
					lRecordToSave.setAttribute("codUfficioCompetente", getValueAsString("codUfficioProponente"));
					lRecordToSave.setAttribute("desUfficioCompetente", getValueAsString("desUfficioProponente"));							
				}			
			}
		}

		if(showFlgProcExCodAppaltiItem()) {
			lRecordToSave.setAttribute("listaRUP", new RecordList());
			lRecordToSave.setAttribute("listaRdP", new RecordList());
			if(!showRUPCodAppaltiItem()) {
				lRecordToSave.setAttribute("listaRUPCodAppalti", new RecordList());
			}
			if(!showRdPCodAppaltiItem()) {
				lRecordToSave.setAttribute("listaRdPCodAppalti", new RecordList());
			}
		} else {
			lRecordToSave.setAttribute("listaRUPCodAppalti", new RecordList());
			lRecordToSave.setAttribute("listaRdPCodAppalti", new RecordList());
		}
		
		if(showCodProcedimentoRdPUgualeAdottanteItem()) {
			lRecordToSave.setAttribute("codProcedimento", ruoliForm.getValueAsString("codProcedimentoRdPUgualeAdottante"));
		} else if(showCodProcedimentoRdPItem()) {			
			lRecordToSave.setAttribute("codProcedimento", ruoliForm.getValueAsString("codProcedimentoRdP"));
		}
		
		// Inizio set dei valori dei CKEditor		
		lRecordToSave.setAttribute("luogoOrdMobilita", luogoOrdMobilitaItem != null ? luogoOrdMobilitaItem.getValue() : null);
		lRecordToSave.setAttribute("luogoOrdMobilitaFile", luogoOrdMobilitaItem != null ? luogoOrdMobilitaItem.getFileValue() : null);
		lRecordToSave.setAttribute("descrizioneOrdMobilita", descrizioneOrdMobilitaItem != null ? descrizioneOrdMobilitaItem.getValue() : null);
		lRecordToSave.setAttribute("descrizioneOrdMobilitaFile", descrizioneOrdMobilitaItem != null ? descrizioneOrdMobilitaItem.getFileValue() : null);
		lRecordToSave.setAttribute("oggettoHtml", oggettoHtmlItem != null ? oggettoHtmlItem.getValue() : null);
		lRecordToSave.setAttribute("oggettoHtmlFile", oggettoHtmlItem != null ? oggettoHtmlItem.getFileValue() : null);
		if(showTabDatiDispositivo()) {
			lRecordToSave.setAttribute("attiPresupposti", attiPresuppostiItem != null ? attiPresuppostiItem.getValue() : null);
			lRecordToSave.setAttribute("attiPresuppostiFile", attiPresuppostiItem != null ? attiPresuppostiItem.getFileValue() : null);
			lRecordToSave.setAttribute("motivazioni", motivazioniItem != null ? motivazioniItem.getValue() : null);
			lRecordToSave.setAttribute("motivazioniFile", motivazioniItem != null ? motivazioniItem.getFileValue() : null);
			lRecordToSave.setAttribute("premessa", premessaItem != null ? premessaItem.getValue() : null);
			lRecordToSave.setAttribute("premessaFile", premessaItem != null ? premessaItem.getFileValue() : null);
			lRecordToSave.setAttribute("rifNormativiLiberi", rifNormativiLiberiItem != null ? rifNormativiLiberiItem.getValue() : null);			
			lRecordToSave.setAttribute("rifNormativiLiberiFile", rifNormativiLiberiItem != null ? rifNormativiLiberiItem.getFileValue() : null);
			lRecordToSave.setAttribute("dispositivo", dispositivoItem != null ? dispositivoItem.getValue() : null);
			lRecordToSave.setAttribute("dispositivoFile", dispositivoItem != null ? dispositivoItem.getFileValue() : null);
		}		
		if(showTabDatiDispositivo2()) {
			lRecordToSave.setAttribute("premessa2", premessa2Item != null ? premessa2Item.getValue() : null);
			lRecordToSave.setAttribute("premessa2File", premessa2Item != null ? premessa2Item.getFileValue() : null);
			lRecordToSave.setAttribute("dispositivo2", dispositivo2Item != null ? dispositivo2Item.getValue() : null);
			lRecordToSave.setAttribute("dispositivo2File", dispositivo2Item != null ? dispositivo2Item.getFileValue() : null);
		}
		if(showTabPubblicazioneNotifiche()) {
			lRecordToSave.setAttribute("motiviImmediatamenteEseguibile", motiviImmediatamenteEseguibileItem != null ? motiviImmediatamenteEseguibileItem.getValue() : null);
			lRecordToSave.setAttribute("motiviImmediatamenteEseguibileFile", motiviImmediatamenteEseguibileItem != null ? motiviImmediatamenteEseguibileItem.getFileValue() : null);
		}
		if(!isAvvioPropostaAtto() && isAttivoSIB()) {	
			lRecordToSave.setAttribute("noteCorrente", noteCorrenteItem != null ? noteCorrenteItem.getValue() : null);
			lRecordToSave.setAttribute("noteCorrenteFile", noteCorrenteItem != null ? noteCorrenteItem.getFileValue() : null);
			lRecordToSave.setAttribute("noteContoCapitale", noteContoCapitaleItem != null ? noteContoCapitaleItem.getValue() : null);
			lRecordToSave.setAttribute("noteContoCapitaleFile", noteContoCapitaleItem != null ? noteContoCapitaleItem.getFileValue() : null);
		}
		// Fine set dei valori dei CKEditor
		
		if(!showDetailSectionDestinatariAtto()) {
			lRecordToSave.setAttribute("listaDestinatariAtto", new RecordList());
		}
		
		if(!showDetailSectionDestinatariPCAtto()) {
			lRecordToSave.setAttribute("listaDestinatariPCAtto", new RecordList());
		}
		
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
			lRecordToSave.setAttribute("flgSpesa", flgSpesaValoriPossibili[0]);
		}
		
		String[] flgDatiRilevantiGSAValoriPossibili = getValoriPossibiliFlgDatiRilevantiGSAItem();
		if(flgDatiRilevantiGSAValoriPossibili != null && flgDatiRilevantiGSAValoriPossibili.length == 1) {
			lRecordToSave.setAttribute("flgDatiRilevantiGSA", flgDatiRilevantiGSAValoriPossibili[0]);
		}
		
		// Dati di spesa
		RecordList listaUfficioDefinizioneSpesa = ruoliXDatiContabiliForm1 != null ? ruoliXDatiContabiliForm1.getValueAsRecordList("listaUfficioDefinizioneSpesa") : null;
		if(listaUfficioDefinizioneSpesa != null && listaUfficioDefinizioneSpesa.getLength() > 0) {
			lRecordToSave.setAttribute("ufficioDefinizioneSpesa", listaUfficioDefinizioneSpesa.get(0).getAttribute("idUo"));				
			lRecordToSave.setAttribute("codUfficioDefinizioneSpesa", listaUfficioDefinizioneSpesa.get(0).getAttribute("codRapido"));
			lRecordToSave.setAttribute("desUfficioDefinizioneSpesa", listaUfficioDefinizioneSpesa.get(0).getAttribute("descrizione"));				
		}			
		
		// Attributi dinamici doc
		if (attributiAddDocDetails != null) {
			lRecordToSave.setAttribute("rowidDoc", rowidDoc);
			lRecordToSave.setAttribute("valori", getAttributiDinamiciDoc());
			lRecordToSave.setAttribute("tipiValori", getTipiAttributiDinamiciDoc());
			lRecordToSave.setAttribute("colonneListe", getColonneListeAttributiDinamiciDoc());
		}
		
		if(hasDatiSensibili()) {
			lRecordToSave.setAttribute("flgDatiSensibili", true);
			lRecordToSave.setAttribute("flgPrivacy", _FLG_SI);
		}
		
		if(listaAllegatiItem != null) {
			lRecordToSave.setAttribute("flgPubblicazioneAllegatiUguale", flgPubblicazioneAllegatiUguale != null && flgPubblicazioneAllegatiUguale);
			if(listaAllegatiItem instanceof AllegatiGridItem) {
				lRecordToSave.setAttribute("flgPubblicaAllegatiSeparati", ((AllegatiGridItem) listaAllegatiItem).isFlgPubblicaAllegatiSeparati());
			} else if(listaAllegatiItem instanceof AllegatiItem) {
				lRecordToSave.setAttribute("flgPubblicaAllegatiSeparati", ((AllegatiItem) listaAllegatiItem).isFlgPubblicaAllegatiSeparati());
			}
		}
		
		if(isAttivoSICRA()) {
			if(listaInvioMovimentiContabiliSICRAItem != null) {
				lRecordToSave.setAttribute("listaMovimentiSICRAToDelete", listaInvioMovimentiContabiliSICRAItem.getListaMovimentiToDelete());
				lRecordToSave.setAttribute("listaMovimentiSICRAToInsert", listaInvioMovimentiContabiliSICRAItem.getListaMovimentiToInsert());
			}
		}
		
		RecordList listaAllegati = allegatiForm != null ? allegatiForm.getValuesAsRecord().getAttributeAsRecordList("listaAllegati") : null;
		RecordList listaAllegatiFromLoadDett = recordFromLoadDett != null ? recordFromLoadDett.getAttributeAsRecordList("listaAllegati") : null;			
		if(listaAllegati != null && listaAllegatiFromLoadDett != null && listaAllegati.equals(listaAllegatiFromLoadDett)) {
			lRecordToSave.setAttribute("skipUpdDocAllegati", "true");
		}
		lRecordToSave.setAttribute("elencoCampiConGestioneOmissisDaIgnorare", getElencoCampiConGestioneOmissisDaIgnorare());
		
		return lRecordToSave;
	}
	
	public boolean isTaskDetail() {
		return instance instanceof TaskFlussoInterface;
	}
	
	public String getIdUoProponente() {
		if(showProponentiItem()) {
			if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
				RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
				if(listaProponenti != null && listaProponenti.getLength() > 0) {
					return listaProponenti.get(0).getAttribute("idUo");			
				}
			}
		} else {
			if(isAbilToSelUffPropEsteso()) {
				RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
				if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
					return listaUfficioProponente.get(0).getAttribute("idUo");
				}
			} else {
				return getValueAsString("ufficioProponente");
			}
		}
		return null;
	}
	
	public boolean isUfficioProponenteGare() {		
		if(showProponentiItem()) {
			if(!isAbilToSelProponentiEstesi() || isNotReplicableProponentiItem()) {
				RecordList listaProponenti = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaProponenti") : null;
				if(listaProponenti != null && listaProponenti.getLength() > 0) {
					String flgUfficioGare = listaProponenti.get(0).getAttribute("flgUfficioGare");
					return flgUfficioGare != null && "1".equals(flgUfficioGare);						
				}
			}
		} else {
			if(isAbilToSelUffPropEsteso()) {
				RecordList listaUfficioProponente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioProponente") : null;
				if(listaUfficioProponente != null && listaUfficioProponente.getLength() > 0) {
					String flgUfficioGare = listaUfficioProponente.get(0).getAttribute("flgUfficioGare");
					return flgUfficioGare != null && "1".equals(flgUfficioGare);
				}
			} else {
				return getValueAsString("flgUfficioProponenteGare") != null && "1".equals(getValueAsString("flgUfficioProponenteGare"));			
			}
		}
		return false;
	}
	
	public String getIdUoCompetente() {		
		RecordList listaUfficioCompetente = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaUfficioCompetente") : null;
		if(listaUfficioCompetente != null && listaUfficioCompetente.getLength() > 0) {
			return listaUfficioCompetente.get(0).getAttribute("idUo");
		}
		return null;
	}
	
	public String getDirigenteAdottante() {
		RecordList listaAdottante = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaAdottante") : null;
		if(listaAdottante != null && listaAdottante.getLength() > 0) {
			return listaAdottante.get(0).getAttribute("dirigenteAdottante");
		}
		return null;
	}
	
	public String getResponsabileDiProcedimento(boolean isRdPUgualeAdottante) {
		String responsabileDiProcedimento = null;
		if(isRdPUgualeAdottante) {
			RecordList listaAdottante = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaAdottante") : null;
			if(listaAdottante != null && listaAdottante.getLength() > 0) {
				responsabileDiProcedimento = listaAdottante.get(0).getAttribute("dirigenteAdottante");
			}
		} else {
			RecordList listaRdP = ruoliForm != null ? ruoliForm.getValueAsRecordList("listaRdP") : null;
			if(listaRdP != null && listaRdP.getLength() > 0) {
				responsabileDiProcedimento = listaRdP.get(0).getAttribute("responsabileDiProcedimento");
			}
		}
		return responsabileDiProcedimento;
	}
	
	protected String getIdUd() {
		return getValueAsString("idUd");
	}
	
	protected String getIdFolderProc() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String idFolderProc = recordEvento != null ? recordEvento.getAttribute("idFolder") : null;		
		return idFolderProc != null ? idFolderProc : ""; 
	}
	
	protected String getIdUdAttoDaAnnullare() {
		return null;
	}
	
	protected String getIdProcessTask() {
		return null;
	}

	protected String getIdProcessTypeTask() {
		return null;
	}
	
	protected String getIdTaskCorrente() {
		return null;
	}
	
	public boolean isEscludiFiltroCdCVsAMC() {
		return false;
	}
	
	/**
	 * Metodo che restituisce la mappa dei modelli relativi agli atti associati
	 * al task, da passare alla sezione degli allegati
	 * 
	 */
	public HashSet<String> getTipiModelliAttiInAllegati() {
		return null;
	}
	
	/**
	 * Metodo che restituisce la mappa dei modelli relativi agli atti associati
	 * al task, da passare alla sezione dei documenti fascicolo
	 * 
	 */
	public HashSet<String> getTipiModelliAttiInDocFasc() {
		return null;
	}
	
	public boolean isObbligatorioFileInAllegati() {
		return true;
	}
	
	/**
	 * Metodo che chiama il servizio che genera l'allegato da modello iniettando i 
	 * valori presenti in maschera
	 * 
	 */
	// Questo metodo è sovrascritto in TaskNuovaPropostaAtto2CompletaDetail
	public void caricaModelloInAllegati(String idModello, String tipoModello, String flgConvertiInPdf, final ServiceCallback<Record> callback) {
		final GWTRestDataSource lGeneraDaModelloWithDatiDocDataSource = new GWTRestDataSource("GeneraDaModelloWithDatiDocDataSource");
		lGeneraDaModelloWithDatiDocDataSource.addParam("flgConvertiInPdf", flgConvertiInPdf);
		lGeneraDaModelloWithDatiDocDataSource.executecustom("caricaModello", getRecordCaricaModelloInAllegati(idModello, tipoModello), new DSCallback() {

			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					if (callback != null) {
						callback.execute(response.getData()[0]);
					}
				}
			}
		});
	}
	
	/**
	 * Metodo che costruisce il record per la chiamata al servizio che genera
	 * l'allegato da modello iniettando i valori presenti in maschera
	 * 
	 */
	public Record getRecordCaricaModelloInAllegati(String idModello, String tipoModello) {
		
		final Record modelloRecord = new Record();
		modelloRecord.setAttribute("idModello", idModello);
		modelloRecord.setAttribute("tipoModello", tipoModello);
		modelloRecord.setAttribute("idUd", getIdUd());
		if (attributiAddDocDetails != null) {
			modelloRecord.setAttribute("valori", getAttributiDinamiciDoc());
			modelloRecord.setAttribute("tipiValori", getTipiAttributiDinamiciDoc());
			modelloRecord.setAttribute("colonneListe", getColonneListeAttributiDinamiciDoc());
		}		
		return modelloRecord;
	}
	
	/**
	 * Metodo che chiama il servizio che genera il documento fascicolo da modello iniettando i 
	 * valori presenti in maschera
	 * 
	 */	
	public void caricaModelloInDocumentiFascicolo(String idModello, String tipoModello, String flgConvertiInPdf, final ServiceCallback<Record> callback) {
		GWTRestDataSource lGeneraDaModelloWithDatiFolderDataSource = new GWTRestDataSource("GeneraDaModelloWithDatiFolderDataSource");
		lGeneraDaModelloWithDatiFolderDataSource.addParam("flgConvertiInPdf", flgConvertiInPdf);
		lGeneraDaModelloWithDatiFolderDataSource.executecustom("caricaModello", getRecordCaricaModelloInDocumentiFascicolo(idModello, tipoModello), new DSCallback() {

			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					if (callback != null) {
						callback.execute(response.getData()[0]);
					}
				}
			}
		});
	}
	
	/**
	 * Metodo che costruisce il record per la chiamata al servizio che genera
	 * il documento fascicolo da modello iniettando i valori presenti in maschera
	 * 
	 */
	public Record getRecordCaricaModelloInDocumentiFascicolo(String idModello, String tipoModello) {
		final Record modelloRecord = new Record();
		modelloRecord.setAttribute("idModello", idModello);
		modelloRecord.setAttribute("tipoModello", tipoModello);
		modelloRecord.setAttribute("idUd", getIdUd());
		modelloRecord.setAttribute("idFolder", getIdFolderProc());
		if (attributiAddDocDetails != null) {
			modelloRecord.setAttribute("valori", getAttributiDinamiciDoc());
			modelloRecord.setAttribute("tipiValori", getTipiAttributiDinamiciDoc());
			modelloRecord.setAttribute("colonneListe", getColonneListeAttributiDinamiciDoc());
		}
		return modelloRecord;
	}
		
	public boolean hasPrimarioDatiSensibili() {
		if(showFilePdfAttoOmissisItem() && filePdfAttoOmissisItem != null && filePdfAttoOmissisItem.isNotNull()) {
			return true;
		}
		boolean flgAggiornataVersDaPubblicare = hiddenForm.getValueAsString("flgAggiornataVersDaPubblicare") != null && Boolean.parseBoolean(hiddenForm.getValueAsString("flgAggiornataVersDaPubblicare"));
		if(flgAggiornataVersDaPubblicare || (flgSoloPreparazioneVersPubblicazione != null && flgSoloPreparazioneVersPubblicazione && getValueAsBoolean("isChangedFilePrimarioOmissis"))) {
			return true;
		}
		for (DynamicForm form : vm.getMembers()) {
			for (FormItem item : form.getFields()) {
				if (item != null && item instanceof IDatiSensibiliItem) {
					if((item instanceof AllegatiItem) || (item instanceof AllegatiGridItem)) {
						// per vedere se ho dati sensibili non considero gli allegati ma solo il file priamrio
						continue;
					} else if(((IDatiSensibiliItem)item).hasDatiSensibili()) {
						if (elencoCampiConGestioneOmissisDaIgnorare == null || !elencoCampiConGestioneOmissisDaIgnorare.contains(item.getName())) {
							return true;
						}
					}
				}
			}
		}
//		if (attributiAddDocTabs != null) {
//			for (String key : attributiAddDocTabs.keySet()) {
//				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null && attributiAddDocDetails.get(key).hasDatiSensibili()) {
//					return true;
//				}
//			}
//		}
		return false;		 		
	}
	
	@Override
	public boolean hasDatiSensibili() {
		if(showFilePdfAttoOmissisItem() && filePdfAttoOmissisItem != null && filePdfAttoOmissisItem.isNotNull()) {
			return true;
		}
		boolean flgAggiornataVersDaPubblicare = hiddenForm.getValueAsString("flgAggiornataVersDaPubblicare") != null && Boolean.parseBoolean(hiddenForm.getValueAsString("flgAggiornataVersDaPubblicare"));
		if(flgAggiornataVersDaPubblicare || (flgSoloPreparazioneVersPubblicazione != null && flgSoloPreparazioneVersPubblicazione && getValueAsBoolean("isChangedFilePrimarioOmissis"))) {
			return true;
		}
		if(super.hasDatiSensibili()) {
			return true;
		}				
//		if (attributiAddDocTabs != null) {
//			for (String key : attributiAddDocTabs.keySet()) {
//				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null && attributiAddDocDetails.get(key).hasDatiSensibili()) {
//					return true;
//				}
//			}
//		}
		return false;		 		
	}
	
	public Object getValue(String fieldName) {
		return vm.getValue(fieldName) != null ? vm.getValue(fieldName) : "";
	}
	
	public String getValueAsString(String fieldName) {
		return vm.getValue(fieldName) != null ? (String) vm.getValue(fieldName) : "";
	}
	
	public Date getValueAsDate(String fieldName) {
		return vm.getValue(fieldName) != null ? (Date) vm.getValue(fieldName) : null;
	}
	
	public boolean getValueAsBoolean(String fieldName) {
		return vm.getValue(fieldName) != null ? (Boolean) vm.getValue(fieldName) : false;
	}
	
	@Override
	public boolean customValidate() {
		
		boolean valid = super.customValidate();
		
		// Faccio la validazione dei CKEditor obbligatori		
		if(luogoOrdMobilitaItem != null) {
			valid = luogoOrdMobilitaItem.validate() && valid;
		}		
		if(descrizioneOrdMobilitaItem != null) {
			valid = descrizioneOrdMobilitaItem.validate() && valid;
		}		
		if(oggettoHtmlItem != null) {
			valid = oggettoHtmlItem.validate() && valid;
		}
		if(attiPresuppostiItem != null) {
			valid = attiPresuppostiItem.validate() && valid;
		}
		if(motivazioniItem != null) {
			valid = motivazioniItem.validate() && valid;
		}
		if(premessaItem != null) {
			valid = premessaItem.validate() && valid;
		}
		if(rifNormativiLiberiItem != null) {
			valid = rifNormativiLiberiItem.validate() && valid;
		}		
		if(dispositivoItem != null) {
			valid = dispositivoItem.validate() && valid;
		}
		if(premessa2Item != null) {
			valid = premessa2Item.validate() && valid;
		}
		if(dispositivo2Item != null) {
			valid = dispositivo2Item.validate() && valid;
		}
		if(motiviImmediatamenteEseguibileItem != null) {
			valid = motiviImmediatamenteEseguibileItem.validate() && valid;
		}
		
		if(listaProponentiItem != null) {
			if(listaProponentiItem instanceof ListaProponentiItem) {
				RecordList listaProponenti = ruoliForm.getValuesAsRecord().getAttributeAsRecordList("listaProponenti");
				if (listaProponenti == null || listaProponenti.getLength() == 0) {
					ruoliForm.setFieldErrors("listaProponenti", "Obbligatorio indicare almeno una struttura proponente");
					valid = false;	
				}					
				valid = ((ListaProponentiItem)listaProponentiItem).validate() && valid;
			}
		}
		
		if(listaAllegatiItem != null) {
			if(listaAllegatiItem instanceof AllegatiGridItem) {
				valid = ((AllegatiGridItem)listaAllegatiItem).validate() && valid;
			}
			if(showTabTrasparenzaAVB()) {
				if(!"".equals(getValueAsString("listaAllegatiObbligatoriTrasparenza"))) {
					StringSplitterClient st = new StringSplitterClient(getValueAsString("listaAllegatiObbligatoriTrasparenza"), "|");
					if(st.getTokens() != null) {
						HashSet<String> setNomiTipiAllegati = new HashSet<String>();
						RecordList listaAllegati = allegatiForm.getValuesAsRecord().getAttributeAsRecordList("listaAllegati");
						if (listaAllegati != null) {
							for(int i = 0; i < listaAllegati.getLength(); i++) {
								if(listaAllegati.get(i).getAttribute("descTipoFileAllegato") != null && !"".equals(listaAllegati.get(i).getAttribute("descTipoFileAllegato"))) {
									setNomiTipiAllegati.add(listaAllegati.get(i).getAttribute("descTipoFileAllegato"));
								}
							}
						}					
						for(int i = 0; i < st.getTokens().length; i++) {
							String nomeTipoAllegatoObblig = st.getTokens()[i];
							if(nomeTipoAllegatoObblig != null && !"".equals(nomeTipoAllegatoObblig) && !setNomiTipiAllegati.contains(nomeTipoAllegatoObblig)) {
								allegatiForm.setFieldErrors("listaAllegati", "Mancano uno o più allegati obbligatori");
								valid = false;	
								break;
							}						
						}			
					}
				}					
			}
		}
		
		if(listaDatiContabiliADSPItem != null) {
			if(listaDatiContabiliADSPItem instanceof ListaDatiContabiliADSPItem) {
				valid = ((ListaDatiContabiliADSPItem)listaDatiContabiliADSPItem).validate() && valid;
			}
		}
		
		if(datiLiquidazioneAVBItem != null) {
			if(datiLiquidazioneAVBItem instanceof ListaDatiLiquidazioneAVBItem) {
				valid = ((ListaDatiLiquidazioneAVBItem)datiLiquidazioneAVBItem).validate() && valid;
			}
		}
		
		if(listaBeneficiariTrasparenzaItem != null) {
			if(listaBeneficiariTrasparenzaItem instanceof ListaBeneficiariTrasparenzaItem) {
				if(isRequiredBeneficiariTrasparenzaItem()) {
					RecordList listaBeneficiariTrasparenza = beneficiariTrasparenzaForm.getValuesAsRecord().getAttributeAsRecordList("listaBeneficiariTrasparenza");
					if (listaBeneficiariTrasparenza == null || listaBeneficiariTrasparenza.getLength() == 0) {
						beneficiariTrasparenzaForm.setFieldErrors("listaBeneficiariTrasparenza", "Obbligatorio indicare almeno un beneficiario");
						valid = false;	
					}							
				}				
				valid = ((ListaBeneficiariTrasparenzaItem)listaBeneficiariTrasparenzaItem).validate() && valid;
			}			
		}
				
		if(showCIGItem() && !showAttributoCustomCablato("CUP") && listaCIGItem != null && listaCIGItem.getEditing()) {
			HashSet<String> setCodiciCIG = new HashSet<String>();
			RecordList listaCIG = CIGForm.getValueAsRecordList("listaCIG");
			if(listaCIG != null) {
				for(int i=0; i < listaCIG.getLength(); i++) {
					if(listaCIG.get(i).getAttribute("codiceCIG") != null &&	!"".equals(listaCIG.get(i).getAttribute("codiceCIG"))) {
						if(setCodiciCIG.contains(listaCIG.get(i).getAttribute("codiceCIG"))) {
							CIGForm.setFieldErrors("listaCIG", "Uno o più CIG risultano uguali");
							valid = false;
							break;
						} else {
							setCodiciCIG.add(listaCIG.get(i).getAttribute("codiceCIG"));
						}
					}
				}				
			}
		}
		
		if(showTabAggregatoSmistamentoACTA()) {
			if(isRequiredAggregatoACTA() && !getValueAsBoolean("flgAggregatoACTA")) {
				flgAggregatoACTAForm.setFieldErrors("flgAggregatoACTA", "Obbligatorio indicare la struttura aggregativa");
				valid = false;	
			} else if(showSmistamentoACTAForms() && !getValueAsBoolean("flgAggregatoACTA") && !getValueAsBoolean("flgSmistamentoACTA")) {
				if(isRequiredDetailSectionAggregatoSmistamentoACTA()) {					
					flgAggregatoACTAForm.setFieldErrors("flgAggregatoACTA", "Obbligatorio indicare la struttura aggregativa o lo smistamento");
					flgSmistamentoACTAForm.setFieldErrors("flgSmistamentoACTA", "Obbligatorio indicare la struttura aggregativa o lo smistamento");
					valid = false;			
				}
			} else if(!showSmistamentoACTAForms() && !getValueAsBoolean("flgAggregatoACTA")) {
				if(isRequiredDetailSectionAggregatoSmistamentoACTA()) {					
					flgAggregatoACTAForm.setFieldErrors("flgAggregatoACTA", "Obbligatorio indicare la struttura aggregativa");					
					valid = false;			
				}
			} else if(getValueAsBoolean("flgAggregatoACTA")) {
				if(!getValueAsBoolean("flgIndiceClassificazioneACTA") && !getValueAsBoolean("flgFascicoloACTA")) {
					aggregatoACTAForm.setFieldErrors("flgIndiceClassificazioneACTA", "Obbligatorio indicare l'indice di classif. esteso o il fascicolo/dossier");
					aggregatoACTAForm.setFieldErrors("flgFascicoloACTA", "Obbligatorio indicare l'indice di classif. esteso o il fascicolo/dossier");
					valid = false;		
				} else if(getValueAsBoolean("flgIndiceClassificazioneACTA")) {
					if(!"".equals(getValueAsString("codIndiceClassificazioneACTA")) && !getValueAsBoolean("flgPresenzaClassificazioneACTA")) {
						aggregatoACTAForm.setFieldErrors("flgIndiceClassificazioneACTA", "Indice di classif. esteso non presente in ACTA");
						valid = false;	
					}
				} else if(getValueAsBoolean("flgFascicoloACTA")) {
					if(!"".equals(getValueAsString("codVoceTitolarioACTA")) && !"".equals(getValueAsString("codFascicoloACTA")) && !"".equals(getValueAsString("suffissoCodFascicoloACTA")) && "".equals(getValueAsString("idFascicoloACTA"))) {
						aggregatoACTAForm.setFieldErrors("flgFascicoloACTA", "Fascicolo/dossier non presente in ACTA");
						valid = false;	
					}
				}
			}	
		}
		
		if (attributiAddDocDetails != null) {
			for (String key : attributiAddDocDetails.keySet()) {
				AttributiDinamiciDetail detail = attributiAddDocDetails.get(key);
				if(!detail.customValidate()) {
					valid = false;
				}
				for (DynamicForm form : detail.getForms()) {
					form.clearErrors(true);
					valid = form.validate() && valid;
					for (FormItem item : form.getFields()) {
						if (item instanceof ReplicableItem) {
							ReplicableItem lReplicableItem = (ReplicableItem) item;
							boolean itemValid = lReplicableItem.validate();
							valid = itemValid && valid;
							if(!itemValid) {
								if(lReplicableItem != null && lReplicableItem.getForm() != null && lReplicableItem.getForm().getDetailSection() != null) {
									lReplicableItem.getForm().getDetailSection().open();
								}
							}
						} else if (item instanceof IDocumentItem) {
							IDocumentItem lIDocumentItem = (IDocumentItem) item;
							boolean itemValid = lIDocumentItem.validate();
							valid = itemValid && valid;
							if(!itemValid) {
								if(lIDocumentItem != null && lIDocumentItem.getForm() != null && lIDocumentItem.getForm().getDetailSection() != null) {
									lIDocumentItem.getForm().getDetailSection().open();
								}
							}
						} else if (item instanceof CKEditorItem) {
							CKEditorItem lCKEditorItem = (CKEditorItem) item;
							boolean itemValid = lCKEditorItem.validate();
							valid = itemValid && valid;
							if(!itemValid) {
								if(lCKEditorItem != null && lCKEditorItem.getForm() != null && lCKEditorItem.getForm().getDetailSection() != null) {
									lCKEditorItem.getForm().getDetailSection().open();
								}
							}
						} else {
							boolean itemValid = item.validate();
							valid = itemValid && valid;
							if(!itemValid) {
								if(item != null && item.getForm() != null && item.getForm().getDetailSection() != null) {
									item.getForm().getDetailSection().open();
								}
							}
						}
					}
				}
			}
		}
		
		return valid;
	}
	
	public void salvaAttributiDinamiciDoc(boolean flgIgnoreObblig, String rowidDoc, String activityNameWF, String esitoActivityWF, final ServiceCallback<Record> callback) {
		if (attributiAddDocTabs != null && attributiAddDocTabs.size() > 0) {
			Record lRecordDoc = new Record();
			lRecordDoc.setAttribute("rowId", rowidDoc);
			lRecordDoc.setAttribute("valori", getAttributiDinamiciDoc());
			lRecordDoc.setAttribute("tipiValori", getTipiAttributiDinamiciDoc());
//			lRecordDoc.setAttribute("colonneListe", getColonneListeAttributiDinamiciDoc());
			lRecordDoc.setAttribute("activityNameWF", activityNameWF);
			lRecordDoc.setAttribute("esitoActivityWF", esitoActivityWF);
			GWTRestService<Record, Record> lGWTRestService = new GWTRestService<Record, Record>("AttributiDinamiciDocDatasource");
			if (flgIgnoreObblig) {
				lGWTRestService.addParam("flgIgnoreObblig", "1");
			}
			lGWTRestService.call(lRecordDoc, new ServiceCallback<Record>() {

				@Override
				public void execute(Record object) {
					if (callback != null) {
						callback.execute(object);
					}
				}
			});
		} else {
			if (callback != null) {
				callback.execute(new Record());
			}
		}
	}
	
	public void salvaAttributiDinamiciDocAfterSalva(boolean flgIgnoreObblig, String rowidDoc, String activityNameWF, String esitoActivityWF, final ServiceCallback<Record> callback) {		
		if (!AurigaLayout.getParametroDBAsBoolean("SET_ATTR_DINAMICI_DOC_AFTER_SAVE_ATTI")) {
			salvaAttributiDinamiciDoc(flgIgnoreObblig, rowidDoc, activityNameWF, esitoActivityWF, callback);
		} else {
			if (callback != null) {
				callback.execute(new Record());
			}			
		}
	}
	
	public void manageAttributiAddSenzaCategoria(RecordList attributiAddSenzaCategoria, Map mappaDettAttrLista, Map mappaValoriAttrLista, Map mappaVariazioniAttrLista) {
		
	}
	
	public void caricaAttributiDinamiciDoc(String nomeFlussoWF, String processNameWF, String activityName, String idTipoDoc, String rowidDoc) {
		
		final String start = DateTimeFormat.getFormat("HH:mm:ss").format(new Date());
		
		final boolean isReload = (attributiAddDocDetails != null && attributiAddDocDetails.size() > 0);
		attributiAddDocLayouts = new HashMap<String, VLayout>();
		attributiAddDocDetails = new HashMap<String, AttributiDinamiciDetail>();
		if (attributiAddDocTabs != null && attributiAddDocTabs.size() > 0) {
			GWTRestService<Record, Record> lGwtRestService = new GWTRestService<Record, Record>("AttributiDinamiciDatasource");
			lGwtRestService.addParam("nomeFlussoWF", nomeFlussoWF);
			lGwtRestService.addParam("processNameWF", processNameWF);
			lGwtRestService.addParam("activityNameWF", activityName);
			Record lAttributiDinamiciRecord = new Record();
			lAttributiDinamiciRecord.setAttribute("nomeTabella", "DMT_DOCUMENTS");
			lAttributiDinamiciRecord.setAttribute("rowId", rowidDoc);
			lAttributiDinamiciRecord.setAttribute("tipoEntita", idTipoDoc);
			lAttributiDinamiciRecord.setAttribute("listaCategorie", Arrays.asList(attributiAddDocTabs.keySet().toArray(new String[attributiAddDocTabs.size()])));
			lGwtRestService.call(lAttributiDinamiciRecord, new ServiceCallback<Record>() {

				@Override
				public void execute(Record object) {
					ricaricaTabSet();
					RecordList attributiAdd = object.getAttributeAsRecordList("attributiAdd");
					if (attributiAdd != null && !attributiAdd.isEmpty()) {						
						RecordList attributiAddSenzaCategoria = new RecordList();												
						HashMap<String, RecordList> mappaAttributiAddCategoria = new HashMap<String, RecordList>();						
						for (int i = 0; i < attributiAdd.getLength(); i++) {
							Record attr = attributiAdd.get(i);
							if (attr.getAttribute("categoria") != null && !"".equals(attr.getAttribute("categoria"))) {
								if(!mappaAttributiAddCategoria.containsKey(attr.getAttribute("categoria"))) {
									mappaAttributiAddCategoria.put(attr.getAttribute("categoria"), new RecordList());
								} 
								mappaAttributiAddCategoria.get(attr.getAttribute("categoria")).add(attr);
							} else {
								attributiAddSenzaCategoria.add(attr);
							}
						}						
						manageAttributiAddSenzaCategoria(attributiAddSenzaCategoria, object.getAttributeAsMap("mappaDettAttrLista"), object.getAttributeAsMap("mappaValoriAttrLista"), object.getAttributeAsMap("mappaVariazioniAttrLista"));						
						for (final String key : attributiAddDocTabs.keySet()) {							
							RecordList attributiAddCategoria = mappaAttributiAddCategoria.get(key) != null ? mappaAttributiAddCategoria.get(key) : new RecordList();							
							if (!attributiAddCategoria.isEmpty()) {
								if(key.equals("#HIDDEN")) {
									// Gli attributi che fanno parte di questo gruppo non li considero
								} else if (key.startsWith("HEADER_")) {
									AttributiDinamiciDetail detail = new AttributiDinamiciDetail("attributiDinamici", attributiAddCategoria, object
											.getAttributeAsMap("mappaDettAttrLista"), object.getAttributeAsMap("mappaValoriAttrLista"), object
											.getAttributeAsMap("mappaVariazioniAttrLista"), object.getAttributeAsMap("mappaDocumenti"), null, tabSet, "HEADER");
									detail.setCanEdit(new Boolean(isEseguibile()));
									attributiAddDocDetails.put(key, detail);
									VLayout layoutFirstTab = (VLayout) tabSet.getTab(0).getPane();
									VLayout layout = (VLayout) layoutFirstTab.getMembers()[0];
									attributiAddDocLayouts.put(key, layout);
									int pos = 0;
									for (Canvas member : layout.getMembers()) {
										if (member instanceof HeaderDetailSection) {
											pos++;
										} else {
											break;
										}
									}
									for (DetailSection detailSection : attributiAddDocDetails.get(key).getDetailSections()) {
										if (isReload) {																
											DetailSection detailSectionToReload = ((DetailSection) layout.getMember(pos++));
											detailSectionToReload.setForms(detailSection.getForms());
										} else {			
											layout.addMember(detailSection, pos++);
										}
									}
								} else {								
									AttributiDinamiciDetail detail = new AttributiDinamiciDetail("attributiDinamici", attributiAddCategoria, object
											.getAttributeAsMap("mappaDettAttrLista"), object.getAttributeAsMap("mappaValoriAttrLista"), object
											.getAttributeAsMap("mappaVariazioniAttrLista"), object.getAttributeAsMap("mappaDocumenti"), null, tabSet, key);
									detail.setCanEdit(new Boolean(isEseguibile()));
									String messaggioTab = getMessaggioTab(key);
									if (messaggioTab != null && !"".equals(messaggioTab)) {
										Label labelMessaggioTab = new Label(messaggioTab);
										labelMessaggioTab.setAlign(Alignment.LEFT);
										labelMessaggioTab.setWidth100();
										labelMessaggioTab.setHeight(2);
										labelMessaggioTab.setPadding(5);
										detail.addMember(labelMessaggioTab, 0);
									}
									attributiAddDocDetails.put(key, detail);
									VLayout layout = new VLayout();
									layout.setHeight100();
									layout.setWidth100();
									layout.setMembers(detail);
									attributiAddDocLayouts.put(key, layout);
									VLayout layoutTab = new VLayout();
									layoutTab.addMember(layout);									
									if (tabSet.getTabWithID(key) != null) {
										tabSet.getTabWithID(key).setPane(layoutTab);
									} else {
										Tab tab = new Tab("<b>" + attributiAddDocTabs.get(key) + "</b>");
										tab.setAttribute("tabID", key);
										tab.setPrompt(attributiAddDocTabs.get(key));
										tab.setPane(layoutTab);
										tabSet.addTab(tab);
									}									
								}
							}
						}						
					}
					afterCaricaAttributiDinamiciDoc();
					
					GWT.log("caricaAttributiDinamiciDoc() started at " + start + " ended at " + DateTimeFormat.getFormat("HH:mm:ss").format(new Date()));							
				}
			});
		} else {
			ricaricaTabSet();
			afterCaricaAttributiDinamiciDoc();
			
			GWT.log("caricaAttributiDinamiciDoc() started at " + start + " ended at " + DateTimeFormat.getFormat("HH:mm:ss").format(new Date()));									
		}
	}
	
	protected void ricaricaTabSet() {
		List<Tab> listaTab = new ArrayList<Tab>();
		if (showTabDatiScheda()){
			listaTab.add(tabDatiScheda);	
		}		
		if(showTabDatiDispositivo()) {			
			listaTab.add(tabDatiDispositivo);
		}		
		if(showTabDatiDispositivo2()) {			
			listaTab.add(tabDatiDispositivo2);
		}
		// il tab "Trasparenza" di AVB deve comparire prima del tab "Allegati"
		if(showTabTrasparenzaAVB()) {
			listaTab.add(tabTrasparenzaAVB);
		}
		if(showTabAllegati()) {
			listaTab.add(tabAllegati);
		}
		if(showTabDocFasc()) {
			listaTab.add(tabDocFasc);
		}
		if(showTabPubblicazioneNotifiche()) {
			listaTab.add(tabPubblicazioneNotifiche);
		}
		if(showTabMovimentiContabili()) {
			listaTab.add(tabMovimentiContabili);
		}
		if(showTabDatiGSA()) {
			listaTab.add(tabDatiGSA);
		}
		if(showTabDatiSpesaCorrente()) {
			listaTab.add(tabDatiSpesaCorrente);
		}
		if(showTabDatiSpesaContoCapitale()) {
			listaTab.add(tabDatiSpesaContoCapitale);
		}
		if(showTabAggregatoSmistamentoACTA()) {
			listaTab.add(tabAggregatoSmistamentoACTA); //TODO spostare in fondo dopo tab dinamici
		}	
		if(showTabOpereADSP()) {
			listaTab.add(tabOpereADSP);
		}
		if(showTabDatiContabiliATERSIR()) {
			listaTab.add(tabDatiContabiliATERSIR);
		}
		if(showTabDatiContabiliADSP()) {
			listaTab.add(tabDatiContabiliADSP);
		}
		if(showTabDatiContabiliAVB()) {
			listaTab.add(tabDatiContabiliAVB);
		}
		if(showTabDatiLiquidazioneAVB()) {
			listaTab.add(tabDatiLiquidazioneAVB);
		}
		tabSet.setTabs(listaTab.toArray(new Tab[listaTab.size()]));	
		
		showHideTabs();
	}
		
	/**
	 * Metodo che viene richiamato alla fine del caricamento degli attributi
	 * dinamici del documento
	 * 
	 */
	protected void afterCaricaAttributiDinamiciDoc() {		
		if (attributiDinamiciDocDaCopiare != null) {
			setAttributiDinamiciDoc(attributiDinamiciDocDaCopiare);
			attributiDinamiciDocDaCopiare = null;
		}
		redrawCKEditorItems();
		enableDisableTabs();
		showHideSections();
		openSections();		
	}
	
	/**
	 * Metodo per settare i valori degli attributi dinamici associati al
	 * documento dopo l'azione del bottone "Nuova protocollazione come copia"
	 * 
	 */
	protected void setAttributiDinamiciDocDaCopiare(Map<String, Object> attributiDinamiciDocDaCopiare) {
		this.attributiDinamiciDocDaCopiare = attributiDinamiciDocDaCopiare;
		if (attributiDinamiciDocDaCopiare != null) {
			setAttributiDinamiciDoc(attributiDinamiciDocDaCopiare);
		}
	}

	/**
	 * Metodo per settare i valori degli attributi dinamici associati al
	 * documento
	 * 
	 */
	protected void setAttributiDinamiciDoc(Map<String, Object> valori) {
		if (attributiAddDocTabs != null) {
			for (String key : attributiAddDocTabs.keySet()) {
				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null) {
					attributiAddDocDetails.get(key).editNewRecord(valori);
				}
			}
		}
	}

	/**
	 * Metodo per il recupero da maschera dei valori degli attributi dinamici 
	 * associati al documento, nella modalità per il caricamento dei dati a maschera:
	 * gli attributi LISTA hanno i valori interni mappati con i NOMI delle colonne 
	 * 
	 */
	public Map<String, Object> getAttributiDinamiciDocForLoad() {
		Map<String, Object> attributiDinamiciDoc = null;
		if (attributiAddDocTabs != null) {
			for (String key : attributiAddDocTabs.keySet()) {
				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null) {
					if (attributiDinamiciDoc == null) {
						attributiDinamiciDoc = new HashMap<String, Object>();
					}
					// ATTENZIONE: se provo a prendere i valori direttamente dal vm, 
					// i valori degli attributi lista non li prende correttamente
					// final Record detailRecord = new Record(attributiAddDocDetails.get(key).getValuesManager().getValues());
					final Record detailRecord = attributiAddDocDetails.get(key).getRecordToSave();
					attributiDinamiciDoc.putAll(detailRecord.toMap());
				}
			}
		}
		return attributiDinamiciDoc;
	}
	
	/**
	 * Metodo per il recupero da maschera dei valori degli attributi dinamici
	 * associati al documento, nella modalità per il salvataggio dei dati da maschera:
	 * gli attributi LISTA hanno i valori interni mappati con i NUMERI delle colonne
	 * 
	 */
	public Map<String, Object> getAttributiDinamiciDoc() {
		Map<String, Object> attributiDinamiciDoc = null;
		if (attributiAddDocTabs != null) {
			for (String key : attributiAddDocTabs.keySet()) {
				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null) {
					if (attributiDinamiciDoc == null) {
						attributiDinamiciDoc = new HashMap<String, Object>();
					}
					// ATTENZIONE: se provo a prendere i valori direttamente dal vm, 
					// i valori degli attributi lista non li prende correttamente
					// final Record detailRecord = new Record(attributiAddDocDetails.get(key).getValuesManager().getValues());
					final Record detailRecord = attributiAddDocDetails.get(key).getRecordToSave();
					attributiDinamiciDoc.putAll(attributiAddDocDetails.get(key).getMappaValori(detailRecord));
				}
			}
		}
		return attributiDinamiciDoc;
	}

	/**
	 * Metodo per il recupero da maschera dei tipi degli attributi dinamici
	 * associati al documento
	 * 
	 */
	public Map<String, String> getTipiAttributiDinamiciDoc() {
		Map<String, String> tipiAttributiDinamiciDoc = null;
		if (attributiAddDocTabs != null) {
			for (String key : attributiAddDocTabs.keySet()) {
				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null) {
					if (tipiAttributiDinamiciDoc == null) {
						tipiAttributiDinamiciDoc = new HashMap<String, String>();
					}
					// ATTENZIONE: se provo a prendere i valori direttamente dal
					// vm, i valori degli attributi lista non li prende
					// correttamente
					// final Record detailRecord = new
					// Record(attributiAddDocDetails.get(key).getValuesManager().getValues());
					final Record detailRecord = attributiAddDocDetails.get(key).getRecordToSave();
					tipiAttributiDinamiciDoc.putAll(attributiAddDocDetails.get(key).getMappaTipiValori(detailRecord));
				}
			}
		}
		return tipiAttributiDinamiciDoc;
	}
	
	/**
	 * Metodo per il recupero da maschera delle mappe delle colonne degli attributi dinamici
	 * di tipo LISTA associati al documento
	 * 
	 */
	public Map<String, String> getColonneListeAttributiDinamiciDoc() {
		Map<String, String> mappaColonneListaAttributiDinamiciDoc = null;
		if (attributiAddDocTabs != null) {
			for (String key : attributiAddDocTabs.keySet()) {
				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null) {
					if (mappaColonneListaAttributiDinamiciDoc == null) {
						mappaColonneListaAttributiDinamiciDoc = new HashMap<String, String>();
					}
					// ATTENZIONE: se provo a prendere i valori direttamente dal
					// vm, i valori degli attributi lista non li prende
					// correttamente
					// final Record detailRecord = new
					// Record(attributiAddDocDetails.get(key).getValuesManager().getValues());
					final Record detailRecord = attributiAddDocDetails.get(key).getRecordToSave();
					mappaColonneListaAttributiDinamiciDoc.putAll(attributiAddDocDetails.get(key).getMappaColonneListe(detailRecord));
				}
			}
		}
		return mappaColonneListaAttributiDinamiciDoc;
	}
	
	public boolean isForzaModificaAttoDaSbloccare() {
		return showAttributoCustomCablato("FORZA_MODIFICA_ATTO") && !getValueAsBoolean("flgForzataModificaAtto");
	}	
	
	// Se il task è read-only e nell'xml dei parametri è presente l'attributo #ALLEGATI_NON_PARTE_INTEGRANTE con colonna 10 vuota o 0 NON si possono inserire o modificare allegati non parte integrante, se invece è 1 sì. 
	// Se la variabile NON è presente e il task è read-only come ora gli allegati NON parte integrante si possono aggiungere (per retro-compatibilita).
	// La variabile viene letta anche se il task non è read-only quando ho #SoloOmissisModProprietaFile è true
	public boolean isAllegatiNonParteIntegranteNonEditabiliInTask() {
		return isPresenteAttributoCustomCablato("#ALLEGATI_NON_PARTE_INTEGRANTE") && !getFlgEditabileAttributoCustomCablato("#ALLEGATI_NON_PARTE_INTEGRANTE");					
	}	
	
	// Recupero la posizione dell'allegato di quel tipo
	public int getPosAllegatoFromTipo(String idTipoModello, RecordList listaAllegati) {
		if (listaAllegati != null) {
			for (int i = 0; i < listaAllegati.getLength(); i++) {
				Record allegato = listaAllegati.get(i);
				if (allegato.getAttribute("listaTipiFileAllegato") != null && allegato.getAttribute("listaTipiFileAllegato").equalsIgnoreCase(idTipoModello)) {
					return i;
				}
			}
		}
		return -1;
	}
	
	public int getPosAllegatoFromTipoSenzaIdDocConFileGenDaModelloDaFirmareNonFirmato(String idTipoModello, RecordList listaAllegati) {
		if (listaAllegati != null) {
			for (int i = 0; i < listaAllegati.getLength(); i++) {
				Record allegato = listaAllegati.get(i);
				if (allegato.getAttribute("listaTipiFileAllegato") != null && allegato.getAttribute("listaTipiFileAllegato").equalsIgnoreCase(idTipoModello)) {
					String idDocAllegato = allegato.getAttribute("idDocAllegato") != null ? allegato.getAttribute("idDocAllegato") : null;
					InfoFileRecord infoFile = allegato.getAttributeAsRecord("infoFile") != null ? new InfoFileRecord(allegato.getAttributeAsRecord("infoFile")) : null;					
					boolean flgGenDaModelloDaFirmare = allegato.getAttributeAsBoolean("flgGenDaModelloDaFirmare") != null && allegato.getAttributeAsBoolean("flgGenDaModelloDaFirmare");
					boolean flgGenDaModelloFirmato = infoFile != null && infoFile.isFirmato();
					if ((idDocAllegato == null || "".equals(idDocAllegato)) && flgGenDaModelloDaFirmare && !flgGenDaModelloFirmato) {
						return i;
					}
				}
			}
		}
		return -1;
	}
	
	@Override
	public void setCanEdit(boolean canEdit) {
		
		super.setCanEdit(canEdit);
		
		// i campi della sezione "Registrazione" devono essere sempre read-only
		setCanEdit(false, registrazioneForm); 
		setCanEdit(false, invioACTAForm);
		setCanEdit(false, attoLiquidazioneForm);
				
		if(siglaRegistrazioneItem != null) {
			siglaRegistrazioneItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			siglaRegistrazioneItem.setTabIndex(-1);
		}
		
		if(numeroRegistrazioneItem != null) {
			numeroRegistrazioneItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			numeroRegistrazioneItem.setTabIndex(-1);
		}
		
		if(dataRegistrazioneItem != null) {
			dataRegistrazioneItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			dataRegistrazioneItem.setTabIndex(-1);
		}
		
		if(desUserRegistrazioneItem != null) {
			desUserRegistrazioneItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			desUserRegistrazioneItem.setTabIndex(-1);
		}
		
		if(desUORegistrazioneItem != null) {
			desUORegistrazioneItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			desUORegistrazioneItem.setTabIndex(-1);
		}
		
		if(estremiRepertorioPerStrutturaItem != null) {
			estremiRepertorioPerStrutturaItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			estremiRepertorioPerStrutturaItem.setTabIndex(-1);
		}
		
		if(estremiAttoLiquidazioneItem != null) {
			estremiAttoLiquidazioneItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			estremiAttoLiquidazioneItem.setTabIndex(-1);
		}
		
		if(siglaRegProvvisoriaItem != null) {
			siglaRegProvvisoriaItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			siglaRegProvvisoriaItem.setTabIndex(-1);
		}
		
		if(numeroRegProvvisoriaItem != null) {
			numeroRegProvvisoriaItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			numeroRegProvvisoriaItem.setTabIndex(-1);
		}
		
		if(dataRegProvvisoriaItem != null) {
			dataRegProvvisoriaItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			dataRegProvvisoriaItem.setTabIndex(-1);
		}
		
		if(desUserRegProvvisoriaItem != null) {
			desUserRegProvvisoriaItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			desUserRegProvvisoriaItem.setTabIndex(-1);
		}
		
		if(desUORegProvvisoriaItem != null) {
			desUORegProvvisoriaItem.setTextBoxStyle(it.eng.utility.Styles.textItemBold);
			desUORegProvvisoriaItem.setTabIndex(-1);
		}

		if (getUfficioProponenteValueMap().size() == 1) {
			if (ufficioProponenteItem != null) {
				ufficioProponenteItem.setCanEdit(false);
				ufficioProponenteItem.setTabIndex(-1);
			}
		}

		boolean isReadOnly = this instanceof TaskNuovaPropostaAtto2CompletaDetail && ((TaskNuovaPropostaAtto2CompletaDetail)this).isReadOnly();
		
		if(isAvvioEmendamentoFromAttoRif()) {
			tipoAttoEmendamentoItem.setCanEdit(false);
			siglaAttoEmendamentoItem.setCanEdit(false);
			numeroAttoEmendamentoItem.setCanEdit(false);
			annoAttoEmendamentoItem.setCanEdit(false);	
			idEmendamentoItem.setCanEdit(false);
			numeroEmendamentoItem.setCanEdit(false);
		} else {
			tipoAttoEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_TIPO_ATTO") ? canEdit : false);
			siglaAttoEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_ATTO_SIGLA_REG") ? canEdit : false);
			numeroAttoEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_ATTO_NRO") ? canEdit : false);
			annoAttoEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_ATTO_ANNO") ? canEdit : false);		 
			idEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_ID") ? canEdit : false);
			numeroEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SUB_SU_EM_NRO") ? canEdit : false);
		}
		flgEmendamentoSuFileItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_FILE") ? canEdit : false);
		numeroAllegatoEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_ALLEGATO_NRO") ? canEdit : false);
		flgEmendamentoIntegraleAllegatoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_INTEGRALE_ALLEGATO") ? canEdit : false);	
		numeroPaginaEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_PAGINA") ? canEdit : false);	
		numeroRigaEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_SU_RIGA") ? canEdit : false);				
		effettoEmendamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("EMENDAMENTO_EFFETTO") ? canEdit : false);				
		flgAttivaDestinatariItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTIVA_SEZIONE_DESTINATARI") ? canEdit : false);	 
		setCanEditReplicableItemAttributoCustomCablato(listaDestinatariAttoItem, "DESTINATARI_ATTO", canEdit); 
		setCanEditReplicableItemAttributoCustomCablato(listaDestinatariPCAttoItem, "DESTINATARI_PC_ATTO", canEdit); 
		iniziativaPropostaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_INIZIATIVA_PROP_ATTO") ? canEdit : false);
		flgAttoMeroIndirizzoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_ATTO_MERO_INDIRIZZO") ? canEdit : false);
		flgAttoCommissarioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_ATTO_COMMISSARIO") ? canEdit : false);
		flgModificaRegolamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_MODIFICA_REGOLAMENTO") ? canEdit : false);		
		flgModificaStatutoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_MODIFICA_STATUTO") ? canEdit : false);
		flgNominaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DEL_NOMINA") ? canEdit : false);
		flgRatificaDeliberaUrgenzaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RATIFICA_DEL_URGENZA") ? canEdit : false);		
		flgAttoUrgenteItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_ATTO_URGENTE") ? canEdit : false);
		flgCommissioniTipoPropostaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaCircoscrizioniItem, "CIRCOSCRIZIONE_PROPONENTE", canEdit);
		tipoInterpellanzaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_TIPO_INTERPELLANZA") ? canEdit : false);
		motivazioneInterpellanzaRispScrittaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("MOTIVAZIONE_INT_RISP_SCRITTA") ? canEdit : false);
		tipoOrdMobilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_TIPO_ORD_MOBILITA") ? canEdit : false);
		dataInizioVldOrdinanzaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("INIZIO_VLD_ORDINANZA") ? canEdit : false);
		dataFineVldOrdinanzaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FINE_VLD_ORDINANZA") ? canEdit : false);
		tipoLuogoOrdMobilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TIPO_LUOGO_ORD_MOBILITA") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaIndirizziOrdMobilitaItem, "ALTRE_UBICAZIONI", canEdit);
		luogoOrdMobilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("LUOGO_ORD_MOBILITA") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaCircoscrizioniOrdMobilitaItem, "CIRCOSCRIZIONE_ORD_MOBILITA", canEdit);
		descrizioneOrdMobilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DESCRIZIONE_ORD_MOBILITA") ? canEdit : false);
		if(showProponentiItem()) {
			if(listaProponentiItem instanceof ProponentiItem) {
				setCanEditReplicableItemAttributoCustomCablato(((ProponentiItem) listaProponentiItem), "PROPONENTI", canEdit);	
			} else {
				listaProponentiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PROPONENTI") ? canEdit : false);
			}			
		}
		tipoProvvedimentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_TIPO_PROVVEDIMENTO") ? canEdit : false);
		sottotipoDeliberaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_DELIBERA") ? canEdit : false);
//		ufficioGareAcquistiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ID_UO_GARE_ACQUISTI") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaUfficioGareAcquistiItem, "ID_UO_GARE_ACQUISTI", canEdit);
		flgProcExCodAppaltiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_PROC_EX_COD_APPALTI") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaUfficioCompetenteItem, "ID_UO_COMPETENTE", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaRUPCodAppaltiItem, "ID_SV_RUP", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAdottanteItem, "ID_SV_ADOTTANTE", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaRdPCodAppaltiItem, "ID_SV_RESP_PROC", canEdit);
		codProcedimentoRdPUgualeAdottanteItem.setCanEdit(getFlgEditabileAttributoCustomCablato("COD_PROCEDIMENTO") ? canEdit : false);
		centroDiCostoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("CDC_ATTO") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaDirigentiConcertoItem, "ID_SV_RESP_DI_CONCERTO", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaDirRespRegTecnicaItem, "ID_SV_DIR_RESP_REG_TECNICA", canEdit);		
		setCanEditReplicableItemAttributoCustomCablato(listaAltriDirRespRegTecnicaItem, "ID_SV_ALTRI_DIR_REG_TECNICA", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaRdPItem, "ID_SV_RESP_PROC", canEdit);
		codProcedimentoRdPItem.setCanEdit(getFlgEditabileAttributoCustomCablato("COD_PROCEDIMENTO") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaRUPItem, "ID_SV_RUP", canEdit);		
		setCanEditReplicableItemAttributoCustomCablato(listaScrivaniaDECItem, "ID_SV_DEC", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAssessoriItem, "ID_ASSESSORE_PROPONENTE", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAltriAssessoriItem, "ID_ALTRI_ASSESSORI", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaUfficiCompetentiRagItem, "UFF_COMPETENTE_RAG", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaProponenteAttoConsiglioItem, "ID_PROPONENTE_ATTO_CONSIGLIO", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaConsiglieriItem, "ID_CONSIGLIERE_PROPONENTE", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAltriConsiglieriItem, "ID_ALTRI_CONSIGLIERI", canEdit);
		dataTermFirmeConsiglieriItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DT_TERM_FIRME_CONSIGLIERI_COPROP") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaDirigentiProponentiItem, "ID_SV_DIR_PROPONENTE", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAltriDirigentiProponentiItem, "ID_SV_ALTRI_DIR_PROPONENTI", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaCoordinatoriCompCircItem, "ID_COORDINATORE_COMP_CIRC", canEdit);		
		flgRichiediVistoDirettoreItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaRespVistiConformitaItem, "ID_SV_RESP_VISTI_CONFORMITA", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaRespUfficioPropItem, "ID_SV_RESP_UO_PROP", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaRespVistiPerfezionamentoItem, "ID_SV_RESP_VISTI_PERFEZIONAMENTO", canEdit);
		flgVistoBilancioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_BILANCIO") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaRespVisAltBilancioItem, "ID_SV_RESP_VISTO_ALTERNATIVO_BILANCIO", canEdit);
		tipoVistoBilancioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TIPO_VISTO_BILANCIO") ? canEdit : false);
		flgVistoSGItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_SG") ? canEdit : false);
		flgVistoPresidenteItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_PRESIDENTE") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaEstensoriItem, "ID_SV_ESTENSORE_MAIN", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAltriEstensoriItem, "ID_SV_ALTRI_ESTENSORI", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaIstruttoriItem, "ID_SV_ISTRUTTORE_MAIN", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaAltriIstruttoriItem, "ID_SV_ALTRI_ISTRUTTORI", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaUtenteRifAttoConsiglioItem, "ID_USER_RIF_ATTO_CONSIGLIO", canEdit);
		flgSenzaValidazionePOItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_NO_VALIDAZIONE_PO") ? canEdit : false);
		flgVistoRespUffItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF") ? canEdit : false);
		flgVistoDirSup1Item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1") ? canEdit : false);
		flgVistoDirSup2Item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2") ? canEdit : false);
		idScrivaniaVistoRespUffItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_RESP_UFF") ? canEdit : false);
		idScrivaniaVistoDirSup1Item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_1") ? canEdit : false);
		idScrivaniaVistoDirSup2Item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_DIR_SUP_2") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaParereCircoscrizioniItem, "COD_CIRCOSCRIZIONE_X_PARERE", canEdit);
		flgCommissioniItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_X_COMMISSIONI") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaParereCommissioniItem, "COD_COMMISSIONE_X_PARERE", canEdit);
		desOggItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DES_OGG") ? canEdit : false);
		if(!isReadOnly) {
			oggettoHtmlItem.setCanEdit((!isPresenteAttributoCustomCablato("OGGETTO_HTML") || getFlgEditabileAttributoCustomCablato("OGGETTO_HTML")) ? canEdit : false);
		}
		setCanEditReplicableItemAttributoCustomCablato(listaAttiRiferimentoItem, "ATTO_RIFERIMENTO", canEdit);
//		flgAttoRifASistemaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTO_RIF_A_SISTEMA") ? canEdit : false);
//		categoriaRegAttoDeterminaAContrarreItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTO_RIFERIMENTO") ? canEdit : false);
//		siglaAttoDeterminaAContrarreItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTO_RIFERIMENTO") ? canEdit : false);
//		numeroAttoDeterminaAContrarreItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTO_RIFERIMENTO") ? canEdit : false);
//		annoAttoDeterminaAContrarreItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTO_RIFERIMENTO") ? canEdit : false);	
//		lookupArchivioAttoDeterminaAContrarreButton.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTO_RIFERIMENTO") ? canEdit : false);	
		oggLiquidazioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_OGG_LIQUIDAZIONE") ? canEdit : false);  
		dataScadenzaLiquidazioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("SCADENZA_LIQUIDAZIONE") ? canEdit : false);  
		urgenzaLiquidazioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("URGENZA_LIQUIDAZIONE") ? canEdit : false);  
		flgLiqXUffCassaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_LIQ_X_UFF_CASSA") ? canEdit : false);  
		importoAnticipoCassaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("IMPORTO_ANTICIPO_CASSA") ? canEdit : false);  
		dataDecorrenzaContrattoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DECORRENZA_CONTRATTO") ? canEdit : false);  
		anniDurataContrattoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ANNI_DURATA_CONTRATTO") ? canEdit : false);  
		flgAffidamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_AFFIDAMENTO") ? canEdit : false);	
		flgDeterminaAContrarreTramiteProceduraGaraItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CONTR_CON_GARA") ? canEdit : false);
		flgDeterminaAggiudicaProceduraGaraItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_AGGIUDICA_GARA") ? canEdit : false);
		flgDeterminaRimodulazioneSpesaGaraAggiudicataItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_RIMOD_SPESA_GARA_AGGIUD") ? canEdit : false);
		flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_PERSONALE") ? canEdit : false);
		flgDeterminaRiaccertamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_RIACCERT") ? canEdit : false);		
		flgDeterminaAccertRadiazItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_ACCERT_RADIAZ") ? canEdit : false); 
		flgDeterminaVariazBilItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_VARIAZ_BIL") ? canEdit : false);
		flgVantaggiEconomiciItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_VANTAGGI_ECONOMICI") ? canEdit : false);	
		flgDecretoReggioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DECRETO_REGGIO") ? canEdit : false);
		flgAvvocaturaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_AVVOCATURA") ? canEdit : false);
		flgDeterminaArchiviazioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_ARCHIVIAZIONE") ? canEdit : false);
		flgContributiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_CONTRIBUTI") ? canEdit : false);	
		flgSpesaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA") ? canEdit : false);
		flgDatiRilevantiGSAItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RIL_GSA") ? canEdit : false);
		annoContabileCompetenzaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ANNO_CONTABILE_COMPETENZA") ? canEdit : false);		
		flgCorteContiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_CORTE_CONTI") ? canEdit : false);
		flgLiqContestualeImpegnoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_LIQ_CONTESTUALE_IMPEGNO") ? canEdit : false);
		flgLiqContestualeAltriAspettiRilContItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_LIQ_CONTESTUALE_ALTRI_ASPETTI_RIL_CONT") ? canEdit : false);	
		flgDetConLiquidazioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_DET_CON_LIQ") ? canEdit : false);
		flgCompQuadroFinRagDecItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_COMP_QUADRO_FIN_RAG_DEC") ? canEdit : false);		
		flgNuoviImpAccItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_NUOVI_IMP_ACC") ? canEdit : false);	
		flgImpSuAnnoCorrenteItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_IMPEGNI_SU_ANNO_CORRENTE") ? canEdit : false);	
		flgInsMovARagioneriaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_INS_MOV_A_RAGIONERIA") ? canEdit : false);	
		flgPresaVisioneContabilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RICH_PRESA_VIS_CONTABILITA") ? canEdit : false);			
		tipoAttoInDeliberaPEGItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_TIPO_ATTO_IN_DEL_PEG") ? canEdit : false);
		tipoAffidamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TIPO_AFFIDAMENTO") ? canEdit : false);
		normRifAffidamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NORM_RIF_AFFIDAMENTO") ? canEdit : false);
		respAffidamentoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("RESP_AFFIDAMENTO") ? canEdit : false);
		materiaTipoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("MATERIA_NATURA_ATTO") ? canEdit : false);
		tipoFinanziamentoPNRRItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TIPO_FINANZIAMENTO_PNRR") ? canEdit : false);
		flgSottotipoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_SOTTOTIPO_ATTO_RADIO") ? canEdit : false);
		flgTipoIterItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_TIPO_ITER") ? canEdit : false);
		flgFondiEuropeiPONItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FONDI_EUROPEI_PON") ? canEdit : false);
		flgFondiPNRRRadioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RADIO") ? canEdit : false);
		flgFondiPNRRItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR") ? canEdit : false);
		flgFondiPNRRRigenItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FONDI_PNRR_RIGEN") ? canEdit : false);
		flgFondiPRUItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FONDI_PRU") ? canEdit : false);
		flgVistoUtenzeItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_VISTO_UTENZE") ? canEdit : false);
		flgVistoCapitolatiSottoSogliaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOTTO_SOGLIA") ? canEdit : false);
		flgVistoCapitolatiSopraSogliaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_CAPITOLATI_SOPRA_SOGLIA") ? canEdit : false);
		flgVistoPar117_2013Item.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISTO_PAR_117_2013") ? canEdit : false);
		flgNotificaDaMessiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_NOTIFICA_DA_MESSI") ? canEdit : false);
		flgSenzaImpegniContItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_SENZA_IMPEGNI_CONT") ? canEdit : false);
		flgMEPACONSIPItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_MEPA_CONSIP") ? canEdit : false);
		flgServeDUVRIItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_SERVE_DUVRI") ? canEdit : false);
		imponibileComplessivoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_IMPONIBILE_TOT") ? canEdit : false);
		importoOneriSicurezzaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_IMPORTO_ONERI_SICUREZZA") ? canEdit : false);
		flgLLPPItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_LLPP") ? canEdit : false);
		annoProgettoLLPPItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ANNO_PROGETTO_LLPP") ? canEdit : false);
		numProgettoLLPPItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_PROGETTO_LLPP") ? canEdit : false);		
		flgBeniServiziItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_BENI_SERVIZI") ? canEdit : false);
		annoProgettoBeniServiziItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ANNO_PROGETTO_BENI_SERVIZI") ? canEdit : false);
		numProgettoBeniServiziItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_PROGETTO_BENI_SERVIZI") ? canEdit : false);	
		flgProgrammazioneAcquistiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_PROGRAMMAZIONE_ACQUISTI") ? canEdit : false);
		flgPrivacyItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_ATTO_CON_DATI_RISERVATI") ? canEdit : false);		
		flgDatiProtettiTipo1Item.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_1") ? canEdit : false);	
		flgDatiProtettiTipo2Item.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_2") ? canEdit : false);	
		flgDatiProtettiTipo3Item.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_3") ? canEdit : false);	
		flgDatiProtettiTipo4Item.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_DATI_PROTETTI_TIPO_4") ? canEdit : false);
		numGaraItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_GARA") ? canEdit : false);		
		flgControlloLegittimitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_CONTROLLO_LEGITTIMITA") ? canEdit : false);				
		motivazioniEsclControlloLegittimitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("MOTIVAZIONI_ESCL_CONTROLLO_LEGITTIMITA") ? canEdit : false);		
		setCanEditReplicableItemAttributoCustomCablato(listaDestVantaggioItem, "DEST_VANTAGGIO", canEdit);
		setCanEditReplicableItemAttributoCustomCablato(listaUfficioDefinizioneSpesaItem, "ID_UO_COMP_SPESA", canEdit);
		opzAssCompSpesaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_OPZ_ASS_COMP_SPESA") ? canEdit : false);
		flgAdottanteUnicoRespPEGItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_ADOTTANTE_UNICO_RESP_SPESA") ? canEdit : false);	
		flgDirRespRegTecnicaUnicoRespSpesaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_DIR_RESP_REG_TECNICA_UNICO_RESP_SPESA") ? canEdit : false);	
		setCanEditReplicableItemAttributoCustomCablato(listaResponsabiliPEGItem, "ID_SV_RESP_SPESA", canEdit);
		flgSpesaCorrenteItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CORRENTE") ? canEdit : false);
		flgImpegniCorrenteGiaValidatiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_IMP_CORR_VALID") ? canEdit : false);
		flgSpesaContoCapitaleItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_SPESA_CONTO_CAP") ? canEdit : false);
		flgImpegniContoCapitaleGiaRilasciatiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_IMP_CCAP_RIL") ? canEdit : false);
		flgSoloSubImpSubCronoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_SUB") ? canEdit : false);
		flgConVerificaContabilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RICH_VERIFICA_CONTABILITA") ? canEdit : false); 
		flgRichiediParereRevisoriContabiliItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_RICH_PARERE_REV_CONTABILI") ? canEdit : false);
		flgRichVerificaDiBilancioCorrenteItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_BIL_CORR") ? canEdit : false); 
		flgRichVerificaDiBilancioContoCapitaleItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_BIL_CCAP") ? canEdit : false); 
		flgRichVerificaDiContabilitaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_DET_CON_VRF_CONTABIL") ? canEdit : false);
		flgOpCommercialeItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_OP_COMMERCIALE") ? canEdit : false);
		flgEscludiCIGItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_ESCL_CIG") ? canEdit : false);
		flgCIGDaAcquisireItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_CIG_IN_ACQUISIZIONE") ? canEdit : false);
		motivoEsclusioneCIGItem.setCanEdit(getFlgEditabileAttributoCustomCablato("MOTIVO_ESCLUSIONE_CIG") ? canEdit : false);
		codiceCIGPadreItem.setCanEdit(getFlgEditabileAttributoCustomCablato("CIG_PADRE") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaCIGItem, "CIG", canEdit);		
		setCanEditReplicableItemAttributoCustomCablato(listaCUIItem, "CUI", canEdit);		
		categoriaRischioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("CATEGORIA_RISCHIO") ? canEdit : false);
		subfolderRdaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("SUBFOLDER_RDA") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaClassFascItem, "CLASS_FASC", canEdit);				
		setCanEditReplicableItemAttributoCustomCablato(listaRiferimentiNormativiItem, "RIFERIMENTI_NORMATIVI", canEdit);
		attiPresuppostiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ATTI_PRESUPPOSTI") ? canEdit : false);
		motivazioniItem.setCanEdit(getFlgEditabileAttributoCustomCablato("MOTIVAZIONI_ATTO") ? canEdit : false);
		premessaItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PREMESSA_ATTO") ? canEdit : false);		 
		rifNormativiLiberiItem.setCanEdit(getFlgEditabileAttributoCustomCablato("RIF_NORMATIVI_LIBERI") ? canEdit : false);
		dispositivoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DISPOSITIVO_ATTO") ? canEdit : false);
		premessa2Item.setCanEdit(getFlgEditabileAttributoCustomCablato("PREMESSA_ATTO_2") ? canEdit : false);
		dispositivo2Item.setCanEdit(getFlgEditabileAttributoCustomCablato("DISPOSITIVO_ATTO_2") ? canEdit : false);
		loghiAggiuntiviDispositivoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("LOGHI_DISPOSITIVO_ATTO") ? canEdit : false);
		if(!isReadOnly) {
			if(isPresenteAttributoCustomCablato("#ALLEGATI_PARTE_INTEGRANTE") && !getFlgEditabileAttributoCustomCablato("#ALLEGATI_PARTE_INTEGRANTE")) {
				if(listaAllegatiItem != null) {
					if(listaAllegatiItem instanceof AllegatiGridItem) {
						((AllegatiGridItem)listaAllegatiItem).readOnlyMode();
					} else if(listaAllegatiItem instanceof AllegatiItem) {
						((AllegatiItem)listaAllegatiItem).readOnlyMode();
					} 			
				}
			} else if(listaAllegatiItem != null) {
				listaAllegatiItem.setCanEdit(canEdit);
			}
		}
		flgEscludiPremesseFisseDaTestoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_ESCLUDI_PREMESSE_FISSE_DA_TESTO_ATTO") ? canEdit : false);
		flgEscludiOggettoDaTestoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_ESCLUDI_OGGETTO_DA_TESTO_ATTO") ? canEdit : false);
		scrittaTraPremessaEDispositivoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO") ? canEdit : false);
		numRighePreScrittaTraPremessaEDispositivoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_RIGHE_PRE_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO") ? canEdit : false);
		numRighePostScrittaTraPremessaEDispositivoAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_RIGHE_POST_SCRITTA_TRA_PREMESSA_E_DISPOSITIVO_ATTO") ? canEdit : false);		
		flgAcquisitiVistiTornaVerificaUoPropItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_ACQUISITI_VISTI_TORNA_VERIFICA_UO_PROP") ? canEdit : false);
		flgVisibilitaPubblPostAdozioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_VISIBILITA_PUBBL_POST_ADOZIONE") ? canEdit : false);	
		flgPubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_PUBBL_ALBO") ? canEdit : false);
		tipoDecorrenzaPubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_ALBO") ? canEdit : false);
		if(AurigaLayout.isAttivoClienteCMMI()) {
			boolean isCompilaDatiPubblicazione = this instanceof TaskNuovaPropostaAtto2CompletaDetail && ((TaskNuovaPropostaAtto2CompletaDetail)this).isCompilaDatiPubblicazione();
			if(isReadOnly && isCompilaDatiPubblicazione) {
				dataPubblAlboDalItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_ALBO_DAL") ? true : false);
				numGiorniPubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO") ? true : false);
			} else {
				dataPubblAlboDalItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_ALBO_DAL") ? canEdit : false);
				numGiorniPubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO") ? canEdit : false);
			}
		} else {
			dataPubblAlboDalItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_ALBO_DAL") ? canEdit : false);
			numGiorniPubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_GIORNI_PUBBL_ALBO") ? canEdit : false);
		}
		dataPubblAlboAlItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_ALBO_AL") ? canEdit : false);
		flgUrgentePubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_URGENTE_PUBBL_ALBO") ? canEdit : false);
		dataPubblAlboEntroItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_ALBO_ENTRO") ? canEdit : false);
		dataRipubblAlboDalItem.setCanEdit(getFlgEditabileAttributoCustomCablato("RIPUBBL_ALBO_DAL") ? canEdit : false);
		numGiorniRipubblAlboItem.setCanEdit(getFlgEditabileAttributoCustomCablato("NRO_GIORNI_RIPUBBL_ALBO") ? canEdit : false);
		dataRipubblAlboAlItem.setCanEdit(getFlgEditabileAttributoCustomCablato("RIPUBBL_ALBO_AL") ? canEdit : false);
		flgPubblAmmTraspItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_PUBBL_IN_TRASPARENZA") ? canEdit : false);
		annoTerminePubblAmmTraspItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ANNO_TERMINE_PUBBL_IN_TRASPARENZA") ? canEdit : false);
		sezionePubblAmmTraspItem.setCanEdit(getFlgEditabileAttributoCustomCablato("SEZ1_PUBBL_IN_TRASPARENZA") ? canEdit : false);
		sottoSezionePubblAmmTraspItem.setCanEdit(getFlgEditabileAttributoCustomCablato("SEZ2_PUBBL_IN_TRASPARENZA") ? canEdit : false);		
		flgPubblBURItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_PUBBL_BUR") ? canEdit : false);
		annoTerminePubblBURItem.setCanEdit(getFlgEditabileAttributoCustomCablato("ANNO_TERMINE_PUBBL_BUR") ? canEdit : false);
		tipoDecorrenzaPubblBURItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TIPO_DECORRENZA_PUBBL_BUR") ? canEdit : false);
		dataPubblBURDalItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_BUR_DAL") ? canEdit : false);
		flgUrgentePubblBURItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_URGENTE_PUBBL_BUR") ? canEdit : false);
		dataPubblBUREntroItem.setCanEdit(getFlgEditabileAttributoCustomCablato("PUBBL_BUR_ENTRO") ? canEdit : false);
		flgPubblNotiziarioItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_PUBBL_NOTIZIARIO") ? canEdit : false);		
		dataEsecutivitaDalItem.setCanEdit(false); // è sempre read-only
		flgImmediatamenteEseguibileItem.setCanEdit(getFlgEditabileAttributoCustomCablato("FLG_IMMEDIATAMENTE_ESEGUIBILE") ? canEdit : false);
		motiviImmediatamenteEseguibileItem.setCanEdit(getFlgEditabileAttributoCustomCablato("MOTIVI_IE") ? canEdit : false);
		listaDestNotificaAttoItem.setCanEdit(getFlgEditabileAttributoCustomCablato("IND_EMAIL_DEST_NOTIFICA_ATTO") ? canEdit : false);
		flgMessiNotificatoriItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_MESSI_NOTIFICATORI") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaDestinatariNotificaMessiItem, "DESTINATARI_NOTIFICA_MESSI", canEdit);		
		flgNotificaPECItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_FLG_NOTIFICA_PEC") ? canEdit : false);
		setCanEditReplicableItemAttributoCustomCablato(listaDestinatariNotificaPECItem, "DESTINATARI_NOTIFICA_PEC", canEdit);		 
		flgVisibPubblicaPostAdozioneItem.setCanEdit(getFlgEditabileAttributoCustomCablato("TASK_RESULT_2_VISIB_PUBBLICA_POST_ADOZIONE") ? canEdit : false);
		if(isAttivoContabilia()) {
			if(listaMovimentiContabiliaItem instanceof ListaMovimentiContabilia2Item) {
				listaMovimentiContabiliaItem.setCanEdit((isPresenteAttributoCustomCablato("DATI_CONTABILIA_DETT_GSA") && getFlgEditabileAttributoCustomCablato("DATI_CONTABILIA_DETT_GSA")) ? (canEdit || isReadOnly) : false);
			}
		}
		listaMovimentiGSAItem.setCanEdit((isPresenteAttributoCustomCablato("DATI_GSA") && getFlgEditabileAttributoCustomCablato("DATI_GSA")) ? (canEdit || isReadOnly) : false);
		if(isAttivoSICRA()) {
			if(listaInvioMovimentiContabiliSICRAItem != null) {
				// anche quando il dettaglio è in readOnly, questa lista può essere editabile (passi della ragioneria)
				listaInvioMovimentiContabiliSICRAItem.setCanEdit((isPresenteAttributoCustomCablato("MOVIMENTO_SICRA") && getFlgEditabileAttributoCustomCablato("MOVIMENTO_SICRA")) ? (canEdit || isReadOnly) : false);				
			}
		}		
		setCanEditReplicableItemAttributoCustomCablato(listaOpereADSPItem, "PERIZIA_ADSP", canEdit);
		listaDatiContabiliADSPItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_CONTABILI_ADSP") ? canEdit : false);
		listaImpegniAVBItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_CONTABILI_AVB_IMP") ? canEdit : false);
		listaAccertamentiAVBItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_CONTABILI_AVB_ACC") ? canEdit : false);
		listaLiquidazioniAVBItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_CONTABILI_AVB_LIQ") ? canEdit : false);
		datiLiquidazioneAVBItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI-CONT-LIQ-AVB") ? canEdit : false);
		listaDatiContabiliATERSIRItem.setCanEdit(getFlgEditabileAttributoCustomCablato("DATI_CONTABILI_ATERSIR") ? canEdit : false);		
		if(getFlgEditabileAttributoCustomCablato("DATI_TRASP_AVB")) {
			flgErogVantaggiEconomiciItem.setCanEdit(canEdit);
			tipoTrasparenzaVantEconItem.setCanEdit(canEdit);
			sottotipoTrasparenzaVantEconItem.setCanEdit(canEdit);	
			flgInterventiItem.setCanEdit(canEdit);
			tipoInterventiItem.setCanEdit(canEdit);
			sottotipoInterventiItem.setCanEdit(canEdit);			
			flgAltriProvvedimentiItem.setCanEdit(canEdit);
			tipoAltriProvvedimentiItem.setCanEdit(canEdit);
			sottotipoAltriProvvedimentiItem.setCanEdit(canEdit);		
			normaTrasparenzaVantEconItem.setCanEdit(canEdit);
			modalitaIndividuazioneBeneficiarioItem.setCanEdit(canEdit);
			estremiDocumentiPrincipaliFascicoloItem.setCanEdit(canEdit);
			avvisiPerLaCompilazioneItem.setCanEdit(false);
			ufficioCompetenteTabTraspItem.setCanEdit(false);
			responsabileProcedimentoTabTraspItem.setCanEdit(false);
			dataAvvioProcedimentoTabTraspItem.setCanEdit(canEdit);
			oggettoProvvedimentoItem.setCanEdit(canEdit);
			durataRapportoGiuridicoItem.setCanEdit(canEdit);
			numeroMesiDurataRapportoItem.setCanEdit(canEdit);
			dalDurataRapportoItem.setCanEdit(canEdit);
			alDurataRapportoItem.setCanEdit(canEdit);
			listaAllegatiObbligatoriTrasparenzaItem.setCanEdit(false);
			listaAllegatiNonObbligatoriTrasparenzaItem.setCanEdit(false);
			listaBeneficiariTrasparenzaItem.setCanEdit(canEdit);
		} else {
			flgErogVantaggiEconomiciItem.setCanEdit(false);
			tipoTrasparenzaVantEconItem.setCanEdit(false);
			sottotipoTrasparenzaVantEconItem.setCanEdit(false);		
			flgInterventiItem.setCanEdit(false);
			tipoInterventiItem.setCanEdit(false);
			sottotipoInterventiItem.setCanEdit(false);			
			flgAltriProvvedimentiItem.setCanEdit(false);
			tipoAltriProvvedimentiItem.setCanEdit(false);
			sottotipoAltriProvvedimentiItem.setCanEdit(false);		
			normaTrasparenzaVantEconItem.setCanEdit(false);
			modalitaIndividuazioneBeneficiarioItem.setCanEdit(false);
			estremiDocumentiPrincipaliFascicoloItem.setCanEdit(false);
			avvisiPerLaCompilazioneItem.setCanEdit(false);
			ufficioCompetenteTabTraspItem.setCanEdit(false);
			responsabileProcedimentoTabTraspItem.setCanEdit(false);
			dataAvvioProcedimentoTabTraspItem.setCanEdit(false);
			oggettoProvvedimentoItem.setCanEdit(false);
			durataRapportoGiuridicoItem.setCanEdit(false);
			numeroMesiDurataRapportoItem.setCanEdit(false);
			dalDurataRapportoItem.setCanEdit(false);
			alDurataRapportoItem.setCanEdit(false);
			listaAllegatiObbligatoriTrasparenzaItem.setCanEdit(false);
			listaAllegatiNonObbligatoriTrasparenzaItem.setCanEdit(false);
			listaBeneficiariTrasparenzaItem.setCanEdit(false);
		}
		
		openSections();
	}
	
	public void setCanEditReplicableItemAttributoCustomCablato(ReplicableItem item, String attrName, boolean canEdit) {
		item.setCanEdit(getFlgInibitaAggiuntaRigheAttributoCustomCablato(attrName), getFlgInibitaCancellazioneRigheAttributoCustomCablato(attrName), getFlgEditabileAttributoCustomCablato(attrName) ? canEdit : false);
	}
	
	public boolean isAvvioEmendamentoFromAttoRif() {
		return false;
	}

	protected String buildIconHtml(String src, String value) {
		return "<div align=\"left\"><img src=\"images/" + src + "\" height=\"10\" width=\"10\" alt=\"\" />&nbsp;&nbsp;" + value + "</div>";
	}
	
	public boolean isEmendamentoSuFileAllegato() {
		return showFlgEmendamentoSuFileItem() && getValueAsString("flgEmendamentoSuFile") != null && _FLG_EMENDAMENTO_SU_FILE_A.equals(getValueAsString("flgEmendamentoSuFile"));	
	}
	
	public boolean isEmendamentoIntegraleAllegato() {
		return showFlgEmendamentoIntegraleAllegatoItem() && getValueAsBoolean("flgEmendamentoIntegraleAllegato");	
	}
	
	public boolean isProcExCodAppalti() {
		return showFlgProcExCodAppaltiItem() && getValueAsString("flgProcExCodAppalti") != null && _FLG_SI.equals(getValueAsString("flgProcExCodAppalti"));	
	}
		
	public boolean isAttoMeroIndirizzo() {
		return showFlgAttoMeroIndirizzoItem() && getValueAsBoolean("flgAttoMeroIndirizzo");
	}
	
	public boolean isAttoCommissario() {
		return showFlgAttoCommissarioItem() && getValueAsBoolean("flgAttoCommissario");
	}
	
	public boolean isModificaRegolamento() {
		return showFlgModificaRegolamentoItem() && getValueAsBoolean("flgModificaRegolamento");
	}
	
	public boolean isModificaStatuto() {
		return showFlgModificaStatutoItem() && getValueAsBoolean("flgModificaStatuto");
	}
	
	public boolean isNomina() {
		return showFlgNominaItem() && getValueAsBoolean("flgNomina");
	}
	
	public boolean isRatificaDeliberaUrgenza() {
		return showFlgRatificaDeliberaUrgenzaItem() && getValueAsBoolean("flgRatificaDeliberaUrgenza");
	}
	
	public boolean isAttoUrgente() {
		return showFlgAttoUrgenteItem() && getValueAsBoolean("flgAttoUrgente");
	}
		
	public String getFlgSpesa() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
			return flgSpesaValoriPossibili[0];
		}
		return getValueAsString("flgSpesa");
	}
	
	public boolean isDeterminaConSpesa() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
			return _FLG_SI.equalsIgnoreCase(flgSpesaValoriPossibili[0]);
		}
		return showFlgSpesaItem() && _FLG_SI.equalsIgnoreCase(getValueAsString("flgSpesa"));
	}
	
	public boolean isDeterminaConSpesaSenzaImpegni() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
			return getFLG_SI_SENZA_VLD_RIL_IMP().equalsIgnoreCase(flgSpesaValoriPossibili[0]);
		}
		
		return showFlgSpesaItem() && getFLG_SI_SENZA_VLD_RIL_IMP().equalsIgnoreCase(getValueAsString("flgSpesa"));
	}
	
	public boolean isDeterminaSenzaSpesa() {
		String[] flgSpesaValoriPossibili = getValoriPossibiliFlgSpesaItem();
		if(flgSpesaValoriPossibili != null && flgSpesaValoriPossibili.length == 1) {
			return _FLG_NO.equalsIgnoreCase(flgSpesaValoriPossibili[0]);
		}
		return !showFlgSpesaItem() || (showFlgSpesaItem() && _FLG_NO.equalsIgnoreCase(getValueAsString("flgSpesa")));
	}
		
	public boolean isDeterminaConSpesaCorrente() {
		return isDeterminaConSpesa() && showFlgSpesaCorrenteItem() && getValueAsBoolean("flgSpesaCorrente");				
	}
	
	public boolean isDeterminaConSpesaContoCapitale() {
		return isDeterminaConSpesa() && showFlgSpesaContoCapitaleItem() && getValueAsBoolean("flgSpesaContoCapitale");		
	}
	
	public boolean isAffidamento() {
		return showFlgAffidamentoItem() && getValueAsBoolean("flgAffidamento");
	}
	
	public boolean isDeterminaAContrarreTramiteProceduraGara() {
		return showFlgDeterminaAContrarreTramiteProceduraGaraItem() && getValueAsBoolean("flgDeterminaAContrarreTramiteProceduraGara");
	}
	
	public boolean isDeterminaAggiudicaProceduraGara() {
		return showFlgDeterminaAggiudicaProceduraGaraItem() && getValueAsBoolean("flgDeterminaAggiudicaProceduraGara");
	}

	public boolean isDeterminaRimodulazioneSpesaGaraAggiudicata() {
		return showFlgDeterminaRimodulazioneSpesaGaraAggiudicataItem() && getValueAsBoolean("flgDeterminaRimodulazioneSpesaGaraAggiudicata");
	}
	
	public boolean isDeterminaPersonale() {
		return showFlgDeterminaAssunzioneAumentoRiduzioneOrarioLavoroItem() && getValueAsBoolean("flgDeterminaAssunzioneAumentoRiduzioneOrarioLavoro");
	}
	
	public boolean isDeterminaRiaccertamento() {
		return showFlgDeterminaRiaccertamentoItem() && getValueAsBoolean("flgDeterminaRiaccertamento");
	}
	
	public boolean isDeterminaAccertRadiaz() {
		return showFlgDeterminaAccertRadiazItem() && getValueAsBoolean("flgDeterminaAccertRadiaz");
	}
	
	public boolean isDeterminaVariazBil() {
		return showFlgDeterminaVariazBilItem() && getValueAsBoolean("flgDeterminaVariazBil");
	}
	
	public boolean isVantaggiEconomici() {
		return showFlgVantaggiEconomiciItem() && getValueAsBoolean("flgVantaggiEconomici");
	}
	
	public boolean isDecretoReggio() {
		return showFlgDecretoReggioItem() && getValueAsBoolean("flgDecretoReggio");
	}
	
	public boolean isAvvocatura() {
		return showFlgAvvocaturaItem() && getValueAsBoolean("flgAvvocatura");
	}
	
	public boolean isDeterminaArchiviazione() {
		return showFlgDeterminaArchiviazioneItem() && getValueAsBoolean("flgDeterminaArchiviazione");
	}
	
	public boolean isPubblAlbo() {
		return showFlgPubblAlboItem() && getValueAsString("flgPubblAlbo") != null && _FLG_SI.equals(getValueAsString("flgPubblAlbo"));	
	}
	
	public boolean isDecorrenzaPubblAlboPosticipata() {
		return showTipoDecorrenzaPubblAlboItem() && getValueAsString("tipoDecorrenzaPubblAlbo") != null && _DECORR_PUBBL_POST.equals(getValueAsString("tipoDecorrenzaPubblAlbo"));	
	}
	
	public boolean isUrgentePubblAlbo() {
		return showFlgUrgentePubblAlboItem() && getValueAsBoolean("flgUrgentePubblAlbo");	
	}
	
	public boolean isPubblAmmTrasp() {
		return showFlgPubblAmmTraspItem() && getValueAsString("flgPubblAmmTrasp") != null && _FLG_SI.equals(getValueAsString("flgPubblAmmTrasp"));	
	}

	public boolean isPubblBUR() {
		return showFlgPubblBURItem() && getValueAsString("flgPubblBUR") != null && _FLG_SI.equals(getValueAsString("flgPubblBUR"));	
	}
	
	public boolean isDecorrenzaPubblBURPosticipata() {
		return showTipoDecorrenzaPubblBURItem() && getValueAsString("tipoDecorrenzaPubblBUR") != null && _DECORR_PUBBL_POST.equals(getValueAsString("tipoDecorrenzaPubblBUR"));	
	}
	
	public boolean isUrgentePubblBUR() {
		return showFlgUrgentePubblBURItem() && getValueAsBoolean("flgUrgentePubblBUR");	
	}
	
	public boolean isPubblNotiziario() {
		return showFlgPubblNotiziarioItem() && getValueAsString("flgPubblNotiziario") != null && _FLG_SI.equals(getValueAsString("flgPubblNotiziario"));	
	}
	 
	public boolean isFondiPNRRRadio() {		
		return showFlgFondiPNRRRadioItem() && getValueAsString("flgFondiPNRRRadio") != null && _FLG_SI.equals(getValueAsString("flgFondiPNRRRadio"));	
	}
	
	public boolean isLLPP() {
		return showFlgLLPPItem() && getValueAsString("flgLLPP") != null && _FLG_SI.equals(getValueAsString("flgLLPP"));	
	}

	public boolean isBeniServizi() {
		return showFlgBeniServiziItem() && getValueAsString("flgBeniServizi") != null && _FLG_SI.equals(getValueAsString("flgBeniServizi"));
	}
	
	public boolean isDatiRiservati() {
		return showFlgPrivacyItem() && getValueAsString("flgPrivacy") != null && _FLG_SI.equals(getValueAsString("flgPrivacy"));
	}
	
	public boolean isDatiRilevantiGSA() {
		return showFlgDatiRilevantiGSAItem() && getValueAsString("flgDatiRilevantiGSA") != null && _FLG_SI.equals(getValueAsString("flgDatiRilevantiGSA"));
	}
	
	public Record getDetailRecordInAllegati() {
		Record lRecordAllegato = new Record();
		lRecordAllegato.setAttribute("idUd", getValueAsString("idUd"));
		lRecordAllegato.setAttribute("siglaProtocollo", !"".equals(getValueAsString("siglaRegistrazione")) ? getValueAsString("siglaRegistrazione") : getValueAsString("siglaRegProvvisoria"));
		lRecordAllegato.setAttribute("nroProtocollo", !"".equals(getValueAsString("numeroRegistrazione")) ? getValueAsString("numeroRegistrazione") : getValueAsString("numeroRegProvvisoria"));
		lRecordAllegato.setAttribute("dataProtocollo", getValueAsDate("dataRegistrazione") != null ? getValueAsDate("dataRegistrazione") : getValueAsDate("dataRegProvvisoria"));
		lRecordAllegato.setAttribute("desUserProtocollo", !"".equals(getValueAsString("desUserRegistrazione")) ? getValueAsString("desUserRegistrazione") : getValueAsString("desUserRegProvvisoria"));
		lRecordAllegato.setAttribute("desUOProtocollo", !"".equals(getValueAsString("desUORegistrazione")) ? getValueAsString("desUORegistrazione") : getValueAsString("desUORegProvvisoria"));
		return lRecordAllegato;
	}
	
	public Record getRecordEventoXInfoModelli() {
		return null;
	}
	
	public String getIdModDispositivo() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String idModAssDocTask = recordEvento != null ? recordEvento.getAttribute("idModAssDocTask") : null;		
		return idModAssDocTask != null ? idModAssDocTask : "";
	}
	
	public String getNomeModDispositivo() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String nomeModAssDocTask = recordEvento != null ? recordEvento.getAttribute("nomeModAssDocTask") : null;
		return nomeModAssDocTask != null ? nomeModAssDocTask : "";
	}
	
	public String getDisplayFilenameModDispositivo() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String displayFilenameModAssDocTask = recordEvento != null ? recordEvento.getAttribute("displayFilenameModAssDocTask") : null;
		return displayFilenameModAssDocTask != null ? displayFilenameModAssDocTask : "";
	}
	
	public String getIdModAppendice() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String idModAppendice = recordEvento != null ? recordEvento.getAttribute("idModAppendice") : null;
		return idModAppendice != null ? idModAppendice : "";
	}
	
	public String getNomeModAppendice() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String nomeModAppendice = recordEvento != null ? recordEvento.getAttribute("nomeModAppendice") : null;
		return nomeModAppendice != null ? nomeModAppendice : "";
	}
	
	public String getUriAppendice() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String uriAppendice = recordEvento != null ? recordEvento.getAttribute("uriAppendice") : null;
		return uriAppendice != null ? uriAppendice : "";
	}
	
	public String getDisplayFilenameModAppendice() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String displayFilenameModAppendice = recordEvento != null ? recordEvento.getAttribute("displayFilenameModAppendice") : null;
		return displayFilenameModAppendice != null ? displayFilenameModAppendice : "";
	}
	
	public String getIdModFoglioFirme() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String idModFoglioFirme = recordEvento != null ? recordEvento.getAttribute("idModFoglioFirme") : null;
		return idModFoglioFirme != null ? idModFoglioFirme : "";
	}
	
	public String getNomeModFoglioFirme() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String nomeModFoglioFirme = recordEvento != null ? recordEvento.getAttribute("nomeModFoglioFirme") : null;
		return nomeModFoglioFirme != null ? nomeModFoglioFirme : "";
	}	
	
	public String getDisplayFilenameModFoglioFirme() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String displayFilenameModFoglioFirme = recordEvento != null ? recordEvento.getAttribute("displayFilenameModFoglioFirme") : null;
		return displayFilenameModFoglioFirme != null ? displayFilenameModFoglioFirme : "";
	}
	
	public String getIdModFoglioFirme2() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String idModFoglioFirme2 = recordEvento != null ? recordEvento.getAttribute("idModFoglioFirme2") : null;
		return idModFoglioFirme2 != null ? idModFoglioFirme2 : "";
	}
	
	public String getNomeModFoglioFirme2() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String nomeModFoglioFirme2 = recordEvento != null ? recordEvento.getAttribute("nomeModFoglioFirme2") : null;
		return nomeModFoglioFirme2 != null ? nomeModFoglioFirme2 : "";
	}	
	
	public String getDisplayFilenameModFoglioFirme2() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String displayFilenameModFoglioFirme2 = recordEvento != null ? recordEvento.getAttribute("displayFilenameModFoglioFirme2") : null;
		return displayFilenameModFoglioFirme2 != null ? displayFilenameModFoglioFirme2 : "";
	}
	
	public String getIdModSchedaTrasp() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String idModSchedaTrasp = recordEvento != null ? recordEvento.getAttribute("idModSchedaTrasp") : null;
		return idModSchedaTrasp != null ? idModSchedaTrasp : "";
	}
	
	public String getNomeModSchedaTrasp() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String nomeModSchedaTrasp = recordEvento != null ? recordEvento.getAttribute("nomeModSchedaTrasp") : null;
		return nomeModSchedaTrasp != null ? nomeModSchedaTrasp : "";
	}	
	
	public String getDisplayFilenameModSchedaTrasp() {
		Record recordEvento = getRecordEventoXInfoModelli();
		String displayFilenameModSchedaTrasp = recordEvento != null ? recordEvento.getAttribute("displayFilenameModSchedaTrasp") : null;
		return displayFilenameModSchedaTrasp != null ? displayFilenameModSchedaTrasp : "";
	}
	
	public void anteprimaProvvedimento(String nomeFilePrimario, String uriFilePrimario, InfoFileRecord infoFilePrimario, final String nomeFilePrimarioOmissis, final String uriFilePrimarioOmissis, final InfoFileRecord infoFilePrimarioOmissis) {
		if(uriFilePrimario != null && !"".equals(uriFilePrimario) && infoFilePrimario != null && infoFilePrimario.isFirmato()) {			
			anteprimaAttoFirmato(nomeFilePrimario, uriFilePrimario, infoFilePrimario, nomeFilePrimarioOmissis, uriFilePrimarioOmissis, infoFilePrimarioOmissis);
		} else {
			anteprimaDispositivoDaModello(hasPrimarioDatiSensibili());
		}
	}
	
	public void anteprimaAttoFirmato(String nomeFilePrimario, String uriFilePrimario, InfoFileRecord infoFilePrimario, final String nomeFilePrimarioOmissis, final String uriFilePrimarioOmissis, final InfoFileRecord infoFilePrimarioOmissis) {
		if(uriFilePrimario != null && !"".equals(uriFilePrimario) && infoFilePrimario != null && infoFilePrimario.isFirmato()) {
			if(uriFilePrimarioOmissis != null && !"".equals(uriFilePrimarioOmissis)) {
				
				new PreviewWindow(uriFilePrimario, true, infoFilePrimario, "FileToExtractBean",	nomeFilePrimario) {
					
					@Override
					public void manageCloseClick() {
						super.manageCloseClick();
						new PreviewWindow(uriFilePrimarioOmissis, true, infoFilePrimarioOmissis, "FileToExtractBean", nomeFilePrimarioOmissis) {
							
							@Override
							public boolean isModal() {
								return isEnablePreviewModal();
							}
							
						};
					};
					
					@Override
					public boolean isModal() {
						return isEnablePreviewModal();
					}
					
				};		
			} else {

				new PreviewWindow(uriFilePrimario, true, infoFilePrimario, "FileToExtractBean", nomeFilePrimario) {
					
					@Override
					public boolean isModal() {
						return isEnablePreviewModal();
					}
					
				};		
			} 
		}
	}
	
	public void anteprimaDispositivoDaModello(boolean hasDatiSensibili) {
		anteprimaDispositivoDaModello(false, hasDatiSensibili);
	}
	
	public void anteprimaDispositivoDaModello(final boolean flgVersioneFinale, boolean hasDatiSensibili) {
		if(hasDatiSensibili) {
			generaDispositivoDaModelloVersIntegrale(true, flgVersioneFinale, new ServiceCallback<Record>() {
				
				@Override
				public void execute(final Record recordPreview) {
					generaDispositivoDaModelloVersConOmissis(true, flgVersioneFinale, new ServiceCallback<Record>() {
						
						@Override
						public void execute(final Record recordPreviewOmissis) {
							previewWithCallback(recordPreview, new ServiceCallback<Record>() {
						
								@Override
								public void execute(Record object) {
									preview(recordPreviewOmissis);
								}
							});
						}
					});
				}
			});
		} else {
			generaDispositivoDaModelloVersIntegrale(true, flgVersioneFinale, new ServiceCallback<Record>() {
				
				@Override
				public void execute(Record recordPreview) {
					preview(recordPreview);
				}
			});
		}
	}
	
	public void generaDispositivoDaModelloVersIntegrale(boolean flgAnteprima, boolean flgVersioneFinale, final ServiceCallback<Record> callback) {
		generaDispositivoDaModello(flgAnteprima, flgVersioneFinale, true, callback);
	}
	
	public void generaDispositivoDaModelloVersConOmissis(boolean flgAnteprima, boolean flgVersioneFinale, final ServiceCallback<Record> callback) {
		generaDispositivoDaModello(flgAnteprima, flgVersioneFinale, false, callback);
	}
	
	public void generaDispositivoDaModello(boolean flgAnteprima, boolean flgVersioneFinale, boolean flgMostraDatiSensibili, final ServiceCallback<Record> callback) {
		generaDispositivoDaModello(flgAnteprima, flgVersioneFinale, flgMostraDatiSensibili, false, false, callback);
	}
	
	public void generaDispositivoDaModelloVersPerVerificaOmissis(final ServiceCallback<Record> callback) {
		generaDispositivoDaModello(false, false, true, true, false, callback);
	}
	
	public void generaDispositivoDaModelloVersModificabile(final ServiceCallback<Record> callback) {
		generaDispositivoDaModello(false, false, true, false, true, callback);
	}
		
	public void generaDispositivoDaModello(boolean flgAnteprima, boolean flgVersioneFinale, boolean flgMostraDatiSensibili, boolean flgMostraOmissisBarrati, boolean flgGeneraVersioneModificabile, final ServiceCallback<Record> callback) {			
		Record record = getRecordToSave();
		record.setAttribute("idModello", getIdModDispositivo());
		record.setAttribute("nomeModello", getNomeModDispositivo());
		record.setAttribute("displayFilenameModello", getDisplayFilenameModDispositivo());
		record.setAttribute("flgMostraDatiSensibili", flgMostraDatiSensibili);
		if(flgMostraDatiSensibili) {
			record.setAttribute("flgMostraOmissisBarrati", flgMostraOmissisBarrati);
		}		
		record.setAttribute("flgAnteprima", flgAnteprima);		
		record.setAttribute("flgVersioneFinale", flgVersioneFinale);		
		if (flgGeneraVersioneModificabile) {
			Layout.showWaitPopup("Generazione versione modificabile provvedimento in corso...");
		} else  {
			Layout.showWaitPopup("Generazione anteprima provvedimento in corso...");				
		}
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");		
		if (flgGeneraVersioneModificabile) {
			lNuovaPropostaAtto2CompletaDataSource.addParam("generaVersioneModificabile", "true");
		}
		lNuovaPropostaAtto2CompletaDataSource.executecustom("generaDispositivoDaModello", record, new DSCallback() {
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					final Record recordPreview = response.getData()[0];
					if(callback != null) {
						callback.execute(recordPreview);
					}
				}				
			}		
		});
	}
	
	public void anteprimaDatiSpesaDaModello() {
		if(getUriAppendice() != null && !"".equals(getUriAppendice())) {
			final Record lRecordFileAppendice = new Record();
			lRecordFileAppendice.setAttribute("uri", getUriAppendice());
			lRecordFileAppendice.setAttribute("nomeFile", getDisplayFilenameModAppendice());
			new GWTRestDataSource("ProtocolloDataSource").executecustom("getInfoFromFile", lRecordFileAppendice, new DSCallback() {
				
				@Override
				public void execute(DSResponse dsResponse, Object data, DSRequest dsRequest) {
					if (dsResponse.getStatus() == DSResponse.STATUS_SUCCESS) {
						Record result = dsResponse.getData()[0];
						InfoFileRecord infoFileAppendice = InfoFileRecord.buildInfoFileString(JSON.encode(result.getAttributeAsRecord("infoFile").getJsObj()));
						lRecordFileAppendice.setAttribute("infoFile", infoFileAppendice);
						preview(lRecordFileAppendice);
					}
				}
			});
		} else {
			generaDatiSpesaDaModello(new ServiceCallback<Record>() {
				
				@Override
				public void execute(Record recordPreview) {
					preview(recordPreview);
				}
			});	
		}
	}
	
	public void generaDatiSpesaDaModello(final ServiceCallback<Record> callback) {
		
		Record record = getRecordToSave();
		record.setAttribute("idModello", getIdModAppendice());
		record.setAttribute("nomeModello", getNomeModAppendice());
		record.setAttribute("displayFilenameModello", getDisplayFilenameModAppendice());
		
		String labelTastoFoglioDatiCont = AurigaLayout.getParametroDB("LABEL_TASTO_FOGLIO_DATI_CONT");
		String waitMessage = labelTastoFoglioDatiCont != null && !"".equals(labelTastoFoglioDatiCont) ? "Generazione anteprima " + labelTastoFoglioDatiCont + " in corso..." :  "Generazione anteprima movimenti contabili in corso...";
		Layout.showWaitPopup(waitMessage);
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		lNuovaPropostaAtto2CompletaDataSource.executecustom("generaDatiSpesaDaModello", record, new DSCallback() {
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					final Record recordPreview = response.getData()[0];
					if(callback != null) {
						callback.execute(recordPreview);
					}
				}				
			}		
		});
	}
	
	public void anteprimaFoglioFirmeDaModello() {
		generaFoglioFirmeDaModello(new ServiceCallback<Record>() {
			
			@Override
			public void execute(Record recordPreview) {
				preview(recordPreview);
			}
		});	
	}
	
	public void generaFoglioFirmeDaModello(final ServiceCallback<Record> callback) {
		
		Record record = getRecordToSave();
		record.setAttribute("idModello", getIdModFoglioFirme());
		record.setAttribute("nomeModello", getNomeModFoglioFirme());
		record.setAttribute("displayFilenameModello", getDisplayFilenameModFoglioFirme());
		
		String waitMessage = "Generazione riepilogo firme e visti in corso...";
		if(AurigaLayout.getParametroDBAsBoolean("ATTIVA_PREVIEW_NO_SAVE_FOGLIO_FIRME_ATTI")) {
			String labelTastoFoglioFirme = AurigaLayout.getParametroDB("LABEL_TASTO_FOGLIO_FIRME");
			waitMessage = labelTastoFoglioFirme != null && !"".equals(labelTastoFoglioFirme) ? "Generazione anteprima " + labelTastoFoglioFirme + " in corso..." :  "Generazione anteprima foglio firme in corso...";							
		}
		Layout.showWaitPopup(waitMessage);
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		lNuovaPropostaAtto2CompletaDataSource.executecustom("generaRiepilogoFirmeVistiDaModello", record, new DSCallback() {
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					final Record recordPreview = response.getData()[0];
					if(callback != null) {
						callback.execute(recordPreview);
					}
				}				
			}		
		});
	}
	
	public void anteprimaFoglioFirme2DaModello() {
		generaFoglioFirme2DaModello(new ServiceCallback<Record>() {
			
			@Override
			public void execute(Record recordPreview) {
				preview(recordPreview);
			}
		});	
	}
	
	public void generaFoglioFirme2DaModello(final ServiceCallback<Record> callback) {
		
		Record record = getRecordToSave();
		record.setAttribute("idModello", getIdModFoglioFirme2());
		record.setAttribute("nomeModello", getNomeModFoglioFirme2());
		record.setAttribute("displayFilenameModello", getDisplayFilenameModFoglioFirme2());
		
		String labelTastoFoglioFirme2 = AurigaLayout.getParametroDB("LABEL_TASTO_FOGLIO_FIRME_2");
		String waitMessage = labelTastoFoglioFirme2 != null && !"".equals(labelTastoFoglioFirme2) ? "Generazione anteprima " + labelTastoFoglioFirme2 + " in corso..." :  "Generazione anteprima riepilogo firme in corso...";
		Layout.showWaitPopup(waitMessage);
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		lNuovaPropostaAtto2CompletaDataSource.executecustom("generaRiepilogoFirmeVisti2DaModello", record, new DSCallback() {
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					final Record recordPreview = response.getData()[0];
					if(callback != null) {
						callback.execute(recordPreview);
					}
				}				
			}		
		});
	}
	
	public void anteprimaSchedaTraspDaModello() {
		generaSchedaTraspDaModello(new ServiceCallback<Record>() {
			
			@Override
			public void execute(Record recordPreview) {
				preview(recordPreview);
			}
		});	
	}
	
	public void generaSchedaTraspDaModello(final ServiceCallback<Record> callback) {
		
		Record record = getRecordToSave();
		record.setAttribute("idModello", getIdModSchedaTrasp());
		record.setAttribute("nomeModello", getNomeModSchedaTrasp());
		record.setAttribute("displayFilenameModello", getDisplayFilenameModSchedaTrasp());
		
		String labelTastoSchedaTrasp = AurigaLayout.getParametroDB("LABEL_TASTO_SCHEDA_TRASP");
		String waitMessage = labelTastoSchedaTrasp != null && !"".equals(labelTastoSchedaTrasp) ? "Generazione anteprima " + labelTastoSchedaTrasp + " in corso..." :  "Generazione anteprima scheda trasparenza in corso...";							
		
		Layout.showWaitPopup(waitMessage);
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		lNuovaPropostaAtto2CompletaDataSource.executecustom("generaSchedaTraspDaModello", record, new DSCallback() {
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					final Record recordPreview = response.getData()[0];
					if(callback != null) {
						callback.execute(recordPreview);
					}
				}				
			}		
		});
	}
	
	public void generaFileUnionePostDiscussione(String nomeFileUnione, String nomeFileUnioneOmissis,  Record impostazioniUnioneFile, final ServiceCallback<Record> callback) {
		generaFileUnione(true, false, null, nomeFileUnione, nomeFileUnioneOmissis, impostazioniUnioneFile, callback);
	}
	
	public void generaFileUnione(String esito, String nomeFileUnione, String nomeFileUnioneOmissis,  Record impostazioniUnioneFile, final ServiceCallback<Record> callback) {
		generaFileUnione(false, false, esito, nomeFileUnione, nomeFileUnioneOmissis, impostazioniUnioneFile, callback);
	}
	
	public void generaFileUnione(boolean fileDaTimbrare, String esito, String nomeFileUnione, String nomeFileUnioneOmissis,  Record impostazioniUnioneFile, final ServiceCallback<Record> callback) {
		generaFileUnione(false, fileDaTimbrare, esito, nomeFileUnione, nomeFileUnioneOmissis, impostazioniUnioneFile, callback);
	}

	private void generaFileUnione(boolean flgPostDiscussione, boolean fileDaTimbrare, String esito, String nomeFileUnione, String nomeFileUnioneOmissis,  Record impostazioniUnioneFile, final ServiceCallback<Record> callback) {
		
		final Record record = getRecordToSave();		
		
		// aggiungo le impostazioni per l'unione file raccolte dalla callexecatt
		record.setAttribute("impostazioniUnioneFile", impostazioniUnioneFile);
			
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");				
		lNuovaPropostaAtto2CompletaDataSource.addParam("flgPostDiscussione", flgPostDiscussione ? "true" : "");
		lNuovaPropostaAtto2CompletaDataSource.addParam("fileDaTimbrare", fileDaTimbrare ? "true" : "");
		lNuovaPropostaAtto2CompletaDataSource.addParam("nomeFileUnione", nomeFileUnione);
		lNuovaPropostaAtto2CompletaDataSource.addParam("nomeFileUnioneOmissis", nomeFileUnioneOmissis);
		lNuovaPropostaAtto2CompletaDataSource.addParam("flgAttivaSceltaPosizioneAllegatiUniti", getFlgAttivaSceltaPosizioneAllegatiUniti() ? "true" : "");
		lNuovaPropostaAtto2CompletaDataSource.addParam("esitoTask", esito);		
		Layout.showWaitPopup("Generazione del file unione in corso...");	
		lNuovaPropostaAtto2CompletaDataSource.executecustom("unioneFile", record, new DSCallback() {

			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record recordUnioneFile = response.getData()[0];
					if(callback != null) {
						callback.execute(recordUnioneFile);
					}					
				}	
			}
		});
	}
	
	public void generaFileUnioneVersIntegrale(String nomeFileUnione,  Record impostazioniUnioneFile, final ServiceCallback<Record> callback) {
			
		final Record record = getRecordToSave();		
		
		// aggiungo le impostazioni per l'unione file raccolte dalla callexecatt
		record.setAttribute("impostazioniUnioneFile", impostazioniUnioneFile);
			
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");				
		lNuovaPropostaAtto2CompletaDataSource.addParam("nomeFileUnione", nomeFileUnione);
		lNuovaPropostaAtto2CompletaDataSource.addParam("isVersIntegrale", "true");
		lNuovaPropostaAtto2CompletaDataSource.addParam("flgAttivaSceltaPosizioneAllegatiUniti", getFlgAttivaSceltaPosizioneAllegatiUniti() ? "true" : "");
		Layout.showWaitPopup("Generazione del file unione (vers. integrale) in corso...");	
		lNuovaPropostaAtto2CompletaDataSource.executecustom("unioneFile", record, new DSCallback() {

			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record recordUnioneFile = response.getData()[0];
					if(callback != null) {
						callback.execute(recordUnioneFile);
					}					
				}	
			}
		});
	}

	public void generaFileUnioneVersXPubbl(String nomeFileUnioneOmissis,  Record impostazioniUnioneFile, final ServiceCallback<Record> callback) {
		
		final Record record = getRecordToSave();		
		
		// aggiungo le impostazioni per l'unione file raccolte dalla callexecatt
		record.setAttribute("impostazioniUnioneFile", impostazioniUnioneFile);
			
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");				
		lNuovaPropostaAtto2CompletaDataSource.addParam("nomeFileUnioneOmissis", nomeFileUnioneOmissis);
		lNuovaPropostaAtto2CompletaDataSource.addParam("isVersXPubbl", "true");
		lNuovaPropostaAtto2CompletaDataSource.addParam("flgAttivaSceltaPosizioneAllegatiUniti", getFlgAttivaSceltaPosizioneAllegatiUniti() ? "true" : "");
		Layout.showWaitPopup("Generazione del file unione (vers. per pubbl.) in corso...");		
		lNuovaPropostaAtto2CompletaDataSource.executecustom("unioneFile", record, new DSCallback() {
	
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				Layout.hideWaitPopup();
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record recordUnioneFile = response.getData()[0];
					if(callback != null) {
						callback.execute(recordUnioneFile);
					}					
				}	
			}
		});
	}

	public void preview(final Record recordPreview) {
		previewWithCallback(recordPreview, null);
	}
	
	public void previewWithCallback(final Record recordPreview, final ServiceCallback<Record> closeCallback) {
		if (recordPreview.getAttribute("nomeFile") != null && recordPreview.getAttribute("nomeFile").endsWith(".pdf")) {

			new PreviewWindow(recordPreview.getAttribute("uri"), false, new InfoFileRecord(recordPreview.getAttributeAsRecord("infoFile")), "FileToExtractBean",	recordPreview.getAttribute("nomeFile")) {
			
				@Override
				public void manageCloseClick() {
					super.manageCloseClick();
					if(closeCallback != null) {
						closeCallback.execute(recordPreview);
					}
				};
				
				@Override
				public boolean isModal() {
					return isEnablePreviewModal();
				}
				
			};
		} else {
			Record lRecord = new Record();
			lRecord.setAttribute("displayFilename", recordPreview.getAttribute("nomeFile"));
			lRecord.setAttribute("uri", recordPreview.getAttribute("uri"));
			lRecord.setAttribute("sbustato", "false");
			lRecord.setAttribute("remoteUri", "false");
			DownloadFile.downloadFromRecord(lRecord, "FileToExtractBean");
			if(closeCallback != null) {
				closeCallback.execute(recordPreview);
			}
		}
	}
	
	public void modificaCodAttoCMTO(final ServiceCallback<Record> callback) {
		Record lRecord = new Record();
		lRecord.setAttribute("idDocPrimario", getValueAsString("idDocPrimario"));
		lRecord.setAttribute("tipoDocumento", getValueAsString("tipoDocumento"));
		lRecord.setAttribute("tipoAffidamento", getValueAsString("tipoAffidamento"));
		lRecord.setAttribute("materiaTipoAtto", getValueAsString("materiaTipoAtto"));
		lRecord.setAttribute("desMateriaTipoAtto", getValueAsString("desMateriaTipoAtto"));
		lRecord.setAttribute("flgLLPP", getValueAsString("flgLLPP"));
		lRecord.setAttribute("annoProgettoLLPP", getValueAsString("annoProgettoLLPP"));
		lRecord.setAttribute("numProgettoLLPP", getValueAsString("numProgettoLLPP"));
		lRecord.setAttribute("flgBeniServizi", getValueAsString("flgBeniServizi"));		
		lRecord.setAttribute("annoProgettoBeniServizi", getValueAsString("annoProgettoBeniServizi"));
		lRecord.setAttribute("numProgettoBeniServizi", getValueAsString("numProgettoBeniServizi"));
		new ModificaCodAttoCMTOPopup(lRecord, callback);		
	}
	
	public void controllaTotali(boolean afterLoadDati) {
		//TODO Errore nella somma dei fl 
		//Sarebbe preferibile fare le somme utilizzando gli interi: basta moltiplicare per 100 gli importi, togliendo la virgola prima delle due cifre decimali. 
		//Una volta fatta la somma bisogna riaggiungere la virgola.		
		String pattern = "#,##0.00";
		float totaleEntrateAurigaCorrente = 0;
		float totaleUsciteAurigaCorrente = 0;
		float totaleEntrateSIBCorrente = 0;
		float totaleUsciteSIBCorrente = 0;
		float totaleEntrateAurigaContoCapitale = 0;
		float totaleUsciteAurigaContoCapitale = 0;
		float totaleEntrateSIBContoCapitale = 0;
		float totaleUsciteSIBContoCapitale = 0;
		if(listaInvioDatiSpesaCorrenteItem != null && listaInvioDatiSpesaCorrenteItem.getValueAsRecordList() != null) {
			for(int i = 0; i < listaInvioDatiSpesaCorrenteItem.getValueAsRecordList().getLength(); i++) {
				Record record = listaInvioDatiSpesaCorrenteItem.getValueAsRecordList().get(i);
				String flgEntrataUscita = record.getAttribute("flgEntrataUscita") != null ? record.getAttribute("flgEntrataUscita") : "";
				float importo = 0;
				if(record.getAttribute("importo") != null && !"".equals(record.getAttribute("importo"))) {
					importo = new Float(NumberFormat.getFormat(pattern).parse((String) record.getAttribute("importo"))).floatValue();			
				}
				if("E".equals(flgEntrataUscita)) {
					totaleEntrateAurigaCorrente += importo;
				} else if("U".equals(flgEntrataUscita)) {
					totaleUsciteAurigaCorrente += importo;
				}
			}
		}
		if(listaDatiContabiliSIBCorrenteItem != null && listaDatiContabiliSIBCorrenteItem.getValueAsRecordList() != null) {
			for(int i = 0; i < listaDatiContabiliSIBCorrenteItem.getValueAsRecordList().getLength(); i++) {
				Record record = listaDatiContabiliSIBCorrenteItem.getValueAsRecordList().get(i);
				String flgEntrataUscita = record.getAttribute("flgEntrataUscita") != null ? record.getAttribute("flgEntrataUscita") : "";
				float importo = 0;
				if(record.getAttribute("importo") != null && !"".equals(record.getAttribute("importo"))) {
					importo = new Float(NumberFormat.getFormat(pattern).parse((String) record.getAttribute("importo"))).floatValue();			
				}
				if("E".equals(flgEntrataUscita)) {
					totaleEntrateSIBCorrente += importo;
				} else if("U".equals(flgEntrataUscita)) {
					totaleUsciteSIBCorrente += importo;
				}
			}
		}
		if(listaInvioDatiSpesaContoCapitaleItem != null && listaInvioDatiSpesaContoCapitaleItem.getValueAsRecordList() != null) {
			for(int i = 0; i < listaInvioDatiSpesaContoCapitaleItem.getValueAsRecordList().getLength(); i++) {
				Record record = listaInvioDatiSpesaContoCapitaleItem.getValueAsRecordList().get(i);
				String flgEntrataUscita = record.getAttribute("flgEntrataUscita") != null ? record.getAttribute("flgEntrataUscita") : "";
				float importo = 0;
				if(record.getAttribute("importo") != null && !"".equals(record.getAttribute("importo"))) {
					importo = new Float(NumberFormat.getFormat(pattern).parse((String) record.getAttribute("importo"))).floatValue();			
				}
				if("E".equals(flgEntrataUscita)) {
					totaleEntrateAurigaContoCapitale += importo;
				} else if("U".equals(flgEntrataUscita)) {
					totaleUsciteAurigaContoCapitale += importo;
				}
			}
		}
		if(listaDatiContabiliSIBContoCapitaleItem != null && listaDatiContabiliSIBContoCapitaleItem.getValueAsRecordList() != null) {
			for(int i = 0; i < listaDatiContabiliSIBContoCapitaleItem.getValueAsRecordList().getLength(); i++) {
				Record record = listaDatiContabiliSIBContoCapitaleItem.getValueAsRecordList().get(i);
				String flgEntrataUscita = record.getAttribute("flgEntrataUscita") != null ? record.getAttribute("flgEntrataUscita") : "";
				float importo = 0;
				if(record.getAttribute("importo") != null && !"".equals(record.getAttribute("importo"))) {
					importo = new Float(NumberFormat.getFormat(pattern).parse((String) record.getAttribute("importo"))).floatValue();			
				}
				if("E".equals(flgEntrataUscita)) {
					totaleEntrateSIBContoCapitale += importo;
				} else if("U".equals(flgEntrataUscita)) {
					totaleUsciteSIBContoCapitale += importo;
				}
			}
		}
		
		totaleEntrateAurigaCorrente = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleEntrateAurigaCorrente))).floatValue();
		totaleUsciteAurigaCorrente = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleUsciteAurigaCorrente))).floatValue();
		totaleEntrateSIBCorrente = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleEntrateSIBCorrente))).floatValue();
		totaleUsciteSIBCorrente = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleUsciteSIBCorrente))).floatValue();
		totaleEntrateAurigaContoCapitale = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleEntrateAurigaContoCapitale))).floatValue();
		totaleUsciteAurigaContoCapitale = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleUsciteAurigaContoCapitale))).floatValue();
		totaleEntrateSIBContoCapitale = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleEntrateSIBContoCapitale))).floatValue();
		totaleUsciteSIBContoCapitale = new Float(NumberFormat.getFormat(pattern).parse(NumberFormat.getFormat(pattern).format(totaleUsciteSIBContoCapitale))).floatValue();
		
		ArrayList<String> warningMessages = new ArrayList<String>();
		if((isModalitaGrigliaCorrente() && totaleUsciteAurigaCorrente > 0 && totaleUsciteSIBCorrente > 0 && totaleUsciteAurigaCorrente != totaleUsciteSIBCorrente) || 
		   (isModalitaGrigliaContoCapitale() && totaleUsciteAurigaContoCapitale > 0 && totaleUsciteSIBContoCapitale > 0 && totaleUsciteAurigaContoCapitale != totaleUsciteSIBContoCapitale)) {
			warningMessages.add("la spesa indicata su SIB non coincide con quella compilata in Auriga");
		} 
		if((isModalitaGrigliaCorrente() && totaleEntrateAurigaCorrente > 0 && totaleEntrateSIBCorrente > 0 && totaleEntrateAurigaCorrente != totaleEntrateSIBCorrente) || 
		   (isModalitaGrigliaContoCapitale() && totaleEntrateAurigaContoCapitale > 0 && totaleEntrateSIBContoCapitale > 0 && totaleEntrateAurigaContoCapitale != totaleEntrateSIBContoCapitale)) {
			warningMessages.add("il totale di entrate indicato in SIB non coincide con quello delle entrate indicate in Auriga");
		}
		if(afterLoadDati) {
			if((isModalitaGrigliaCorrente() && totaleUsciteAurigaCorrente > 0 && totaleEntrateAurigaCorrente > 0 && totaleUsciteAurigaCorrente != totaleEntrateAurigaCorrente) || 
			   (isModalitaGrigliaContoCapitale() && totaleUsciteAurigaContoCapitale > 0 && totaleEntrateAurigaContoCapitale > 0 && totaleUsciteAurigaContoCapitale != totaleEntrateAurigaContoCapitale)) {
				warningMessages.add("il totale di entrate e uscite indicati in Auriga non coincidono come in genere dovrebbe essere");
			} 
			if((totaleUsciteSIBCorrente > 0 && totaleEntrateSIBCorrente > 0 && totaleUsciteSIBCorrente != totaleEntrateSIBCorrente) || 
			   (totaleUsciteSIBContoCapitale > 0 && totaleEntrateSIBContoCapitale > 0 && totaleUsciteSIBContoCapitale != totaleEntrateSIBContoCapitale)) {
				warningMessages.add("il totale di entrate e uscite indicati in SIB non coincidono come in genere dovrebbe essere");
			}
		}
		if(warningMessages.size() > 0) {
			StringBuffer buffer = new StringBuffer();
			buffer.append("<ul>");
			for(int i = 0; i < warningMessages.size(); i++) {
				buffer.append("<li>" + warningMessages.get(i) + "</li>");			
			}
			buffer.append("</ul>");			
			SC.warn(buffer.toString());
		}
	}
	
	@Override
	public void clearTabErrors() {
		clearTabErrors(tabSet);
	}
	
	@Override
	public void clearErrors() {
		super.clearErrors();
		//TODO aggiungere anche le altre gridItem
		if(listaAllegatiItem != null && (listaAllegatiItem instanceof AllegatiGridItem)) {
			((AllegatiGridItem) listaAllegatiItem).clearErrors();
		}		
		if(listaDatiContabiliADSPItem != null && (listaDatiContabiliADSPItem instanceof ListaDatiContabiliADSPItem)) {
			((ListaDatiContabiliADSPItem) listaDatiContabiliADSPItem).clearErrors();
		}
		if(datiLiquidazioneAVBItem != null && (datiLiquidazioneAVBItem instanceof ListaDatiLiquidazioneAVBItem)) {
			((ListaDatiLiquidazioneAVBItem) datiLiquidazioneAVBItem).clearErrors();
		}
	}
	
	@Override
	public void showTabErrors() {
		showTabErrors(tabSet);
	}
	
	@Override
	public void showTabErrors(TabSet tabSet) {
		super.showTabErrors(tabSet);
		if(listaAllegatiItem != null && (listaAllegatiItem instanceof AllegatiGridItem)) {
			Map errors = ((AllegatiGridItem) listaAllegatiItem).getMapErrors();
			if(errors != null && errors.size() > 0) {
				tabSet.showTabErrors(_TAB_ALLEGATI_ID);	
			}			
		}
		if(listaDatiContabiliADSPItem != null && (listaDatiContabiliADSPItem instanceof ListaDatiContabiliADSPItem)) {			
			Map errors = ((ListaDatiContabiliADSPItem) listaDatiContabiliADSPItem).getMapErrors();
			if(errors != null && errors.size() > 0) {
				tabSet.showTabErrors(_TAB_DATI_CONTABILI_ADSP_ID);	
			}
		}
		if (attributiAddDocTabs != null) {
			for (String key : attributiAddDocTabs.keySet()) {
				if (attributiAddDocDetails != null && attributiAddDocDetails.get(key) != null) {
					attributiAddDocDetails.get(key).showTabErrors(tabSet);
				}
			}
		}
	}	
	
	public boolean isAttivoSIB() {
		String lSistAMC = AurigaLayout.getParametroDB("SIST_AMC");
		return lSistAMC != null && "SIB".equalsIgnoreCase(lSistAMC);
	}
	
	public boolean isAttivoContabilia() {
		String lSistAMC = AurigaLayout.getParametroDB("SIST_AMC");
		return lSistAMC != null && ("CONTABILIA".equalsIgnoreCase(lSistAMC) || "CONTABILIA2".equalsIgnoreCase(lSistAMC));
	}
	
	public boolean isAttivoSICRA() {
		String lSistAMC = AurigaLayout.getParametroDB("SIST_AMC");
		return lSistAMC != null && "SICRA".equalsIgnoreCase(lSistAMC);
	}
	
	public class HeaderNuovaPropostaAtto2CompletaDetailSection extends HeaderDetailSection {

		public HeaderNuovaPropostaAtto2CompletaDetailSection(String pTitle, boolean pCanCollapse, boolean pShowOpen, boolean pIsRequired, DynamicForm... forms) {
			super(pTitle, pCanCollapse, pShowOpen, pIsRequired, forms);
		}

		@Override
		public boolean showFirstCanvasWhenEmptyAfterOpen() {
			return true;
		}
	}
		  
	public class NuovaPropostaAtto2CompletaDetailSection extends DetailSection {

		public NuovaPropostaAtto2CompletaDetailSection(String pTitle, boolean pCanCollapse, boolean pShowOpen, boolean pIsRequired, DynamicForm... forms) {
			super(pTitle, pCanCollapse, pShowOpen, pIsRequired, forms);
		}

		@Override
		public boolean showFirstCanvasWhenEmptyAfterOpen() {
			return true;
		}
	}
	
	public void afterShow() {
		
	}
	
	@Override
	protected void onDestroy() {
		if(saveModelloWindow != null) {
			saveModelloWindow.destroy();
		}
		if(modelliDS != null) {
			modelliDS.destroy();
		}
		if(vm != null) {
			HashSet<DetailSection> setDetailSections = new HashSet<DetailSection>();
			for (DynamicForm form : vm.getMembers()) {
				if(form.getDetailSection() != null) {
					setDetailSections.add(form.getDetailSection());
				}
				for (FormItem item : form.getFields()) {
					if (item != null) {
						if (item instanceof ReplicableItem) {
							((ReplicableItem)item).manageOnDestroy();
						} else if (item instanceof GridItem) {
							((GridItem)item).manageOnDestroy();
						} else if (item instanceof IEditorItem) {
							((IEditorItem)item).manageOnDestroy();
						} else if (item instanceof DocumentItem) {
							((DocumentItem)item).manageOnDestroy();
						} 						
					}
				}	
				form.destroy();
			}		
			for (DetailSection section : setDetailSections) {
				section.destroy();
			}	
			try { 
				vm.destroy(); 
			} catch(Exception e) {				
			}
		}
		if (attributiAddDocDetails != null) {
			for (String key : attributiAddDocDetails.keySet()) {
				if (attributiAddDocDetails.get(key) != null) {
					attributiAddDocDetails.get(key).destroy();
				}
			}
		}
		super.onDestroy();
	}
	
	/*
	public void recuperaIdUdAttoDeterminaAContrarre(final ServiceCallback<String> callback) {
		if(showFlgAttoRifASistemaItem() && _FLG_NO.equalsIgnoreCase(getValueAsString("flgAttoRifASistema"))) {
			return;
		}
		String categoriaReg = categoriaRegAttoDeterminaAContrarreItem.getValueAsString() != null ? categoriaRegAttoDeterminaAContrarreItem.getValueAsString() : "";
		String sigla = siglaAttoDeterminaAContrarreItem.getValueAsString() != null ? siglaAttoDeterminaAContrarreItem.getValueAsString() : "";
		String numero = numeroAttoDeterminaAContrarreItem.getValueAsString() != null ? numeroAttoDeterminaAContrarreItem.getValueAsString() : "";
		String anno = annoAttoDeterminaAContrarreItem.getValueAsString() != null ? annoAttoDeterminaAContrarreItem.getValueAsString() : "";									
		if (("PG".equals(categoriaReg) || !"".equals(sigla)) && !"".equals(numero) && !"".equals(anno)) {
			Record lRecord = new Record();			
			lRecord.setAttribute("categoriaRegAttoDeterminaAContrarre", categoriaReg);
			lRecord.setAttribute("siglaAttoDeterminaAContrarre", sigla);
			lRecord.setAttribute("numeroAttoDeterminaAContrarre", numero);
			lRecord.setAttribute("annoAttoDeterminaAContrarre", anno);
			new OneCallGWTRestDataSource("NuovaPropostaAtto2CompletaDataSource").performCustomOperation("recuperaIdUdAttoDeterminaAContrarre", getRecordToSave(), new DSCallback() {							
				@Override
				public void execute(DSResponse response, Object rawData, DSRequest request) {
					if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
						if(callback != null) {
							callback.execute(response.getData()[0].getAttributeAsString("idUdAttoDeterminaAContrarre"));
						} 
					} else {
						if(callback != null) {
							callback.execute(null);
						} 
					}
				}
			});
		}		
	}	
	
	private void setFormValuesFromRecordArchivio(Record record) {
		attoRiferimentoForm.clearErrors(true);
		attoRiferimentoForm.setValue("idUdAttoDeterminaAContrarre", record.getAttribute("idUdFolder"));
		String segnaturaXOrd = record.getAttribute("segnaturaXOrd");	
		if(segnaturaXOrd != null) {
			StringSplitterClient st = new StringSplitterClient(segnaturaXOrd, "-");						
			if(st.getTokens()[0] != null) {
				if("1".equals(st.getTokens()[0])) {
					attoRiferimentoForm.setValue("categoriaRegAttoDeterminaAContrarre", "PG");							
				} else if("4".equals(st.getTokens()[0])) {
					attoRiferimentoForm.setValue("categoriaRegAttoDeterminaAContrarre", "R");						
				}
			}
			attoRiferimentoForm.setValue("siglaAttoDeterminaAContrarre", st.getTokens()[1] != null ? st.getTokens()[1].trim() : null);
			attoRiferimentoForm.setValue("annoAttoDeterminaAContrarre", st.getTokens()[2] != null ? st.getTokens()[2].trim() : null);
			attoRiferimentoForm.setValue("numeroAttoDeterminaAContrarre", st.getTokens()[3] != null ? st.getTokens()[3].trim() : null);
		}
		attoRiferimentoForm.markForRedraw();
	}	
	
	public class AttoDeterminaAContrarreLookupArchivio extends LookupArchivioPopup {

		public AttoDeterminaAContrarreLookupArchivio(Record record, String idRootNode) {
			super(record, idRootNode, true);
		}
		
		@Override
		public String getWindowTitle() {
			return "Seleziona da archivio";
		}
		
		@Override
		public String getFinalita() {
			return "SEL_ATTI";
		}

		@Override
		public void manageLookupBack(Record record) {
			setFormValuesFromRecordArchivio(record);
		}

		@Override
		public void manageMultiLookupBack(Record record) {

		}

		@Override
		public void manageMultiLookupUndo(Record record) {

		}
	}
	*/
	
	public class InvioMailMultiLookupRubricaEmailPopup extends LookupRubricaEmailPopup {

		private DynamicForm form;
		private String fieldName;
		
		private HashMap<String, Integer> indirizzoRefCount = new HashMap<String, Integer>();

		public InvioMailMultiLookupRubricaEmailPopup(DynamicForm pForm, String pFieldName) {
			super(false);
			this.form = pForm;
			this.fieldName = pFieldName;
			String value = form.getValueAsString(fieldName);
			if (value != null && !value.equals("")) {
				StringSplitterClient st = new StringSplitterClient(value, ";");
				for (int i = 0; i < st.getTokens().length; i++) {
					String indirizzo = st.getTokens()[i];
					incrementaIndirizzoRefCount(indirizzo);
				}
			}
		}

		@Override
		public void manageLookupBack(Record record) {
		}

		@Override
		public void manageMultiLookupBack(Record record) {
			if ("G".equals(record.getAttributeAsString("tipoIndirizzo"))) {
				GWTRestDataSource datasource = new GWTRestDataSource("AnagraficaRubricaEmailDataSource", "idVoceRubrica", FieldType.TEXT);
				datasource.performCustomOperation("trovaMembriGruppo", record, new DSCallback() {

					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record record = response.getData()[0];
							RecordList listaMembri = record.getAttributeAsRecordList("listaMembri");
							if (listaMembri != null && listaMembri.getLength() > 0) {
								for (int i = 0; i < listaMembri.getLength(); i++) {
									String indirizzo = listaMembri.get(i).getAttribute("indirizzoEmail");
									incrementaIndirizzoRefCount(indirizzo);
									form.setValue(fieldName, appendIndirizzoEmail(getValueAsString(fieldName), indirizzo));
								}
							}
						}
					}
				}, new DSRequest());
			} else {
				String indirizzo = record.getAttribute("indirizzoEmail");
				incrementaIndirizzoRefCount(indirizzo);
				form.setValue(fieldName, appendIndirizzoEmail(getValueAsString(fieldName), indirizzo));
			}
		}

		@Override
		public void manageMultiLookupUndo(Record record) {
			if ("G".equals(record.getAttributeAsString("tipoIndirizzo"))) {
				GWTRestDataSource datasource = new GWTRestDataSource("AnagraficaRubricaEmailDataSource", "idVoceRubrica", FieldType.TEXT);
				datasource.performCustomOperation("trovaMembriGruppo", record, new DSCallback() {

					@Override
					public void execute(DSResponse response, Object rawData, DSRequest request) {
						if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
							Record record = response.getData()[0];
							RecordList listaMembri = record.getAttributeAsRecordList("listaMembri");
							if (listaMembri != null && listaMembri.getLength() > 0) {
								for (int i = 0; i < listaMembri.getLength(); i++) {
									String indirizzo = listaMembri.get(i).getAttribute("indirizzoEmail");
									decrementaIndirizzoRefCount(indirizzo);
									if (!indirizzoRefCount.containsKey(indirizzo)) {
										form.setValue(fieldName, removeIndirizzoEmail(getValueAsString(fieldName), indirizzo));
									}
								}
							}
						}
					}
				}, new DSRequest());
			} else {
				String indirizzo = record.getAttribute("indirizzoEmail");
				decrementaIndirizzoRefCount(indirizzo);
				if (!indirizzoRefCount.containsKey(indirizzo)) {
					form.setValue(fieldName, removeIndirizzoEmail(getValueAsString(fieldName), indirizzo));
				}
			}
		}
		
		// Appende a str la stringa strToAppend, preceduta dal carattere ; se questo non è presente alla fine di str
		private String appendIndirizzoEmail(String str, String strToAppend) {
			String res = "";
			if (str == null || str.equals("")) {
				res = strToAppend;
			} else if (strToAppend != null && !strToAppend.equals("") && !str.toLowerCase().contains(strToAppend.toLowerCase())) {
				String lastChar = str.substring(str.length() - 1);
				if (lastChar.equalsIgnoreCase(";")) {
					res = str + strToAppend;
				} else {
					res = str + ";" + strToAppend;
				}
			} else {
				res = str;
			}
			return res;
		}

		private String removeIndirizzoEmail(String str, String strToRemove) {
			String res = "";
			if (str != null && !str.equals("") && strToRemove != null && !strToRemove.equals("") && str.toLowerCase().contains(strToRemove.toLowerCase())) {
				StringSplitterClient st = new StringSplitterClient(str, ";");
				for (int i = 0; i < st.getTokens().length; i++) {
					if (!st.getTokens()[i].equalsIgnoreCase(strToRemove)) {
						res += st.getTokens()[i];
						if (i < (st.getTokens().length - 1)) {
							res += ";";
						}
					}
				}
			} else {
				res = str;
			}
			return res;
		}

		private void incrementaIndirizzoRefCount(String indirizzo) {
			if (indirizzoRefCount.containsKey(indirizzo)) {
				indirizzoRefCount.put(indirizzo, indirizzoRefCount.get(indirizzo) + 1);
			} else {
				indirizzoRefCount.put(indirizzo, new Integer(1));
			}
		}

		private void decrementaIndirizzoRefCount(String indirizzo) {
			if (indirizzoRefCount.containsKey(indirizzo) && indirizzoRefCount.get(indirizzo).intValue() > 1) {
				indirizzoRefCount.put(indirizzo, indirizzoRefCount.get(indirizzo) - 1);
			} else {
				indirizzoRefCount.remove(indirizzo);
			}
		}
	}
	
	public boolean isPresenteAttributoCustomCablato(String attrName) {
		return attributiCustomCablati != null && attributiCustomCablati.get(attrName) != null;
	}
	
	public boolean showAttributoCustomCablato(String attrName) {
		return attributiCustomCablati == null || isPresenteAttributoCustomCablato(attrName);
	}
		
	public String getLabelAttributoCustomCablato(String attrName) {
		return isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("attrLabel") : null;
	}

	public boolean getFlgObbligatorioAttributoCustomCablato(String attrName) {
		String flgObbligatorio = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgObbligatorio") : null;
		return attributiCustomCablati == null || (flgObbligatorio != null && "1".equals(flgObbligatorio));
	}
		
	public Integer getMaxNumValoriAttributoCustomCablato(String attrName) {
		String maxNumValori = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("maxNumValori") : null;
		return maxNumValori != null && !"".equals(maxNumValori) ? Integer.parseInt(maxNumValori) : null;
	}

	public String[] getValoriPossibiliAttributoCustomCablato(String attrName) {
		String valoriPossibili = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("valoriPossibili") : null;
		if(valoriPossibili != null) {
			StringSplitterClient st = new StringSplitterClient(valoriPossibili, "|*|");
			return st.getTokens();
		}
		return new String[0];
	}

	public String getTipoLoadComboAttributoCustomCablato(String attrName) {
		return isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("tipoLoadCombo") : null;	
	}
		
	public String getAltriParametriLoadComboAttributoCustomCablato(String attrName) {
		return isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("altriParametriLoadCombo") : null;	
	}

	public boolean getFlgSoloVldLoadComboAttributoCustomCablato(String attrName) {
		String flgSoloVldLoadCombo = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgSoloVldLoadCombo") : null;
		return flgSoloVldLoadCombo != null && "1".equals(flgSoloVldLoadCombo);
	}

	public String getValoreFissoAttributoCustomCablato(String attrName) {
		return isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("valoreFisso") : null;
	}
	
	public boolean getValoreFissoAsBooleanAttributoCustomCablato(String attrName) {
		String valoreFisso = getValoreFissoAttributoCustomCablato(attrName);
		return valoreFisso != null && ("1".equals(valoreFisso) || "true".equalsIgnoreCase(valoreFisso));
	}
	
	public boolean getFlgEditabileAttributoCustomCablato(String attrName) {
		String flgEditabile = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgEditabile") : null;
		return attributiCustomCablati == null || (flgEditabile != null && "1".equals(flgEditabile));
	}
	
	public boolean getFlgMostraFirmatarioAttributoCustomCablato(String attrName) {
		String flgMostraFirmatario = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgMostraFirmatario") : null;
		return attributiCustomCablati == null || (flgMostraFirmatario != null && "1".equals(flgMostraFirmatario));
	}
	
	public boolean getFlgMostraVistoInRitornoIterAttributoCustomCablato(String attrName) {
		String flgMostraVistoInRitornoIter = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgMostraVistoInRitornoIter") : null;
		return attributiCustomCablati == null || (flgMostraVistoInRitornoIter != null && "1".equals(flgMostraVistoInRitornoIter));
	}
	
	public String getFlgMostraMotiviAttributoCustomCablato(String attrName) {
		String flgMostraMotivi = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgMostraMotivi") : null;
		return attributiCustomCablati == null ? _MANDATORY : flgMostraMotivi;
	}
	
	public Integer getAltezzaInRigheAttributoCustomCablato(String attrName) {
		String altezzaInRighe = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("altezzaInRighe") : null;
		return altezzaInRighe != null && !"".equals(altezzaInRighe) ? Integer.parseInt(altezzaInRighe) : null;
	}	
	
	public LinkedHashMap<String, String> getValueMapAttributoCustomCablato(String attrName) {
		String valoriPossibili = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("valoriPossibili") : null;
		String decodificheValoriPossibili = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("decodificheValoriPossibili") : null;
		if(valoriPossibili != null && decodificheValoriPossibili != null) {
			LinkedHashMap<String, String> valueMap = new LinkedHashMap<String, String>();
			StringSplitterClient stValoriPossibili = new StringSplitterClient(valoriPossibili, "|*|");
			StringSplitterClient stDecodificheValoriPossibili = new StringSplitterClient(decodificheValoriPossibili, "|*|");
			if(stValoriPossibili.getTokens().length == stDecodificheValoriPossibili.getTokens().length) {
				for(int i = 0; i < stValoriPossibili.getTokens().length; i++) {				
					valueMap.put(stValoriPossibili.getTokens()[i], stDecodificheValoriPossibili.getTokens()[i]);
				}
			} else {
				for(int i = 0; i < stValoriPossibili.getTokens().length; i++) {					
					valueMap.put(stValoriPossibili.getTokens()[i], stValoriPossibili.getTokens()[i]);
				}				
			}	
			return valueMap;
		} else if(valoriPossibili != null) {
			LinkedHashMap<String, String> valueMap = new LinkedHashMap<String, String>();
			StringSplitterClient stValoriPossibili = new StringSplitterClient(valoriPossibili, "|*|");
			for(int i = 0; i < stValoriPossibili.getTokens().length; i++) {					
				valueMap.put(stValoriPossibili.getTokens()[i], stValoriPossibili.getTokens()[i]);
			}
			return valueMap;
		}
		return new LinkedHashMap<String, String>();
	}
	
	public boolean getFlgInibitaAggiuntaRigheAttributoCustomCablato(String attrName) {
		String flgInibitaAggiuntaRighe = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgInibitaAggiuntaRighe") : null;
		return flgInibitaAggiuntaRighe != null && "1".equals(flgInibitaAggiuntaRighe);
	}
	
	public boolean getFlgInibitaCancellazioneRigheAttributoCustomCablato(String attrName) {
		String flgInibitaCancellazioneRighe = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgInibitaCancellazioneRighe") : null;
		return flgInibitaCancellazioneRighe != null && "1".equals(flgInibitaCancellazioneRighe);
	}
	
	public boolean skipObbligForEmptySelectAttributoCustomCablato(String attrName) {
		String flgSkipObbligForEmptySelect = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgSkipObbligForEmptySelect") : null;
		return flgSkipObbligForEmptySelect != null && "1".equals(flgSkipObbligForEmptySelect);
	}
	
	public boolean getFlgAbilitaIniezioneCkEditorDaFileAttributoCustomCablato(String attrName) {
		String flgAbilitaIniezioneCkEditorDaFile = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgAbilitaIniezioneCkEditorDaFile") : null;
		return flgAbilitaIniezioneCkEditorDaFile != null && "1".equals(flgAbilitaIniezioneCkEditorDaFile);
	}
	
	public boolean getFlgIgnoraGestioneOmissisAttributoCustomCablato(String attrName) {
		String flgIgnoraGestioneOmissis = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgIgnoraGestioneOmissis") : null;
		return flgIgnoraGestioneOmissis != null && "1".equals(flgIgnoraGestioneOmissis);
	}
	
	public boolean getFlgAbilitaSelectUniqueValueAttributoCustomCablato(String attrName) {
		String flgAbilitaSelectUniqueValue = isPresenteAttributoCustomCablato(attrName) ? attributiCustomCablati.get(attrName).getAttribute("flgAbilitaSelectUniqueValue") : null;
		return flgAbilitaSelectUniqueValue != null && "1".equals(flgAbilitaSelectUniqueValue);
	}
	
	public void aggiornaStato(String codStato, Record recordVersFileUnione, final ServiceCallback<Record> callback) {
		Record record = getRecordToSave();
		record.setAttribute("idUd", getValueAsString("idUd"));
		if(recordVersFileUnione != null) {
			record.setAttribute("uriFilePrimario", recordVersFileUnione.getAttribute("uriVersIntegrale"));
			record.setAttribute("uriDocGeneratoFormatoOdt", recordVersFileUnione.getAttribute("uriFileOdtGenerato"));
			record.setAttribute("nomeFilePrimario", recordVersFileUnione.getAttribute("nomeFileVersIntegrale"));
			record.setAttribute("infoFilePrimario", recordVersFileUnione.getAttributeAsRecord("infoFileVersIntegrale"));
			record.setAttribute("uriFilePrimarioOmissis", recordVersFileUnione.getAttribute("uri"));
			record.setAttribute("nomeFilePrimarioOmissis", recordVersFileUnione.getAttribute("nomeFile"));
			record.setAttribute("infoFilePrimarioOmissis", recordVersFileUnione.getAttributeAsRecord("infoFile"));
		}
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		lNuovaPropostaAtto2CompletaDataSource.extraparam.put("codStato", codStato);
		lNuovaPropostaAtto2CompletaDataSource.executecustom("aggiornaStato", record, new DSCallback() {
			
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record result = response.getData()[0];
					Layout.addMessage(new MessageBean("Stato aggiornato con successo", "", MessageType.INFO));
					if(callback != null) {
						callback.execute(result);
					}
				}
			}
		});
	}
	
	public void recuperaListaEmendamenti(final ServiceCallback<Record> callback) {
		// Verifico se ho già caricatto gli emendamenti
		String idUd = getValueAsString("idUd");
		Record recordToPass = new Record();
		recordToPass.setAttribute("idUd", idUd);
		final GWTRestDataSource lNuovaPropostaAtto2CompletaDataSource = new GWTRestDataSource("NuovaPropostaAtto2CompletaDataSource");
		lNuovaPropostaAtto2CompletaDataSource.executecustom("recuperaListaEmendamenti", recordToPass, new DSCallback() {

			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if (response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record result = response.getData()[0];
					RecordList listaEmendamenti = result.getAttributeAsRecordList("listaEmendamenti");
					boolean listaEmendamentiBloccoRiordinoAut = result.getAttributeAsBoolean("listaEmendamentiBloccoRiordinoAut").booleanValue();
					listaEmendamentiItem.setValue(listaEmendamenti);
					listaEmendamentiBloccoRiordinoAutItem.setValue(listaEmendamentiBloccoRiordinoAut);
					if (callback !=  null) {
						callback.execute(result);
					}
				}
			}
		});
	}
	
	public void apriListaEmendamenti() {
		RecordList listaEmendamenti = hiddenForm.getValueAsRecordList("listaEmendamenti");
		boolean listaEmendamentiBloccoRiordinoAut = Boolean.parseBoolean(hiddenForm.getValueAsString("listaEmendamentiBloccoRiordinoAut"));
		
		if (listaEmendamenti != null && listaEmendamenti.getLength() > 0) {
			boolean isSubList = listaEmendamenti.get(0).getAttribute("nroSubEmendamento") != null && !"".equals(listaEmendamenti.get(0).getAttributeAsString("nroSubEmendamento"));
			listaEmendamentiPopup = new ListaEmendamentiPopup("Lista emendamenti", "lista_emendamenti_popup", tabSet, instance, isSubList, listaEmendamentiBloccoRiordinoAut) {

				@Override
				public void onClickOkButton(Record record, DSCallback callback) {
					
				}
			};  
			Record recordToPass = new Record();
			recordToPass.setAttribute("listaEmendamenti", listaEmendamenti);
			listaEmendamentiPopup.initContent(recordToPass);
			listaEmendamentiPopup.show();
		} else {
			Layout.addMessage(new MessageBean("Nessun emendamento trovato", "", MessageType.ERROR));
		}
	}
	
	public void apriEmendamentiWindow() {
		RecordList listaEmendamenti = hiddenForm.getValueAsRecordList("listaEmendamenti");
		if (listaEmendamenti != null && listaEmendamenti.getLength() > 0) {
			if (emendamentiWindow == null) {
				emendamentiWindow = new EmendamentiWindow("Lista emendamenti", "emendamenti_window", tabSet, instance);
				Record recordToPass = new Record();
				recordToPass.setAttribute("listaEmendamenti", listaEmendamenti);
				emendamentiWindow.initContent(recordToPass);
			}
			emendamentiWindow.show();
		} else {
			Layout.addMessage(new MessageBean("Nessun emendamento trovato", "", MessageType.ERROR));
		}
	}
	
	public static String getFLG_SI_SENZA_VLD_RIL_IMP() {
		if(AurigaLayout.isAttivoClienteCMMI()) {
			return "SI, senza validazione/rilascio impegni";
		}
		return "SI, ma senza movimenti contabili";	
	}
	
	public String[] buildCIGValueMap() {
		if(showCIGItem()) {
			List<String> listaCodCIG = new ArrayList<String>();
			RecordList listaCIG = CIGForm.getValueAsRecordList("listaCIG");
			if(listaCIG != null) {
				for(int i=0; i < listaCIG.getLength(); i++) {
					if(listaCIG.get(i).getAttribute("codiceCIG") != null &&
							!"".equals(listaCIG.get(i).getAttribute("codiceCIG"))) {
						if(!listaCodCIG.contains(listaCIG.get(i).getAttribute("codiceCIG"))) {
							listaCodCIG.add(listaCIG.get(i).getAttribute("codiceCIG"));
						}
					}
				}
			}
			return listaCodCIG.toArray(new String[listaCodCIG.size()]);
		}
		return null;
	}
	
	public RecordList buildCIGCUPRecordList() {
		if(showCIGItem() && showAttributoCustomCablato("CUP")) {
			RecordList listaCIG = CIGForm.getValueAsRecordList("listaCIG");
			if(listaCIG != null && listaCIG.getLength() > 0) {
				return listaCIG;
			}
			return new RecordList();			
		}
		return null;
	}	
	
	public DynamicForm getFormDatiContabiliADSP() {
		return datiContabiliADSPForm;
	}
	
	public boolean show_TAB_DATI_SCHEDA(){
		return true;
	}
	
	public boolean show_TAB_DATI_DISPOSITIVO(){
		return true;
	}
	
	public boolean show_TAB_DATI_DISPOSITIVO_2(){
		return true;
	}
	
	public boolean show_TAB_ALLEGATI(){
		return true;
	}
	
	public boolean show_TAB_DOC_FASC(){
		return true;
	}
	
	public boolean show_TAB_DATI_PUBBL(){
		return true;
	}
	
	public boolean show_TAB_MOVIMENTI_CONTABILI(){
		return true;
	}
	
	public boolean show_TAB_DATI_GSA(){
		return true;
	}
	
	public boolean show_TAB_DATI_SPESA_CORRENTE(){
		return true;
	}
	
	public boolean show_TAB_DATI_SPESA_CONTO_CAPITALE(){
		return true;
	}
	
	public boolean show_TAB_AGGREGATO_SMISTAMENTO_ACTA(){
		return true;
	}
	
	public boolean show_TAB_OPERE_ADSP(){
		return true;
	}
	
	public boolean show_TAB_DATI_CONTABILI_ATERSIR(){
		return true;
	}
	
	public boolean show_TAB_DATI_CONTABILI_ADSP(){
		return true;
	}
	
	public boolean show_TAB_DATI_CONTABILI_AVB(){
		return true;
	}
	
	public boolean show_TAB_DATI_TRASP_AVB(){
		return true;
	}
	
	public boolean show_TAB_DATI_LIQUIDAZIONE_AVB(){
		return true;
	}
	
	public boolean show_DETAIL_SECTION_OGGETTO(){
		return true;
	}
	
	public boolean show_DETAIL_SECTION_REGISTRAZIONE(){
		return true;
	}
	
	protected void removeTab(String idTabIn) {
		if(tabSet != null) {
			int[] listTab = null;
			int rec = 0;
			int totTab = 0;
			if (tabSet.getTabs().length > 1) {
				totTab = tabSet.getTabs().length;
				// Cerco i tab che risultano avere l'id indicato			
				for (int i = 1; i < totTab; i++) {
					if (tabSet.getTab(i).getID() != null && !tabSet.getTab(i).getID().equalsIgnoreCase("") && tabSet.getTab(i).getID().equalsIgnoreCase(idTabIn)) {
						rec++;
					}
				}						
				// Cancella i tab trovati
				if (rec > 0) {
					listTab = new int[rec];
					rec = 0;
					
					for (int i = 1; i < totTab; i++) {
						if (tabSet.getTab(i).getID() != null && !tabSet.getTab(i).getID().equalsIgnoreCase("") && tabSet.getTab(i).getID().equalsIgnoreCase(idTabIn)) {
							listTab[rec] = i;
							rec++;
						}
						
					}
					tabSet.removeTabs(listTab);
				}
			}
		}
	}
	
	public void invokeAttoInBozzaContabilitaADSP(final GWTRestDataSource lContabilitaADSPDataSource, final DSCallback callback) {
		lContabilitaADSPDataSource.performCustomOperation("attoInBozza", getRecordToSave(), new DSCallback() {							
			@Override
			public void execute(DSResponse response, Object rawData, DSRequest request) {
				if(response.getStatus() == DSResponse.STATUS_SUCCESS) {
					Record record = response.getData()[0];
					boolean ok = record.getAttributeAsBoolean("ok");										
					String message = record.getAttributeAsString("msg");
					
					if(ok) {
						statoAttoContabilitaItem.setValue(0);
					}else {
						SC.warn("Non è stato possibile cambiare lo stato dell'atto in Bozza sul sistema contabile: \nError:" + message 
								+ ".\nRiprovare o contattare l'assistenza" );
					}	
				}
				
				callback.execute(null, null, null);
			}
		}, new DSRequest());
	}
	
	protected boolean isTabDrawn(String idTabIn) {
		boolean found = false;
		if(tabSet != null) {
			if (tabSet.getTabs().length > 0) {
				// Cerco i tab che risultano avere il nome indicato
				for (int i = 0; i < tabSet.getTabs().length; i++) {
					if (tabSet.getTab(i).getID() != null && !tabSet.getTab(i).getID().equalsIgnoreCase("") && tabSet.getTab(i).getID().equalsIgnoreCase(idTabIn)) {
						found = true;
					}
				}
			}
		}
		return found;
	}
	
	public void showHideTabs() {
		
		if(tabSet != null) {
			for (Tab tab : tabSet.getTabs()) {
				if(tab != null) {
					String tabID = tab.getAttribute("tabID");
					
					// Nascondo i tab che non devo mostrare
					if(tabID.equals(_TAB_DATI_SCHEDA_ID) && !show_TAB_DATI_SCHEDA()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DATI_DISPOSITIVO_ID) && !show_TAB_DATI_DISPOSITIVO()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_DATI_DISPOSITIVO_2_ID) && !show_TAB_DATI_DISPOSITIVO_2()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_ALLEGATI_ID) && !show_TAB_ALLEGATI()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DOC_FASC_ID) && !show_TAB_DOC_FASC()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DATI_PUBBL_ID) && !show_TAB_DATI_PUBBL()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_MOVIMENTI_CONTABILI_ID) && !show_TAB_MOVIMENTI_CONTABILI()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DATI_GSA_ID) && !show_TAB_DATI_GSA()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_DATI_SPESA_CORRENTE_ID) && !show_TAB_DATI_SPESA_CORRENTE()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_DATI_SPESA_CONTO_CAPITALE_ID) && !show_TAB_DATI_SPESA_CONTO_CAPITALE()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_AGGREGATO_SMISTAMENTO_ACTA_ID) && !show_TAB_AGGREGATO_SMISTAMENTO_ACTA()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_OPERE_ADSP_ID) && !show_TAB_OPERE_ADSP()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_DATI_CONTABILI_ATERSIR_ID) && !show_TAB_DATI_CONTABILI_ATERSIR()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DATI_CONTABILI_ADSP_ID) && !show_TAB_DATI_CONTABILI_ADSP()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
	
					if(tabID.equals(_TAB_DATI_CONTABILI_AVB_ID) && !show_TAB_DATI_CONTABILI_AVB()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DATI_TRASP_AVB_ID) && !show_TAB_DATI_TRASP_AVB()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
					
					if(tabID.equals(_TAB_DATI_LIQUIDAZIONE_AVB_ID) && !show_TAB_DATI_LIQUIDAZIONE_AVB()) {
						if (isTabDrawn(tabID))
							removeTab(tabID);
					}
				}
			}
		}
	}
	
	private boolean isEnablePreviewModal() {
		return !AurigaLayout.getParametroDBAsBoolean("PREVIEW_NON_MODALE_ATTI");
	}
	
}
