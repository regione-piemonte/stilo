1        PACKAGE DMPK_UTILITY AUTHID CURRENT_USER IS
2        
3        	/****************************************************		INFORMAZIONI GENERALI		*******************************************************/
4        	/************** Argomenti delle stored per il controllo della transazione:											*******/
5        	/************** FlgRollBckFullIn -> se 1 in caso di errore viene fatta la rollback completa (non a savepoint), 					*******/
6        	/************** 				altrimenti la rollback delle sole modifiche effettuate nella stored						*******/
7        	/************** 				ATTENZIONE: la rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log			*******/
8        	/************** FlgAutoCommitIn  -> se vale 1, dopo la rollback e qualunque sia l'esito (positivo o no), la stored esegue una commit finale *****/
9        	/************** Tutte le funzioni/procedure che NON hanno gli argomenti in input FlgRollBckFullIn e FlgAutoCommitIn 				*******/
10        	/************** NON ESEGUONO AL LORO INTERNO ALCUNA COMMIT nè ROLLBACK 												*******/
11        
12        	/************** Tutte le funzioni, tranne quelle da utilizzarsi nelle select, restituiscono 1 in caso di successo, altrimenti 0		*******/
13        	/************** Tali funzioni restituiscono, in caso di result 0, un n.ro, un contesto e un messaggio di errore:					*******/
14        	/************** il n.ro è: <0 se errore ORACLE non specificamente gestito 											*******/
15        	/**************		   da 1->1000 errore "grave" (SEVERE_ERROR) gestito											*******/
16        	/**************		   >1000 errore non grave gestito														*******/
17        	/************** il contesto indica il package e/o funzione/procedura in cui si è verificato l'errore							*******/
18        
19        	procedure SetSavepoint(NomeSavepointIn IN VARCHAR2);
20        
21        	procedure RollbackToSavepoint(NomeSavepointIn IN VARCHAR2);
22            
23            	function GetConnSchema(SchemaOut OUT VARCHAR2) return PLS_INTEGER;  -- funzione per ricavare lo schema DB a cui si è connessi; restituisce 1 se tutto OK, altrimenti 0
24        
25        	/******* serve a convertire in DATE il valore di un tag XML di tipo xs:DateTime  ******/
26        	function To_Date_DateTimeXMLTag (TagValueIn 	IN 	VARCHAR2       -- valore del tag XML di tipo xs:DateTime
27        		)return DATE;								   -- in caso di errore è NULL
28        
29        	/***** serve a convertire un DATE in stringa formattata come serve per essere messo in un tag XML di tipo xs:DateTime  ******/
30        	function To_DateTimeXMLTag(DataIn			IN	DATE		-- Data da mettere in un tag XML di tipo xs:DateTime
31        		) return VARCHAR2;							-- Data formattata in modo da poter essere messa in un tag XML di tipo xs:DateTime
32        
33        	/******* serve a convertire in DATE il valore di un tag XML di tipo xs:Date  ******/
34        	function To_Date_DateXMLTag (TagValueIn 	IN 	VARCHAR2      	 --	valore del tag XML di tipo xs:Date
35        		) return DATE;								 --	in caso di errore è NULL
36        
37        	/***** serve a convertire un DATE in stringa formattata come serve per essere messo in un tag XML di tipo xs:Date  ******/
38        	function To_DateXMLTag(DataIn			IN	DATE			-- Data da mettere in un tag XML di tipo xs:Date
39        		) return VARCHAR2;							-- Data formattata in modo da poter essere messa in un tag XML di tipo xs:Date
40        
41        	/***** serve a convertire una stringa con una data dal formato DD/MM/RRRR al formato del parametro di config. FMT_STD_DATA	******/
42        	function ConvertToFmtStdData(
43        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
44        			StrDataIO			IN	OUT VARCHAR2						-- In input è la data come stringa nel formato DD/MM/RRRR
45        																-- in output è la data nel formato del parametro di config. FMT_STD_DATA
46        		) return PLS_INTEGER;											-- restituisce 1 in caso di conversione avvenuta con successo, 0 in caso di errore
47        
48        	/***** serve a convertire una stringa con una data dal formato DD/MM/RRRR HH24:MI:SS al formato del parametro di config. FMT_STD_TIMESTAMP	******/
49        	function ConvertToFmtStdTimestamp(
50        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
51        			StrTimestampIO			IN	OUT VARCHAR2					-- In input è il timestamp come stringa nel formato DD/MM/RRRR HH24:MI:SS
52        																-- in output è il timestamp nel formato del parametro di config. FMT_STD_TIMESTAMP 
53        		) return PLS_INTEGER;											-- restituisce 1 in caso di conversione avvenuta con successo, 0 in caso di errore
54        
55        	/********* serve a creare un elemento XML semplice ************/
56        	function CreaXMLElement(
57        			TagNameIn			IN		VARCHAR2,						--(obblig) Nome dell'element da creare
58        			TagValueIn			IN		VARCHAR2						-- Valore del elemento
59        		) return CLOB;
60        
61        	/******* Funzione per testare se in una certa condizione di esecuzione di una data stored procedure/function è attivo l'auditing (tracciatura nella tabella di log) *******/
62        	function TestAuditActiveOnStored(
63        			PackageNameIn		IN		VARCHAR2 DEFAULT NULL,				-- Nome dell'eventuale package cui appartiene la stored function / procedure (case-insensitive)
64        			ProcFuncNameIn		IN		VARCHAR2,						-- (obblig.) Nome della function / procedure (case-insensitive)
65        			AuditingCondIn		IN		VARCHAR2)						-- (obblig.) Indica per quale condizione di esecuzione della stored si deve tracciare se l'auditing è attivo. Valori possibili:
66        																-- SUCCESS = In caso di esito positivo;
67        																-- ERROR = In caso di errore di qualsiasi gravità;
68        																-- SEVERE_ERROR = In caso di errore "grave" (vale a dire un errore gestito con codice <1000 o errore non gestito)
69        			return PLS_INTEGER;										-- Restituisce 1 se l'auditing è attivo, altrimenti 0
70        
71        	/***** Funzione per controllare la validità del token di connessione e dell'utente associato	****/
72        	/***** ricavando, in caso di controllo positivo, utente e dominio di autenticazione 		****/
73        	function CtrlConnectionToken (
74        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
75        			IdUserOut			OUT	DMT_USERS.ID_USER%type,					-- Identificativo dell'utente che ha ottenuto il token
76        			FlgTpDominioAutOut	OUT	PLS_INTEGER,						-- Indica il tipo di dominio in cui l'utente si è autenticato/sta lavorando: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
77        			IdDominioAutOut		OUT	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,		-- Identificativo del dominio di autenticazione, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
78        			CodApplEsternaOut		OUT	DMT_CONNECTION_TOKEN.COD_APPLICAZIONE%type,	-- Codice applicazione esterna da cui è stata richiesta la connessione
79        			CodIstanzaApplEstOut	OUT	DMT_CONNECTION_TOKEN.COD_ID_ISTANZA_APPL%type, 	-- Codice istanza dell'applicazione esterna in cui è accreditato l'utente da cui è stata richiesta la connessione
80        			ErrContextOut		OUT	VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
81        			ErrCodeOut			OUT	PLS_INTEGER,						-- N.ro errore di uscita
82        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
83        			return PLS_INTEGER;										-- vale 1 in caso di successo, altrimenti 0
84        
85        	/******* funzione, utilizzabile in una query, per ottenere il dominio cui si è connessi a partire del token di connessione ******/
86        	function GetIdDominioFromConnToken(
87        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type)	-- (obblig). Codice identificativo del token di connessione
88        			return DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type;						-- Id. del dominio a cui si è connessi
89        
90        	/***** Funzione per registrare un nuovo utilizzo di un token di connessione 			******/
91        	/***** va chiamata ogni volta che si prende o si rilascia una connessione dal pool		******/
92        	function RegConnTokenUsage (
93        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
94        			FlagStartEndIn		IN	PLS_INTEGER DEFAULT 1,					-- (obblig. valori 1/0) 1=Inizio dell'uso; 0 = Fine dell'uso
95        			FlgRollBckFullIn		IN 	PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
96        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
97        			FlgAutoCommitIn		IN 	PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
98        			ErrContextOut		OUT	VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
99        			ErrCodeOut			OUT	PLS_INTEGER,						-- N.ro errore di uscita
100        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
101        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
102        
103        
104        	/***** Funzione per ricavare dal token di connessione l'identificativo dell'utente che ha ottenuto il token *****/
105        	function GetIdUserAut (
106        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
107        			IdUserOut			OUT	DMT_USERS.ID_USER%type,					-- Identificativo dell'utente che ha ottenuto il token
108        			ErrContextOut		OUT	VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
109        			ErrCodeOut			OUT	PLS_INTEGER,						-- N.ro errore di uscita
110        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
111        			return PLS_INTEGER;										-- vale 1 in caso di successo, altrimenti 0
112        
113        	/***** Funzione per ricavare il soggetto produttore di appartenenza di un'AOO	****/
114        	function GetSoggProdDiAppAOO (
115        			IdAOOIn				IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type)	-- (obblig.) Identificativo dell'AOO
116        			return INTEGER;											-- Id. del soggetto produttore di appartenenza (NULL solo in caso di errore)
117        
118        	/***** Funzione per decodificare (ottenere la descrizione) di un soggetto produttore o AOO a partire dal suo id. *****/
119        	function DecodeSoggProdAOO (
120        			IdSpAOOIn			IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type)		-- (obblig.) Identificativo del soggetto produttore o AOO
121        			return VARCHAR2;											-- Descrizione del soggetto produttore/AOO (NULL solo in caso di errore)
122        
123        	/***** Funzione per testare se una data applicazione esterna o sua istanza è "privilegiata", ovvero se documenti e folder da lei creati non sono modificabili da GUI salvo se si è connessi da quell'applicazione/istanza ******/
124        	function TestIfApplEstPrivilegiata(
125        			CodApplicazioneIn			IN		DMT_APPLICAZIONI_ESTERNE.CI_APPLICAZIONE%TYPE ,		
126        																-- (obblig.) Codice identificativo dell'applicazione
127        			CodIstanzaApplicazioneIn	IN		DMT_APPLICAZIONI_ESTERNE.CI_ISTANZA_APPLICAZIONE%TYPE DEFAULT NULL		
128        																-- Codice identificativo dell'istanza di applicazione
129        			) return PLS_INTEGER;										-- 1 = è un'applicazione/istanza di applicazione privilegiata
130        																-- 0 = non è un'applicazione/istanza di applicazione privilegiata o errore 
131        	
132        	/***** Funzione per ricavare un parametro di configurazione del sistema	che deve avere valore alfanumerico 	*****/
133        	function GetValConfigParamText(
134        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
135        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
136        			return VARCHAR2;											--  Valore del parametro
137        	function GetValConfigParamText(
138        			FlgTpDominioAutIn		IN	PLS_INTEGER,						-- (obblig). Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
139        			IdDominioAutIn		IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
140        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
141        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
142        			return VARCHAR2;											--  Valore del parametro
143        
144        	/***** Funzione per ricavare un parametro di configurazione del sistema	che deve avere valore numerico 	*****/
145        	function GetValConfigParamNumber(
146        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
147        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
148        			return NUMBER;											--  Valore del parametro
149        	function GetValConfigParamNumber(
150        			FlgTpDominioAutIn		IN	PLS_INTEGER,						-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
151        			IdDominioAutIn		IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
152        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
153        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
154        			return NUMBER;											--  Valore del parametro
155        
156        	/***** Funzione per ricavare un parametro di configurazione del sistema	che deve avere valore di tipo data 		*****/
157        	/***** sono parametri che se presenti in tabella DMT_CONFIG_PARAM devono esservi inseriti in formato GG/MM/AAAA 	*****/
158        	function GetValConfigParamDate(
159        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
160        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
161        			return DATE;											--  Valore del parametro
162        	function GetValConfigParamDate(
163        			FlgTpDominioAutIn		IN	PLS_INTEGER,						-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
164        			IdDominioAutIn		IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
165        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
166        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
167        			return DATE;											--  Valore del parametro
168        
169        	/**** Funzione per calcolare la dimensione (n.ro di righe) della pagina per un certo utente di lavoro in un certo dominio di lavoro ****/
170        	function CalcolaDimPagina(
171        			FlgTpDominioAutIn		IN		PLS_INTEGER ,					-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
172        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
173        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
174        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell'utente di lavoro
175        			DimPaginaOut		OUT		PLS_INTEGER,					-- Dimensione della pagina calcolata
176        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
177        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
178        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
179        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
180        
181        	/***** Funzione per controllare se un certo numero è corretto come anno di una registrazione *****/
182        	function CtrlAnnoReg(
183        			NumeroIn 			IN 		PLS_INTEGER)					--N.ro da verificare se corretto come anno di una registrazione
184        			return PLS_INTEGER;										--Restituisce NULL se l'argomento in input non è un anno di regisrazione corretto,
185        																--altrimenti restituisce l'anno espresso a 4 cifre
186        	/***** Funzione per comporre la CONTAINS da utilizzare in una query dinamica con filtro su una colonna con indice CONTEXT ****/
187        	function ComponiCONTAINS(
188        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
189        																-- Identificativo del soggetto produttore o AOO in cui ci si è autenticati (se NULL significa che ci si è autenticati come utenti di schema)
190        			SelColNameIn		IN		VARCHAR2,						-- (obblig.) Nome della selected column della query (eventualmente preceduta da alias della tabella: TAB_ALIAS.COLUMN_NAME) cui applicare la CONTAINS (deve essere una colonna con indice CONTEXT)
191        			SelColFilterIn		IN		VARCHAR2,					-- (obblig.) Valore del filtro sulla colonna con indice context (parola o lista di parole per cui ricercare)
192        			DesSelColumnIn		IN 		VARCHAR2 DEFAULT NULL)			-- Descrizione della selected column (da usare per eventuali messaggi di errore all'utente)
193        			return VARCHAR2;											-- stringa con la contains sulla colonna: CONTAINS(....)
194        
195        	/***** Funzione per generare i progressivi x i vari tipi di numerazioni (numerazione interna unità doc., ) *****/
196        	function GeneraProgressivo(
197        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Id. del soggetto produttore o AOO sui cui archivi si sta lavorando
198        			IdUserLavoroIn		IN 		DMT_USERS.ID_USER%type,					-- Id. dell'utente di lavoro che richiede la generazione
199        			CodScopeIn			IN		DMT_GEN_PROGR.COD_SCOPE%type,			-- (obblig.) Codice dello scope (=tipo di numerazione) per cui generare il progressivo
200        																-- i valori ammessi sono:
201        																-- NUM_INTERNA_UD = Numerazione interna unità documentarie
202        																-- PROTOCOLLO_GEN = Numerazione di protocollo generale
203        																-- REPERTORIO = Numerazione di repertorio
204        																-- PROTOCOLLO_PARTIC = Numerazione di protocollo particolare
205        																-- EMAIL = Numerazione delle e-mail
206        																-- NUM_PDV = Numerazione progressiva dei PdV (Pacchetti di Versamento)
207        			CondValueIn			IN		DMT_GEN_PROGR.COND_VALUE%type DEFAULT NULL,
208        																-- Valore che diversifica la generazione del progressivo (ad esempio il codice tipo repertorio nel caso di numerazione di repertorio)
209        			AnnoIn			IN		DMT_GEN_PROGR.ANNO%type DEFAULT NULL,
210        																-- Anno per cui generare il progressivo: va valorizzato x i tipi di numerazioni che sono annuali, e per questi, se non specificato, si assume essere pari all'anno corrente
211        																-- Può avere da 1 -> 4 cifre.
212        			ProgrGeneratoOut		OUT		DMT_GEN_PROGR.PROGR%type,			-- Progressivo generato (in caso di errore non viene valorizzato)
213        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
214        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
215        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
216        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
217        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
218        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
219        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
220        
221        	----overload della precedente: ha in input il CONN_TOKEN anzichè IdSpAOOIn e IdUserLavoroIn
222        	function GeneraProgressivo(
223        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	
224        																-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
225        			CodScopeIn			IN		DMT_GEN_PROGR.COD_SCOPE%type,			-- (obblig.) Codice dello scope (=tipo di numerazione) per cui generare il progressivo
226        																-- i valori ammessi sono:
227        																-- NUM_INTERNA_UD = Numerazione interna unità documentarie
228        																-- PROTOCOLLO_GEN = Numerazione di protocollo generale
229        																-- REPERTORIO = Numerazione di repertorio
230        																-- PROTOCOLLO_PARTIC = Numerazione di protocollo particolare
231        																-- PROCESSO = Numerazione di processo/procedimento/prtaica
232        																-- EMAIL = Numerazione delle e-mail
233        																-- NUM_PDV = Numerazione progressiva dei PdV (Pacchetti di Versamento)
234        			CondValueIn			IN		DMT_GEN_PROGR.COND_VALUE%type DEFAULT NULL,
235        																-- Valore che diversifica la generazione del progressivo (ad esempio il codice tipo repertorio nel caso di numerazione di repertorio)
236        			AnnoIn			IN		DMT_GEN_PROGR.ANNO%type DEFAULT NULL,
237        																-- Anno per cui generare il progressivo: va valorizzato x i tipi di numerazioni che sono annuali, e per questi, se non specificato, si assume essere pari all'anno corrente
238        																-- Può avere da 1 -> 4 cifre.
239        			ProgrGeneratoOut		OUT		DMT_GEN_PROGR.PROGR%type,			-- Progressivo generato (in caso di errore non viene valorizzato)
240        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
241        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
242        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
243        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
244        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
245        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
246        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
247        
248        	/********* funzione per ottenere il progressivo di trasmissione di fatturaPA a SdI 							*********/
249        	/********* al momento il progressivo non è differenziato per applicazione nè per soggetto produttore		*********/
250        	/********* ATTENZIONE: se non viene fatta la commit la generazione del progressivo resta bloccata			*********/
251        	function GeneraIdTrasmSdI(
252        			CodApplEsternaIn	IN		VARCHAR2,								-- (facoltativo) Codice applicazione esterna per cui generare il progressivo
253        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL,					-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna per cui generare il progressivo
254        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (facoltativo) Id. del soggetto produttore o AOO per cui generare il progressivo
255        			IdTrasmSdIOut		OUT		VARCHAR2,								-- Id. di trasmissione a SdI generato (in caso di errore non viene valorizzato)
256        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
257        																				-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
258        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
259        			ErrContextOut		OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
260        			ErrCodeOut			OUT		PLS_INTEGER,							-- N.ro errore di uscita
261        			ErrMsgOut			OUT 		VARCHAR2)							-- Messaggio d'errore
262        			return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
263        
264        	/****** Funzione che separa in un varray i campi impacchettati in una stringa e lì separati da un qualsiasi separatore *******/
265        	function SplitStringInVarray(
266        			StringToSplitIn		IN		VARCHAR2,						-- (obblig.) Stringa in cui si trovano i campi da separare
267        			SeparatoreIn		IN		VARCHAR2 DEFAULT '|*|',				-- (obblig.) Separatore utilizzato nella stringa.
268        			SepDopoUltimoElemIn	IN		PLS_INTEGER DEFAULT 1				-- (valori 1/0/NULL) Se pari a 1 significa che dopo l'ultimo campo c'è il separatore, altrimenti no
269        																-- Se 1 un eventuale campo non seguito da separatore viene caricato comunque nel varray purchè diverso da NULL
270        																-- Se 0 o NULL ciò che segue un separatore (e quindi anche l'ultimo) è caricato come campo del varray anche se NULL
271        			) return DMVA_STRING;										-- Varray con i campi separati. In caso di errore è NULL
272        
273        	/****** Funzione che mette in un varray i valori (già convertiti) dei tag "Colonna" di un frammento di XML fatto come un elemento "Riga" dello schema LISTA_STD.xsd 	*******/
274        	/****** Nel varray i valori sono ordinati in base all'attributo Nro del tag Colonna da cui derivano.												*******/
275        	function SplitRigaXMLStdInVarray(
276        			RigaXMLStdIn		IN		CLOB							-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
277        			) return DMVA_STRING;										-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
278        
279        	------------ Overload della precedente ------------
280        	function SplitRigaXMLStdInVarray(
281        			RigaXMLStdIn		IN		VARCHAR2						-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
282        			) return DMVA_STRING;										-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
283        
284        	------------ Overload delle 2 precedenti ------------
285        	function SplitRigaXMLStdInVarray(
286        			RigaXMLStdIn		IN		CLOB,							-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
287        			NroElemVarrayIn		IN		PLS_INTEGER DEFAULT NULL,			-- N.ro di elementi del varray in cui splittare.
288        			FlgPresenzaOut		OUT		DMTO_ID						-- Table di flag 1/0 quanti gli elementi del varray restituito: l'i-esimo flag indica se la colonna i-esima era presente o meno nell'XML
289        			) return DMVA_STRING;										-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
290        
291        	------------ come la precedente ma restituisce un varray di clob------------
292        	function SplitRigaXMLStdInClobVarray(
293        			RigaXMLStdIn		IN		CLOB,							-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
294        			NroElemVarrayIn		IN		PLS_INTEGER DEFAULT NULL,		-- N.ro di elementi del varray in cui splittare.
295        			FlgPresenzaOut		OUT		DMTO_ID							-- Table di flag 1/0 quanti gli elementi del varray restituito: l'i-esimo flag indica se la colonna i-esima era presente o meno nell'XML
296        			) return DMVA_CLOB;											-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
297        
298        	/****** Funzione per impacchettare in un frammento di XML fatto come un elemento "Riga" dello schema LISTA_STD.xsd 	*******/
299        	/****** una lista di valori da fornire nel varray di input ValoriColonneIn (senza escaping)					*******/
300        	/****** Permette anche di ottenere un XML di output in cui i tag "Riga" e "Colonna" sono rinominati come si desidera	*******/
301        	function PreparaRigaXMLStd(
302        			ValoriColonneIn		IN		DMVA_STRING,					-- (obblig.) Valori da mettere nei tag "Colonna" della "Riga" (la loro posizione nel varray verrà usata come attributo "Nro" del tag "Colonna")
303        			RigaTagNameIn		IN		VARCHAR2 DEFAULT NULL,				-- (opzionale) Come rinominare il tag Riga
304        			ColTagNameIn		IN		DMVA_STRING DEFAULT NULL,			-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=..
305        			ForzaTagColVuoteIn	IN		BOOLEAN DEFAULT FALSE				-- Se FALSE i tag delle colonne vuote, salvo l'ultima, non vengono messi affato, se TRUE vengono messi i tag di tutte le colonne, anche quelle vuote
306        			) return VARCHAR2;										-- Tag XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd se ColTagNameIn e RigaTagNameIn non sono stati specificati) in cui sono stati impacchettati i valori del varray
307        																-- E' NULL solo in caso di errore
308        	
309        	---------------analoga alla precedente solo che il tag Riga viene restituito in un clob anzichè in un VARCHAR2; da usare dove la Riga supera i 32.000 caratteri
310        	function PreparaRigaXMLStd_Clob(
311        			ValoriColonneIn		IN		DMVA_STRING,						-- (obblig.) Valori da mettere nei tag "Colonna" della "Riga" (la loro posizione nel varray verrà usata come attributo "Nro" del tag "Colonna")
312        			RigaTagNameIn		IN		VARCHAR2 DEFAULT NULL,				-- (opzionale) Come rinominare il tag Riga
313        			ColTagNameIn		IN		DMVA_STRING DEFAULT NULL,			-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=..
314        			ForzaTagColVuoteIn	IN		BOOLEAN DEFAULT FALSE				-- Se FALSE i tag delle colonne vuote, salvo l'ultima, non vengono messi affato, se TRUE vengono messi i tag di tutte le colonne, anche quelle vuote
315        			) return CLOB;													-- Tag XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd se ColTagNameIn e RigaTagNameIn non sono stati specificati) in cui sono stati impacchettati i valori del varray
316        																			-- E' NULL solo in caso di errore
317        		
318        	---------------overload della funzione precedente solo che ValoriColonneIn è un array di CLOB
319        	function PreparaRigaXMLStd_Clob(
320        			ValoriColonneIn		IN		DMVA_CLOB,							-- (obblig.) Valori da mettere nei tag "Colonna" della "Riga" (la loro posizione nel varray verrà usata come attributo "Nro" del tag "Colonna")
321        			RigaTagNameIn		IN		VARCHAR2 DEFAULT NULL,				-- (opzionale) Come rinominare il tag Riga
322        			ColTagNameIn		IN		DMVA_STRING DEFAULT NULL,			-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=..
323        			ForzaTagColVuoteIn	IN		BOOLEAN DEFAULT FALSE				-- Se FALSE i tag delle colonne vuote, salvo l'ultima, non vengono messi affato, se TRUE vengono messi i tag di tutte le colonne, anche quelle vuote
324        			) return CLOB;													-- Tag XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd se ColTagNameIn e RigaTagNameIn non sono stati specificati) in cui sono stati impacchettati i valori del varray
325        																			-- E' NULL solo in caso di errore
326        																			
327        	/***** Funzione per convertire un frammento di XML fatto come un elemento "Riga" dello schema LISTA_STD.xsd 			*******/
328        	/***** in una riga dello stesso tipo in cui le cui colonne sono una rimappatura di quelle dell'XML originario		*******/
329        	function RimappaColRigaXMLStd(
330        			RigaXMLStdIO		IN OUT	CLOB,							-- Riga XML da convertire
331        			IndiciColIn			IN		DMTO_ID,						-- Ha tanti elementi quanti le colonne del nuovo XML.
332        																-- L'elemento i-esimo è il n.ro della colonna del vecchio XML da cui prendere il valore per la colonna i-esima del nuovo XML
333        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
334        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
335        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
336        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
337        
338        	/***** Funzione per covertire una lista (CLOB) passata come XML conforme allo schema LISTA_STD.xsd 				*******/
339        	/***** in una lista dello stesso tipo in cui le cui colonne sono una rimappatura di quelle dell'XML originario		*******/
340        	function RimappaColListaXMLStd(
341        			ListaXMLStdIO		IN OUT	CLOB,							-- Lista XML da convertire
342        			IndiciColIn			IN		DMTO_ID,						-- Ha tanti elementi quanti le colonne del nuovo XML.
343        																-- L'elemento i-esimo è il n.ro della colonna del vecchio XML da cui prendere il valore per la colonna i-esima del nuovo XML
344        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
345        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
346        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
347        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
348        
349        	/**** Funzione per controllare se un determinato valore è valido per una colonna di tabella che accetta valori relativi ad una voce di dizionario	****/
350        	/**** Il controllo può essere fatto per una specifica riga della tabella (identificata attraverso il suo ROWID)							****/
351        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ									****/
352        	function TestDictValueForTabCol(
353        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
354        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
355        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
356        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella cui appartiene la colonna
357        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn per cui controllare se il valore è valido
358        			RowIdIn			IN 		VARCHAR2 DEFAULT NULL, 				-- Rowid della riga della tabella (TargetTableNameIn o sua nested) per cui effettuare il controllo
359        																-- Se non valorizzato si intende che il valore è per una nuova riga
360        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
361        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che il valore sia valido. Se NULL si intende che la validità del valore non è da controllare
362        			ValueIn			IN 		VARCHAR2, 						-- (obblig.) Valore da controllare
363        			ValueGenVincoloIn		IN		VARCHAR2 default NULL		-- Valore (decodificato) di un campo più generale (sempre basato su dictionary_entry) al quale il valore da controllare è vincolato
364        			) RETURN PLS_INTEGER;										-- Valori: 1=Test positivo; 0=Test negativo
365        
366        
367        	/**** Funzione per controllare se un determinato valore o codice di valore è valido per una data voce di dizionario	****/
368        	function TestDictValueForDictEntry(
369        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
370        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
371        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
372        			DictionaryEntryIn		IN		DMT_DICTIONARY_ENTRIES.DICTIONARY_ENTRY%type,
373        																-- (obblig.) Voce di dizionario per cui testare se il valore è valido
374        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
375        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che il valore sia valido. Se NULL si intende che la validità del valore non è da controllare
376        			FlgTestForCodIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) se 1 indica che il test è su un COD_VALUE, ovvero l'argomento ValueIn da controllare è il codice del valore; altrimenti il test è sul VALUE, ovvero ValueIn è il valore decodificato
377        			ValueIn			IN 		VARCHAR2, 						-- (obblig.) Valore da controllare
378        			ValueGenVincoloIn		IN		VARCHAR2 DEFAULT NULL						-- Valore (decodificato) di un campo più generale (sempre basato su dictionary_entry) al quale il valore da controllare è vincolato
379        			) RETURN PLS_INTEGER;										-- Valori: 1=Test positivo; 0=Test negativo
380        
381        	/**** Funzione per la decodifica del valore di una colonna di tabella che accetta valori (codificati) relativi ad una voce di dizionario	****/
382        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ							****/
383        	function DecodeTabColValueFromDict(
384        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
385        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
386        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
387        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
388        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
389        			CodiceIn			IN 		DMT_DIZIONARIO.COD_VALUE%type 		-- (obblig.) Codice da decodificare
390        			)return VARCHAR2;											-- Decodifica (NULL in caso di errore)
391        
392        	/**** Funzione per la decodifica di un codice valore relativo ad una voce di dizionario	****/
393        	function DecodeCodValueForDictEntry(
394        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
395        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
396        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
397        			DictionaryEntryIn		IN		DMT_DICTIONARY_ENTRIES.DICTIONARY_ENTRY%type,
398        																-- (obblig.) Voce di dizionario cui è relativo il codice da decodificare
399        			CodiceIn			IN 		DMT_DIZIONARIO.COD_VALUE%type 		-- (obblig.) Codice da decodificare
400        			)return VARCHAR2;											-- Decodifica (NULL in caso di errore)
401        
402        	/**** Funzione per ottenere la codifica corrispondente ad un dato valore assegnabile (la codifica) ad una colonna di tabella che accetta valori relativi ad una voce di dizionario	****/
403        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ														****/
404        	function GetCodeForTabColValueFromDict(
405        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
406        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
407        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
408        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
409        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
410        			ValueIn			IN 		DMT_DIZIONARIO.VALUE%type 			-- (obblig.) Valore per cui trovare il codice corrispondente
411        			)return VARCHAR2;											-- Codice (NULL in caso di errore)
412        
413        	/**** Funzione per ottenere la codifica corrispondente ad un dato valore relativo ad una voce di dizionario	****/
414        	function GetCodeForValueForDictEntry(
415        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
416        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
417        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
418        			DictionaryEntryIn		IN		DMT_DICTIONARY_ENTRIES.DICTIONARY_ENTRY%type,
419        																-- (obblig.) Voce di dizionario cui è relativo il codice da decodificare
420        			ValueIn			IN 		DMT_DIZIONARIO.VALUE%type 			-- (obblig.) Valore per cui trovare il codice corrispondente
421        			)return VARCHAR2;											-- Codice (NULL in caso di errore)
422        
423        	/********* funzione per individuare a partire da COD_VALUE e/o VALUE un valore del dizionario che vada bene per una certa colonna di tabella che accetta solo valori da dizionario 	*******/
424        	/********* In caso il valore di dizionario esista e sia individuato univocamente vengono restituiti in output sia l'eventuale codice che il valore trovato						*******/
425        	function FindDictionaryValue(
426        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
427        																-- (obblig). Codice identificativo del token di connessione
428        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
429        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
430        			CodValueIO			IN OUT	DMT_DIZIONARIO.COD_VALUE%type,		-- Codice del valore di dizionario (ricerca case-sensitive in like senza forzare il % finale)
431        			ValueIO			IN OUT	DMT_DIZIONARIO.VALUE%type,			-- Valore di dizionario (la decodifica; ricerca case-insensitive in like senza forzare il % finale)
432        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
433        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
434        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
435        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
436        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che il valori sia valido. Se non valorizzato si intende che sia valido a qualsisai data
437        			)return PLS_INTEGER;										-- Vale 1 se il valore di dizionario è stato individuato univocamente, altrimenti 0
438        
439        	/**** Funzione per ottenere i valori possibili per una colonna di tabella che accetta valori relativi ad una voce di dizionario	****/
440        	/**** Il valori possono essere trovati per una specifica riga della tabella (identificata attraverso il suo ROWID)			****/
441        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ						****/
442        	function TrovaDictValuesForTabCol(
443        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
444        																-- (obblig). Codice identificativo del token di connessione
445        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,-- Identificativo dell'utente di lavoro (se non valorizzato si intende che sia l'utente connesso)
446        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
447        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
448        			RowIdIn			IN 		VARCHAR2 DEFAULT NULL, 				-- Rowid della riga della tabella (TargetTableNameIn o sua nested) per cui trovare i possibili valori
449        																-- Se non valorizzato si intende che il valore è per una nuova riga
450        																-- Se valorizzato il valore della colonna per la data riga è sempre tra quelli trovati
451        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
452        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che i valori trovati siano validi. Se non valorizzato si intende che si richiedono valori validi a qualsisai data
453        			StrInValueIn		IN		VARCHAR2,						-- Stringa che deve essere contenuta nei valori da trovare (ricerca case-insensitive in like)
454        			StrInCodValueIn		IN		VARCHAR2,						-- Stringa che deve essere contenuta nei codici dei valori da trovare (ricerca case-insensitive in like)
455        			ValueGenVincoloIn		IN		VARCHAR2,						-- Valore (decodificato) di un campo più generale al quale i valori da trovare sono vincolati
456        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
457        			ColOrderByIO		IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso. Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
458        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
459        																-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
460        			FlgDescOrderByIO  	IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
461        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
462        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
463        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
464           			BachSizeIO			IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
465        																-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
466        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
467        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
468        			NroTotRecOut		OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
469             			NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
470        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
471        			ListaXMLOut			OUT		CLOB,							-- Lista dei possibili valori (XML conforme a schema LISTA_STD.xsd)
472        																-- Ogni valore è un tag Riga che contiene 2 colonne:
473        																-- 1: Display value
474        																-- 2: Internal value da assegnare alla colonna
475        																-- 3: Descrzione estesa (explanation) del valore di dizionario
476        																-- 4: (valori 1/NULL) FLG_OBBLIG_DETTAGLI del valore di dizionario
477        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
478        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
479        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
480        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
481        
482        	/******** funzione per ottenere il valore che aveva ad un dato momento (passato) un certo attributo numerico di un record di tabella la quale abbia il campo INFO_STORICO  	*****/
483        	/******** ATTENZIONE: Il valore viene ricercato solo nelle INFO_STORICO del record e restituito solo se è lì presente										*****/
484        	function GetStoricoAttrNumber(
485        			TableNameIn			IN		VARCHAR2,						-- (obblig.) Nome della tabella che contiene l'entità-record di cui trovare l'attributo storicizzato (tabella con colonna INFO_STORICO)
486        			RecRowidIn			IN		VARCHAR2,						-- (obblig.) Rowid del record di tabella TableNameIn del quale ricavare l'attributo storicizzato
487        			AttrNameIn 			IN 		VARCHAR2, 						-- (obblig.) Nome dell'attributo, vale a dire il nome della colonna o il nome dell'attributo addizionale
488        			NroOccorrenzaIn 		IN 		PLS_INTEGER,					-- Indica quale occorrenza si desidera tra i valori dell'attributo storicizzato: se NULL viene restituito il primo valore
489        			TsRifIn			IN		VARCHAR2						-- (obblig.) Stringa (nel formato GG/MM/AAAA HH24:MI:SS) con il timestamp (passato) a cui l'attributo aveva il valore da ricercare
490        			) return NUMBER;											-- valore dell'attributo al timestamp TsRifIn se presente nelle INFO_STORICO
491        																-- -999 se il valore non era presente nelle INFO_STORICO o in caso di errore
492        
493        	/******** funzione per ottenere il valore che aveva ad un dato momento (passato) un certo attributo alfanumerico di un record di tabella la quale abbia il campo INFO_STORICO  	*****/
494        	/******** ATTENZIONE: Il valore viene ricercato solo nelle INFO_STORICO del record e restituito solo se è lì presente											*****/
495        	function GetStoricoAttrText(
496        			TableNameIn			IN		VARCHAR2,						-- (obblig.) Nome della tabella che contiene l'entità-record di cui trovare l'attributo storicizzato (tabella con colonna INFO_STORICO)
497        			RecRowidIn			IN		VARCHAR2,						-- (obblig.) Rowid del record di tabella TableNameIn del quale ricavare l'attributo storicizzato
498        			AttrNameIn 			IN 		VARCHAR2, 						-- (obblig.) Nome dell'attributo, vale a dire il nome della colonna o il nome dell'attributo addizionale
499        			NroOccorrenzaIn 		IN 		PLS_INTEGER,					-- Indica quale occorrenza si desidera tra i valori dell'attributo storicizzato: se NULL viene restituito il primo valore
500        			TsRifIn			IN		VARCHAR2						-- (obblig.) Stringa (nel formato GG/MM/AAAA HH24:MI:SS) con il timestamp (passato) a cui l'attributo aveva il valore da ricercare
501        			) return VARCHAR2;										-- valore dell'attributo al timestamp TsRifIn se presente nelle INFO_STORICO
502        																-- #NOT_FOUND se il valore non era presente nelle INFO_STORICO o in caso di errore
503        
504        	/******** funzione per ottenere il valore che aveva ad un dato momento (passato) un certo attributo di tipo data di un record di tabella la quale abbia il campo INFO_STORICO  	*****/
505        	/******** ATTENZIONE: Il valore viene ricercato solo nelle INFO_STORICO del record e restituito solo se è lì presente											*****/
506        	function GetStoricoAttrDate(
507        			TableNameIn			IN		VARCHAR2,						-- (obblig.) Nome della tabella che contiene l'entità-record di cui trovare l'attributo storicizzato (tabella con colonna INFO_STORICO)
508        			RecRowidIn			IN		VARCHAR2,						-- (obblig.) Rowid del record di tabella TableNameIn del quale ricavare l'attributo storicizzato
509        			AttrNameIn 			IN 		VARCHAR2, 						-- (obblig.) Nome dell'attributo, vale a dire il nome della colonna o il nome dell'attributo addizionale
510        			NroOccorrenzaIn 		IN 		PLS_INTEGER,					-- Indica quale occorrenza si desidera tra i valori dell'attributo storicizzato: se NULL viene restituito il primo valore
511        			TsRifIn			IN		VARCHAR2						-- (obblig.) Stringa (nel formato GG/MM/AAAA HH24:MI:SS) con il timestamp (passato) a cui l'attributo aveva il valore da ricercare
512        			) return DATE;											-- valore dell'attributo al timestamp TsRifIn se presente nelle INFO_STORICO
513        																-- la data 01/01/9999 se il valore non era presente nelle INFO_STORICO o in caso di errore
514        
515        	/***** Funzione per decodificare una utente di cui sia noto l'identificativo univoco *****/
516        	function DecodeUser(
517        			IdUserIn			IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell'utente
518        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
519        																-- Valori possibili:
520        																-- <DESCRIZIONE> = Descrizione dell'utente
521        																-- <NOME> = Nome dell'utente
522        																-- <COGNOME> = Cognome dell'utente
523        																-- <USERNAME> = Username dell'utente
524        																-- <NRO_MATRICOLA> = N.ro di matricola dell'utente
525        																-- <TITOLO> = Titolo professionale/ di studio
526        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
527        																-- ad es: <DESCRIZIONE> (<USERNAME>) significa che si richiede la descrizione seguita, tra parentesi, dalla username
528        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
529        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica dell'utente. Se non valorizzato si intende sysdate
530        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
531        
532        	/******* serve a ricercare un utente (accreditato in un dato dominio) a partire da Id. e/o denominazione e/o username e/o n.ro di matricola 	******/
533        	/******* restituisce l'Id. dell'utente solo se a partire dagli estremi immessi riesce a identificarlo univocamente					******/
534        	function FindUser(
535        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) in cui l'utente deve essere accreditato (se NULL significa che deve essere accreditato come utente di schema)
536        			IdUserIn			IN 		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Identificativo dell'utente
537        			DesUserIn			IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Denominazione dell'utente (o suo inizio; ricerca case insensitive in like)
538        			UsernameIn			IN		DMT_USERS.USERNAME%type DEFAULT NULL,	-- Username dell'utente (o suo inizio; ricerca case insensitive in like)
539        			NroMatricolaIn		IN		DMT_USERS.NRO_MATRICOLA%type DEFAULT NULL,-- N.ro di matricola dell'utente (o suo inizio; ricerca case insensitive in like)
540        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se l'utente deve essere valido (1) o no (al timestamp TsRifIn)
541        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
542        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale l'utente deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
543        			) return INTEGER;											-- restituisce ID_USER dell''utente se individuato, altrimenti NULL
544        
545        	/****** serve a ricercare un utente, accreditato presso un dato sogg. produttore o AOO, a partire dal suo identificativo in un'applicazione esterna *******/
546        	/******* restituisce l'ID_USER dell'utente se a partire dagli estremi immessi riesce a identificarlo univocamente						    *******/
547        	function FindUserFromExtID(
548        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
549        																-- Identificativo del soggetto produttore o AOO presso cui l'utente deve essere accreditato (se non specificato viene ricavato come quello su cui insiste l'applicazione esterna/sua istanza)
550        			CodApplEsternaIn		IN		VARCHAR2,						-- (obblig.) Codice applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
551        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL,				-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
552        			CodIdUserEsternoIn	IN		VARCHAR2,						-- (obblig.) Codice identificativo dell'utente nell'applicazione esterna (eventualmente nella specfica istanza della stessa)
553        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1				-- (valori 1/0/NULL) Indica se l'utente deve essere valido (1) o no
554        			) return INTEGER;											-- restituisce ID_USER dell'utente se individuato, altrimenti NULL
555        
556        	/****** serve a ricercare un utente, accreditato presso un dato sogg. produttore o AOO, a partire dalle sue credenziali in un'applicazione esterna 	*******/
557        	/******* restituisce l'ID_USER dell'utente se a partire dagli estremi immessi riesce a identificarlo univocamente						    	*******/
558        	function FindUserFromExtCred(
559        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
560        																-- Identificativo del soggetto produttore o AOO presso cui l'utente deve essere accreditato (se non specificato viene ricavato come quello su cui insiste l'applicazione esterna/sua istanza)
561        			CodApplEsternaIn		IN		VARCHAR2,						-- (obblig.) Codice applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
562        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL,				-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
563        			UsernameEstIn		IN		VARCHAR2,						-- (obblig.) Username dell'utente nell'applicazione esterna (eventualmente nella specfica istanza della stessa)
564        			PasswordEstIn		IN		VARCHAR2,						-- Password dell'utente nell'applicazione esterna (eventualmente nella specfica istanza della stessa)
565        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1				-- (valori 1/0/NULL) Indica se l'utente deve essere valido (1) o no
566        			) return INTEGER;											-- restituisce ID_USER dell'utente se individuato, altrimenti NULL
567        
568        
569        	/****** Funzione per ottenere il codice che identifica un dato utente in una data applicazione esterna e sua eventuale istanza ******/
570        	function GetUserExtCID(
571        			IdUserIn			IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo interno dell'utente
572        			CodApplEsternaIn		IN		VARCHAR2,						-- (obblig.) Codice applicazione esterna in cui trovare il codice identificativo dell'utente
573        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL				-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna in cui trovare il codice identificativo dell'utente
574        			) return VARCHAR2;										-- codice che identifica l'utente nell'applicazione esterna ed eventuale sua istanza
575        																-- NULL in caso di errore o codice non trovato
576        
577        	/***** Funzione per decodificare una UO di cui sia noto l'identificativo univoco *****/
578        	function DecodeUO(
579        			IdUOIn			IN 		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO
580        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
581        																-- Valori possibili:
582        																-- <DENOMINAZIONE> = Denominazione della UO (non preceduta da quelle delle UO superiori)
583        																-- <DENOMINAZIONE_ESTESA> = Denominazione della UO preceduta da quelle di tutte le UO superiori (separate da " | ").
584        																-- <DENOMINAZIONE_ESTESA_DA_LIV_n> = Denominazione della UO preceduta da quelle delle UO superiori di livello >=n (con n numero intero pari ad un livello delle struttura organizzativa)
585        																-- <LIVELLI> = N.ri livello della UO (separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
586        																-- <LIVELLI_DA_LIV_n> = N.ri livello della UO a partire dal n.ro del livello n-esimo (con n numero intero >1 pari ad un livello delle struttura organizzativa)
587        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
588        																-- ad es: <LIVELLI> - <DENOMINAZIONE> significa che si richiedono livelli e denominazione separati da " - "
589        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
590        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica della UO. Se non valorizzato si intende sysdate
591        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
592        
593        	/******* serve a ricercare una UO relativa ad un dato sogg. produttore o AOO a partire da Id. e/o stringa con i codici di livello e/o denominazione 	******/
594        	/******* restituisce l'Id. della UO solo se a partire dagli estremi immessi riesce a identificarla univocamente							******/
595        	function FindUO(
596        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
597        			IdUOIn			IN 		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO
598        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della UO da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di UO valido per il soggetto produttore/AOO di appartenenza della UO)
599        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
600        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
601        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
602        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
603        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la UO deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
604        			CodTipoIn			IN		VARCHAR2 DEFAULT NULL,				-- Codice del tipo della UO da trovare (ricerca esatta case-sensitive)
605        			LivelloGerarchicoIn	IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
606        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della UO
607        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
608        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
609        			) return INTEGER;											-- restituisce ID_UO della UO se individuata, altrimenti NULL
610        	
611        	---overload della precedente, con l'unica differenza che i livelli sono passati come XML anzichè come stringa
612        	function FindUO(
613        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
614        			IdUOIn			IN 		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO
615        			LivelliXMLIn		IN		CLOB DEFAULT NULL,				-- XML (secondo schema LISTA_STD.xsd) con i n.ri livello della UO da ricercare (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori)(come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli).
616        																-- Ogni livello è un tag Riga che contiene 2 colonne:
617        																-- 1: Nro (intero), con il livello gerarchico,
618        																-- 2: Codice (alfanumerico) , con il n.ro identifcativo del livello
619        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
620        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
621        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
622        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
623        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la UO deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
624        			CodTipoIn			IN		VARCHAR2 DEFAULT NULL,				-- Codice del tipo della UO da trovare (ricerca esatta case-sensitive)
625        			LivelloGerarchicoIn	IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
626        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della UO
627        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
628        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
629        			) return INTEGER;											-- restituisce ID_UO della UO se individuata, altrimenti NULL
630        
631        	/******* serve a ricercare una UO relativa ad un dato sogg. produttore o AOO a partire dalla denominazione 	******/
632        	/******* restituisce l'Id. della UO solo se riesce a identificarla univocamente								******/
633        	function FindUOByDes(
634        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
635        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
636        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
637        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
638        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
639        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la UO deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
640        			) return INTEGER;											-- restituisce ID_UO della UO se individuata, altrimenti NULL
641        
642        	--- funzione per trovare una UO dai livelli (cod. rapido)
643        	function FindUOByLiv_J(
644        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
645        			LivelliStrIn			IN		VARCHAR2 DEFAULT NULL,								-- Stringa con i n.ri livello della UO da ricercare (vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di UO valido per il soggetto produttore/AOO di appartenenza della UO)
646        			FlgSoloVldIn			IN		PLS_INTEGER DEFAULT 1,								-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
647        			IdUOOut					OUT 	DMT_STRUTTURA_ORG.ID_UO%type,						-- Id. della UO corrispondente ai livello indicato
648        			ErrContextOut			OUT		VARCHAR2,											-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
649        			ErrCodeOut				OUT		PLS_INTEGER,										-- N.ro errore di uscita
650        			ErrMsgOut				OUT 	VARCHAR2											-- Messaggio d'errore
651        			) return PLS_INTEGER;																-- Vale 1 la UO è stata trovata, altrimenti 0
652        
653        	/****** Funzione per ottenere l'id. di una delle UO che ricomprendono ad una certa data una data una UO indicata anch'essa attraverso l'id. ******/
654        	function GetIdUOSuperiore(
655        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO di cui trovare la UO superiore
656        			LivelloGerarchicoSupIn	IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
657        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della UO superiore da trovare
658        																-- Se NULL si intende la UO direttamente superiore
659        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
660        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale trovare la UO superiore di IdUOIn. Se non valorizzato si intende sysdate
661        			) return DMT_STRUTTURA_ORG.ID_UO%type;							-- restituisce ID_UO della UO superiore se individuata, altrimenti NULL
662        
663        	/****** Funzione per ottenere gli id. delle UO che ricomprendono ad una certa data una data una UO indicata anch'essa attraverso l'id. 	******/
664        	/****** Nalla lista viene inclusa la stessa UO 																******/
665        	function GetListaIdUOSuperiori(
666        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO di cui trovare le UO superiori
667        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
668        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale trovare le UO superiori di IdUOIn. Se non valorizzato si intende sysdate
669        			) return DMTO_ID;											-- restituisce gli ID_UO delle UO superiori (NULL in caso di errore)
670        
671        	/**** Funzione per testare se una UO/scrivania o un utente ricade/è collegato con una data UO ad un certo timestamp			******/
672        	/**** la relazione di appartenenza può anche essere indiretta, ovvero con una UO gerarchicamente ricompresa in quella indicata	******/
673        	function TestRelVsUO (
674        			IdUOOuterIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO in cui deve ricadere l'altra UO o un utente o scrivania
675        			FlgTpObjInnerIn		IN		VARCHAR2,						-- (obblig.) Indica il tipo di oggetto che si vuole testare se ricade nella UO IdUOOuterIn
676        																-- Valori ammessi:
677        																--	UO	=	U.O.
678        																-- 	SV	=	Scrivania virtuale
679        																--	UT	=	Utente
680        			IdObjInnerIn		IN		INTEGER,						-- (obblig.)  Identificativo (ID_UO o ID_USER o ID_SCRIVANIA) dell'oggetto che si vuole testare se ricade nella struttura IdUOOuterIn
681        			FlgTpRelIn			IN		VARCHAR2 DEFAULT NULL,				-- Indica il tipo di relazione che si deve verificare se esiste. Va valorizzato e viene controllato/gestito solo se FlgTpObjInnerIn=UT.
682        																-- Valori ammessi:
683        																--	NULL	=	Qualsiasi
684        																-- 	A 	= 	Appartenenza (implica abilitazione a lavorare su documenti e fascicoli assegnati alla UO con i propri privilegi)
685        																-- 	L 	= 	Abilitazione a lavorare su documenti e fascicoli assegnati alla UO con i propri privilegi
686        																-- 	D 	= 	Delega a lavorare su documenti e fascicoli come se si fosse quella UO (con i suoi privilegi)
687        			FlgAppDirettaIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Va valorizzato e viene controllato/gestito solo se FlgTpObjInnerIn è UO o SV o se FlgTpRelIn=A(ppartenenza)
688        																-- se 1 la relazione di appartenenza che si vuole testare se esiste è una relazione DIRETTA
689        																-- se diverso da 1 il test dà esito positivo anche se l'utente/scrivania/UO appartiene ad una UO gerarchicamente ricompresa in IdUOOuterIn
690        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'))
691        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui la relazione deve essere valida. Se non valorizzato si intende sysdate
692        			return PLS_INTEGER;										-- Valori possibili:
693        																--	1	=	test positivo
694        																--	0	=	test negativo
695        																--	interi negativi = errore (il result è il codice d'errore)
696        	/***** Table function per ottenere gli ID delle UO sottostanti (non solo con dipendenza diretta) una data UO in una certa data ******/
697        	function TrovaIdSottoUO (
698        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO di cui trovare le sotto-UO
699        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
700        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui trovare le sotto-UO. Se non valorizzato si intende sysdate
701        			)return DMTO_ID;											-- Lista con gli id. delle sotto-UO
702        
703        	/**** Table function per ottenere gli ID dei ruoli inclusi (anche indirettamente) in un dato ruolo amministrativo ****/
704        	function TrovaIdRuoliInclusi(
705        			IdRuoloIn			IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type		-- (obblig.) Identificativo del ruolo di cui trovare i ruoli inclusi
706        			)return DMTO_ID;											-- Lista con gli id. dei ruoli inclusi (anche indirettamente)
707        
708        	/**** Funzione per testare se un dato ruolo amministrativo è dato ad un utente o a un ruolo (vale a dire incluso in esso)	******/
709        	/**** la verifica va a buon fine anche se la relazione NON E' DIRETTA (es: ruolo incluso in altro ruolo che ha l'utente) 	******/
710        	function TestRuoloAmmA(
711        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type,		-- (obblig.) Identificativo del ruolo amministrativo da verificare se dato/incluso
712        			FlgTpObjToTestIn		IN		VARCHAR2,						-- (obblig.) Indica il tipo di oggetto che si vuole testare se ha/ricomprende il ruolo
713        																-- Valori ammessi:
714        																--	RA	=	Ruolo amministrativo
715        																--	UT	=	Utente
716        			IdObjToTestIn		IN		INTEGER,						-- (obblig.)  Identificativo (ID_RUOLO_AMM o ID_USER) dell'oggetto che si vuole testare se ha/include il ruolo
717        			IdDominioIn			IN 		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
718        																-- (gestito solo se FlgTpObjToTestIn='UT') Identificativo del dominio di lavoro (vale a dire l'id. del soggetto produttore o AOO ) in cui testare se l'utente ha il ruolo
719        																-- Se NULL e FlgTpObjToTestIn='UT' si intende che il dominio di lavoro in cui testare se l'utente ha il ruolo è il suo dominio di default, a meno che IdUOLimTestIn sia valorizzata, nel qual caso il test viene fatto nel dominio (sogg. produttore/AOO) di appartenenza della UO
720        			LivUOLimTestIn		IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
721        																-- (gestito solo se FlgTpObjToTestIn=UT) Livello (valori da 1 a n; 1 è il più alto) della UO in cui si deve espletare il ruolo affinchè il test dia esito positivo
722        			CodTipoUOLimTestIn	IN		DMT_STRUTTURA_ORG.COD_TIPO%type DEFAULT NULL,
723        																-- (gestito solo se FlgTpObjToTestIn=UT e alternativo a LivUOLimTestIn) Codice del tipo della UO in cui si deve espletare il ruolo affinchè il test dia esito positivo
724        			IdUOLimTestIn		IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,
725        																-- (gestito solo se FlgTpObjToTestIn=UT) Id. della UO in cui deve espletarsi il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui deve espletarsi il ruolo affinchè il test dia esito positivo.
726        			FlgInclSottoUOIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 indica che il ruolo si può espletare anche nelle sotto-UO di IdUOLimTestIn o della/e UO a cui si risale da IdUOLimTestIn
727        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'))
728        																-- (gestito solo se FlgTpObjToTestIn=UT) Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui testare se il ruolo è dato all'utente. Se non valorizzato si intende pari a sysdate
729        																-- se FlgTpObjToTestIn = RA il test è sempre alla data e ora correnti
730        																-- Il test dà esito positivo solo se l'utente ha il ruolo al timestamp specificato
731        			return PLS_INTEGER;										-- Valori possibili:
732        																--	1	=	test positivo
733        																--	0	=	test negativo
734        																--	interi negativi = errore (il result è il codice d'errore)
735        
736        	/**** Funzione per esplodere un ruolo amministrativo "contestualizzato" nell'insieme di utenti e scrivanie che gli corrispondono							******/
737        	/**** se un utente occupa quel ruolo contestualizzato essendo legato alla SO attraverso una scrivania viene restituita la scrivania anzichè l'utente, altrimenti lui 	******/
738        	function EsplodiRuoloContestualizzato(
739        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type,		-- (obblig.) Identificativo del ruolo amministrativo da esplodere
740        			FlgTpObjToExtractIn	IN		VARCHAR2,						-- Se valorizzato indica che espodendo si devono estrarre solo oggetti di un certo tipo.
741        																-- Valori ammessi:
742        																--	SV	=	Scrivanie viruali
743        																--	UT	=	Utente
744        																--	NULL	=	Entrambi
745        			IdDominioIn			IN 		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
746        																-- (obblig. a meno che IdUORifRuoloIn sia valorizzato) Identificativo del dominio di lavoro (vale a dire l'id. del soggetto produttore o AOO ) in cui esplodere il ruolo contestualizzato
747        																-- Se NULL e IdUORifRuoloIn è valorizzato, si esplode per il dominio (sogg. produttore/AOO) di appartenenza della UO
748        			LivUOLimRuoloIn		IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
749        																-- Livello (valori da 1 a n; 1 è il più alto) della UO in cui si deve espletare il ruolo da esplodere
750        			CodTipoUOLimRuoloIn	IN		DMT_STRUTTURA_ORG.COD_TIPO%type DEFAULT NULL,
751        																-- (alternativo a LivUOLimRuoloIn) Codice del tipo della UO in cui si deve espletare il ruolo da esplodere
752        			IdUORifRuoloIn		IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Id. della UO in cui si espleta il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui si espleta il ruolo da esplodere.
753        			FlgInclSottoUOIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 indica che il ruolo può espletarsi anche nelle sotto-UO di IdUORifRuoloIn o della/e UO a cui si risale da IdUORifRuoloIn
754        			TsVldIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
755        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere validi gli oggetti da estrarre. Se non valorizzato si intende che si debbano estrarre oggetti validi a qualsiasi timestamp
756        			)return DMTO_STRING;										-- Lista con le scrivanie e/o utenti in cui è stato esploso il ruolo
757        																-- Ogni record contiene la sigla del tipo di oggetto che rappresenta (UT o SV) concatenata con l'id. dell'oggetto stesso (ID_USER o ID_SCRIVANIA) (es: UT1001; SV99)
758        
759        	/**** Funzione per testare se un utente ha relazione con una data scrivania ad un certo timestamp ******/
760        	function TestRelUserVsSV (
761        			IdUserIn			IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell''utente
762        			IdScrivaniaIn		IN		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type,	-- (obblig.) Identificativo della scrivania
763        			FlgTpRelIn			IN		VARCHAR2 DEFAULT NULL,				-- Indica il tipo di relazione che si deve verificare se esiste.
764        																-- Valori ammessi:
765        																--	NULL	=	Qualsiasi
766        																-- 	A 	= 	Appartenenza alla UO in cui si colloca la scrivania (implica abilitazione a lavorare su documenti e fascicoli assegnati alla UO/scrivania con i propri privilegi)
767        																-- 	L 	= 	Abilitazione a lavorare su documenti e fascicoli assegnati alla scrivania con i propri privilegi
768        																-- 	D 	= 	Delega a lavorare su documenti e fascicoli della scrivania con i privilegi della stessa
769        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
770        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui la relazione deve essere valida. Se non valorizzato si intende sysdate
771        			FlgExclSVAltriIn	IN		PLS_INTEGER DEFAULT NULL)	-- Se 1 vengono considerate SOLO le scrivanie dell'utente e non quelle di altri su cui ha visibilità per effetto del flag FLG_INCL_SCRIVANIE=1
772        			return PLS_INTEGER;										-- Valori possibili:
773        																--	1	=	test positivo
774        																--	0	=	test negativo
775        																--	interi negativi = errore (il result è il codice d'errore)
776        
777        	/**** Funzione per testare se una UO/scrivania/utente/gruppo appartiene ad un dato gruppo	di soggetti interni						*****/
778        	/**** ATTENZIONE: un utente non viene dato come appartenente ad un gruppo solo perchè nel gruppo ricade una UO o scrivania cui è collegato	*****/
779        	function TestAppartenenzaAGruppo (
780        			IdGruppoIn			IN		DMT_GRUPPI.ID_GRUPPO%type,			-- (obblig.) Identificativo del gruppo a cui si deve testare l'apprtenenza
781        			FlgTpObjToTestIn		IN		VARCHAR2,						-- (obblig.) Indica il tipo di oggetto che si vuole testare se appartiene al gruppo IdGruppoIn
782        																-- Valori ammessi:
783        																--	UO	=	U.O.
784        																-- 	SV	=	Scrivania virtuale
785        																--	UT	=	Utente
786        																--	G	=	Gruppo
787        			IdObjToTestIn		IN		INTEGER,				-- (obblig.)  Identificativo (ID_UO o ID_USER o ID_SCRIVANIA o ID_GRUPPO) dell'oggetto che si vuole testare se appartiene al gruppo IdGruppoIn
788        			IdUOTramiteIn		IN		INTEGER DEFAULT NULL,	-- (considerata solo se FlgTpObjToTestIn = UT) Id. UO che deve fare da tramite per l'appartenenza al gruppo dell'utente da testare 
789        			FlgExclUOSVIncluseIn IN PLS_INTEGER DEFAULT NULL,
790        			FlgSoloNodiSmistIn	 IN	PLS_INTEGER DEFAULT NULL	-- Se 1 si considerano solo le UO "nodi di smistamento", se 0 si escludono le UO "nodi di smistamento"
791        			) return PLS_INTEGER;								-- Valori possibili:
792        																--	1	=	test positivo
793        																--	0	=	test negativo
794        																--	interi negativi = errore (il result è il codice d'errore)
795        
796        	/***** Table function per esplodere un gruppo di soggetti interni nell'insieme di utenti e/o UO e/o scrivanie e/o altri gruppi che ricomprende	******/
797        	/***** NOTA: Se una UO è nel gruppo con tutte le sue sotto-UO vengono mostrate tutte le sotto-UO								******/
798        	function EsplodiGruppo(
799        			IdGruppoIn			IN		DMT_GRUPPI.ID_GRUPPO%type,			-- (obblig.) Identificativo del gruppo da esplodere
800        			LstTpObjToExtractIn	IN		VARCHAR2,						-- Se valorizzato indica che espodendo si devono estrarre solo oggetti di un certo/certi tipi.
801        																-- Valori ammessi:
802        																--	SV	=	Scrivanie viruali
803        																--	UT	=	Utenti
804        																--	UO	=	U.O.
805        																--	G	=	Gruppi
806        																-- 	una qualsiasi concatenazione dei precedenti separati da "," (es: SV,UT,UO)
807        																--	NULL	=	Qualsiasi tipo
808        			TsVldIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
809        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere validi gli oggetti da estrarre. Se non valorizzato si intende che si debbano estrarre oggetti validi a qualsiasi timestamp
810        			)return DMTO_STRING;										-- Lista con le scrivanie e/o utenti e/o UO e/o gruppi in cui è stato esploso il gruppo
811        																-- Ogni record contiene la sigla del tipo di oggetto che rappresenta (UT o SV o UO o G) concatenata con l'id. dell'oggetto stesso (ID_USER o ID_SCRIVANIA o ID_UO o ID_GRUPPO) (es: UT1001; SV99; UO56)
812        
813        	/***** Funzione per testare se ad un certo timestamp un dato utente ha delega verso un altro utente ******/
814        	function TestDelUserVsUser(
815        			IdUserDelegatoIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell''utente che deve avere la delega
816        			IdUserDelegaVsIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell''utente verso cui si deve avere delega
817        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'))
818        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui la delega deve essere valida. Se non valorizzato si intende sysdate
819        			return PLS_INTEGER;										-- Valori possibili:
820        																--	1	=	test positivo
821        																--	0	=	test negativo
822        																--	interi negativi = errore (il result è il codice d'errore)
823        
824        	/******* Funzione per ottenere le deleghe di un dato utente verso altri utenti *******/
825        	function TrovaDelUtenteVsUtenti(
826        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
827        																-- (obblig). Codice identificativo del token di connessione
828        			IdUserDelegatoIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell'utente per cui trovare le deleghe verso altri utenti
829        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
830        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che le deleghe trovate siano valide. Se non valorizzato si intende che si richiedono deleghe valide a qualsisai data
831        			StrInDesUserIn		IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Stringa che deve essere contenuta nella denominazione (attuale) degli utenti verso cui devono essere le deleghe da trovare (ricerca case-insensitive in like)
832        			StrInUsernameIn		IN		DMT_USERS.USERNAME%type DEFAULT NULL,	-- Stringa che deve essere contenuta nella username (attuale) degli utenti verso cui devono essere le deleghe da trovare (ricerca case insensitive in like)
833        			StrInNroMatricolaIn	IN		DMT_USERS.NRO_MATRICOLA%type DEFAULT NULL,-- Stringa che deve essere contenuta nel N.ro di matricola (attuale) degli utenti verso cui devono essere le deleghe da trovare (ricerca case insensitive in like)
834        			FlgSoloUserVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL; gestito solo se TsRifIn è valorizzato) Indica se gli utenti verso cui devono essere le deleghe da trovare devono essere validi (1) o no al timestamp TsRifIn
835        			StrInNaturaDelIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa che deve essere contenuta nella natura/motivi delle deleghe da trovare (ricerca case insensitive in like)
836        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
837        			ColOrderByIO		IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso. Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
838        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
839        																-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
840        			FlgDescOrderByIO  	IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
841        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
842        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
843        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
844           			BachSizeIO			IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
845        																-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
846        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
847        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
848        			NroTotRecOut		OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
849             			NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
850        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
851        			ListaXMLOut			OUT		CLOB,							-- Lista degli utenti-deleghe trovate(XML conforme a schema LISTA_STD.xsd)
852        																-- Ogni utente-delega è un tag Riga che contiene 7 colonne:
853        																-- 1: Id. dell'utente
854        																-- 2: Descrizione dell'utente
855        																-- 3: Username dell'utente
856        																-- 4: N.ro di matricola dell'utente
857        																-- 5: Data di inizio validità delega (in formato dato dal parametro di cong. FMT_STD_DATA)
858        																-- 6: Data di fine validità della delega (in formato dato dal parametro di cong. FMT_STD_DATA)
859        																-- 7: Natura/motivo della delega
860        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
861        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
862        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
863        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
864        
865        	/***** Funzione per decodificare una scrivania virtuale di cui sia noto l'identificativo univoco *****/
866        	function DecodeScrivaniaVirt(
867        			IdScrivaniaIn		IN 		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type,	-- (obblig.) Identificativo della scrivania virtuale
868        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
869        																-- Valori possibili:
870        																-- <FULL> = Intestazione scrivania + eventuale descrizione utente che la occupa e suo titolo (se non già nell'intestazione) + ruolo che ha l'utente nella UO cui appartiene la scrivania (se non già nell'intestazione) + estremi della UO di appartenenza
871        																-- <INTESTAZIONE> = Intestazione della scrivania
872        																-- <DES_USER> = Denominazione dell''utente che la occupa
873        																-- <DES_RUOLO_USER> = Ruolo dell'utente quando la occupa
874        																-- <DENOMINAZIONE_UO> = Denominazione della UO in cui ricade (non preceduta da quelle delle UO superiori)
875        																-- <DENOMINAZIONE_UO_ESTESA> = Denominazione della UO in cui ricade preceduta da quelle di tutte le UO superiori (separate da " | ").
876        																-- <DENOMINAZIONE_UO_ESTESA_DA_LIV_n> = Denominazione della UO in cui ricade preceduta da quelle delle UO superiori di livello >=n (con n numero intero pari ad un livello delle struttura organizzativa)
877        																-- <LIVELLI_UO> = N.ri livello della UO in cui ricade (separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
878        																-- <LIVELLI_UO_DA_LIV_n> = N.ri livello della UO in cui ricade a partire dal n.ro del livello n-esimo (con n numero intero >1 pari ad un livello delle struttura organizzativa)
879        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
880        																-- ad es: <DENOMINAZIONE_UO> - <DES_RUOLO_USER> <DES_USER> significa che si richiedono la denominazione della UO di appartenenza seguita da ruolo e denominazione dell''utente che la occupa
881        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
882        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica della scrivania virtuale. Se non valorizzato si intende sysdate
883        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
884        
885        	/******* serve a ricercare una scrivania virtuale relativa ad un dato sogg. produttore o AOO a partire da Id. e/o dati della UO in cui si colloca e/o sua intestazione e/o dati di chi la occupa ******/
886        	/******* restituisce l'Id. della scrivania solo se a partire dagli estremi immessi riesce a identificarla univocamente													 ******/
887        	function FindScrivaniaVirt(
888        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la scrivania
889        			IdScrivaniaIn		IN 		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type DEFAULT NULL,
890        																-- Identificativo della scrivania
891        			IntestazioneScrivIn	IN		DMT_SCRIVANIE_VIRTUALI.INTESTAZIONE%type DEFAULT NULL,
892        																-- Intestazione della scrivania (o suo inizio; ricerca case insensitive in like).
893        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO in cui si trova la scrivania
894        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della UO in cui si trova la scrivania da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di UO valido per il soggetto produttore/AOO di appartenenza della UO)
895        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO in cui si trova la scrivania (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
896        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
897        			IdUserIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Identificativo dell'utente che la occupa
898        			DesUserIn			IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Denominazione dell'utente che la occupa (o suo inizio; ricerca case insensitive in like).
899        			IdRuoloIn			IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type DEFAULT NULL,
900        																-- Identificativo del ruolo che ricopre l'utente quando la occupa
901        			DesRuoloUserIn		IN		DMT_RUOLI_AMM.DES_RUOLO_AMM%type DEFAULT NULL,
902        																-- Descrizione del ruolo che ricopre l'utente quando la occupa (o suo inizio; ricerca case insensitive in like).
903        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la scrivania deve essere valida (1) o no
904        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
905        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la scrivania deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
906        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
907        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
908        			) return INTEGER;											-- restituisce ID_SCRIVANIA della scrivania se individuata, altrimenti NULL
909        
910        	---overload della precedente, con l'unica differenza che i livelli sono passati come XML anzichè come stringa
911        	function FindScrivaniaVirt(
912        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la scrivania
913        			IdScrivaniaIn		IN 		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type DEFAULT NULL,
914        																-- Identificativo della scrivania
915        			IntestazioneScrivIn	IN		DMT_SCRIVANIE_VIRTUALI.INTESTAZIONE%type DEFAULT NULL,
916        																-- Intestazione della scrivania (o suo inizio; ricerca case insensitive in like).
917        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO in cui si trova la scrivania
918        			LivelliXMLIn		IN		CLOB DEFAULT NULL,				-- XML (secondo schema LISTA_STD.xsd) con i n.ri livello della UO in cui si trova la scrivania (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori)(come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli).
919        																-- Ogni livello è un tag Riga che contiene 2 colonne:
920        																-- 1: Nro (intero), con il livello gerarchico,
921        																-- 2: Codice (alfanumerico) , con il n.ro identifcativo del livello
922        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO in cui si trova la scrivania (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
923        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
924        			IdUserIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Identificativo dell'utente che la occupa
925        			DesUserIn			IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Denominazione dell'utente che la occupa (o suo inizio; ricerca case insensitive in like).
926        			IdRuoloIn			IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type DEFAULT NULL,
927        																-- Identificativo del ruolo che ricopre l'utente quando la occupa
928        			DesRuoloUserIn		IN		DMT_RUOLI_AMM.DES_RUOLO_AMM%type DEFAULT NULL,
929        																-- Descrizione del ruolo che ricopre l'utente quando la occupa (o suo inizio; ricerca case insensitive in like).
930        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la scrivania deve essere valida (1) o no
931        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
932        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la scrivania deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
933        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
934        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
935        			) return INTEGER;											-- restituisce ID_SCRIVANIA della scrivania se individuata, altrimenti NULL
936        
937        	/***** Funzione per ottenere la decodifica di un ruolo contestualizzato, ovvero eventualmente circoscritto a UO di un certo livello e/o ad una specifica UO *****/
938        	/***** Es: Dirigente; Dirigenti di Settore; Dirigenti del Settore dalla UO...; Dirigenti dei Servizi dell'Area ...							*****/
939        	function DecodeRuoloContestualizzato (
940        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type,		-- (obblig.) Identificativo del ruolo amministrativo da decodificare
941        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
942        																-- (obblig. e gestito solo se VsLivelloSOIn o VsCodTipoUOIn è valorizzato e VsIdUOIn no) Identificativo del soggetto produttore o AOO in cui dare la decodifica
943        			VsLivelloSOIn		IN		INTEGER DEFAULT NULL,				-- Indica il livello della struttura organizzativa in cui si espleta il ruolo (intero da 1 a n; 1 è il più alto)
944        			VsCodTipoUOIn		IN		VARCHAR2 DEFAULT NULL,				-- (alternativo a VsLivelloSOIn) Indica il codice del tipo di UO in cui si espleta il ruolo (valori da dictionary entry TIPO_UO)
945        			VsIdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Id. della UO in cui si espleta il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui si espleta
946        			FlgInclSottoUOIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 indica che il ruolo può espletarsi anche nelle sotto-UO di VsIdUOIn o della/e UO a cui si risale da VsIdUOIn
947        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
948        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica. Se non valorizzato si intende sysdate
949        			) return VARCHAR2;										-- restituisce la descrizione del ruolo contestulaizzato o NULL in caso di errore
950        
951        	/***** Funzione per decodificare una classificazione di cui sia noto l'identificativo univoco *****/
952        	function DecodeClassificazione(
953        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO in cui si sta lavorando. Se NULL significa che ci si è autenticati nel dominio "schema"
954        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type,	-- (obblig.) Identificativo della classificazione
955        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
956        																-- Valori possibili:
957        																-- <DESCRIZIONE> = Descrizione della classificazione (non preceduta da quelle delle classificazioni superiori)
958        																-- <DESCRIZIONE_ESTESA> = Descrizione della classificazione preceduta da quelle di tutte le classificazioni superiori (separate da " | ").
959        																-- <DESCRIZIONE_ESTESA_DA_LIV_n> = Descrizione della classificazione preceduta da quelle delle classificazioni superiori di livello >=n (con n numero intero pari ad un livello del titolario)
960        																-- <LIVELLI> = N.ri livello della classificazione (separati dal separatore dei livelli valido per il soggetto produttore/AOO IdSpAOOIn)
961        																-- <LIVELLI_DA_LIV_n> = N.ri livello della classificazione a partire dal n.ro del livello n-esimo (con n numero intero >1 pari ad un livello del titolario)
962        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
963        																-- ad es: <LIVELLI> - <DENOMINAZIONE> significa che si richiedono livelli e denominazione separati da " - "
964        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
965        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica della classificazione. Se non valorizzato si intende sysdate
966        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
967        
968        	/******* serve a ricercare classificazioni (eventualmente relative ad un dato sogg. produttore o AOO) a partire da Id. e/o stringa con i codici di livello e/o denominazione 		******/
969        	/******* restituisce gli id. della/e classificazioni trovate																				******/
970        	function FindClassificazioni(
971        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve valere la classificazione
972        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type DEFAULT NULL,
973        																-- Identificativo della classificazione
974        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della classificazione da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di classificazione valido per il soggetto produttore/AOO IdSpAOOIn)
975        																				-- In alternativa può contenere Id Indice di Egrammata. Se esistono classifica e indice con id. indice = livelli classifica considera Id Indice Egrammata
976        			DesClassificazioneIn	IN		VARCHAR2 DEFAULT NULL,				-- Descrizione della classificazione (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle descrizioni delle calssificazioni superiori + quella della classificazione
977        																-- ATTENZIONE: mentre la ricerca sulla descrizione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le classificazioni con "figli" non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
978        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o no (al timestamp TsRifIn)
979        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
980        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la classificazione deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
981        			LivelloGerarchicoIn	IN		DMT_TITOLARIO.LIVELLO_GERARCHICO%type DEFAULT NULL,
982        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della classificazione
983        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
984        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
985        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL
986        																		-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in quello attualmente in vigore per il soggetto produttore/AOO
987        			) return DMTO_ID;											-- restituisce una lista con gli id. delle classificazioni trovate. In caso di errore la lista è NULL
988        
989        	/******* serve a ricercare una classificazione (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da Id. e/o stringa con i codici di livello e/o denominazione 	******/
990        	/******* restituisce l'Id. della classificazione solo se a partire dagli estremi immessi riesce a identificarla univocamente										******/
991        	function FindClassificazione(
992        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve valere la classificazione
993        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type DEFAULT NULL,
994        																-- Identificativo della classificazione
995        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della classificazione da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di classificazione valido per il soggetto produttore/AOO IdSpAOOIn)
996        																				-- In alternativa può contenere Id Indice di Egrammata. Se esistono classifica e indice con id. indice = livelli classifica considera Id Indice Egrammata
997        			DesClassificazioneIn	IN		VARCHAR2 DEFAULT NULL,				-- Descrizione della classificazione (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle descrizioni delle calssificazioni superiori + quella della classificazione
998        																-- ATTENZIONE: mentre la ricerca sulla descrizione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le classificazioni con "figli" non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
999        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o no (al timestamp TsRifIn)
1000        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1001        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la classificazione deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1002        			LivelloGerarchicoIn	IN		DMT_TITOLARIO.LIVELLO_GERARCHICO%type DEFAULT NULL,
1003        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della classificazione
1004        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
1005        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
1006        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL
1007        																		-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in quello attualmente in vigore per il soggetto produttore/AOO
1008        			) return INTEGER;											-- restituisce ID_CLASSIFICAZIONE della classificazione se individuata, altrimenti NULL
1009        
1010        	---overload della precedente, con l'unica differenza che i livelli sono passati come XML anzichè come stringa
1011        	function FindClassificazione(
1012        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve valere la classificazione
1013        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type DEFAULT NULL,
1014        																-- Identificativo della classificazione
1015        			LivelliXMLIn		IN		CLOB DEFAULT NULL,				-- XML (secondo schema LISTA_STD.xsd) con i n.ri livello della classificazione da ricercare (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori)(come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli).
1016        																-- Ogni livello è un tag Riga che contiene 2 colonne:
1017        																-- 1: Nro (intero), con il livello gerarchico,
1018        																-- 2: Codice (alfanumerico), con il n.ro identifcativo del livello
1019        			DesClassificazioneIn	IN		VARCHAR2 DEFAULT NULL,				-- Descrizione della classificazione (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle descrizioni delle calssificazioni superiori + quella della classificazione
1020        																-- ATTENZIONE: mentre la ricerca sulla descrizione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le classificazioni con "figli" non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
1021        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o no (al timestamp TsRifIn)
1022        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1023        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la classificazione deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1024        			LivelloGerarchicoIn	IN		DMT_TITOLARIO.LIVELLO_GERARCHICO%type DEFAULT NULL,
1025        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della classificazione
1026        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
1027        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
1028        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL
1029        																		-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in quello attualmente in vigore per il soggetto produttore/AOO
1030        			) return INTEGER;											-- restituisce ID_CLASSIFICAZIONE della classificazione se individuata, altrimenti NULL
1031        
1032        	--- funzione per trovare la classificazione corrispondente ad un indice eGrammata il cui ID sia fornito in input
1033        	function FindClassifExIndiceEgr(
1034        			IdIndiceEgrIn			IN			DMT_TITOLARIO.ID_INDICE_EGR%type,					-- (obblig.) Id. indice eGrammata della classifica da restituire
1035        			FlgSoloVldIn			IN			PLS_INTEGER DEFAULT 1,								-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o può anche essere non valida
1036        			IdPianoClassifIO		IN OUT		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type, 			-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in tutti quelli del soggetto produttore/AOO
1037        			IdSpAOOIO				IN OUT		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				-- (obblig.)Identificativo del soggetto produttore o AOO per cui trovare la classificazione. 
1038        			IdClassificazioneOut	OUT 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type,				-- Id. della clasificazione corrispondente all'indice eGrammata
1039        			LivelliClassifOut		OUT			VARCHAR2,											-- Livelli(così come vanno mostrati nella GUI) della clasificazione corrispondente all'indice eGrammata
1040        			DesClassificazioneOut	OUT			VARCHAR2,											-- Descrizione della clasificazione corrispondente all'indice eGrammata
1041        			ErrContextOut			OUT		VARCHAR2,												-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1042        			ErrCodeOut				OUT		PLS_INTEGER,											-- N.ro errore di uscita
1043        			ErrMsgOut				OUT 		VARCHAR2											-- Messaggio d'errore
1044        			) return PLS_INTEGER;																	-- Vale 1 la classificazione è stata trovata, altrimenti 0
1045        
1046        	--- overload della FindDocType: restituisce sempre 1 e l'id del doc type e' restituito come parametro di out nella firma
1047        	function FindDocType_J(
1048        			                 IdSpAOOIn			  IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	                       -- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1049        			                 IdDocTypeIn			IN 		DMT_DOC_TYPES.ID_DOC_TYPE%type DEFAULT NULL,                 -- Identificativo della tipologia
1050        			                 NomeDocTypeIn		IN		DMT_DOC_TYPES.NOME_DOC_TYPE%type DEFAULT NULL,               -- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1051        			                 FlgSoloVldIn		  IN		PLS_INTEGER DEFAULT 1,				                               -- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1052        			                 TsRifIn			    IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),  -- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1053        			                 ProvCIDocTypeIn	IN		DMT_DOC_TYPES.PROV_CI_DOC_TYPE%type DEFAULT NULL,			
1054        			                 IdDocTypeOut	    OUT		INTEGER                                                      -- Identificativo del doc type
1055                               ) return INTEGER; 																			-- sempre 1 salvo in caso di eccezione (nel qual caso è 0)
1056                         
1057        	             
1058        	/******* serve a ricercare una tipologia documentale (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome					 ******/
1059        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 					 ******/
1060        	function FindDocType(
1061        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1062        			IdDocTypeIn			IN 		DMT_DOC_TYPES.ID_DOC_TYPE%type DEFAULT NULL,
1063        																-- Identificativo della tipologia
1064        			NomeDocTypeIn		IN		DMT_DOC_TYPES.NOME_DOC_TYPE%type DEFAULT NULL,
1065        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1066        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1067        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1068        																	-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1069        			ProvCIDocTypeIn		IN		DMT_DOC_TYPES.PROV_CI_DOC_TYPE%type DEFAULT NULL
1070        																	-- Cod. della tipologia nel sistema da cui proviene (o suo inizio; ricerca case insensitive in like).
1071        			) return INTEGER;											-- restituisce ID_DOC_TYPE della tiplogia se individuata, altrimenti NULL
1072        
1073        	/******* serve a ricercare una tipologia di folder (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome					 ******/
1074        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 					 ******/
1075        	function FindFolderType(
1076        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1077        			IdFolderTypeIn		IN 		DMT_FOLDER_TYPES.ID_FOLDER_TYPE%type DEFAULT NULL,
1078        																-- Identificativo della tipologia
1079        			NomeFolderTypeIn		IN		DMT_FOLDER_TYPES.NOME_FOLDER_TYPE%type DEFAULT NULL,
1080        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1081        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1082        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
1083        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1084        			) return INTEGER;											-- restituisce ID_FOLDER_TYPE della tiplogia se individuata, altrimenti NULL
1085        
1086        	/******* serve a ricercare una tipologia di processo/procedimento (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome		******/
1087        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 					******/
1088        	function FindProcType(
1089        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1090        			IdProcessTypeIn		IN 		DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type DEFAULT NULL,
1091        																-- Identificativo della tipologia
1092        			NomeProcessTypeIn		IN		DMT_PROCESS_TYPES.NOME_PROCESS_TYPE%type DEFAULT NULL,
1093        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1094        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1095        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
1096        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1097        			) return INTEGER;											-- restituisce ID_PROCESS_TYPE della tiplogia se individuata, altrimenti NULL
1098        
1099        	/******* serve a ricercare una tipologia di processo/procedimento a partire dal nome	del tipo di documento iniziale	******/
1100        	/******* restituisce l'Id. del tipo procedimento e l'id. del tipo documento finale del procedimento			 					******/
1101        	function FindProcTyFromNomeDocTypeIni(
1102        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1103        			NomeDocTypeIniIn		IN		DMT_DOC_TYPES.NOME_DOC_TYPE%type,		-- Nome del tipo documento iniziale
1104        			IdProcessTypeOut		OUT		DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type,	-- Id. del tipo di processo/procedimento
1105        			IdDocTypeFinaleOut		OUT		DMT_DOC_TYPES.ID_DOC_TYPE%type,			-- Id. del tipo del documento finale del processo/procedimento
1106        			NomeDocTypeFinaleOut	OUT		DMT_DOC_TYPES.NOME_DOC_TYPE%type,		-- Nome del tipo del documento finale del processo/procedimento
1107        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1108        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
1109        			ErrMsgOut				OUT 		VARCHAR2							-- Messaggio d'errore
1110        			) return PLS_INTEGER;													-- restituisce 1 in caso di successo, 0 in caso di errore
1111        
1112        	/******* serve a ricercare a partire da id. e/o nome una tipologia di processo/procedimento che sia avviabile dall'utente di lavoro 	********/
1113        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarne univocamente una avviabile	********/
1114        	function FindProcTypeDaAvviare(
1115        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
1116        																-- (obblig). Codice identificativo del token di connessione
1117        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type,				-- Identificativo dell'utente di lavoro (se non valorizzato si intende che sia l'utente connesso)
1118        			IdProcessTypeIO		IN OUT 	DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type, 	-- Identificativo della tipologia (in output può non essere valorizzato solo in caso di errore)
1119        			NomeProcessTypeIn		IN		DMT_PROCESS_TYPES.NOME_PROCESS_TYPE%type DEFAULT NULL,
1120        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like senza forzare % finale).
1121        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1122        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1123        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1124        			) return PLS_INTEGER;										-- Vale 1 se l'individuazione è andata a buon fine, altrimenti 0
1125        
1126        	/******* serve a ricercare un formato elettronico ammesso(eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome e/o estensione	******/
1127        	/******* restituisce l'Id. del formato solo se a partire dagli estremi immessi riesce a identificarlo univocamente			 					******/
1128        	function FindFormatoElAmmesso(
1129        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1130        			IdFormatoElIn		IN 		DMT_FORMATI_EL_AMMESSI.ID_FORMATO_EL%type DEFAULT NULL,
1131        																-- Identificativo del formato
1132        			NomeFormatoElIn		IN		DMT_FORMATI_EL_AMMESSI.NOME_FORMATO%type DEFAULT NULL,
1133        																-- Nome del formato (o suo inizio; ricerca case insensitive in like).
1134        			EstensioneIn		IN		VARCHAR2 DEFAULT NULL,				-- Estensione associata al formato (ricerca esatta case-insensitive)
1135        			FlgSoloAmmIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il formato deve essere ammesso (1) o no
1136        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1137        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il formato deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1138        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1139        			MimeTypeIn			IN		DMT_FORMATI_EL_AMMESSI.MIMETYPE%type DEFAULT NULL
1140        																-- mimetype del formato (ricerca case-sensitive esatta)
1141        			) return INTEGER;											-- restituisce ID_FORMATO_EL del formato se individuato, altrimenti NULL
1142        
1143        	/******* serve a ricercare un tipo di registrazione/numerazione di unità doc. (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o descrizione e/o categoria + sigla	******/
1144        	/******* restituisce l'Id. del tipo solo se a partire dagli estremi immessi riesce a identificarlo univocamente			 											******/
1145        	function FindTipoRegNumUD(
1146        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il tipo di registrazione/numerazione
1147        			IdTipoRegNumIn		IN 		DMT_TIPI_REGISTRAZIONE.ID_TP_REGISTRAZIONE%type DEFAULT NULL,
1148        																-- Identificativo del tipo di registrazione/numerazione di unità doc.
1149        			CodCategoriaIn		IN		DMT_TIPI_REGISTRAZIONE.COD_CATEGORIA%type DEFAULT NULL,
1150        																-- Codice della categoria del tipo di registrazione/numerazione (protocollo gen, repertorio ecc) (ricerca esatta case-insensitive)
1151        			SiglaIn			IN		DMT_TIPI_REGISTRAZIONE.SIGLA%type DEFAULT NULL,
1152        																-- Sigla del tipo di registrazione/numerazione (ricerca esatta case-insensitive)
1153        			DesTipoRegNumIn		IN		DMT_TIPI_REGISTRAZIONE.DESCRIZIONE%type DEFAULT NULL,
1154        																-- Descrizione del tipo di registrazione/numerazione (o suo inizio; ricerca case insensitive in like).
1155        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1156        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1157        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1158        			FlgNoPercFinaleSuDesIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sulla descrizione non forza il % finale (a meno che non ci sia espressamente)
1159        			) return INTEGER;											-- restituisce ID_TIPO_REGISTRAZIONE della tiplogia se individuata, altrimenti NULL
1160        
1161        	/******* serve a ricercare un modello di registrazione di entità (eventualmente relativa ad un dato sogg. produttore o AOO e specifico per la reg. di entità di un dato tipo) a partire da id. e/o nome 			******/
1162        	/******* restituisce l'Id. del modello solo se a partire dagli estremi immessi riesce a identificarlo univocamente			 														******/
1163        	function FindModelloReg(
1164        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il modello
1165        			CodEntitaTargetIn		IN		DMT_MODELLI_REG_ENTITA.COD_TIPO_ENTITA_TARGET%type DEFAULT NULL,
1166        																-- Codice che identifica il tipo di entità per cui è il modello
1167        			IdModelloRegIn		IN		DMT_MODELLI_REG_ENTITA.ID_MODELLO_REG%type  DEFAULT NULL,
1168        																-- Identificativo univoco del modello di registrazione
1169        			NomeModelloRegIn		IN		DMT_MODELLI_REG_ENTITA.NOME_MODELLO_REG%type DEFAULT NULL,
1170        																-- Nome del modello di registrazione (o suo inizio; ricerca case insensitive in like)
1171        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il modello deve essere valido (1) o no
1172        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1173        			) return INTEGER;											-- restituisce ID_MODELLO_REG del modello se individuato, altrimenti NULL
1174        
1175        	/******* serve a ricercare un ruolo amministrativo a partire da id. e/o nome 							******/
1176        	/******* restituisce l'Id. del ruolo solo se a partire dagli estremi immessi riesce a identificarlo univocamente	******/
1177        	function FindRuoloAmm(
1178        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il ruolo
1179        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type  DEFAULT NULL,
1180        																-- Identificativo univoco del ruolo
1181        			DesRuoloAmmIn		IN		DMT_RUOLI_AMM.DES_RUOLO_AMM%type DEFAULT NULL,
1182        																-- Descrizione del ruolo (o suo inizio; ricerca case insensitive in like)
1183        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il ruolo deve essere valido (1) o no
1184        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1185        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il ruolo deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1186        			FlgNoPercFinaleSuDesIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sulla descrizione non forza il % finale (a meno che non ci sia espressamente)
1187        			) return INTEGER;											-- restituisce ID_RUOLO_AMM del ruolo se individuato, altrimenti NULL
1188        
1189        	/******* serve a ricercare un profilo di utente, UO o scrivania virtuale (senza nome o con, ovvero specifico o meno di un singolo utente/UO/scrivania) a partire da id. e/o nome 		******/
1190        	/******* restituisce l'Id. del profilo solo se a partire dagli estremi immessi riesce a identificarlo univocamente												******/
1191        	function FindProfilo(
1192        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il profilo
1193        			IdProfiloIn			IN		DMT_PROFILI.ID_PROFILO%type  DEFAULT NULL,
1194        																-- Identificativo univoco del profilo
1195        			NomeProfiloIn		IN		DMT_PROFILI.NOME_PROFILO%type DEFAULT NULL,
1196        																-- Nome del profilo (o suo inizio; ricerca case insensitive in like)
1197        			FlgTargetIn			IN		VARCHAR2 DEFAULT NULL,				-- (valori UT/UO/SV) Serve a ricercare solo profilo legato a utente/i (UT) o Unità Operativa (UO) o scrivania virtuale (SV)
1198        			FlgSoloGeneralizzatiIn	IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Indica se il profilo deve essere uno generalizzato (1), cioè agganciabile a più soggetti e quindi con un suo nome, o uno specifico di un singolo soggetto (senza nome)
1199        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il profilo deve essere valido (1) o no
1200        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1201        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il profilo deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1202        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1203        			) return INTEGER;											-- restituisce ID_PROFILO del ruolo se individuato, altrimenti NULL
1204        
1205        	/******* serve a ricercare un gruppo di privilegi a partire da id. e/o nome 								******/
1206        	/******* restituisce l'Id. del gruppo solo se a partire dagli estremi immessi riesce a identificarlo univocamente		******/
1207        	function FindGruppoPrivilegi(
1208        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il gruppo di privilegi
1209        			IdGruppoIn			IN		DMT_GRUPPI_PRIVILEGI.ID_GRUPPO_PRIV%type DEFAULT NULL,
1210        																-- Identificativo univoco del gruppo di privilegi
1211        			NomeGruppoIn		IN		DMT_GRUPPI_PRIVILEGI.NOME_GRUPPO_PRIV%type DEFAULT NULL,
1212        																-- Nome del gruppo di privilegi (o suo inizio; ricerca case insensitive in like)
1213        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il gruppo di privilegi deve essere valido (1) o no
1214        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1215        			) return INTEGER;											-- restituisce ID_GRUPPO_PRIV del gruppo di privilegi se individuato, altrimenti NULL
1216        
1217        	/******* serve a ricercare un gruppo di soggetti interni (utenti/UO/scrivanie) a partire da id. e/o nome 			******/
1218        	/******* restituisce l'Id. del gruppo solo se a partire dagli estremi immessi riesce a identificarlo univocamente		******/
1219        	function FindGruppo(
1220        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il gruppo
1221        			IdGruppoIn			IN		DMT_GRUPPI.ID_GRUPPO%type DEFAULT NULL,
1222        																-- Identificativo univoco del gruppo
1223        			NomeGruppoIn		IN		DMT_GRUPPI.NOME_GRUPPO%type DEFAULT NULL,
1224        																-- Nome del gruppo (o suo inizio; ricerca case insensitive in like)
1225        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il gruppo deve essere valido (1) o no (al timestamp indicato nell'argomento successivo)
1226        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1227        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il gruppo deve essere valido ed evere gli estremi indicati in input. Se non valorizzato si intende sysdate
1228        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1229        			ProvCIGruppoIn		IN		DMT_GRUPPI.PROV_CI_GRUPPO%type DEFAULT NULL	
1230        																	-- Codice origine del gruppo (ricerca case-sensitive esatta)
1231        			) return INTEGER;											-- restituisce ID_GRUPPO del gruppo se individuato, altrimenti NULL
1232        
1233        	/********* Funzione per ottenere l'identificativo di un'unità documentaria a partire dagli estremi di una sua registrazione/numerazione *************/
1234        	function GetIdUDFromEstremiRegNum(
1235        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
1236        																			-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1237        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,			-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1238        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla di registrazione/numerazione dell'unità documentaria
1239        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,			-- Anno di registrazione/numerazione dell'unità documentaria
1240        			NumRegIn			IN		PLS_INTEGER DEFAULT NULL,			-- (obblig.)  N.ro di registrazione/numerazione dell'unità documentaria
1241        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)				-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1242        			return INTEGER;													-- Identificativo dell'unità documentaria trovata
1243        																			-- vale NULL in caso di errore o unità non trovata univocamente
1244        
1245        	/******* serve a ricercare un'unità documentaria (in un dato dominio) a partire da Id. e/o estremi di una sua registrazione/numerazione 		******/
1246        	/******* restituisce l'Id. dell'unità documentaria solo se a partire dagli estremi immessi riesce a identificarla univocamente			******/
1247        	function FindUD(
1248        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1249        			IdUDIn			IN		INTEGER DEFAULT NULL,						-- Identificativo unità documentaria
1250        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1251        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria
1252        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria
1253        			NumRegIn			IN		INTEGER DEFAULT NULL,					-- N.ro di registrazione/numerazione dell'unità documentaria
1254        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data applicazione
1255        			CodIstApplOwnerIn	IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data istanza di applicazione
1256        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1257        			return INTEGER;														-- Identificativo dell'unità documentaria trovata
1258        																				-- vale NULL in caso di errore o se l'unità non esiste/non è individuabile univocamente
1259        
1260        	--- overload della precedente: l'unica differenza è che restituisce -1 in caso di errore o se l'UD non viene trovata
1261        	function FindUD_J(
1262        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1263        			IdUDIn			IN		INTEGER DEFAULT NULL,						-- Identificativo unità documentaria
1264        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1265        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria
1266        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria
1267        			NumRegIn			IN		INTEGER DEFAULT NULL,					-- N.ro di registrazione/numerazione dell'unità documentaria
1268        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data applicazione
1269        			CodIstApplOwnerIn	IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data istanza di applicazione
1270        			IdUDOut				OUT		INTEGER,								-- Identificativo dell'unità documentaria trovata
1271        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1272        			return INTEGER;														-- vale sempre 1
1273        
1274        	--- simile alla precedenti FindUD solo che restuituisce dei dati di ritorno se trovata UD
1275        	function FindUD_Output(
1276        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
1277        																				-- (obblig). Codice identificativo del token di connessione
1278        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1279        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria
1280        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria
1281        			NumRegIn			IN		INTEGER DEFAULT NULL,					-- N.ro di registrazione/numerazione dell'unità documentaria
1282        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1283        			IdUDOut				OUT		INTEGER,								-- Identificativo dell'unità documentaria trovata
1284        			IdDocPrimarioOut	OUT		INTEGER,								-- ID_DOC del documento primario dell'unità documentaria trovata
1285        			DatiUDOut			OUT		NOCOPY CLOB)							-- XML SezioneCache con dati sull'UD trovata
1286        																				-- Variabili contenute:
1287        																				-- 		@MittentiEsibenti Variabile lista con una sola colonna che contiene il nominativo del mittente/esibente
1288        																				-- 		Oggetto  
1289        																				--		FLG_UD_DA_DATA_ENTRY_SCANSONI valori 1/0 Se 1 indica che è un protocollo salvato attraverso il data-entry di scansioni
1290        			return INTEGER;														-- vale sempre 1
1291        
1292        	
1293        	/******** Funzione per ottenere l'identificativo del documento che corrisponde al primario o n-esimo allegato di una data unità documentaria *******/
1294        	/******** Indicata attraverso il suo identificativo IdUDIn o attraverso gli estremi di una registrazione/numerazione assegnatale		   *******/
1295        	function GetIdDocPrimarioAllegatoFromUD(
1296        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type, 	-- (obblig. salvo se valorizzata IdUDIn) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1297        			IdUDIn			IN		INTEGER DEFAULT NULL,						-- Identificativo unità documentaria cui appartiene il documento
1298        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1299        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1300        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1301        			NumRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- N.ro di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1302        			NroDocVsUDIn		IN		PLS_INTEGER,							-- (obblig.) Serve a identificare il documento di cui trovare l'ID_DOC rispetto all'unità documentaria
1303        																				-- 0 = File primario
1304        																				-- n, numero da 1 in su = allegato n-esimo.
1305        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1306        			return INTEGER;														-- è l'ID_DOC se trovato, altrimenti -1
1307        
1308        	/******** Funzione per ottenere l'identificativo del documento che corrisponde al primario o n-esimo allegato di una data unità documentaria *******/
1309        	/******** Indicata attraverso il suo identificativo IdUDIn o attraverso gli estremi di una registrazione/numerazione assegnatale		     *******/
1310        	/******** IMPORTANTE: Il Nro di allegato non è quello effettivo a DB ma il N° posizione a video, ovvero il N° di allegato valido			 *******/
1311        	function GetIdDocPAllFromUD_ByPos(
1312        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type, 	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1313        			IdUDIn					IN		INTEGER DEFAULT NULL,					-- Identificativo unità documentaria cui appartiene il documento
1314        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,					-- Codice della categoria di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1315        			SiglaRegIn				IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1316        			AnnoRegIn				IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1317        			NumRegIn				IN		PLS_INTEGER DEFAULT NULL,				-- N.ro di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1318        			NroPosizioneAllIn		IN		PLS_INTEGER,							-- Serve a identificare il documento di cui trovare l'ID_DOC rispetto all'unità documentaria
1319        																					-- 0 = File primario
1320        																					-- n, numero da 1 in su che indica la posizione dell'allegato tra gli allegati validi
1321        																					-- Se è vuoto significa che si vuole sapere in che posizione - primario o nuovo allegato - caricare un'immagine che nel barcode ha gli estremi UD e non il n.ro posizione
1322        			NroUltimoAllegatoOut	OUT		PLS_INTEGER,							-- N.ro posizione dell'ultimo allegato valido esistente in DB per l'UD (0 se non ce ne sono)
1323        			IdDocOut				OUT		INTEGER,								-- Id. del doumento trovato (se non trovato è NULL)
1324        			SubNumRegIn				IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione dell'unità documentaria cui appartiene il documento
1325        			return PLS_INTEGER;														-- è 1 se trovato l'IdDoc, altrimenti 0
1326        
1327        	
1328        	/******** Funzione per ottenere l'identificativo del documento che corrisponde al doc primario di un'UD in una pratica storica identificata da registrazione del documento capofila  *******/
1329        	/******** IMPORTANTE: Il Nro di posizione dell'UD nella pratica non è quello effettivo a DB ma il N° posizione a video			 													 ******/
1330        	function GetIdDocInPraticaStorica_ByPos(
1331        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type, 	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1332        			CodCategoriaRegIn		IN		VARCHAR2,								-- Codice della categoria di registrazione/numerazione dell'unità documentaria capofila della pratica
1333        			SiglaRegIn				IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria capofila della pratica
1334        			AnnoRegIn				IN		PLS_INTEGER,							-- Anno di registrazione/numerazione dell'unità documentaria capofila della pratica
1335        			NumRegIn				IN		PLS_INTEGER,							-- N.ro di registrazione/numerazione dell'unità documentaria capofila della pratica
1336        			SubNumRegIn				IN		VARCHAR2 DEFAULT NULL,					-- Sub del n.ro di registrazione dell'unità documentaria capofila della pratica
1337        			SezionePraticaIn		IN		VARCHAR2 DEFAULT NULL,					-- Specifica sezione della pratica in cui va messo/si trova il documento
1338        			NroPosDocInPraticaIn	IN		PLS_INTEGER DEFAULT NULL,				-- n, numero da 1 in su che indica la posizione dell'UD nella pratica tra le UD valide
1339        																					-- Se è vuoto significa che si vuole caricare un'immagine come nuova UD nella pratica, senza caricarla in una posizione specifica
1340        			NroPosizioneUltimaUDOut	OUT		PLS_INTEGER,							-- N.ro posizione dell'ultima UD nella pratica o sezione della pratica (0 se non ce ne sono)
1341        			IdDocOut				OUT		INTEGER,								-- Id. del doumento primario dell'UD che corrisponde al N.ro posizione indicato o al prossimo n.ro posizione da occupare con un file
1342        			IdFolderOut				OUT		INTEGER)								-- Id. del folder che corrisponde alla pratica
1343        			return PLS_INTEGER;														-- è 1 in caso chiamata andata a buon fine, altrimenti 0
1344        
1345        
1346        	/******** Funzione per ottenere gli estremi di una registrazione/numerazione di un'unità documentaria di cui è noto l'id.********/
1347        	function GetEstremiRegNumUD(
1348        			IdUDIn			IN		INTEGER,								-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1349        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1350        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1351        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1352        																			-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1353        																			-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1354        			SiglaRegIO			IN OUT	VARCHAR2,							-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1355        																			-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1356        			AnnoRegOut			OUT		PLS_INTEGER,						-- Anno di registrazione/numerazione
1357        			NumRegOut			OUT		INTEGER,							-- N.ro di registrazione
1358        			TsRegOut			OUT		DATE)								-- Data e ora di registrazione/numerazione
1359        			return PLS_INTEGER;												-- restituisce 1 in caso di estremi trovati, altrimenti 0
1360        	
1361        	/******** overload della function precedente con in più il sub del nro di registrazione come output							********/
1362        	function GetEstremiRegNumUD(
1363        			IdUDIn			IN		INTEGER,								-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1364        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1365        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1366        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1367        																			-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1368        																			-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1369        			SiglaRegIO			IN OUT	VARCHAR2,							-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1370        																			-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1371        			AnnoRegOut			OUT		PLS_INTEGER,						-- Anno di registrazione/numerazione
1372        			NumRegOut			OUT		INTEGER,							-- N.ro di registrazione
1373        			TsRegOut			OUT		DATE,								-- Data e ora di registrazione/numerazione
1374        			SubNumRegOut		OUT		VARCHAR2)							-- Sub del nro di registrazione
1375        			return PLS_INTEGER;												-- restituisce 1 in caso di estremi trovati, altrimenti 0
1376        
1377        	/******** identica alla precedente ma con nome diverso per essere richiamata da java ********/
1378        	function GetEstremiRegNumUD_J(
1379        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1380        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1381        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1382        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1383        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1384        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1385        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1386        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1387        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1388        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1389        			TsRegOut			OUT		DATE)							-- Data e ora di registrazione/numerazione
1390        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1391        			
1392        	/******** Funzione per ottenere gli estremi di una registrazione/numerazione di un'unità documentaria di si ha la lista di estremi di reg./num.********/
1393        	function GetEstremiRegNumUD(
1394        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1395        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1396        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1397        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1398        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1399        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1400        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1401        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1402        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1403        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1404        			TsRegOut			OUT		DATE)							-- Data e ora di registrazione/numerazione
1405        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1406        			
1407        	/******** overload della function precedente con in più il sub del nro di registrazione come output							********/
1408        	function GetEstremiRegNumUD(
1409        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1410        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1411        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1412        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1413        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1414        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1415        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1416        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1417        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1418        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1419        			TsRegOut			OUT		DATE,							-- Data e ora di registrazione/numerazione
1420        			SubNumRegOut		OUT		VARCHAR2)							-- Sub del nro di registrazione
1421        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1422        
1423        	function GetEstremiRegNumUD(
1424        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1425        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1426        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1427        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1428        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1429        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1430        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1431        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1432        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1433        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1434        			TsRegOut			OUT		VARCHAR2)						-- Data e ora di registrazione/numerazione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1435        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1436        			
1437        	
1438        	/******** overload della function precedente con in più il sub del nro di registrazione come output							********/
1439        	function GetEstremiRegNumUD(
1440        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1441        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1442        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1443        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1444        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1445        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1446        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1447        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1448        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1449        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1450        			TsRegStrOut			OUT		VARCHAR2,						-- Data e ora di registrazione/numerazione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1451        			SubNumRegOut		OUT		VARCHAR2)							-- Sub del nro di registrazione
1452        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1453        
1454        
1455        	------------overload delle precedenti senza argomenti di output (quindi utilizzabile in una query)
1456        	function GetEstremiRegNumUD(
1457        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1458        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1459        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1460        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1461        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1462        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1463        			FlgFmtEstremiIn		IN		VARCHAR2,						-- (obblig.) Formato con cui mostrare gli estremi cercati:
1464        																-- Valori possibili:
1465        																-- <FULL> = Categoria [sigla] Data o Anno.Nro
1466        																-- <FULL+TIPO_PROV> = Categoria [sigla] .Data o Anno.Nro[.E/I/U]
1467        																-- <ORDER_BY_VALUE> mette categoria, sigla, anno e numero in modo utile per ordinare privilegiando le numerazioni ufficiali e poi in ordine coronologico 
1468        																-- <CATEGORIA> = Descrizione della categoria di registrazione/numerazione
1469        																-- <SIGLA> = Sigla di registrazione/numerazione
1470        																-- <DES_SEZIONALE> = Decodifica SIGLA presa da DMT_SEZIONALI
1471        																-- <DES_REGISTRO> = Decodifica SIGLA presa da DMT_TIPI_REGISTRAZIONE
1472        																-- <ANNO> = Anno di registrazione/numerazione
1473        																-- <NRO> = N.ro di registrazione/numerazione
1474        																-- <NRO_NOPAD> = N.ro di registrazione/numerazione senza LPAD con 0 fino a 7 cifre
1475        																-- <DATA> = Data di registrazione (nel formato dato dal parametro di config. FMT_STD_DATA del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1476        																-- <ORA> = Orario di registrazione (nel formato HH24:MI)
1477        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
1478        																-- ad es: <NRO>/<ANNO>; <SIGLA>/<ANNO>/<NRO> del <DATA>
1479        			FlgTpDominioIn		IN	PLS_INTEGER DEFAULT NULL,				-- (obblig. se il formato contiene <CATEGORIA>) Indica il tipo di dominio (2 = Soggetto produttore; 3 = AOO) cui è relativa l'UD
1480        			IdSpAOOIn			IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
1481        																-- (obblig. se il formato contiene <CATEGORIA>) Identificativo del del soggetto produttore o AOO cui è relativa l'UD
1482        			FmtDataIn			IN	VARCHAR2 DEFAULT NULL,					-- (serve se il formato contiene <DATA>) Formato per la data (formato Oracle); se non valorizzato si prende il formato di default per IdSpAOOIn
1483        			TipoProvIn			IN	DMT_UNITA_DOC.FLG_TIPO_PROV%type DEFAULT NULL)  --indica il tipo di registrazione: E = Entrata, U = Uscita, I = Interna
1484        			return VARCHAR2;											-- estremi cercati; è NULL solo in caso di errore registrazione/numerazione non presente
1485        
1486        	------------overload delle precedenti senza argomenti di output (quindi utilizzabile in una query)
1487        	function GetEstremiRegNumUD(
1488        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1489        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1490        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1491        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1492        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1493        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1494        			FlgFmtEstremiIn		IN		VARCHAR2)						-- (obblig.) Formato con cui mostrare gli estremi cercati:
1495        																-- Valori possibili:
1496        																-- <FULL> = Categoria [sigla] Data o Anno.Nro
1497        																-- <FULL+TIPO_PROV> = Categoria [sigla] .Data o Anno.Nro[.E/I/U]
1498        																-- <ORDER_BY_VALUE> mette categoria, sigla, anno e numero in modo utile per ordinare privilegiando le numerazioni ufficiali e poi in ordine coronologico 
1499        																-- <CATEGORIA> = Descrizione della categoria di registrazione/numerazione
1500        																-- <SIGLA> = Sigla di registrazione/numerazione
1501        																-- <DES_SEZIONALE> = Decodifica SIGLA presa da DMT_SEZIONALI
1502        																-- <DES_REGISTRO> = Decodifica SIGLA presa da DMT_TIPI_REGISTRAZIONE
1503        																-- <ANNO> = Anno di registrazione/numerazione
1504        																-- <NRO> = N.ro di registrazione/numerazione
1505        																-- <NRO_NOPAD> = N.ro di registrazione/numerazione senza LPAD con 0 fino a 7 cifre
1506        																-- <DATA> = Data di registrazione (nel formato dato dal parametro di config. FMT_STD_DATA del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1507        																-- <ORA> = Orario di registrazione (nel formato HH24:MI)
1508        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
1509        																-- ad es: <NRO>/<ANNO>; <SIGLA>/<ANNO>/<NRO> del <DATA>
1510        			return VARCHAR2;											-- estremi cercati; è NULL solo in caso di errore registrazione/numerazione non presente
1511        
1512        	------------funzione per ottenere lo stato di annullamento di una registrazione/numerazione di UD senza argomenti di output (quindi utilizzabile in una query)
1513        	function GetStatoAnnRegNumUD(
1514        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gli estremi di registrazione/numerazione dell'UD
1515        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,			-- Codice della categoria di registrazione/numerazione di cui ricavare stato di annullamento
1516        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1517        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1518        																			-- Se non è valorizzata viene considerata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1519        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL)				-- Sigla della registrazione/numerazione di cui ricavare stato di annullamento
1520        			return VARCHAR2;												-- stato di annullamento: valori A = Annullata, R = Richiesto annullamento (e non ancora autorizzato); D = Autorizzato annullamento (ma non ancora effettuato); NULL
1521        
1522        	------------funzione per ottenere i dettagli dell'annullamento o richiesta di annullamento di una registrazione/numerazione di UD senza argomenti di output (quindi utilizzabile in una query)
1523        	function GetDettAnnRegNumUD(
1524        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gli estremi di registrazione/numerazione dell'UD
1525        			CodCategoriaRegIn	IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione di cui ricavare i dettagli dell'annullamento o richiesta di annullamento
1526        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1527        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1528        																			-- Se non è valorizzata viene considerata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1529        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla della registrazione/numerazione di cui ricavare i dettagli dell'annullamento o richiesta di annullamento
1530        			TsLastUpdStatoIn	IN		DATE)								-- Data e ora di ultimo cambio di stato dell'unità documentaria
1531        			return VARCHAR2;												-- stringa con i dettagli dell'annullamento o richiesta di annullamento (quando, ad opera di chi, autorizzata con che atto)
1532        
1533        	/******** Funzione per ottenere data e ora di una registrazione/numerazione di un'unità documentaria di cui è noto l'id.********/
1534        	function GetTsRegNumUD(
1535        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1536        			CodCategoriaRegIn		IN		VARCHAR2,						-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1537        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1538        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1539        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1540        			SiglaRegIO			IN		VARCHAR2						-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1541        			)return DATE;											-- Data e ora di registrazione/numerazione
1542        
1543        	/******** Funzione per ottenere data e ora di una registrazione/numerazione di un'unità documentaria di cui è nota la lista di estremi di reg./num.********/
1544        	function GetTsRegNumUD(
1545        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1546        			CodCategoriaRegIn		IN		VARCHAR2,						-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1547        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1548        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1549        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1550        			SiglaRegIO			IN		VARCHAR2						-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1551        			)return DATE;											-- Data e ora di registrazione/numerazione
1552        
1553        	/**** Funzione per ottenere l'id. dell'unità documentaria di un documento con un certo id. *****/
1554        	function GetIdUDOfDoc(
1555        			IdDocIn			IN		DMT_DOCUMENTS.ID_DOC%type)			-- Id. del documento di cui trovare l'unità documentaria di appartenenza
1556        			return DMT_UNITA_DOC.ID_UD%type;								-- id. dell'unità documentaria se trovata, NULL in caso di errore
1557        
1558        	/***** Funzione per creare in DB la cache in cui registrare le variabili di un dato flusso di navigazione applicativo  	*****/
1559        	/***** se la cache già c'era quella preesistente viene cancellata (la si reinizializza)						*****/
1560        	function InitCacheFlussoNav(
1561        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di cui creare la cache
1562        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1563        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1564        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1565        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1566        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1567        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1568        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1569        
1570        	/***** Funzione per cancellare da DB la cache con le le variabili di un dato flusso di navigazione applicativo  *****/
1571        	function DelCacheFlussoNav(
1572        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di cui eliminare la cache
1573        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1574        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1575        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1576        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1577        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1578        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1579        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1580        
1581        	/***** Funzione per inserire/aggiornare il/i valori di una data variabile di un dato flusso  navigazione applicativo	*****/
1582        	/***** se c'erano già dei valori presenti per la variabile (ed eventuale sezione indicata) questi vengono rimossi; 	*****/
1583        	/***** i nuovi valori sono registrati mantenendo l'ordine con cui sono forniti in input						*****/
1584        	/***** se la cache del flusso di navigazione non esiste, viene inizializzata								*****/
1585        	function SetVarCacheFlussoNav(
1586        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1587        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione per cui settare la variabile
1588        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (mono-valore e non strutturata) di cui settare il valore (controllato in modalità case-sensitive)
1589        			ValoreIn			IN		VARCHAR2,						-- Valore da assegnare alla variabile
1590        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1591        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1592        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1593        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1594        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1595        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1596        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1597        
1598        	function SetVarCacheFlussoNav(
1599        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1600        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione per cui settare la variabile
1601        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-valore e/o strutturata) di cui settare il valore (controllato in modalità case-sensitive)
1602        			ValoreIn			IN		CLOB,							-- Valore/i da assegnare alla variabile (XML conforme a schema LISTA_STD.xsd)
1603        																-- Ogni valore è un tag Riga
1604        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1605        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1606        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1607        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1608        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1609        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1610        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1611        
1612        	/***** Funzione per modificare o aggiungere dei record ad una variabile di un dato flusso  navigazione applicativo che è una lista di record 	*****/
1613        	/***** se la cache del flusso di navigazione non esiste, viene inizializzata												*****/
1614        	function SetRecVarCacheFlussoNav(
1615        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1616        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione cui appartiene la variabile multi-record di cui settare un record
1617        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-record) di cui settare il record (controllato in modalità case-sensitive)
1618        			FlgActionTypeIn		IN		VARCHAR2 DEFAULT 'A',				-- (obblig.) Tipo di azione da fare; valori ammessi:
1619        																-- A = Aggiunta di record
1620        																-- M = Modifica di record esistenti
1621        			NroPaginaIn			IN		PLS_INTEGER DEFAULT 1,				-- N.ro della pagina in cui viene mostrato il primo record da modificare o quello dopo cui aggiungere il/i nuovi record. Se NULL si intende 1
1622        			DimPaginaIn			IN		PLS_INTEGER,					-- N.ro di record per pagina. Obbligatorio se NroPaginaIn>1
1623        			PosRecInPaginaIn		IN		PLS_INTEGER,					-- (obblig. se FlgActionTypeIn='M') Posizione (interi da 1 a DimPaginaIn) che ha nella pagina il primo record da modificare o che deve avere il primo record da aggiungere (se posizione già occupata da un record quello e i successivi vengono spostati dopo). Se NULL il/i record vengono aggiunti dopo l'ultimo della pagina
1624        			ValoreRecordIn		IN		CLOB,							-- Valore/i da assegnare ai campi dei record (XML conforme a schema LISTA_STD.xsd; verranno aggiunti/modificati tanti record quanti i tag Riga)
1625        																-- I campi corrispondenti a colonne non specificate nei tag Riga, se si tratta di modifica, verranno settati a NULL
1626        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1627        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1628        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1629        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1630        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1631        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1632        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1633        
1634        	/***** Funzione per settare più variabili di una data sezione di un dato flusso di navigazione applicativo			*****/
1635        	/***** le variabili già settate nella sezione e non presenti in input restano invariate						*****/
1636        	/***** se la cache del flusso di navigazione non esiste, viene inizializzata								*****/
1637        	function SetSezCacheFlussoNav(
1638        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1639        			SezioneFlussoIn		IN		VARCHAR2,						-- (obblig.) Sezione del flusso di navigazione per cui settare le variabili
1640        			VariabiliIn			IN		CLOB,							-- (obblig.) Nomi e valore/i delle variabili da settare nella sezione (XML conforme a schema SezioneCache.xsd)
1641        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1642        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1643        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1644        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1645        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1646        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1647        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1648        
1649        	/***** Funzione per rimuovere dalla cache di un dato flusso di navigazione o un data variabile o tutte le variabili di una data sezione *****/
1650        	FUNCTION DelVarSezCacheFlussoNav(
1651        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1652        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione per cui cancellare la variabile indicata o tutte le variabili (controllo in modalità case-insensitive)
1653        			NomeVariabileIn		IN		VARCHAR2,						-- Nome della variabile da cancellare(controllato in modalità case-sensitive)
1654        																-- Se NULL significa che tutte le variabili della sezione sono da cancellare
1655        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1656        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1657        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1658        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1659        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1660        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1661        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1662        
1663        	/***** Funzione per rimuovere dalla cache di un dato flusso di navigazione una lista di variabili di una data sezione*****/
1664        	FUNCTION DelVarSezCacheFlussoNav_Multi(
1665        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1666        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione per cui cancellare le variabile indicate (controllo in modalità case-insensitive)
1667        			NomiVariabiliIn		IN		CLOB,							-- Lista con i nomi delle variabili da cancellare (conforme a schema LISTA_STD.xsd)
1668        																-- Ogni tag Riga contiene una sola colonna con il nome della variabile
1669        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1670        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1671        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1672        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1673        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1674        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1675        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1676        
1677        	/***** Funzione per rimuovere un record da una variabile di un dato flusso  navigazione applicativo che è una lista di record 		*****/
1678        	function DelRecVarCacheFlussoNav(
1679        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1680        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione cui appartiene la variabile multi-record di cui cancellare un record
1681        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-record) di cui cancellare il record (controllato in modalità case-sensitive)
1682        			NroPaginaIn			IN		PLS_INTEGER DEFAULT 1,				-- N.ro della pagina in cui viene mostrato il record da cancellare. Se NULL si intende 1
1683        			DimPaginaIn			IN		PLS_INTEGER,					-- N.ro di record per pagina. Obbligatorio se NroPaginaIn>1
1684        			PosRecInPaginaIn		IN		PLS_INTEGER,					-- (obblig.) Posizione (interi da 1 a DimPaginaIn) che ha nella pagina il record da cancellare.
1685        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1686        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1687        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1688        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1689        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1690        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1691        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1692        
1693        	/***** Funzione per ricavare il/i valori di una data variabile di un dato flusso di  navigazione 			*****/
1694        	/***** i valori vengono restituiti mantenendo l'ordine con cui sono stati salvati in DB					*****/
1695        	function GetVarCacheFlussoNav(
1696        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso da cui estrarre il valore
1697        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione da cui estrarre la variabile indicata (controllo in modalità case-insensitive)
1698        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile della quale estrarre il valore(controllato in modalità case-sensitive)
1699        			ValoreOut			OUT		VARCHAR2,						-- Valore della variabile (di tipo semplice, cioè monovalore non strutturata) nel flusso di navigazione
1700        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1701        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1702        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1703        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine , altrimenti 0
1704        
1705        	function GetVarCacheFlussoNav(
1706        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso da cui estrarre il valore
1707        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione da cui estrarre la variabile indicata (controllo in modalità case-insensitive)
1708        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile della quale estrarre il valore(controllato in modalità case-sensitive)
1709        			ValoreOut			OUT 		CLOB,							-- Valore/i della variabile (XML conforme a schema LISTA_STD.xsd)
1710        																-- Ogni valore è un tag Riga
1711        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1712        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1713        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1714        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
1715        
1716        	/***** Funzione per ottenere il contenuto di una sequenza di record da una variabile di un dato flusso  navigazione applicativo che è una lista di record 		*****/
1717        	function GetRecVarCacheFlussoNav(
1718        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1719        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione cui appartiene la variabile multi-record di cui ottenere il record
1720        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-record) di cui ottenere il record (controllato in modalità case-sensitive)
1721        			NroPaginaIn			IN		PLS_INTEGER DEFAULT 1,				-- N.ro della pagina in cui viene mostrato il primo dei record da ottenere. Se NULL si intende 1
1722        			DimPaginaIn			IN		PLS_INTEGER,					-- N.ro di record per pagina. Obbligatorio se NroPaginaIn>1
1723        			PosRecInPaginaIn		IN		PLS_INTEGER,					-- (obblig.) Posizione (interi da 1 a DimPaginaIn) che ha nella pagina il primo dei record da ottenere.
1724        			NroRecordIO			IN OUT	PLS_INTEGER,					-- in input è il n.ro di record da estrarre. Se NULL si intende 1.
1725        																-- in output è il n.ro di record estratti
1726        			ValoreRecordOut		OUT		CLOB,							-- Valore/i dei campi dei record (XML conforme a schema LISTA_STD.xsd e contenente un n.ro di tag Riga pari al valore di output di NroRecordIO)
1727        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1728        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1729        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1730        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1731        
1732        
1733        	/***** Funzione per estrarre i valori di tutte le variabili di una data sezione di un dato flusso di navigazione applicativo	*****/
1734        	function GetSezCacheFlussoNav(
1735        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1736        			SezioneFlussoIn		IN		VARCHAR2,						-- (obblig.) Sezione del flusso di navigazione per cui estrarre i valori di tutte le variabili
1737        			FlgTipoVarIn		IN		VARCHAR2 DEFAULT NULL,				-- (valori S/L/NULL) Tipo di variabili da estrarre: se valorizzato significa che vanno estratte solo le variabili semplici (se S) o solo quelle di tipo lista (se L)
1738        			VariabiliOut		OUT		CLOB,							--  Nomi e valore/i delle variabili della sezione (XML conforme a schema SezioneCache.xsd)
1739        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1740        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1741        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1742        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1743        
1744        	/***** Funzione per ottenere i nomi e i valori delle variabili 		 ******/
1745        	/***** contenute in un XML di tipo sezione cache 				 ******/
1746        	function GetVariablesFromXMLSezCache(
1747        			XMLIn				IN		CLOB							-- XML conforme a SezioneCache.xsd
1748        			) return DMTO_VAR_SEZ_CACHE;   								-- restituisce la lista delle variabili semplici e complesse
1749        																-- In ogni elemento della table di result:
1750        			  		 			 								-- NOME: contiene il nome della variabile
1751        																-- FLG_TIPO_SEMPLICE = è 1 se è una variabile con valore semplice, altrimenti NULL
1752        																-- VALORE_SEMPLICE: contiene il valore della variabile se semplice
1753        																-- VALORE_COMPLESSO: contiene il valore della variabile se complessa; ogni riga del valore complesso è un varray DMVA_STRING
1754        
1755        	/***** Funzione per ottenere il valore di una data variabile semplice (di dimensione anche > 4000 caratteri) ******/
1756        	/***** contenuta in un XML di tipo sezione cache 				 											 ******/
1757        	function GetVariableClobFromXMLSezCache(
1758        			XMLIn				IN		CLOB,					-- XML conforme a SezioneCache.xsd
1759        			NomeVariabileIn		IN		VARCHAR2				-- Nome della variabile da recuperare
1760        			) return CLOB;   									-- restituisce il valore della variabile, se presente, come CLOB
1761        
1762        	/**** Funzione per ottenere il codice di una funzione	a partire dalle tre parti COD_FUNZ_P1, COD_FUNZ_P2, COD_FUNZ_P3 ******/
1763        	function GetCodFunz(
1764        			CodFunzP1In			IN		DMT_FUNZIONI.COD_FUNZ_P1%type,
1765        			CodFunzP2In			IN		DMT_FUNZIONI.COD_FUNZ_P2%type DEFAULT NULL,
1766        			CodFunzP3In			IN		DMT_FUNZIONI.COD_FUNZ_P3%type DEFAULT NULL)
1767        			return VARCHAR2;											-- Codice della funzione, se esiste, altrimenti NULL
1768        
1769        	/**** Funzione per convertire una lista di attributi (non predefiniti e quindi da tipizzare) fornita come XML (secondo schema LISTA_STD.xsd) in una struttura di tipo DMTO_ATTR_VALUES 	*****/
1770        	/**** I valori di un attributo vengono riportati nella struttura di output rispettando l'ordine con cui figurano nell'XML in input										*****/
1771        	function ConvertXMLToAltriAttrTab(
1772        			AltriAttributiXMLIn	IN		CLOB,							-- XML con gli attributi (XML conforme a schema LISTA_STD.xsd)
1773        																-- Ogni valore è un tag Riga che contiene 3 colonne che devono essere tutte valorizzate:
1774        																-- 1: (obblig.) Nome dell'attributo (stringa lung. max. 250)
1775        																-- 2: (obblig.) Tipo del valore (valori possibili: S=Stringa, N=Numerico, D=Data/Timestamp)
1776        																-- 3: (obblig.) Valore (se è un numerico deve avere la "," come separatore dei decimali; se è una data deve avere il formato DD/MM/RRRR HH24:MI:SS)
1777        																-- Un attributo con un certo nome può avere più valori (tutti dello stesso tipo)
1778        			AltriAttributiTabOut	OUT		DMTO_ATTR_VALUES,					-- Oggetto tabella con gli attributi ricavati dall'XML
1779        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1780        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1781        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1782        			) RETURN PLS_INTEGER;										-- Vale 1 se la conversione è andata a buon fine, altrimenti 0
1783        
1784        	/****** Funzione per ricavare dall'id. di un processo alcuni dati basilari dello stesso *******/
1785        	function GetBasicInfoProcess(
1786        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,		--(obblig) Identificativo del processo di cui estrarre i dati base
1787        			IdProcessTypeOut		OUT		DMT_PROCESSES.ID_PROCESS_TYPE%type,		-- Identificativo del tipo del processo
1788        			CITypeFlussoWFOut		OUT		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- Codice identificativo del tipo dell'eventuale flusso workflow associato al processo
1789        			CIFlussoWFOut		OUT		DMT_PROCESSES.PROV_CI_FLUSSO_WF%type,	-- Codice identificativo dell'eventuale flusso workflow associato al processo
1790        			FlgTpObjProcessOnOut	OUT		VARCHAR2,						-- Indica se il processo è realtivo a: C = Copia di unità documentaria; U = Unità documentaria; F = Folder
1791        			IdObjProcessOnOut		OUT		INTEGER						-- Identificativo della copia di unità documentaria, unità documentaria o folder cui è relativo il processo. Valorizzato solo se lo è FlgTpObjProcessOnOut.
1792        			) RETURN PLS_INTEGER;										-- restituisce 1 se tutto ok, 0 in caso di errore
1793        
1794        
1795        	/****** funzione per creare un nodo "Variabile" con valore lista in un XML conforme allo schema SezioneCache.xsd *******/
1796        	function CreaNodoVarListaXMLSezCache(
1797        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da creare
1798        			XMLListaIn			IN		CLOB							-- XML conforme allo schema LISTA_STD.xsd con il contenuto del tag "Lista" del tag "Variabile" da creare
1799        			) return CLOB;											-- clob con il tag "Variabile" creato
1800        
1801        	/****** funzione per aggiungere un nodo "Variabile" con valore lista in un XML conforme allo schema SezioneCache.xsd *******/
1802        	/****** se il nodo realtivo a quella variabile già c'era il pre-esistente viene rimpiazzato					*******/
1803        	function AddVarListaXMLSezCache(
1804        			XMLSezioneCacheIO		IN OUT	NOCOPY CLOB,					-- XML conforme allo schema SezioneCache.xsd in cui aggiungere un tag "Variabile" con valore "Lista"
1805        																-- Se NULL viene inizializzato dalla function stessa
1806        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da aggiungere
1807        			XMLListaIn			IN		CLOB,							-- XML conforme allo schema LISTA_STD.xsd con il contenuto del tag "Lista" del tag "Variabile" da aggiungere
1808        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1809        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1810        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1811        			) RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1812        
1813        	/****** funzione per creare un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1814        	function CreaNodoVarSempliceXMLSezCache(
1815        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da creare
1816        			ValoreSempliceIn		IN		VARCHAR2						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da creare
1817        			) return CLOB;											-- clob con il tag "Variabile" creato
1818        
1819        	/****** funzione per creare un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1820        	function CreaNodoVarSemplXMLSezCacheCl(
1821        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da creare
1822        			ValoreSempliceIn		IN		CLOB						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da creare
1823        			) return CLOB;											-- clob con il tag "Variabile" creato
1824        
1825        	/****** funzione per aggiungere un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1826        	/****** se il nodo realtivo a quella variabile già c'era il pre-esistente viene rimpiazzato					*******/
1827        	function AddVarSempliceXMLSezCache(
1828        			XMLSezioneCacheIO		IN OUT	NOCOPY CLOB,					-- XML conforme allo schema SezioneCache.xsd in cui aggiungere un tag "Variabile" con valore "Lista"
1829        																-- Se NULL viene inizializzato dalla function stessa
1830        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da aggiungere
1831        			ValoreSempliceIn		IN		VARCHAR2,						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da aggiungere
1832        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1833        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1834        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1835        			) RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1836        
1837        	/****** funzione per aggiungere un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1838        	/****** se il nodo realtivo a quella variabile già c'era il pre-esistente viene rimpiazzato					*******/
1839        	function AddVarSemplXMLSezCacheCl(
1840        			XMLSezioneCacheIO		IN OUT	NOCOPY CLOB,					-- XML conforme allo schema SezioneCache.xsd in cui aggiungere un tag "Variabile" con valore "Lista"
1841        																-- Se NULL viene inizializzato dalla function stessa
1842        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da aggiungere
1843        			ValoreSempliceIn		IN		CLOB,						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da aggiungere
1844        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1845        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1846        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1847        			) RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1848        
1849        	/***** Funzione per ottenere i dati di un indirizzo/luogo legato ad un soggetto della rubrica soggetti esterni ******/
1850        	function GetIndirizzoSoggRubrica(
1851        			IdSoggRubricaIn		IN		DMT_RUBRICA_SOGGETTI.ID_SOGG_RUBRICA%type,-- (obblig.) Identificativo del soggetto della rubrica di cui si ricerca un indirizzo
1852        			CodTipoIndIn		IN		VARCHAR2,						-- (obblig.) Codice del tipo dell'indirizzo/luogo relativo al soggetto che si vuole ottenere (valori da dizionario)
1853        			FlgUltimoIn			IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se l'indirizzo ricercato è l'ultimo de dato tipo per il soggetto
1854        			TsVldIn			IN 		VARCHAR2 DEFAULT TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
1855        																-- Stinga con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui deve essere valido l'indirizzo
1856        																-- Viene considerato solo se FlgUltimoIn è diverso da 1, e in tal caso se non è valorizzato si intende pari a data e ora correnti
1857        			) return DMO_ESTREMI_INDIRIZZO;								-- Restituisce un oggetto con i dati dell'indirizzo, se esiste; altrimenti restituisce NULL (anche in caso d'errore)
1858        
1859        	/*********** Funzione per controllare i dati principali di un soggetto esterno					**********/
1860        	/*********** I dati vengono rielaborati e restituiti pronti per l'inserimento/aggiornamento in rubrica	**********/
1861        	function CtrlDatiSoggEsterno(
1862        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) di lavoro (se NULL significa che il dominio è lo schema)
1863        			DatiSoggXMLIO		IN OUT	NOCOPY CLOB,					-- Dati del soggetto esterno da controllare e rielaboare (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
1864        																-- Il tag "Riga" può contenere le seguenti colonne:
1865        																-- 1:  Denominazione/cognome del soggetto
1866        																-- 2:	 Nome del soggetto (se persona fisica)
1867        																-- 3:  (valori 1/0/NULL) Indicatore se persona fisica (1) o giuridica (0 o NULL)
1868        																-- 4:  Codice fiscale del soggetto
1869        																-- 5:  Partita IVA del soggetto
1870        																-- 6:  Data di nascita/istituzione del soggetto (nel formato del parametro di conf. FMT_STD_DATA)
1871        																-- 7: (valori M/F) Sesso del soggetto (se persona fisica): M = Maschio, F = Femmina
1872        																-- 8: Codice ISTAT del comune (se italiano) di nascita/istituzione del soggetto 
1873        																-- 9: Nome del comune (italiano o estero) di nascita/istituzione del soggetto
1874        																-- 10: Codice ISTAT dello stato di nascita/istituzione del soggetto 
1875        																-- 11: Nome dello stato di nascita/istituzione del soggetto
1876        																-- 12: Codice ISTAT dello stato di cittadinanza del soggetto 
1877        																-- 13: Nome dello stato di cittadinanza del soggetto
1878        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1879        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1880        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
1881        			FlgEscludiCtrlSuCFIn	IN		PLS_INTEGER DEFAULT NULL)			-- (1/0/NULL) Se 1 non vengono fatti controlli formali sul cod. fiscale delle persone fisiche
1882        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
1883        
1884        	/*********** Funzione per controllare i dati di un indirizzo (esclusi quelli che lo legano ad un soggetto o altra entità)	**********/
1885        	/*********** I dati vengono rielaborati e restituiti pronti per l'inserimento/aggiornamento in DB					**********/
1886        	function CtrlDatiIndirizzo(
1887        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) di lavoro (se NULL significa che il dominio è lo schema)
1888        			DatiIndirizzoXMLIO	IN OUT	NOCOPY CLOB,					-- Dati dell'indirizzo da controllare e rielaboare (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
1889        																-- Il tag "Riga" può contenere le seguenti colonne:
1890        																-- 1: Codice identificativo toponomastico (se indirizzo censito nella toponomastica del sistema; viene considerato solo se è valorizzata anche la colonna successiva)
1891        																-- 2: Indirizzo (senza civico) (alternativo o ridondante rispetto al campo precedente)
1892        																--	  In input può contenere anche il tipo di toponimo (i.e. via, piazza, vicolo ecc); in output no, se il tipo di toponimo c'è ed è uno di quelli censiti (il tipo di toponimo in questo caso si trova in colonna 15)
1893        																-- 3: N. civico (senza appendici, che sono in colonna 15)
1894        																-- 4: Interno
1895        																-- 5: Scala
1896        																-- 6: Piano
1897        																-- 7: CAP
1898        																-- 8: Frazione
1899        																-- 9: Codice ISTAT del comune italiano 
1900        																-- 10: Nome del comune italiano o della città (se estera)
1901        																-- 11: Codice ISTAT dello stato 
1902        																-- 12: Nome dello stato
1903        																-- 13: Zona
1904        																-- 14: Complemento (i.e. altri dati) indirizzo
1905        																-- 15: Tipo di toponimo dell'indirizzo (i.e. via, piazza, vicolo ecc: deve essere uno di quelli censiti). In output viene sempre valorizzato anche se in input era in colonna 3 
1906        																-- 16: Appendici del n.ro civico (esponente, colore, bis/ter ecc)
1907        			TsVldIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1908        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) al quale l'indirizzo deve essere valido. Se non valorizzato si intende sysdate
1909        			FlgIndObbligIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Se 1 si controlla che il campo indirizzo (il 2°) sia specificato, altrimenti si può specificare solo comune o stato
1910        			FlgSoloIndInViarioIn	IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 si controlla che l'indirizzo sia nel viario del sistema
1911        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1912        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1913        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1914        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
1915        
1916        	/******* Funzione per verificare se un soggetto esiste in rubrica soggetti e vi è identificabile univocamente												******/
1917        	/******* Il match con i soggetti della rubrica segue i seguenti criteri: 																		******/
1918        	/******* per i soggetti in rubrica i campi corrispondenti ai dati del soggetto che compaiono in input, valorizzati o meno che siano, sono uguali al corrispondente campo in input  	******/
1919        	/******* per i soggetti in rubrica i campi corrispondenti ai dati del soggetto che NON compaiono in input possono essere non valorizzati o valorizzati in qualsiasi modo 		******/
1920        	/******* La funzione restituisce l'Id. del soggetto in rubrica solo se a partire dagli estremi immessi riesce a identificarlo univocamente							******/
1921        	/******* I dati passati in input vengono restituiti comunque rielaborati (ad es. ricavando data di nascita dal cod. fiscale o il codice del comune di residenza dal suo nome ecc.);	******/
1922        	/******* è possibile (richiedendolo con apposito input) far sì che siano restituiti completando i dati del soggetto che in input mancavano con quelli del sogg. di rubrica trovato	******/
1923        	function FindSoggettoInRubrica(
1924        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) di lavoro (se NULL significa che il dominio è lo schema)
1925        			DatiSoggXMLIO		IN OUT	NOCOPY CLOB,					-- Dati del soggetto (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
1926        																-- Le colonne che mancano del tutto sono campi che per il soggetto di rubrica da trovare possono assumere qualsiasi valore (NULL incluso).
1927        																-- Le colonne presenti ma non valorizzate sono campi che si vuole che siano non valorizzati anche sul soggetto di rubrica da trovare.
1928        																-- Le colonne possibili sono:
1929        																-- 1:  Denominazione primaria/cognome del soggetto
1930        																-- 2:  Nome del soggetto (se persona fisica)
1931        																-- 3:  (valori 1/0/NULL) Indicatore di persona fisica (1) o giuridica (0 o NULL)
1932        																-- 4:  Codice fiscale del soggetto
1933        																-- 5:  Partita IVA del soggetto
1934        																-- 6:  Data di nascita/istituzione del soggetto (nel formato del parametro di conf. FMT_STD_DATA)
1935        																-- 7: (valori M/F) Sesso del soggetto (se persona fisica): M = Maschio, F = Femmina
1936        																-- 8:  Codice ISTAT del comune (italiano) di nascita/istituzione del soggetto (viene considerato solo se è valorizzata anche la colonna successiva)
1937        																-- 9:  Nome del comune italiano di nascita/istituzione del soggetto
1938        																-- 10: Codice ISTAT dello stato di nascita/istituzione del soggetto (viene considerato solo se è valorizzata anche la colonna successiva)
1939        																-- 11: Nome dello stato di nascita/istituzione del soggetto
1940        																-- 12: Codice ISTAT dello stato di cittadinanza del soggetto (viene considerato solo se è valorizzata anche la colonna successiva)
1941        																-- 13: Nome dello stato di cittadinanza del soggetto
1942        																-- 14: Identificativo del soggetto in rubrica
1943        																-- 15: Codice identificativo toponomastico dell'indirizzo di residenza/sede legale (se indirizzo censito nella toponomastica del sistema; viene considerato solo se è valorizzata anche la colonna successiva)
1944        																-- 16: Indirizzo di residenza/sede legale (senza civico) In input può essere comprensivo del tipo di toponimo (via, piazza ecc), in output l'eventuale toponimo viene separato e messo in colonna 25
1945        																-- 17: Civico (solo il N. senza appendici che sono in colonna 26) della residenza/sede legale
1946        																-- 18: Frazione della residenza/sede legale
1947        																-- 19: Codice ISTAT del comune italiano di residenza/sede legale (viene considerato solo se è valorizzata anche la colonna successiva)
1948        																-- 20: Nome del comune italiano o della città (se estera) di residenza/sede legale
1949        																-- 21: Codice ISTAT dello stato di residenza/sede legale (viene considerato solo se è valorizzata anche la colonna successiva)
1950        																-- 22: Nome dello stato di residenza/sede legale
1951        																-- 23: Zona della residenza/sede legale
1952        																-- 24: Complemento indirizzo di residenza/sede legale
1953        																-- 25: Tipo di toponimo (i.e. via, vicolo ecc) dell'indirizzo di residenza/sede legale
1954        																-- 26: Appendici (esponente, colore, bis/ter ecc) del N. civico dell'indirizzo di residenza/sede legale
1955        																-- 27: Codice rapido del soggetto
1956        																-- 28: Cod. tipo di soggetto (di dettaglio se c'è, se no quello principale). Tra i valori possibili: UOI=UO/ufficio interno, AOOI=AOO interna, UP=Unità di personale (interna), AOOE= AOO di altra PA
1957        																-- 29: Decrizione del tipo di soggetto
1958        																-- 30: Denominazione sintetica
1959        																-- 31: ID_UO della UO che corrisponde al soggetto (solo in output, in input NON viene considerata)
1960        																-- 32: ID_USER dell'utente che corrisponde al soggetto (solo in output, in input NON viene considerata)
1961        																-- 33: ID_SCRIVANIA dell'unica scrivania virtuale attualmente occupata nell'organigramma dall' utente che corrisponde al soggetto (solo in output, in input NON viene considerata) 
1962        																-- 34: Codice della categoria del soggetto: #APA; #IAMM; UO;UOI; UP; #AF; #AG
1963        																-- 		Possono essere anche più di uno separati da ,
1964        																-- 35: PROV_CI_UO della UO che corrisponde al soggetto (solo in output, in input NON viene considerata)
1965        																-- 36: (valori 1/0, solo in output, in input NON viene considerata) Flag di assegnazione inibita (=1) al soggetto, se presente in organigramma
1966        																-- 37: (valori 1/0 solo in output, in input NON viene considerata) Flag di invio per conoscenza inibito (=1) al soggetto, se presente in organigramma
1967        																-- 38: Username dell'utente che corrisponde al soggetto (solo in output, in input NON viene considerata)
1968        																-- 39: (valori 1/0) Se 1 è selezionabile come assegnatario 
1969        																--		La colonna viene valorizzata solo in output e solo se FinalitaIn è valorizzata
1970        																-- 40  Suffisso corrispondente al soggettp - UO da usare nelle numerazioni differenziate per struttura
1971        																--	   La colonna viene valorizzata solo in output
1972        																-- 41: Nro di matricola (se soggetto che è un utente di sistema)
1973        																-- 42: Indirizzo mail PEC del soggetto 
1974        																-- 43: Indirizzo mail ordinaria del soggetto
1975        																-- 44: Indirizzo mail PEC o PEO del soggetto
1976        																-- Almeno una tra le colonne 1, 4, 5, 27, 30, 41, 42, 43, 44 deve essere valorizzata
1977        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il soggetto deve essere valido e attivo (1) o no (al timestamp TsRifIn)
1978        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1979        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il soggetto deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1980        			FlgCompletaDatiDaRubrIn	IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Se 1 indica che qualora si identifichi univocamente il soggetto in rubrica (return 1) DatiSoggXMLIO viene restituito con i dati del soggetto trovato
1981        			IdSoggInRubricaOut	OUT		DMT_RUBRICA_SOGGETTI.ID_SOGG_RUBRICA%type,-- Identificativo del soggetto di rubrica trovato
1982        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1983        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1984        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
1985        			FlgInOrganigrammaIn	IN			VARCHAR2 DEFAULT NULL,		-- Restringe la ricerca ai soli soggetti che sono nell'organigramma in vigore
1986        																		-- Può essere valorizzato a: UO = Unità Organizzative
1987        																		-- 							 SV = Scrivanie virtuali
1988        																		--							 UT = Utenti in organigramma
1989        																		-- può anche essere una concatenazione dei precedenti valori separati da ; (es UO;SV) 
1990        			IdUserLavoroIn		IN			INTEGER DEFAULT NULL,		-- Id. dell'utente di lavoro (delegante se si lavora in delega se non utente loggato)
1991        			FinalitaIn			IN			VARCHAR2 DEFAULT NULL,		-- Motivo per cui viene chiamata la Find. Valori ammessi:
1992        																		-- MITT_DEST_CARTACEO = Per selezionare la UO/utente/scrivania mittente o destinatario di documentazione cartacea
1993        																		-- MITT_DEST_NO_CARTACEO = Per selezionare la UO/utente/scrivania mittente o destinatario di documentazione NON cartacea
1994        																		-- MITT_DEST = Per selezionare la UO/utente/scrivania mittente o destinatario di documentazione
1995        																		-- DEST_CARTACEO = Per selezionare destinatario di documentazione cartacea in uscita
1996        																		-- DEST_NO_CARTACEO = Per selezionare destinatario di documentazione cartacea in uscita
1997        																		-- DEST = Per selezionare destinatario di documentazione cartacea in uscita
1998        																		-- IMPORT_XLS = import di dati da xls (esempio import di liste di distribuzione e di soggetti in rubrica)
1999        			IdUDIn				IN			INTEGER DEFAULT NULL)		-- Id. dell'UD a cui è legato il soggetto da cercare (come mittente o destinatario)
2000        																		-- Viene considerata solo se FinalitaIn è valorizzata e serve per il calcolo di colonna 39 dei dati del soggetto
2001        			return PLS_INTEGER;											-- Vale 1 se il soggetto è stato individuato univocamente, altrimenti 0
2002        
2003        	/****** funzione da richiamare per costruire il custom-tag con i livelli di un oggetto (tipo UO, classificazione) relativo ad una gerarchia ******/
2004        	function GetInfoLivelliForGUI(
2005        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
2006        																-- (obblig). Codice identificativo del token di connessione
2007        			TargetIn			IN		VARCHAR2,						-- (obblig.) Per chi costruire i livelli: valori ammessi:
2008        																-- UO=Unità operativa
2009        																-- CL=Classificazione
2010        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello da mettere nei vari campi (vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli valido per livelli di un oggetto del tipo TargetIn nel dominio lavoro)
2011        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL,
2012        																		-- Id. del piano di classificazione cui è relativa la classifica da rappresentare. Se non specificato si intende il piano attualmente in vigore per il soggetto produttore/AOO
2013        			SeparatoreOut		OUT		VARCHAR2,						-- Separatore con cui i livelli sono impachettati in una stringa unica
2014        			LivelliOut			OUT		NOCOPY CLOB,					-- Lista con le informazione relative ai vari livelli (XML conforme a LISTA_STD-xsd)
2015        																-- Ogni tag "Riga" rappresenta un livello e contiene le seguenti colonne:
2016        																-- 1 : Size del livello (a video)
2017        																-- 2 : Massimo numero di caratteri del livello
2018        																-- 3 : (valori 1/0) Indicatore di livello numerico (arabo) se 1 o alfanumerico se 0
2019        																-- 4 : Valore da livello
2020        																-- 5 : Label del livello
2021        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2022        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2023        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
2024        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2025        
2026        	/******* serve a ricercare una tipologia di evento (eventualmente relativa ad un dato sogg. produttore o AOO o applicativo verticale) a partire da id. e/o nome		******/
2027        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 						******/
2028        	function FindEventType(
2029        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
2030        			IdEventTypeIn		IN 		DMT_EVENT_TYPES.ID_EVENT_TYPE%type DEFAULT NULL,
2031        																-- Identificativo della tipologia
2032        			DesEventTypeIn		IN		DMT_EVENT_TYPES.DES_EVENT_TYPE%type DEFAULT NULL,
2033        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
2034        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
2035        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
2036        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
2037        
2038        			CodApplEsternaIn		IN		VARCHAR2 DEFAULT NULL,			-- Codice eventuale applicazione esterna da cui si sta lavorando
2039        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL				-- (solo se applicazione esterna multi-istanza) Codice eventuale istanza dell'applicazione esterna da cui si sta lavorando
2040        			) return INTEGER;											-- restituisce ID_EVENT_TYPE della tipologia se individuata, altrimenti NULL
2041        
2042        	/********** funzione che controlla (e in caso di controllo positivo "spacchetta") una stringa con una lista di denominazioni di soggetti esterni che: 											******/
2043        	/**********	a) sono separati da ;																															******/
2044        	/**********	b) possono essere soggetti prelevati dalla rubrica soggetti, nel qual caso la denominazione è seguita da [<ID_SOGG_RUBRICA>] o [RS<ID_SOGG_RUBRICA>]										******/
2045        	/********** c) possono essere soggetti prelevati dalla rubrica e presenti anche in anagrafe residenti/ditte, nel qual caso la denominazione è seguita da [*<PROV_CI_SOGG>], con PROV_CI_SOGG del soggetto in rubrica	******/
2046        	/**********	d) possono essere nominativi esterni già associati al processo/procedimento (IdProcessIn) in cui l'oggetto (unità documentaria, folder) cui si riferiscono i nominativi è accquisito/prodotto/lavorato	******/
2047        	/**********		in questo caso la denominazione è seguita da [**<ID_RELAZIONE>] o [NP<ID_RELAZIONE>], con ID_RELAZIONE del nominativo in tabella DMT_PROCESS_SOGG_EST									******/
2048        	function CtrlStringaNominativiEsterni(
2049        			ListaNominativiStrIn		IN		VARCHAR2,					-- Stringa con la lista dei nominativi esterni da controllare e spacchettare
2050        			IdProcessIn				IN		DMT_PROCESSES.ID_PROCESS%type DEFAULT NULL,
2051        																-- Eventuale id. del processo a cui sono relativi alcuni dei nominativi specificati
2052        			ListaNominativiXMLOut		OUT		NOCOPY CLOB,				-- Lista con i dati dei nominativi trovati nella stringa in input (XML conforme a schema LISTA_STD.xsd)
2053        																-- Ogni nominativo è un tag Riga che può contenere le seguenti colonne:
2054        																-- 	1: Id. del soggetto in rubrica soggetti
2055        																--	2: (valori 1/0) Se 1 indica che il soggetto è una persona fisica
2056        																--	3: Denominazione (se persona giuridica) o cognome (se persona fisica)
2057        																--	4: Nome (se persona fisica)
2058        																--	5: Codice fiscale
2059        																--	6: Partita IVA
2060        																--	7: Sesso (valori F/M/NULL) (se persona fisica)
2061        																--	8: Data di nascita/istituzione (nel formato dato dal parametro FMT_STD_DATA)
2062        																--	9: Codice ISTAT del comune di nascita/istituzione
2063        																--	10: Codice ISTAT dello stato estero di nascita/istituzione
2064        																--	11: Codice ISTAT dello stato di cittadinanza
2065        																--	12: Cod. toponomastico della via/piazza ecc. dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2066        																--	13: Nome della via/piazza ecc. dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2067        																--	14: Località dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria) (alternativo al campo precedente qunado si tratta di via/piazza ecc. al di fuori del viario)
2068        																--	15: N.ro civico (con eventuale esponente o colore) dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2069        																--	16: Interno del civico dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2070        																--	17: Scala del civico dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2071        																--	18: Piano nel civico dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2072        																--	19: Codice Avviamento Postale dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2073        																--	20: Codice istat del comune (se italiano) dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2074        																--	21: Nome del comune/città dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2075        																--	22: Codice istat dello stato estero dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2076        																--	23: Nome dello stato estero dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2077        																--	24: Indirizzo e-mail di invio al nominativo come destinatario (se invio tramite posta elettronica)
2078        																--	25: Codice del soggetto in anagrafe residenti/ditte esterna
2079        																-- ATTENZIONE: se la 1a colonna è valorizzata le colonne da 2 a 11 non sono mai presenti, in quanto gli attributi corrispondenti del nominativo si intendono come quelli con cui appare in rubrica
2080        																--			le colonne da 12 in poi possono essere valorizzate solo se il nominativo era già associato al processo
2081        			ErrContextOut			OUT		VARCHAR2,					-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2082        			ErrCodeOut				OUT		PLS_INTEGER,				-- N.ro errore di uscita
2083        			ErrMsgOut				OUT 		VARCHAR2)					-- Messaggio d'errore
2084        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
2085        
2086        	/****** funzione per testare se un certo nome di oggetto di schema DB è un sinonimo verso un oggetto remoto (puntato tramite DB LINK) *****/
2087        	function TestIfRemoteObject (
2088        			ObjectNameIn			IN		VARCHAR2)					-- nome (sinonimo) con cui l'oggetto viene risolto
2089        			return PLS_INTEGER;										-- se 1 il test è positivo, ovvero l'oggetto è remoto
2090        																-- se 0 non è un oggetto remoto
2091        																-- valori negativi in caso di errore (oggetto inesistente ecc.)
2092        
2093        	/****** funzione per testare se in una stringa ci sono caratteri speciali. Se ne viene trovato uno, viene restituito in SpecCharOut  *****/
2094        	function TestSpecChr(StrIn IN VARCHAR2, SpecCharOut OUT VARCHAR2)
2095        	return PLS_INTEGER;
2096        
2097        	/****** funzione per ricavare da un indirizzo email gli estremi del soggetto (utente, UO o soggetto esterno) che gli corrisponde ******/
2098        	function GetIdentityFromEmailAddress (
2099        			CodIdConnectionTokenIn		IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	
2100        																-- (obblig). Codice identificativo del token di connessione
2101        			EmailAddressIn			IN		VARCHAR2,					-- (obblig.) Indirizzo e-mail	
2102        			FlgSoloInterniIn			IN		PLS_INTEGER DEFAULT NULL,		-- (valori 1/0/NULL) Se 1 significa che il soggetto va cercato solo tra utenti del sistema e UO (solo soggetti interni)
2103        			FlgTipoOut				OUT		VARCHAR2,					-- Indica il tipo di soggetto che corrisponde all'indirizzo email. Valori ammessi:
2104        																-- E 	= 	Soggetto esterno
2105        																-- UT =	Utente del sistema
2106        																-- UO	=	Unità operativa
2107        			IdSoggOut				OUT		INTEGER,					-- Identificativo (ID_SOGG_RUBRICA o ID_USER o ID_UO) del soggetto che corrisponde all'indirizzo email
2108        			FlagFisicaOut			OUT		PLS_INTEGER,				-- (valori 1/0/NULL) Se FlgTipoOut=E indica se il soggetto che corrisponde all'indirizzo email è una persona fisica (=1) o giuridica (=0)
2109        			Denominazione_CognomeOut	OUT		VARCHAR2,					-- Denominazione del soggetto che corrisponde all'indirizzo email (o suo cognome se trattasi di persona fisica)
2110        			NomeOut				OUT		VARCHAR2,					-- Nome del soggetto se trattasi di persona fisica
2111        			CodFiscaleOut			OUT		VARCHAR2,					-- Codice fiscale del soggetto che corrisponde all'indirizzo email
2112        			PartitaIvaOut			OUT		VARCHAR2,					-- Partita IVA del soggetto che corrisponde all'indirizzo email
2113        			ErrContextOut			OUT		VARCHAR2,					-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2114        			ErrCodeOut				OUT		PLS_INTEGER,				-- N.ro errore di uscita
2115        			ErrMsgOut				OUT 		VARCHAR2)					-- Messaggio d'errore
2116        			return PLS_INTEGER;										-- Vale 1 se l'individuazione del soggetto va a buon fine, altrimenti 0
2117        
2118        	/******** funzione per individuare un'entità di un dato tipo a partire dal suo codice identificativo in un sistema esterno e/o dal suo identificativo interno al sistema 			******/
2119        	/******** In caso l'entità sia individuata univocamente vengono restituiti in output sia il suo codice identificativo esterno che il suo identificativo interno al sistema 			******/
2120        	/********* Se si è connessi da applicazione esterna, per le entità che lo prevedono, la ricerca può essere ristretta o meno alle sole entità create da quell'applicazione esterna		******/
2121        	/******** ATTENZIONE: la ricerca NON tiene conto delle eventuali policy di accesso alle entità del dato tipo													******/
2122        	function FindObjFromCIProv(
2123        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
2124        																-- (obblig). Codice identificativo del token di connessione
2125        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella che cotiene le entità del dato tipo
2126        																-- Valori ammessi:
2127        																-- DMT_PROCESSES 	= Processi/procedimenti
2128        																-- DMT_FOLDER 	= Cartelle/fascicoli
2129        																-- DMT_UNITA_DOC 	= Unità documentarie
2130        																-- DMT_USERS 	= Utenti
2131        			CIProvObjIO			IN OUT	VARCHAR2,						-- Codice identificativo dell'entità nel sistema esterno (ricerca case-sensitive in like senza forzare il % finale)
2132        			CIIntObjIO			IN OUT	VARCHAR2,						-- Identificativo dell'entità interno al sistema (ricerca case-sensitive esatta)
2133        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2134        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2135        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
2136        			FlgRestrApplOwnerIn	IN		PLS_INTEGER DEFAULT 1)				-- (valori 1/0/NULL) Se vale 1 e si è connessi da applicazione esterna la ricerca viene ristretta alle sole entità create dall'applicazione esterna/istanza di applicazione da cui si è connessi (qualora il tipo delle entità preveda quest'informazione)	
2137        			return PLS_INTEGER;										-- Vale 1 se l'entità è stata individuata univocamente, altrimenti 0
2138        
2139        	/**** Funzione per ricercare le richieste di trasmissione via fax sottomesse ****/
2140        	FUNCTION TrovaRichTrasmissioneFax(
2141        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2142        																	-- (obblig). Codice identificativo del token di connessione
2143        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2144        			FlgPreimpostaFiltroIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1 i filtri e l'ordinamento vengono settati secondo le impostazioni dell'utente di lavoro, altrimenti restano come passati in input
2145        			--------------- inizio filtri di ricerca-------------------
2146        			IdRichTrasmissioneIO		IN OUT	DMT_FAX.ID_RICH_TRASMISSIONE%type,		-- 1° filtro di ricerca: id. univoco della richiesta di trasmissione da ricercare
2147        			CIFaxPerFaxServerIO		IN OUT	DMT_FAX.PROV_CI_FAX%type,			-- 2° filtro di ricerca: cod. assegnato alla richiesta di trasmissione dal fax-server che l'ha presa in carico (ricerca esatta case-sensitive)
2148        			FaxServerMittIO			IN OUT	DMT_FAX.FAX_SERVER_MITT%type,			-- 3° filtro di ricerca: indirizzo IP o nome del fax-server cui è stata sottomessa la richiesta di trasmissione (ricerca case-insensitive in like)
2149        			FlgSoloSottomesseUtenteLavIO	IN OUT	PLS_INTEGER,					-- 4° filtro di ricerca: (valori 1/0/NULL) Se 1 significa che si vogliono solo le richieste di trasmissione sottomesse dall'utente di lavoro (ovvero quello connesso se non si lavora a nome di altri)
2150        			CodApplicazioneIO			IN OUT	VARCHAR2,						-- 5° filtro di ricerca: Codice dell'applicazione da cui sono state sottomesse le richieste di trasmissione da ricercare. Se valorizzata pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo le richieste di trasmissione sottomesse da quell'applicazione
2151        			CodIstApplicazioneIO		IN OUT	VARCHAR2,						-- 6° filtro di ricerca: Codice dell'istanza di applicazione da cui sono state sottomesse le richieste di trasmissione da ricercare. Se valorizzata pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo le richieste di trasmissione sottomesse dall'istanza di applicazione esterna da cui si è connessi
2152        			NroFaxDestIO			IN OUT	DMT_FAX.NRO_FAX_DEST%type,			-- 7° filtro di ricerca: numero fax destinatario (ricerca case-insensitive in like che ignora spazi, e caratteri quali /, -, .)   
2153        			FlgStatiRichTrasmIO		IN OUT	VARCHAR2,						-- 8° filtro di ricerca: indica gli stati che devono avere le richieste di trasmissione da ricercare. 
2154        																		-- Può essere una concatenazione (con separatore ;) dei seguenti valori:
2155        																		-- S = Evasa con successo, 
2156        																		-- X = Andata in errore
2157        																		-- R = Da evadere
2158        																		-- K = Annullata
2159        			RichTrasmDaIO			IN OUT	VARCHAR2,						-- 9° filtro di ricerca: data di inizio dell'intervallo di ricerca sulla data di sottomissione delle richieste di trasmissione da ricercare (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2160        			RichTrasmAIO			IN OUT	VARCHAR2,						-- 10° filtro di ricerca: data di fine dell'intervallo di ricerca sulla data di sottomissione delle richieste di trasmissione da ricercare (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2161        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2162        			ColOrderByIO			IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne da 1 a 11). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2163        																	-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2164        																	-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2165        			FlgDescOrderByIO  		IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2166        																	-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.			
2167        			FlgSenzaPaginazioneIn 		IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2168        			NroPaginaIO      			IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2169           			BachSizeIO				IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)  
2170        																	-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro				
2171        			OverFlowLimitIn			IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
2172        			FlgSenzaTotIn			IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2173        			NroTotRecOut			OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
2174             			NroRecInPaginaOut 		OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2175        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2176        			ListaXMLOut				OUT		NOCOPY CLOB,					-- Lista delle richieste di trasmissione via fax trovate (XML conforme a schema LISTA_STD.xsd)
2177        																	-- Ogni richiesta è un tag Riga che può contenere le seguenti colonne: 
2178        																	-- 1:  Identificativo univoco della richiesta
2179        																	-- 2:  Codice assegnato alla richiesta di trasmissione dal fax-server che l'ha presa in carico 
2180        																	-- 3:  Indirizzo IP o nome del fax-server cui è stata sottomessa la richiesta di trasmissione 
2181        																	-- 4:  Numero fax destinatario 
2182        																	-- 5:  Timestamp in cui è stata sottomessa la richiesta di trasmissione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2183        																	-- 6:  Id. dell'utente che ha sottomesso la richiesta
2184        																	-- 7:  Descrizione dell'utente che ha sottomesso la richiesta
2185        																	-- 8:  Stato della richiesta di trasmissione (Da evadere, Evasa con successo, Andata in errore, Annullata)
2186        																	-- 9:  Motivo dell'errore
2187        																	-- 10: N.ro pagine trasmesse
2188        																	-- 11: Note
2189        																	-- 12: Flag che indica che la richiesta di trasmissione via fax è stato sottomessa dall'applicazione CodApplicazioneIO ed eventuale istanza CodIstApplicazioneIO
2190        																	-- 13: Descrizione dell'applicazione (ed eventuale istanza) che ha sottomesso la richiesta
2191        																	-- 14: Timestamp di ultima modifica dei dati della richiesta (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
2192        			ErrContextOut			OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2193        			ErrCodeOut				OUT		PLS_INTEGER,					-- N.ro errore di uscita
2194        			ErrMsgOut				OUT 		VARCHAR2,						-- Messaggio d'errore
2195        			NomeTagRigaIn			IN		VARCHAR2 default null,				--se valorizzato è il nome del tag riga che deve avere l'xml in output
2196        			NomeTagColonnaIn			IN		DMVA_STRING default null)   			--se valorizzatorappresenta i nomi dei tag colonne dell'xml di output
2197        			return PLS_INTEGER;											-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2198        
2199        	/****** funzione per estrarre i dati dei livelli della struttura organizzativa di un dato soggetto produttore o AOO *******/
2200        	function GetDatiLivelliSO(
2201        			IdDominioAutIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type	-- Id. del soggetto produttore/AOO per cui tirar fuori nomi e tipi dei livelli della struttura organizzativa
2202        			) RETURN DMTO_DENOM_TIPIZZATE;									-- vengono restituiti tanti record quanti i livelli (attributo CARDINALITA è il livello gerarchico): di ogni livello vengono riportati cod. (attributo TIPO) e descrizione (attributo DENOMINAZIONE) dell'unico tipo di UO che occupa il livello (se ve n'è uno solo) 		
2203        
2204        	/****** funzione per estrarre i dati dei livelli del titolario di un dato soggetto produttore o AOO *******/
2205        	function GetDatiLivelliTit(
2206        			IdDominioAutIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type	-- Id. del soggetto produttore/AOO per cui tirar fuori i livelli del titolario. Se NULL significa che si vogliono i livelli di titolario validi per tutti i soggetti produttori
2207        			) RETURN DMTO_LIV_GERARCHIA;										-- vengono restituiti tanti record quanti i livelli (attributo NRO è il livello gerarchico)
2208        	
2209        	/****** serve a testare se la data e ora correnti corrispondono ad un momento ad alta o a bassa operatività sul sistema *******/
2210        	function TestIfHighLowTransactionTime
2211        			return VARCHAR2;											-- può valere: 
2212        																	-- H se è un momento ad alta operatività
2213        																	-- L se è un momento a bassa operatività
2214        
2215        	/*********** Funzione per ottenere come DMVA_STRING i dati di un soggetto specificato come type DMO_SOGGETTO_INTERNO **********/
2216        	function ConvertDatiSoggInterno(
2217        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,														-- (obblig). Codice identificativo del token di connessione
2218        			DatiSoggIntIn		IN		DMO_SOGGETTO_INTERNO,
2219        			DatiSoggIntOut		OUT		DMVA_STRING,					-- Contiene i seguenti elementi:
2220        																--	1: Indicatore del tipo di soggetto
2221        																--		Valori possibili:
2222        																--			SP	= Soggetto produttore  
2223        																-- 			AOO	= AOO 
2224        																-- 			UT 	= Utente
2225        																--			SV	= Scrivania virtuale
2226        																--			UO	= Unità organizzativa (vale a dire tutte le scrivanie virtuali ad essa afferenti)
2227        																--			G	= Gruppo
2228        																--			R	= Ruolo amministrativo contestualizzato ovvero i soggetti che hanno un certo ruolo amministrativo (eventualmente rispetto ad una certa UO o un dato livello della struttura organizzativa/tipo di UO o entrambi)
2229        																--	2: Identificativo del soggetto
2230        																--		è un ID_SP_AOO di DMT_SOGGETTI_PROD_AOO se colonna 1 è SP o AOO
2231        																--		è un ID_UO di DMT_STRUTTURA_ORG se colonna 1=UO,
2232        																--		è un ID_GRUPPO di DMT_GRUPPI se colonna 1 =G
2233        																--		è un ID_USER di DMT_USERS se colonna 1 =UT
2234        																--		è un ID_SCRIVANIA di DMT_SCRIVANIE_VIRTUALI se colonna 1 =SV
2235        																--		è un ID_RUOLO_AMM di DMT_RUOLI_AMM se colonna 1 =R
2236        																--	3: Denominazione/nome del soggetto (se trattasi di UO in input può essere sia la denominazione semplice che quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2237        																--	4: Identificativo della UO cui appartiene la scrivania-soggetto 
2238        																--	5: Nri livello della UO-soggetto o della UO a cui appartiene la scrivania-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2239        																--	o codice rapido del gruppo (se ha un corrispondente gruppo in rubrica soggetti) o utente
2240        																--	6: Denominazione della UO cui appartiene la scrivania-soggetto(in input può essere la denominazione semplice quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2241        																--	7: Codice che identifica nell'applicazione esterna da cui ci si connette l'utente-soggetto o quello che occupa la scrivania-soggetto
2242        																--	8: Denominazione dell'utente che occupa la scrivania-soggetto
2243        																--	9: (valore 1) Indica che il soggetto, se UO, sono anche tutte le sue sotto-UO
2244        																--	10:(valori interi da 1 a n) Livello della struttura organizzativa in cui si espleta il ruolo amministrativo-soggetto
2245        																--	11: Se colonna 1 =R: Codice del tipo di unità organizzativa in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2246        																--		Se colonna 1 =UT o SV: Username (delle credenziali locali) dell'utente-soggetto o che occupa la scrivania-soggetto
2247        																--	12: Se colonna 1 =R: Descrizione del tipo di unità organizzativa (es: settore, servizio, ecc) in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2248        																--		Se colonna 1 =UT o SV: N.ro di matricola dell'utente-soggetto o che occupa la scrivania-soggetto
2249        																--	13: Identificativo della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto
2250        																--	14: Denominazione/nome della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input può essere la denominazione semplice o quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è sempre la denominazione semplice)
2251        																--	15: Nri livello della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2252        																--	16:(valore 1) Indica che il ruolo amministrativo-soggetto si espleta anche nelle sotto-UO della/e UO rintracciate tramite i valori delle 3 colonne precedenti
2253        																--    colonne da 17 a 28 non sono utilizzate
2254        																--	29: Dati identificativi del soggetto
2255        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
2256        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica del soggetto. Se non valorizzato si intende sysdate
2257        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2258        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2259        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
2260        			FlgNoDecodificaSoggIn	IN		PLS_INTEGER DEFAULT NULL)			-- (1/0/NULL) Se 1 la colonna 29 e le altre colonne di "decodifica" (denominazioni, livelli, username, n.ro matricola ecc) del soggetto in output non vengono popolate
2261        			return PLS_INTEGER;										-- Vale 1 se la conversione è andata a buon fine, altrimenti 0
2262        
2263        	/*********** Funzione per controllare i dati identificativi di un soggetto interno	(possibile assegnatario di documenti/folder o di permessi su di essi)	**********/
2264        	/*********** I dati vengono rielaborati e restituiti completati																**********/
2265        	function CtrlDatiSoggInterno(
2266        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
2267        																-- (obblig). Codice identificativo del token di connessione
2268        			FlgSoggPerIn		IN		VARCHAR2,						-- (obblig.) Indica per cosa serve il soggetto. Valori ammessi:
2269        																--	ACE = come destinatario di permessi in una Access Control Entry
2270        																--	ASS = come assegnatario di unità documentaria o folder
2271        			DatiSoggXMLIO		IN OUT	NOCOPY CLOB,					-- Dati del soggetto interno da controllare e rielaborare (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
2272        																-- Il tag "Riga" può contenere le seguenti colonne:
2273        																--	1: (obblig.) Indicatore del tipo di soggetto
2274        																--		Valori possibili:
2275        																--			SP	= Soggetto produttore  
2276        																-- 			AOO	= AOO 
2277        																-- 			UT 	= Utente
2278        																--			SV	= Scrivania virtuale
2279        																--			UO	= Unità organizzativa (vale a dire tutte le scrivanie virtuali ad essa afferenti)
2280        																--			G	= Gruppo
2281        																--			R	= Ruolo amministrativo contestualizzato ovvero i soggetti che hanno un certo ruolo amministrativo (eventualmente rispetto ad una certa UO o un dato livello della struttura organizzativa/tipo di UO o entrambi)
2282        																--	2: Identificativo del soggetto
2283        																--		è un ID_SP_AOO di DMT_SOGGETTI_PROD_AOO se colonna 1 è SP o AOO
2284        																--		è un ID_UO di DMT_STRUTTURA_ORG se colonna 1=UO,
2285        																--		è un ID_GRUPPO di DMT_GRUPPI se colonna 1 =G
2286        																--		è un ID_USER di DMT_USERS se colonna 1 =UT
2287        																--		è un ID_SCRIVANIA di DMT_SCRIVANIE_VIRTUALI se colonna 1 =SV
2288        																--		è un ID_RUOLO_AMM di DMT_RUOLI_AMM se colonna 1 =R
2289        																--	3: Denominazione/nome del soggetto (se trattasi di UO in input può essere sia la denominazione semplice che quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2290        																--	4: Identificativo della UO cui appartiene la scrivania-soggetto 
2291        																--	5: Nri livello della UO-soggetto o della UO a cui appartiene la scrivania-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2292        																--	6: Denominazione della UO cui appartiene la scrivania-soggetto(in input può essere la denominazione semplice quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2293        																--	7: Codice che identifica nell'applicazione esterna da cui ci si connette l'utente-soggetto o quello che occupa la scrivania-soggetto
2294        																--	8: Denominazione dell'utente che occupa la scrivania-soggetto
2295        																--	9: (valore 1) Indica che il soggetto, se UO, sono anche tutte le sue sotto-UO
2296        																--	10:(valori interi da 1 a n) Livello della struttura organizzativa in cui si espleta il ruolo amministrativo-soggetto
2297        																--	11: Se colonna 1 =R: Codice del tipo di unità organizzativa in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2298        																--		Se colonna 1 =UT o SV: Username (delle credenziali locali) dell'utente-soggetto o che occupa la scrivania-soggetto
2299        																--	12: Se colonna 1 =R: Descrizione del tipo di unità organizzativa (es: settore, servizio, ecc) in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2300        																--		Se colonna 1 =UT o SV: N.ro di matricola dell'utente-soggetto o che occupa la scrivania-soggetto
2301        																--	13: Identificativo della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto
2302        																--	14: Denominazione/nome della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input può essere la denominazione semplice o quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è sempre la denominazione semplice)
2303        																--	15: Nri livello della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2304        																--	16:(valore 1) Indica che il ruolo amministrativo-soggetto si espleta anche nelle sotto-UO della/e UO rintracciate tramite i valori delle 3 colonne precedenti
2305        																--    colonne da 17 a 28 non sono utilizzate
2306        																--	29: Dati identificativi del soggetto (colonna non rielaborata/popolata in output se FlgNoDecodificaSoggIn=1)
2307        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2308        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2309        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
2310        			FlgNoDecodificaSoggIn	IN		PLS_INTEGER DEFAULT NULL,			-- (1/0/NULL) Se 1 la colonna 29 e le altre colonne di "decodifica" (denominazioni, livelli, username, n.ro matricola ecc) del soggetto in output non vengono ripopolate ma restanto come passate in input
2311        			FlgCallByGUIIn		IN		PLS_INTEGER DEFAULT 1)				-- (1/0/NULL) Se 1 la stored è chiamata dalla GUI di una web application per cui gli id. dei soggetti non vengono considerati se non sono popolati anche altri campi visibili a video o se non sono congruenti con i valori dei campi stessi
2312        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
2313        
2314        	/********* funzione per testare se un dato tipo documento/folder/processo è sottotipo di un altro (anche non direttamente) *******/
2315        	function IsSubTypeOf(
2316        			FlgTypeToVerifyIn			IN		VARCHAR2,				-- (obblig.) Indica se la verifica se un dato tipo è sotto-tipo di un altro va fatta su:
2317        																		-- TD = Tipi documenti, TF = Tipi folder, TP = Tipi processi/procedimenti 
2318        			IdTypeToTestIn			IN		INTEGER,					-- (obblig) Id. del tipo che si vuole testare se sottotipo di un altro
2319        			IdTypeSubTypeOfIn			IN		INTEGER					-- (obblig) Id. del tipo di cui testare se il tipo IdTypeToTestIn è sottotipo
2320        			)return PLS_INTEGER;										-- restituisce 1 in caso di test positivo, 0 in caso di test negativo, valori negativi in caso di errore
2321        		
2322        	/********** funzione per ricercare i modelli di oggetti da usare per i documenti **********/
2323        	function TrovaModOggetti(
2324        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2325        																					-- (obblig). Codice identificativo del token di connessione
2326        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2327        			----------------------inizio filtri di ricerca -----------------------------------------------------------------------
2328        			OggettoIn				IN		VARCHAR2 DEFAULT NULL,					-- Filtro sull'oggetto del modello: stringa/parole contenute nell'oggetto (ricerca di tipo contains)	
2329        			CINomeModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice o nome del modello (ricerca case-insensitive in like)
2330        			ProvCIModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice di origine del modello (ricerca case-sensitive in like)
2331        			IdModelloIn				IN		DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type DEFAULT NULL,
2332        																					-- Id. di uno specifico modello di oggetto da ricercare
2333        			FlgVersoRegistrazioneIn	IN		VARCHAR2 DEFAULT NULL,					-- Filtro per restringere la ricerca ai soli modelli per:
2334        																					-- E = registrazioni in entrata
2335        																					-- U = registrazioni in uscita
2336        																					-- I = registrazioni in interna
2337        																					-- valori ammessi E, U, I
2338        																					-- o una loro concatenazione (separati da ;)
2339        			CategoriaRegIn			IN		DMT_TIPI_REGISTRAZIONE.COD_CATEGORIA%type DEFAULT NULL,
2340        																					-- Filtro sulla categoria di registrazione per cui devono valere i modelli da ricercare (ricerca esatta)
2341        			SiglaRegistrazioneIn	IN		DMT_TIPI_REGISTRAZIONE.SIGLA%type DEFAULT NULL,
2342        																					-- Filtro sulla sigla del registro per cui devono valere i modelli da ricercare (ricerca esatta)
2343        			FlgSoloModUtenteIn		IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca estrae solo i modelli di oggetti creati dall'utente di lavoro, se 0 o NULL sia i modelli creati dall'utente che quelli creati da altri 
2344        			FlgTuttiModPrivatiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i modelli privati - i.e. NON pubblici - creati da altri, se 0 o NULL no
2345        			FlgIncludiAnnullatiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i modelli logicamente annullati, se 0 o NULL mostra solo i modelli validi
2346        			CodApplOwnerIn			IN 		VARCHAR2 DEFAULT NULL,					-- Codice dell'applicazione che ha inserito i modelli da ricercare. Se pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo i modelli di oggetto creati da quell'applicazione
2347        			CodIstApplOwnerIn		IN 		VARCHAR2 DEFAULT NULL,					-- Codice dell'istanza di applicazione che ha inserito i modelli da ricercare. Se pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo i modelli di oggetto creati dall'istanza di applicazione esterna da cui si è connessi
2348        			FlgRestrApplOwnerIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 vengono estratti solo i modelli creati dall'applicazione (ed eventuale istanza) specificata in CodApplOwnerIn (e CodIstApplOwnerIn); se 0 o NULL e se CodApplOwnerIn è valorizzata vengono estratti solo i modelli senza applicazione creatrice o con applicazione creatrice pari a quella specificata
2349        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2350        			ColOrderByIO			IN OUT	VARCHAR2,								-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne da 1 a 12). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2351        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2352        																					-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2353        			FlgDescOrderByIO  		IN OUT	VARCHAR2,								-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2354        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.			
2355        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2356        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  			-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2357           			BachSizeIO				IN OUT	PLS_INTEGER,							-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)  
2358        																					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro				
2359        			OverFlowLimitIn			IN		PLS_INTEGER DEFAULT NULL,				-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow o avvertimento
2360        			FlgSenzaTotIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2361        			NroTotRecOut			OUT		PLS_INTEGER,							-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina), salvo che nel caso sia stato superato il limite di overflow (warning) e allora coincide con il n.ro di record estratti che sono pari al limite di overflow
2362             		NroRecInPaginaOut 		OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2363        			FlgBatchSearchIn		IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che la stored è utilizzata da un processo batch, altrimenti da un processo online.
2364        																					-- Serve affinchè in caso l'input OverFlowLimitIn non sia valorizzato vengano applicati i limiti di overflow per processo batch o online che sono parametri di configurazione
2365        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2366        			ListaXMLOut				OUT		NOCOPY CLOB,							-- Lista dei modelli di oggetto trovati (XML conforme a schema LISTA_STD.xsd)
2367        																					-- Ogni modello è un tag Riga che contiene le seguenti colonne: 
2368        																					-- 1: Id. (PK) del modello di oggetto
2369        																					-- 2: Codice identificativo/nome del modello
2370        																					-- 3: Oggetto del modello
2371        																					-- 4: Codice che identifica il modello nel sistema eventuale di provenienza
2372        																					-- 5: (valori 1/0) Flag di modello creato dall'utente di lavoro (1) o da altri (0)
2373        																					-- 6: (valori PB/UO/PR) Flag di modello pubblico (PB) o valido per una UO (UO) privato di un utente (PR)
2374        																					-- 7: (valori 1/0) Flag di modello valido (=1) o logicamente annullato (=0)
2375        																					-- 8: (valori 1/0) Flag di modello riservato di sistema e non modificabile da GUI
2376        																					-- 9: (valori 1/0) Flag di modello utilizzabile per le registrazioni in entrata
2377        																					-- 10: (valori 1/0) Flag di modello utilizzabile per le registrazioni in uscita
2378        																					-- 11: (valori 1/0) Flag di modello utilizzabile per le registrazioni interne
2379        																					-- 12: Note del modello
2380        																					-- 13: Lista degli id. dei tipi di registrazioni limitatamente alle quali può essere utilizzato il modello (se più di uno separati da ;)
2381        																					-- 14: Id. utente di creazione
2382        																					-- 15: Descrizione utente di creazione
2383        																					-- 16: Timestamp di creazione
2384        																					-- 17: Id. utente di ultimo aggiornamento
2385        																					-- 18: Descrizione utente di ultimo aggiornamento
2386        																					-- 19: Timestamp di ultimo aggiornamento
2387        																					-- 20: Cod. applicazione creatrice
2388        																					-- 21: Cod. istanza applicazione creatrice del modello
2389        																					-- 22: Nome dell'applicazione/istanza di applicazione creatrice del modello
2390        																					-- 23: Lista delle decodifiche dei tipi di registrazioni limitatamente alle quali può essere utilizzato il modello (se più di una separate da a capo)
2391        																					-- 24: Denominazione della UO nella cui porzione di oggettario è definito il modello di oggetto rappresentato dal record
2392        																					-- 25: Id. della UO nella cui porzione di oggettario è definito il modello di oggetto rappresentato dal record
2393        																					-- 26: Cod. rapido/nri livelli della UO nella cui porzione di oggettario è definito il modello di oggetto rappresentato dal record
2394        																					-- 27: Flag 1/0. Se 1 indica che il modello di oggetto rappresentato dal record è visibile da tutte le sotto-UO di quella indicata in colonna 24
2395        																					-- 28: Flag 1/0. Se 1 indica che il modello di oggetto rappresentato dal record è gestibile da tutte le sotto-UO di quella indicata in colonna 24
2396        																					-- 29: (valori 1/0) Flag di modello modificabile dall'utente di lavoro
2397        																					-- 30: (valori 1/0) Flag di modello cancellabile dall'utente di lavoro
2398        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2399        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2400        			ErrMsgOut				OUT 	VARCHAR2,								-- Messaggio d'errore
2401        			FlgRicPuntualeXOggettoIn IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 indica che la ricerca sul filtro OggettoIn è puntuale, a meno di case, spazi e "a capi"
2402        			RigaTagNameIn			IN		VARCHAR2 DEFAULT NULL,					-- (opzionale) Come rinominare il tag Riga dell'XML ListaXMLOut di output
2403        			ColTagNameIn			IN		DMVA_STRING DEFAULT NULL				-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=.. nell'XML ListaXMLOut di output
2404        			)return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2405        		
2406        		/********** funzione per ottenere l'oggetto corrispondente ad un modello di cui sia indicato in input l'id. o un codice  **********/
2407        		function GetOggettoDaModello(
2408        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2409        																					-- (obblig). Codice identificativo del token di connessione
2410        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2411        			CINomeModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Codice o nome del modello (ricerca case-insensitive in like)
2412        			ProvCIModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Codice di origine del modello (ricerca case-sensitive in like)
2413        			IdModelloIn				IN		DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type DEFAULT NULL,
2414        																					-- Id. del modello
2415        			FlgVersoRegistrazioneIn	IN		VARCHAR2 DEFAULT NULL,					-- Filtro per restringere la ricerca del modello tra quelli per:
2416        																					-- E = registrazioni in entrata
2417        																					-- U = registrazioni in uscita
2418        																					-- I = registrazioni in interna
2419        																					-- valori ammessi E, U, I
2420        			CategoriaRegIn			IN		DMT_TIPI_REGISTRAZIONE.COD_CATEGORIA%type DEFAULT NULL,
2421        																					-- Categoria di registrazione per cui deve valere il modello (ricerca esatta)
2422        			SiglaRegistrazioneIn	IN		DMT_TIPI_REGISTRAZIONE.SIGLA%type DEFAULT NULL,
2423        																					-- Sigla del registro per cui deve valere il modello (ricerca esatta)
2424        			OggettoOut				OUT		VARCHAR2,								-- Oggetti del modello (se trovato univocamente)	
2425        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2426        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2427        			ErrMsgOut				OUT 	VARCHAR2								-- Messaggio d'errore
2428        			)return PLS_INTEGER;													-- Vale 1 se l'oggetto corrispondente al modello è stato trovato, altrimenti 0
2429        			
2430        		/****************** funzione per creare o modificare un modello di oggetto di documento ****************/
2431        		function IUModelloOggetto(
2432        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2433        																					-- (obblig). Codice identificativo del token di connessione
2434        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2435        			IdModOggettoIO			IN OUT	DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type,-- Id. del modello di oggetto da modificare. Se NULL si intende che il modello è da creare ex-novo
2436        																					-- in output, salvo in caso di errore, è sempre valorizzato
2437        			CINomeModelloIn			IN 		DMT_MODELLI_OGGETTI.CI_NOME%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2438        																					-- Codice identificativo o nome del modello
2439        																					-- In creazione di modello se non viene specificato viene settato in automatico pari a IdModOggettoIO
2440        			OggettoIn				IN		DMT_MODELLI_OGGETTI.OGGETTO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2441        																					-- (obblig.) Oggetto del modello
2442        			CIProvModelloIn			IN 		DMT_MODELLI_OGGETTI.PROV_CI_MODELLO%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2443        																					-- Codice identificativo del modello nel sistema di provenienza   
2444        			FlgPubblicoIn			IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2445        																					-- (valori 1/0/NULL) Indicatore di modello pubblico (i.e. visibile a tutti) o privato (visibile solo al creatore)
2446        			FlgXDocInEntrataIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2447        																					-- (valori 1/0/NULL) Indicatore di modello utilizzabile per i documenti in entrata
2448        			FlgXDocInUscitaIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2449        																					-- (valori 1/0/NULL) Indicatore di modello utilizzabile per i documenti in uscita
2450        			FlgXDocInterniIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2451        																					-- (valori 1/0/NULL) Indicatore di modello utilizzabile per i documenti interni
2452        			FlgLockedIn				IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2453        																					-- (valori 1/0/NULL) Indicatore di modello riservato dal sistema e non modificabile/cancellabile da GUI
2454        			NoteModelloIn			IN 		DMT_MODELLI_OGGETTI.NOTE%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2455        																					-- Annotazioni del modello   
2456        			FlgModTipiRegIn			IN		VARCHAR2 DEFAULT 'I',					-- (valori I/C) Indica se i tipi di registrazioni indicati nell'argomento successivo - quelli per cui soltanto si può utilizzare il modello - sono forniti in modo incrementale (=I) (solo quelli da inserire/cancellare) oppure completo (=C), vale a dire che dovranno soppiantare tutti quelli già associati al modello da aggiornare
2457        			XMLTipiRegIn			IN		CLOB DEFAULT NULL,						-- Lista con i tipi di registrazioni per cui si può utilizzare il modello(XML conforme a schema LISTA_STD.xsd)	
2458        																					-- NOTA: se nessun tipo è indicato il modello è utilizzabile per qulasiasi tipo di registrazione
2459        																					-- Ogni tipo di registrazione è un tag "Riga" che può contenere le seguenti colonne:
2460        																					-- 1: Identificativo del tipo di registrazione
2461        																					-- 2: Categoria del tipo di registrazione
2462        																					-- 3: Sigla del registro che corrisponde al dato tipo di registrazione
2463        																					-- 4: (valori 1/0/NULL) Flag di tipo di registrazione da eliminare
2464        			FlgRollBckFullIn			IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2465        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2466        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2467        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2468        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2469        			ErrMsgOut				OUT 	VARCHAR2,								-- Messaggio d'errore
2470        			IdUOIn					IN		INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2471        																					-- Id. della UO nella cui porzione di oggettario è censito il soggetto
2472        			FlgVisibSottoUOIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2473        																					-- Flag 1/0. Se 1 la visibilità del modello è estesa a tutte le sotto UO di IdUOIn 
2474        			FlgGestSottoUOIn		IN		PLS_INTEGER	DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD')
2475        																					-- Flag 1/0. Se 1 la modifica/cancellazione del modello è estesa a tutte le sotto UO di IdUOIn 
2476        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2477        	
2478        	/*** Funzione di eliminazione di un modello di oggetto di documento								***/	
2479        	/*** Si può specificare se l'eliminazione deve essere fisica o solo logica (annullamento)		***/
2480        	/*** Se non lo si specifica il sistema fa quella fisica se possibile, se no quella logica		***/
2481        	function DModelloOggetto(
2482        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2483        																					-- (obblig). Codice identificativo del token di connessione
2484        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2485        			IdModOggettoIn			IN 		DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type,-- (obblig.) Id. del modello di oggetto da cancellare/annullare
2486        			FlgCancFisicaIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL): Se 1 si richiede la cancellazione fisica; se 0 l'annullamento logico; se non è valorizzato quella possibile delle 2. 		
2487        			MotiviIn				IN		DMT_ACTIVITIES.NOTE%type,				-- Motivi della cancellazione/annullamento
2488        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2489        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2490        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2491        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2492        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2493        			ErrMsgOut				OUT 	VARCHAR2								-- Messaggio d'errore
2494        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2495        
2496        	
2497        	/********** funzione per ricercare le porzioni di topografico (i.e. toponimi, ovvero i luoghi dove viene collocata fisicamente la doc. cartacea) censite in DMT_TOPOGRAFICO **********/
2498        	function TrovaInTopografico(
2499        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2500        																					-- (obblig). Codice identificativo del token di connessione
2501        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2502        			----------------------inizio filtri di ricerca -----------------------------------------------------------------------
2503        			NomeToponimoIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul nome del toponimo: stringa/parole contenute nel campo NOME (ricerca di tipo contains)	
2504        			CodRapidoToponimoIn		IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice rapido del toponimo (ricerca case-insensitive in like)
2505        			DesToponimoIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sulla descrizione del toponimo e suoi contenuti: stringa/parole contenute nel campo DESCRIZIONE (ricerca di tipo contains)	
2506        			ProvCIToponimoIn		IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice di origine del toponimo (ricerca case-sensitive in like)
2507        			IdToponimoIn			IN		DMT_TOPOGRAFICO.ID_TOPONIMO%type DEFAULT NULL,
2508        																					-- Id. di uno specifico toponimo da ricercare
2509        			FlgSoloToponUtenteIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca estrae solo i toponimi censiti dall'utente di lavoro, se 0 o NULL sia i toponimi censiti dall'utente che quelli censiti da altri 
2510        			FlgIncludiAnnullatiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i toponimi logicamente annullati, se 0 o NULL mostra solo i toponimi validi
2511        			FlgIncludiNascostiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i toponimi "nascosti", se 0 o NULL no
2512        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2513        			ColOrderByIO			IN OUT	VARCHAR2,								-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne da 1 a 8). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2514        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2515        																					-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2516        			FlgDescOrderByIO  		IN OUT	VARCHAR2,								-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2517        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.			
2518        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2519        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  			-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2520           			BachSizeIO				IN OUT	PLS_INTEGER,							-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)  
2521        																					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro				
2522        			OverFlowLimitIn			IN		PLS_INTEGER DEFAULT NULL,				-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow o avvertimento
2523        			FlgSenzaTotIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2524        			NroTotRecOut			OUT		PLS_INTEGER,							-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina), salvo che nel caso sia stato superato il limite di overflow (warning) e allora coincide con il n.ro di record estratti che sono pari al limite di overflow
2525             		NroRecInPaginaOut 		OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2526        			FlgBatchSearchIn		IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che la stored è utilizzata da un processo batch, altrimenti da un processo online.
2527        																					-- Serve affinchè in caso l'input OverFlowLimitIn non sia valorizzato vengano applicati i limiti di overflow per processo batch o online che sono parametri di configurazione
2528        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2529        			ListaXMLOut				OUT		NOCOPY CLOB,							-- Lista dei toponimi trovati (XML conforme a schema LISTA_STD.xsd)
2530        																					-- Ogni toponimo è un tag Riga che contiene le seguenti colonne: 
2531        																					-- 1: Id. (PK) del toponimo
2532        																					-- 2: Nome del toponimo
2533        																					-- 3: Cod. rapido del toponimo
2534        																					-- 4: Descrizione del toponimo e suoi contenuti
2535        																					-- 5: Codice che identifica il toponimo nel sistema eventuale di provenienza
2536        																					-- 6: (valori 1/0) Flag di toponimo censito dall'utente di lavoro (1) o da altri (0)
2537        																					-- 7: (valori 1/0) Flag di toponimo valido (=1) o logicamente annullato (=0)
2538        																					-- 8: (valori 1/0) Flag di toponimo riservato di sistema e non modificabile da GUI
2539        																					-- 9: Note del toponimo
2540        																					-- 10: Id. utente di creazione
2541        																					-- 11: Descrizione utente di creazione
2542        																					-- 12: Timestamp di creazione
2543        																					-- 13: Id. utente di ultimo aggiornamento
2544        																					-- 14: Descrizione utente di ultimo aggiornamento
2545        																					-- 15: Timestamp di ultimo aggiornamento	
2546        																					-- 16: (valori 1/0) Flag di toponimo "nascosto"
2547        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2548        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2549        			ErrMsgOut				OUT 		VARCHAR2,							-- Messaggio d'errore
2550        			RigaTagNameIn			IN		VARCHAR2 DEFAULT NULL,					-- (opzionale) Come rinominare il tag Riga dell'XML ListaXMLOut di output
2551        			ColTagNameIn			IN		DMVA_STRING DEFAULT NULL				-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=.. nell'XML ListaXMLOut di output
2552        			)return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2553        	
2554        	/******* Funzione per verificare se un toponimo esiste nel topografico e vi è identificabile univocamente															******/
2555        	/******* Il match con i toponimi censiti nel topografico segue i seguenti criteri: 																					******/
2556        	/******* per i toponimi in DB i campi corrispondenti ai dati che compaiono in input, valorizzati o meno che siano, sono uguali al corrispondente campo in input  	******/
2557        	/******* per i toponimi in DB i campi corrispondenti ai dati che NON compaiono in input possono essere non valorizzati o valorizzati in qualsiasi modo 				******/
2558        	/******* La funzione restituisce l'Id. del toponimo solo se a partire dagli estremi immessi riesce a identificarlo univocamente										******/
2559        	/******* è possibile (richiedendolo con apposito input) far sì che i dati del toponimo siano restituiti completandoli con quelli del toponimo trovato				******/
2560        	function FindInTopografico(
2561        			IdDominioIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del dominio (soggetto produttore o AOO) di lavoro
2562        			DatiToponimoXMLIO		IN OUT	NOCOPY CLOB,							-- Dati del toponimo (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
2563        																					-- Le colonne che mancano del tutto sono campi che per il toponimo da trovare possono assumere qualsiasi valore (NULL incluso).
2564        																					-- Le colonne presenti ma non valorizzate sono campi che si vuole che siano non valorizzati anche sul toponimo in DB da trovare.
2565        																					-- Le colonne possibili sono:
2566        																					-- 1:  Id. del toponimo
2567        																					-- 2:  Codice rapido del toponimo
2568        																					-- 3:  Nome del toponimo
2569        																					-- 4:  Descrizione del toponimo e dei suoi contenuti
2570        																					-- 5:  Cod. del toponimo in un eventuale sistema di provenienza
2571        																					-- Almeno una delle colonne da 1 a 5 deve essere valorizzata
2572        			FlgSoloVldIn			IN		PLS_INTEGER DEFAULT 1,					-- (valori 1/0/NULL) Indica se il toponimo deve essere valido (1) o può essere anche logicamente annullato
2573        			FlgCompletaDatiIn		IN		PLS_INTEGER DEFAULT 1,					-- (valori 1/0/NULL) Se 1 indica che qualora si identifichi univocamente il toponimo (return 1) DatiToponimoXMLIO viene restituito con i dati del toponimo trovato
2574        			IdToponimoOut			OUT		DMT_TOPOGRAFICO.ID_TOPONIMO%type,		-- Identificativo del toponimo trovato
2575        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2576        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2577        			ErrMsgOut				OUT 		VARCHAR2)							-- Messaggio d'errore
2578        			return PLS_INTEGER;														-- Vale 1 se il toponimo è stato individuato univocamente, altrimenti 0
2579        	
2580        	/****************** funzione per creare o modificare un toponimo - i.e. luogo di collocazione fisica della documentazione - nel topografico ****************/
2581        	function IUInTopografico(
2582        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2583        																					-- (obblig). Codice identificativo del token di connessione
2584        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2585        			IdToponimoIO			IN OUT	DMT_TOPOGRAFICO.ID_TOPONIMO%type,		-- Id. del toponimo da modificare. Se NULL si intende che il toponimo è da creare ex-novo
2586        																					-- in output, salvo in caso di errore, è sempre valorizzato
2587        			NomeToponimoIn			IN 		DMT_TOPOGRAFICO.NOME_TOPONIMO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2588        																					-- (obblig.) Nome del toponimo
2589        			CodRapidoToponimoIn		IN 		DMT_TOPOGRAFICO.COD_RAPIDO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2590        																					-- Codice rapido del toponimo																		
2591        																					-- In creazione di toponimo se non viene specificato viene settato in automatico pari a IdToponimoIO
2592        			DescrizioneIn			IN		DMT_TOPOGRAFICO.DESCRIZIONE%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2593        																					-- (obblig.) Descrizione estesa (con eventuale indicazione dei contenuti)
2594        			CIProvToponimoIn		IN 		DMT_TOPOGRAFICO.PROV_CI_TOPONIMO%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2595        																					-- Codice identificativo del toponimo nel sistema di provenienza   
2596        			FlgLockedIn				IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2597        																					-- (valori 1/0/NULL) Indicatore di toponimo riservato dal sistema e non modificabile/cancellabile da GUI
2598        			NoteToponimoIn			IN 		DMT_TOPOGRAFICO.NOTE%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2599        																					-- Annotazioni del toponimo   
2600        			FlgRollBckFullIn			IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2601        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2602        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2603        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2604        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2605        			ErrMsgOut				OUT 		VARCHAR2							-- Messaggio d'errore
2606        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2607        	
2608        	/*** Funzione di eliminazione di un toponimo dalla DMT_TOPOGRAFICO								***/	
2609        	/*** Si può specificare se l'eliminazione deve essere fisica o solo logica (annullamento)		***/
2610        	/*** Se non lo si specifica il sistema fa quella fisica se possibile, se no quella logica		***/
2611        	function DDaTopografico(
2612        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2613        																					-- (obblig). Codice identificativo del token di connessione
2614        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2615        			IdToponimoIn			IN 		DMT_TOPOGRAFICO.ID_TOPONIMO%type,		-- (obblig.) Id. del toponimo di DMT_TOPOGRAFICO da cancellare/annullare
2616        			FlgCancFisicaIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL): Se 1 si richiede la cancellazione fisica; se 0 l'annullamento logico; se non è valorizzato quella possibile delle 2. 		
2617        			MotiviIn				IN		DMT_ACTIVITIES.NOTE%type,				-- Motivi della cancellazione/annullamento
2618        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2619        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2620        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2621        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2622        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2623        			ErrMsgOut				OUT 	VARCHAR2								-- Messaggio d'errore
2624        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2625        
2626        	/****** serve ad ottenere le preference di default per un dato utente ed una data GUI di tipo lista *******/
2627        	function GetListDefPrefs(
2628        			UsernameIn				IN		DMT_USERS.USERNAME%type,				-- (obblig.)Username dell'utente
2629        			ListIdIn				IN		VARCHAR2,								-- (obblig) Nome identificativo della lista a GUI
2630        			FilterPrefOut			OUT 	NOCOPY CLOB,							-- Preference di default del filtro
2631        			FilterLayoutPrefOut		OUT 	NOCOPY CLOB,							-- Preference di default del layout di filtro
2632        			GridPrefOut				OUT		NOCOPY CLOB,							-- Preference di defult della lista
2633        			AutoSearchPrefOut		OUT		PLS_INTEGER,							-- (valori 1/0) Se 1 è attiva la preference di ricerca utomatica sulla lista
2634        			FlgFilterPrefDefOut		OUT		PLS_INTEGER,							-- (valori 1/0) Se 1 la preference di default del filtro è quella dello userid = DEFAULT
2635        			FlgFilterLayoutPrefDefOut	OUT		PLS_INTEGER,						-- (valori 1/0) Se 1 la preference di default del layout di filtro è quella dello userid = DEFAULT
2636        			FlgGridPrefDefOut		OUT		PLS_INTEGER,							-- (valori 1/0) Se 1 preference di default della lista è quella dello userid = DEFAULT
2637        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2638        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2639        			ErrMsgOut				OUT 	VARCHAR2,								-- Messaggio d'errore
2640        			IdTreeNodeIn			IN		VARCHAR2 DEFAULT NULL,					-- Id. del nodo della struttura ad albero (repository documentazione, organigramma o titolario) per cui trovare la preference di filtro
2641        			FinalitaIn				IN		VARCHAR2 DEFAULT NULL					-- Finalita per cui viene richiesta la preference
2642        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2643        			
2644        	
2645        	/************ serve a elaborare i risultati delle richieste di esportazione su file di liste *****/
2646        	procedure EstraiDatiXExportListeSuFile (IdQueueIn IN INTEGER DEFAULT 1);
2647        	
2648        	----- funzione per ottenere contenuti archiviati come campi CLOB su tabelle 
2649        	function GetClobFromTabCol(
2650        			NomeTabellaIn			IN		VARCHAR2,								-- (obblig.) Nome della tabella in cui si trova il campo clob da prelevare
2651        			NomeColonnaIn			IN		VARCHAR2,								-- (obblig.) Nome della colonna di tabella in cui si trova il campo clob da prelevare
2652        			RowidRecIn				IN		VARCHAR2,								-- (obblig.) Rowid del record di tabella in cui si trova il campo clob da prelevare
2653        			ClobOut					OUT		NOCOPY CLOB,							-- Contenuto del clob 
2654        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2655        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2656        			ErrMsgOut				OUT 	VARCHAR2)								-- Messaggio d'errore
2657        			return PLS_INTEGER;														-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2658        
2659        	
2660        	----- funzione per ricercare i log scritti nella tabella DMT_ACTIVITIES
2661        	function TrovaLog(
2662        		CodIdConnectionTokenIn		IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2663        																					-- (obblig). Codice identificativo del token di connessione
2664        		IdUserLavoroIn				IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id.(ID_USER della DMT_USERS) dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2665        		FiltriIO					IN OUT	NOCOPY CLOB,							-- XML contenente nomi e valori dei filtri di ricerca(conforme allo schema SezioneCache.xsd). 
2666        																					-- Ogni filtro è un tag "Variabile" dell'XML
2667        																					-- I filtri che sono liste hanno nomi (tag Variabile/Nome) che iniziano con @.
2668        																					-- I nomi dei filtri possibili sono:
2669        																					-- TipoOperazione: indica il/i tipi di operazioni da ricercare (indicati in modo esatto). Se più di uno vanno seaparati con ;
2670        																					-- EsitoOperazione (valori OK / KO) Servere a restringere la ricerca alle operazioni avvenute con successo o andate in errore
2671        																					-- TsOperazioneDa: estremo inferiore dell'intervallo di ricerca sulla data e ora delle operazioni (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
2672        																					-- TsOperazioneA: estremo superiore dell'intervallo di ricerca sulla data e ora delle operazioni (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
2673        																					-- OperazioneEffettuataDa : Id. dell'utente/i che hanno effettuato le operazioni (se più di uno separati da ;)
2674        		------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2675        		ColOrderByIO				IN OUT	VARCHAR2,								-- Indica il/i numeri della/e colonna dell'XML (CLOB ResultOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne: da 1 a 7). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2676        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2677        																					-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2678        		FlgDescOrderByIO  			IN OUT	VARCHAR2,								-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2679        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.			
2680        		FlgSenzaPaginazioneIn 		IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2681        		NroPaginaIO      			IN OUT	PLS_INTEGER,                  			-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2682        		BachSizeIO					IN OUT	PLS_INTEGER,							-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)  
2683        																					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro				
2684        		OverFlowLimitIn				IN		PLS_INTEGER DEFAULT NULL,				-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
2685        		FlgSenzaTotIn				IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2686        		NroTotRecOut				OUT		PLS_INTEGER,							-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
2687        		NroRecInPaginaOut 			OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2688        		FlgBatchSearchIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che la stored è utilizzata da un processo batch, altrimenti da un processo online.
2689        																					-- Serve affinchè in caso l'input OverFlowLimitIn non sia valorizzato vengano applicati i limiti di overflow per processo batch o online che sono parametri di configurazione del sistema. 
2690        		------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2691        		ResultOut					OUT		NOCOPY CLOB, 							-- Lista dei record di log trovati (XML conforme a schema LISTA_STD.xsd)
2692        																					-- Ogni record di log è un tag Riga che può contenere le seguenti colonne: 
2693        																					-- 1: Timestamp dell'operazione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2694        																					-- 2: Progressivo operazione per ordinamento cronologico
2695        																					-- 3: Tipo di operazione
2696        																					-- 4: Id. dell'utente che ha effettuato l'operazione
2697        																					-- 5: Decodifica dell'utente che ha effettuato l'operazione
2698        																					-- 6: Id. dell'utente a nome di cui stava lavorando chi ha effettuato l'operazione
2699        																					-- 7: Decodifica dell'utente a nome di cui stava lavorando chi ha effettuato l'operazione
2700        																					-- 8: Descrizione/dettagli dell'operazione
2701        																					-- 9: Esito dell'operazione (valori: successo; fallita)
2702        																					-- 10: Rowid del record di log
2703        		ErrContextOut				OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2704        		ErrCodeOut					OUT		PLS_INTEGER,							-- N.ro errore di uscita
2705        		ErrMsgOut					OUT 		VARCHAR2)							-- Messaggio d'errore
2706        		return PLS_INTEGER;															-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2707        
2708        END DMPK_UTILITY;