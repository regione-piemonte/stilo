package ${package};

import it.eng.aurigamailbusiness.database.mail.${className};
import it.eng.aurigamailbusiness.database.egr.${className};
import it.eng.aurigamailbusiness.bean.${bean};
import it.eng.aurigamailbusiness.converters.${converteBeanToTable};
import it.eng.aurigamailbusiness.converters.${converteTableToBean};
import it.eng.core.annotation.Operation;
import it.eng.core.annotation.Service;
import it.eng.core.business.DaoGenericOperations;
import it.eng.core.business.TFilterFetch;
import it.eng.core.business.TPagingList;

import it.eng.core.business.HibernateUtil;
import it.eng.core.business.converter.UtilPopulate;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Projections;

@Service(name = "Dao${className}")
public class Dao${className} extends DaoGenericOperations<${bean}> {

	@Override
	@Operation(name = "save")
	public ${bean} save(${bean} bean)
			throws Exception {
		Session session = null;	
		try {			
			session = HibernateUtil.begin();
			${className} toInsert = (${className}) UtilPopulate.populate(bean, 
					${className}.class, new ${converteBeanToTable}());	
			session.save(toInsert);
			session.flush();	
			bean = (${bean}) UtilPopulate.populate(toInsert, ${bean}.class, new ${converteTableToBean}());
			HibernateUtil.commit(session);
			return bean;
		} catch(Exception e){
			throw e;
		}finally{
			HibernateUtil.release(session);
		}
	}

	@Override
	@Operation(name = "search")
	public TPagingList<${bean}> search(
		TFilterFetch<${bean}> filter) throws Exception {
		Session session = null;
		try {
			session = HibernateUtil.begin();			
			//Creo i criteri di ricerca
			Criteria criteria = this.buildHibernateCriteriaByFilter(session, filter);
			//Conto i record totali
			Long count = (Long)criteria.setProjection(Projections.rowCount()).uniqueResult();			
			Integer startRow = filter.getStartRow() != null ? filter.getStartRow() : 0;
			Integer endRow = filter != null && filter.getEndRow() != null ? filter.getEndRow() : startRow + count.intValue() - 1;			
			//Creo l'oggetto paginatore
			TPagingList<${bean}> paginglist = new TPagingList<${bean}>();
			paginglist.setTotalRows(count.intValue());
			paginglist.setStartRow(startRow);
			paginglist.setEndRow(endRow);			
			//Recupero i record
			criteria.setProjection(null);
			criteria.setResultTransformer(Criteria.ROOT_ENTITY);
			for(Object obj : HibernateUtil.pagingByCriteria(criteria, startRow, endRow)) {
				${bean} bean = (${bean}) UtilPopulate.populate((${className}) obj, ${bean}.class, new ${converteTableToBean}());
				paginglist.addData(bean);
			}			
			HibernateUtil.commit(session);			
			return paginglist;
		}catch(Exception e){
			throw e;
		}finally{
			HibernateUtil.release(session);
		}
	}

	@Override
	@Operation(name = "update")
	public ${bean} update(${bean} bean)
			throws Exception {
		Session session = null;	
		try {			
			session = HibernateUtil.begin();
			${className} toInsert = (${className}) UtilPopulate.populate(bean, 
					${className}.class, new ${converteBeanToTable}());	
			session.update(toInsert);
			session.flush();	
			bean = (${bean}) UtilPopulate.populate(toInsert, ${bean}.class, new ${converteTableToBean}());
			HibernateUtil.commit(session);
			return bean;
		} catch(Exception e){
			throw e;
		}finally{
			HibernateUtil.release(session);
		}
	}

	@Override
	@Operation(name = "delete")
	public void delete(${bean} bean) throws Exception {
		Session session = null;	
		try {			
			session = HibernateUtil.begin();
			${className} toInsert = (${className}) UtilPopulate.populate(bean, 
					${className}.class, new ${converteBeanToTable}());	
			session.delete(toInsert);
			session.flush();	
			HibernateUtil.commit(session);
		} catch(Exception e){
			throw e;
		}finally{
			HibernateUtil.release(session);
		}
		
	}

	@Override
	@Operation(name = "forcedelete")
	public void forcedelete(${bean} bean) throws Exception {
		Session session = null;	
		try {			
			session = HibernateUtil.begin();
			${className} toInsert = (${className}) UtilPopulate.populate(bean, 
					${className}.class, new ${converteBeanToTable}());	
			session.delete(toInsert);
			session.flush();	
			HibernateUtil.commit(session);
		} catch(Exception e){
			throw e;
		}finally{
			HibernateUtil.release(session);
		}
	}
	
	private Criteria buildHibernateCriteriaByFilter(Session session,
			TFilterFetch<${bean}> filter) {
		Criteria lCriteria = session.createCriteria(${className}.class);
		return lCriteria;
	}
}    