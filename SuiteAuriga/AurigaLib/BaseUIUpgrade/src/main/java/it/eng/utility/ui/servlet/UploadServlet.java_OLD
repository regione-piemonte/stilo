package it.eng.utility.ui.servlet;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.ProgressListener;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang.StringEscapeUtils;

public class UploadServlet extends HttpServlet {

	public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		req.getSession().setAttribute("semaforo", true);
		req.getSession().setAttribute("finito", false);
		if (ServletFileUpload.isMultipartContent(req)) {
			DiskFileItemFactory factory = new DiskFileItemFactory();
			final HttpSession session = req.getSession();
	        // set the size threshold, above which content will be stored on disk
	        factory.setSizeThreshold(1 * 1024 * 1024); // 1 MB
	       
	        // create a new file upload handler
	        ServletFileUpload upload = new ServletFileUpload(factory);
	        ProgressListener progressListener = new ProgressListener() {
	        	        private long megaBytes = -1;
	        	        /**
	        	         * L'Override del metodo che viene invocato dallle librerie durante il caricamento
	        	         * @param pBytesRead i byte caricati
	        	         * @param pContentLength i byte totali di tutti i file passati dal client
	        	         * @param pItems il numero del field, considerando anche quelli di testo check ed altri, di cui si sta facendo l'upload
	        	         */
	        	        @Override
	        	        public void update(long pBytesRead, long pContentLength, int pItems) {
	        	            // Se la percentuale di caricamento è superiore al 99.7 setto 100, sono costretto ad inserire questo controllo
	        	            // perchè nel sito delle librerie si consiglia di mettere il controllo appena sotto
	        	            if (pBytesRead / pContentLength * 95 > 94.7) {
	        	            	
	        	                session.setAttribute("caricato", 95);
	        	            }
	        	            // calcolo i mega uplodati
	        	            long mBytes = pBytesRead / 1000000;//1MB
	        	            // se cambiano vado avanti altrimenti esco, nel sito si consiglia di utilizzarlo per velocizzare il processo
	        	            // per questo motivo ho dovuto aggiungere alche il primo controllo altrimenti non avrei potuto controllare l'ultimo mega o i file inferiori
	        	            if (megaBytes == mBytes) {
	        	                return;
	        	            }
	        	            // mi salvo i mega caricati se cambiati dall'ultima volta
	        	            megaBytes = mBytes;
	        	            // Carico in sessione il numero del field corrispondente al file che si sta caricando
	        	            session.setAttribute("numero", pItems);
	        	            // -1 viene restituito quando non ci sono dati
	        	            if (pContentLength == -1) {
	        	                // Setto che l'upload è finito (100%)
	        	                session.setAttribute("caricato", 95);
	        	            } else {
	        	                //Calcolo la percentuale caricata rispetto al totale dei file e non rispetto al singolo
	        	                double perc = (((double) pBytesRead) / ((double) pContentLength)) * 95;
	        	                //La salvo in sessione
	        	                session.setAttribute("caricato", ((int) (perc)));
	        	            }
	        	        }
	        	    };

	        upload.setProgressListener(progressListener);
	        PrintWriter out = res.getWriter();
	        String smartId = null;
	        try {
	        	

	            // parse the request
	            List<?> items = upload.parseRequest(req);

	            // process the uploaded items
	            Iterator<?> itr = items.iterator();

	            while (itr.hasNext()) {
	                FileItem fileItem = (FileItem) itr.next();
	                	               	                
	                if (fileItem.isFormField()){
	                	if (fileItem.getFieldName().equals("smartId")){
	                		smartId = fileItem.getString();
	                	}
	                	continue;
	                }	                	
						
 
	                
					String filename = fileItem.getName();
					int pos = filename.lastIndexOf("/");
					if (pos < 0)
						pos = filename.lastIndexOf("\\");
					if (pos > 0)
						filename = filename.substring(pos + 1);

					 String unescapedJavaScript = "''";
					    System.err.println(
					      StringEscapeUtils.escapeJavaScript(unescapedJavaScript));

										
					File uploadedFile = File.createTempFile("upload", ""); 
					fileItem.write(uploadedFile);	
					session.setAttribute("finito", true);
					res.setContentType("text/html"); 
					res.setHeader("Pragma", "No-cache");
					res.setDateHeader("Expires", 0);
					res.setHeader("Cache-Control", "no-cache");
					out.println("<html>");					
					out.println("<body>");
					out.println("<script type=\"text/javascript\">");	
//					out.println("alert(window.top)");	
//					out.println("try {window.top.endOfchangedFile('" + StringEscapeUtils.escapeJava(filename+"#"+uploadedFile.getAbsolutePath()) + "'); } " +
//							"catch(err) {for (var p in err) alert(err[p])}");
					out.println("try {window.top.changeNameFile_" + smartId + "('" + StringEscapeUtils.escapeJava(filename+"#"+uploadedFile.getAbsolutePath()) + "'); } " +
							"catch(err) {for (var p in err) alert(err[p])}");
					out.println("</script>");
					out.println("</body>");
					out.println("</html>");	
					req.getSession().removeAttribute("finito");
					req.getSession().removeAttribute("caricato");
					req.getSession().removeAttribute("numero");
					out.flush();								
	            }	            

	        } catch (Exception e) {
	        	e.printStackTrace();	        	
	        }
        }
	}
	
}
