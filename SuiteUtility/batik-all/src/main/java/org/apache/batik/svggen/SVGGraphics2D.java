// 
// Decompiled by Procyon v0.5.36
// 

package org.apache.batik.svggen;

import java.util.Iterator;
import java.util.Collection;
import java.awt.GraphicsConfiguration;
import java.awt.Paint;
import java.awt.font.TextLayout;
import java.text.AttributedCharacterIterator;
import java.awt.image.renderable.RenderableImage;
import java.awt.image.RenderedImage;
import java.awt.image.BufferedImageOp;
import java.awt.Stroke;
import java.awt.BasicStroke;
import java.awt.Shape;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.image.ImageObserver;
import java.awt.Image;
import java.awt.FontMetrics;
import java.awt.Font;
import java.awt.Color;
import java.awt.Graphics;
import java.util.List;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.IOException;
import java.io.Writer;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.util.Map;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import java.awt.geom.AffineTransform;
import java.awt.font.TextAttribute;
import java.util.HashSet;
import java.awt.image.BufferedImage;
import org.w3c.dom.Document;
import java.util.Set;
import java.awt.Graphics2D;
import java.awt.Dimension;
import org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

public class SVGGraphics2D extends AbstractGraphics2D implements Cloneable, SVGSyntax, ErrorConstants
{
    public static final String DEFAULT_XML_ENCODING = "ISO-8859-1";
    public static final int DEFAULT_MAX_GC_OVERRIDES = 3;
    protected DOMTreeManager domTreeManager;
    protected DOMGroupManager domGroupManager;
    protected SVGGeneratorContext generatorCtx;
    protected SVGShape shapeConverter;
    protected Dimension svgCanvasSize;
    protected Graphics2D fmg;
    protected Set unsupportedAttributes;
    
    public final Dimension getSVGCanvasSize() {
        return this.svgCanvasSize;
    }
    
    public final void setSVGCanvasSize(final Dimension d) {
        this.svgCanvasSize = new Dimension(d);
    }
    
    public final SVGGeneratorContext getGeneratorContext() {
        return this.generatorCtx;
    }
    
    public final SVGShape getShapeConverter() {
        return this.shapeConverter;
    }
    
    public final DOMTreeManager getDOMTreeManager() {
        return this.domTreeManager;
    }
    
    protected final void setDOMTreeManager(final DOMTreeManager domTreeManager) {
        this.domTreeManager = domTreeManager;
        this.generatorCtx.genericImageHandler.setDOMTreeManager(this.domTreeManager);
    }
    
    protected final DOMGroupManager getDOMGroupManager() {
        return this.domGroupManager;
    }
    
    protected final void setDOMGroupManager(final DOMGroupManager domGroupManager) {
        this.domGroupManager = domGroupManager;
    }
    
    public final Document getDOMFactory() {
        return this.generatorCtx.domFactory;
    }
    
    public final ImageHandler getImageHandler() {
        return this.generatorCtx.imageHandler;
    }
    
    public final GenericImageHandler getGenericImageHandler() {
        return this.generatorCtx.genericImageHandler;
    }
    
    public final ExtensionHandler getExtensionHandler() {
        return this.generatorCtx.extensionHandler;
    }
    
    public final void setExtensionHandler(final ExtensionHandler extensionHandler) {
        this.generatorCtx.setExtensionHandler(extensionHandler);
    }
    
    public SVGGraphics2D(final Document document) {
        this(SVGGeneratorContext.createDefault(document), false);
    }
    
    public SVGGraphics2D(final Document document, final ImageHandler imageHandler, final ExtensionHandler extensionHandler, final boolean b) {
        this(buildSVGGeneratorContext(document, imageHandler, extensionHandler), b);
    }
    
    public static SVGGeneratorContext buildSVGGeneratorContext(final Document document, final ImageHandler imageHandler, final ExtensionHandler extensionHandler) {
        final SVGGeneratorContext svgGeneratorContext = new SVGGeneratorContext(document);
        svgGeneratorContext.setIDGenerator(new SVGIDGenerator());
        svgGeneratorContext.setExtensionHandler(extensionHandler);
        svgGeneratorContext.setImageHandler(imageHandler);
        svgGeneratorContext.setStyleHandler(new DefaultStyleHandler());
        svgGeneratorContext.setComment("Generated by the Batik Graphics2D SVG Generator");
        svgGeneratorContext.setErrorHandler(new DefaultErrorHandler());
        return svgGeneratorContext;
    }
    
    public SVGGraphics2D(final SVGGeneratorContext generatorContext, final boolean b) {
        super(b);
        this.fmg = new BufferedImage(1, 1, 2).createGraphics();
        (this.unsupportedAttributes = new HashSet()).add(TextAttribute.BACKGROUND);
        this.unsupportedAttributes.add(TextAttribute.BIDI_EMBEDDING);
        this.unsupportedAttributes.add(TextAttribute.CHAR_REPLACEMENT);
        this.unsupportedAttributes.add(TextAttribute.JUSTIFICATION);
        this.unsupportedAttributes.add(TextAttribute.RUN_DIRECTION);
        this.unsupportedAttributes.add(TextAttribute.SUPERSCRIPT);
        this.unsupportedAttributes.add(TextAttribute.SWAP_COLORS);
        this.unsupportedAttributes.add(TextAttribute.TRANSFORM);
        this.unsupportedAttributes.add(TextAttribute.WIDTH);
        if (generatorContext == null) {
            throw new SVGGraphics2DRuntimeException("generatorContext should not be null");
        }
        this.setGeneratorContext(generatorContext);
    }
    
    protected void setGeneratorContext(final SVGGeneratorContext generatorCtx) {
        this.generatorCtx = generatorCtx;
        this.gc = new GraphicContext(new AffineTransform());
        final SVGGeneratorContext.GraphicContextDefaults graphicContextDefaults = generatorCtx.getGraphicContextDefaults();
        if (graphicContextDefaults != null) {
            if (graphicContextDefaults.getPaint() != null) {
                this.gc.setPaint(graphicContextDefaults.getPaint());
            }
            if (graphicContextDefaults.getStroke() != null) {
                this.gc.setStroke(graphicContextDefaults.getStroke());
            }
            if (graphicContextDefaults.getComposite() != null) {
                this.gc.setComposite(graphicContextDefaults.getComposite());
            }
            if (graphicContextDefaults.getClip() != null) {
                this.gc.setClip(graphicContextDefaults.getClip());
            }
            if (graphicContextDefaults.getRenderingHints() != null) {
                this.gc.setRenderingHints(graphicContextDefaults.getRenderingHints());
            }
            if (graphicContextDefaults.getFont() != null) {
                this.gc.setFont(graphicContextDefaults.getFont());
            }
            if (graphicContextDefaults.getBackground() != null) {
                this.gc.setBackground(graphicContextDefaults.getBackground());
            }
        }
        this.shapeConverter = new SVGShape(generatorCtx);
        this.domTreeManager = new DOMTreeManager(this.gc, generatorCtx, 3);
        this.domGroupManager = new DOMGroupManager(this.gc, this.domTreeManager);
        this.domTreeManager.addGroupManager(this.domGroupManager);
        generatorCtx.genericImageHandler.setDOMTreeManager(this.domTreeManager);
    }
    
    public SVGGraphics2D(final SVGGraphics2D svgGraphics2D) {
        super(svgGraphics2D);
        this.fmg = new BufferedImage(1, 1, 2).createGraphics();
        (this.unsupportedAttributes = new HashSet()).add(TextAttribute.BACKGROUND);
        this.unsupportedAttributes.add(TextAttribute.BIDI_EMBEDDING);
        this.unsupportedAttributes.add(TextAttribute.CHAR_REPLACEMENT);
        this.unsupportedAttributes.add(TextAttribute.JUSTIFICATION);
        this.unsupportedAttributes.add(TextAttribute.RUN_DIRECTION);
        this.unsupportedAttributes.add(TextAttribute.SUPERSCRIPT);
        this.unsupportedAttributes.add(TextAttribute.SWAP_COLORS);
        this.unsupportedAttributes.add(TextAttribute.TRANSFORM);
        this.unsupportedAttributes.add(TextAttribute.WIDTH);
        this.generatorCtx = svgGraphics2D.generatorCtx;
        this.gc.validateTransformStack();
        this.shapeConverter = svgGraphics2D.shapeConverter;
        this.domTreeManager = svgGraphics2D.domTreeManager;
        this.domGroupManager = new DOMGroupManager(this.gc, this.domTreeManager);
        this.domTreeManager.addGroupManager(this.domGroupManager);
    }
    
    public void stream(final String s) throws SVGGraphics2DIOException {
        this.stream(s, false);
    }
    
    public void stream(final String name, final boolean b) throws SVGGraphics2DIOException {
        try {
            final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(new FileOutputStream(name), "ISO-8859-1");
            this.stream(outputStreamWriter, b);
            outputStreamWriter.flush();
            outputStreamWriter.close();
        }
        catch (SVGGraphics2DIOException ex) {
            throw ex;
        }
        catch (IOException ex2) {
            this.generatorCtx.errorHandler.handleError(new SVGGraphics2DIOException(ex2));
        }
    }
    
    public void stream(final Writer writer) throws SVGGraphics2DIOException {
        this.stream(writer, false);
    }
    
    public void stream(final Writer writer, final boolean b, final boolean b2) throws SVGGraphics2DIOException {
        this.stream(this.getRoot(), writer, b, b2);
    }
    
    public void stream(final Writer writer, final boolean b) throws SVGGraphics2DIOException {
        this.stream(this.getRoot(), writer, b, false);
    }
    
    public void stream(final Element element, final Writer writer) throws SVGGraphics2DIOException {
        this.stream(element, writer, false, false);
    }
    
    public void stream(final Element element, final Writer writer, final boolean b, final boolean b2) throws SVGGraphics2DIOException {
        final Node parentNode = element.getParentNode();
        final Node nextSibling = element.getNextSibling();
        try {
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
            final DocumentFragment documentFragment = element.getOwnerDocument().createDocumentFragment();
            documentFragment.appendChild(element);
            if (b) {
                SVGCSSStyler.style(documentFragment);
            }
            XmlWriter.writeXml(documentFragment, writer, b2);
            writer.flush();
        }
        catch (SVGGraphics2DIOException ex) {
            this.generatorCtx.errorHandler.handleError(ex);
        }
        catch (IOException ex2) {
            this.generatorCtx.errorHandler.handleError(new SVGGraphics2DIOException(ex2));
        }
        finally {
            if (parentNode != null) {
                if (nextSibling == null) {
                    parentNode.appendChild(element);
                }
                else {
                    parentNode.insertBefore(element, nextSibling);
                }
            }
        }
    }
    
    public List getDefinitionSet() {
        return this.domTreeManager.getDefinitionSet();
    }
    
    public Element getTopLevelGroup() {
        return this.getTopLevelGroup(true);
    }
    
    public Element getTopLevelGroup(final boolean b) {
        return this.domTreeManager.getTopLevelGroup(b);
    }
    
    public void setTopLevelGroup(final Element topLevelGroup) {
        this.domTreeManager.setTopLevelGroup(topLevelGroup);
    }
    
    public Element getRoot() {
        return this.getRoot(null);
    }
    
    public Element getRoot(Element root) {
        root = this.domTreeManager.getRoot(root);
        if (this.svgCanvasSize != null) {
            root.setAttributeNS(null, "width", String.valueOf(this.svgCanvasSize.width));
            root.setAttributeNS(null, "height", String.valueOf(this.svgCanvasSize.height));
        }
        return root;
    }
    
    public Graphics create() {
        return new SVGGraphics2D(this);
    }
    
    public void setXORMode(final Color color) {
        this.generatorCtx.errorHandler.handleError(new SVGGraphics2DRuntimeException("XOR Mode is not supported by Graphics2D SVG Generator"));
    }
    
    public FontMetrics getFontMetrics(final Font font) {
        return this.fmg.getFontMetrics(font);
    }
    
    public void copyArea(final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
    }
    
    public boolean drawImage(final Image image, final int n, final int n2, final ImageObserver imageObserver) {
        final Element element = this.getGenericImageHandler().createElement(this.getGeneratorContext());
        final AffineTransform handleImage = this.getGenericImageHandler().handleImage(image, element, n, n2, image.getWidth(null), image.getHeight(null), this.getGeneratorContext());
        if (handleImage == null) {
            this.domGroupManager.addElement(element);
        }
        else {
            AffineTransform inverse;
            try {
                inverse = handleImage.createInverse();
            }
            catch (NoninvertibleTransformException ex) {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            this.gc.transform(handleImage);
            this.domGroupManager.addElement(element);
            this.gc.transform(inverse);
        }
        return true;
    }
    
    public boolean drawImage(final Image image, final int n, final int n2, final int n3, final int n4, final ImageObserver imageObserver) {
        final Element element = this.getGenericImageHandler().createElement(this.getGeneratorContext());
        final AffineTransform handleImage = this.getGenericImageHandler().handleImage(image, element, n, n2, n3, n4, this.getGeneratorContext());
        if (handleImage == null) {
            this.domGroupManager.addElement(element);
        }
        else {
            AffineTransform inverse;
            try {
                inverse = handleImage.createInverse();
            }
            catch (NoninvertibleTransformException ex) {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            this.gc.transform(handleImage);
            this.domGroupManager.addElement(element);
            this.gc.transform(inverse);
        }
        return true;
    }
    
    public void dispose() {
        this.domTreeManager.removeGroupManager(this.domGroupManager);
    }
    
    public void draw(final Shape shape) {
        final Stroke stroke = this.gc.getStroke();
        if (stroke instanceof BasicStroke) {
            final Element svg = this.shapeConverter.toSVG(shape);
            if (svg != null) {
                this.domGroupManager.addElement(svg, (short)1);
            }
        }
        else {
            this.fill(stroke.createStrokedShape(shape));
        }
    }
    
    public boolean drawImage(final Image image, final AffineTransform affineTransform, final ImageObserver imageObserver) {
        boolean b;
        if (affineTransform == null) {
            b = this.drawImage(image, 0, 0, null);
        }
        else if (affineTransform.getDeterminant() != 0.0) {
            AffineTransform inverse;
            try {
                inverse = affineTransform.createInverse();
            }
            catch (NoninvertibleTransformException ex) {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            this.gc.transform(affineTransform);
            b = this.drawImage(image, 0, 0, null);
            this.gc.transform(inverse);
        }
        else {
            final AffineTransform transform = new AffineTransform(this.gc.getTransform());
            this.gc.transform(affineTransform);
            b = this.drawImage(image, 0, 0, null);
            this.gc.setTransform(transform);
        }
        return b;
    }
    
    public void drawImage(BufferedImage filter, final BufferedImageOp bufferedImageOp, final int n, final int n2) {
        filter = bufferedImageOp.filter(filter, null);
        this.drawImage(filter, n, n2, null);
    }
    
    public void drawRenderedImage(final RenderedImage renderedImage, final AffineTransform tx) {
        final Element element = this.getGenericImageHandler().createElement(this.getGeneratorContext());
        final AffineTransform handleImage = this.getGenericImageHandler().handleImage(renderedImage, element, renderedImage.getMinX(), renderedImage.getMinY(), renderedImage.getWidth(), renderedImage.getHeight(), this.getGeneratorContext());
        AffineTransform affineTransform;
        if (tx == null) {
            affineTransform = handleImage;
        }
        else if (handleImage == null) {
            affineTransform = tx;
        }
        else {
            affineTransform = new AffineTransform(tx);
            affineTransform.concatenate(handleImage);
        }
        if (affineTransform == null) {
            this.domGroupManager.addElement(element);
        }
        else if (affineTransform.getDeterminant() != 0.0) {
            AffineTransform inverse;
            try {
                inverse = affineTransform.createInverse();
            }
            catch (NoninvertibleTransformException ex) {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            this.gc.transform(affineTransform);
            this.domGroupManager.addElement(element);
            this.gc.transform(inverse);
        }
        else {
            final AffineTransform transform = new AffineTransform(this.gc.getTransform());
            this.gc.transform(affineTransform);
            this.domGroupManager.addElement(element);
            this.gc.setTransform(transform);
        }
    }
    
    public void drawRenderableImage(final RenderableImage renderableImage, final AffineTransform tx) {
        final Element element = this.getGenericImageHandler().createElement(this.getGeneratorContext());
        final AffineTransform handleImage = this.getGenericImageHandler().handleImage(renderableImage, element, renderableImage.getMinX(), renderableImage.getMinY(), renderableImage.getWidth(), renderableImage.getHeight(), this.getGeneratorContext());
        AffineTransform affineTransform;
        if (tx == null) {
            affineTransform = handleImage;
        }
        else if (handleImage == null) {
            affineTransform = tx;
        }
        else {
            affineTransform = new AffineTransform(tx);
            affineTransform.concatenate(handleImage);
        }
        if (affineTransform == null) {
            this.domGroupManager.addElement(element);
        }
        else if (affineTransform.getDeterminant() != 0.0) {
            AffineTransform inverse;
            try {
                inverse = affineTransform.createInverse();
            }
            catch (NoninvertibleTransformException ex) {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            this.gc.transform(affineTransform);
            this.domGroupManager.addElement(element);
            this.gc.transform(inverse);
        }
        else {
            final AffineTransform transform = new AffineTransform(this.gc.getTransform());
            this.gc.transform(affineTransform);
            this.domGroupManager.addElement(element);
            this.gc.setTransform(transform);
        }
    }
    
    public void drawString(final String str, final float n, final float n2) {
        if (this.textAsShapes) {
            this.drawGlyphVector(this.getFont().createGlyphVector(this.getFontRenderContext(), str), n, n2);
            return;
        }
        if (this.generatorCtx.svgFont) {
            this.domTreeManager.gcConverter.getFontConverter().recordFontUsage(str, this.getFont());
        }
        final AffineTransform transform = this.getTransform();
        final AffineTransform transformText = this.transformText(n, n2);
        final Element elementNS = this.getDOMFactory().createElementNS("http://www.w3.org/2000/svg", "text");
        elementNS.setAttributeNS(null, "x", this.generatorCtx.doubleString(n));
        elementNS.setAttributeNS(null, "y", this.generatorCtx.doubleString(n2));
        elementNS.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        elementNS.appendChild(this.getDOMFactory().createTextNode(str));
        this.domGroupManager.addElement(elementNS, (short)16);
        if (transformText != null) {
            this.setTransform(transform);
        }
    }
    
    private AffineTransform transformText(final float n, final float n2) {
        AffineTransform transform = null;
        final Font font = this.getFont();
        if (font != null) {
            transform = font.getTransform();
            if (transform != null && !transform.isIdentity()) {
                final AffineTransform affineTransform = new AffineTransform();
                affineTransform.translate(n, n2);
                affineTransform.concatenate(transform);
                affineTransform.translate(-n, -n2);
                this.transform(affineTransform);
            }
            else {
                transform = null;
            }
        }
        return transform;
    }
    
    public void drawString(final AttributedCharacterIterator textElementFill, final float x, final float y) {
        if (this.textAsShapes || this.usesUnsupportedAttributes(textElementFill)) {
            new TextLayout(textElementFill, this.getFontRenderContext()).draw(this, x, y);
            return;
        }
        boolean b = false;
        if (textElementFill.getRunLimit() < textElementFill.getEndIndex()) {
            b = true;
        }
        final Element elementNS = this.getDOMFactory().createElementNS("http://www.w3.org/2000/svg", "text");
        elementNS.setAttributeNS(null, "x", this.generatorCtx.doubleString(x));
        elementNS.setAttributeNS(null, "y", this.generatorCtx.doubleString(y));
        elementNS.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        final Font font = this.getFont();
        final Paint paint = this.getPaint();
        char c = textElementFill.first();
        this.setTextElementFill(textElementFill);
        this.setTextFontAttributes(textElementFill, font);
        final SVGGraphicContext svg = this.domTreeManager.getGraphicContextConverter().toSVG(this.gc);
        this.domGroupManager.addElement(elementNS, (short)16);
        svg.getContext().put("stroke", "none");
        svg.getGroupContext().put("stroke", "none");
        int n = 1;
        final AffineTransform transform = this.getTransform();
        AffineTransform transformText = null;
        while (c != '\uffff') {
            Element elementNS2 = elementNS;
            if (b) {
                elementNS2 = this.getDOMFactory().createElementNS("http://www.w3.org/2000/svg", "tspan");
                elementNS.appendChild(elementNS2);
            }
            this.setTextElementFill(textElementFill);
            final boolean setTextFontAttributes = this.setTextFontAttributes(textElementFill, font);
            if (setTextFontAttributes || n != 0) {
                transformText = this.transformText(x, y);
                n = 0;
            }
            final int index = textElementFill.getIndex();
            final int n2 = textElementFill.getRunLimit() - 1;
            final StringBuffer sb = new StringBuffer(n2 - index);
            sb.append(c);
            for (int i = index; i < n2; ++i) {
                sb.append(textElementFill.next());
            }
            final String string = sb.toString();
            if (this.generatorCtx.isEmbeddedFontsOn()) {
                this.getDOMTreeManager().getGraphicContextConverter().getFontConverter().recordFontUsage(string, this.getFont());
            }
            final SVGGraphicContext svg2 = this.domTreeManager.gcConverter.toSVG(this.gc);
            svg2.getGroupContext().put("stroke", "none");
            final SVGGraphicContext processDeltaGC = DOMGroupManager.processDeltaGC(svg2, svg);
            this.setTextElementAttributes(processDeltaGC, textElementFill);
            this.domTreeManager.getStyleHandler().setStyle(elementNS2, processDeltaGC.getContext(), this.domTreeManager.getGeneratorContext());
            elementNS2.appendChild(this.getDOMFactory().createTextNode(string));
            if ((setTextFontAttributes || n != 0) && transformText != null) {
                this.setTransform(transform);
            }
            c = textElementFill.next();
        }
        this.setFont(font);
        this.setPaint(paint);
    }
    
    public void fill(final Shape shape) {
        final Element svg = this.shapeConverter.toSVG(shape);
        if (svg != null) {
            this.domGroupManager.addElement(svg, (short)16);
        }
    }
    
    private boolean setTextFontAttributes(final AttributedCharacterIterator attributedCharacterIterator, final Font font) {
        boolean b = false;
        if (attributedCharacterIterator.getAttribute(TextAttribute.FONT) != null || attributedCharacterIterator.getAttribute(TextAttribute.FAMILY) != null || attributedCharacterIterator.getAttribute(TextAttribute.WEIGHT) != null || attributedCharacterIterator.getAttribute(TextAttribute.POSTURE) != null || attributedCharacterIterator.getAttribute(TextAttribute.SIZE) != null) {
            this.setFont(font.deriveFont(attributedCharacterIterator.getAttributes()));
            b = true;
        }
        return b;
    }
    
    private void setTextElementFill(final AttributedCharacterIterator attributedCharacterIterator) {
        if (attributedCharacterIterator.getAttribute(TextAttribute.FOREGROUND) != null) {
            this.setPaint((Paint)attributedCharacterIterator.getAttribute(TextAttribute.FOREGROUND));
        }
    }
    
    private void setTextElementAttributes(final SVGGraphicContext svgGraphicContext, final AttributedCharacterIterator attributedCharacterIterator) {
        String s = "";
        if (this.isUnderline(attributedCharacterIterator)) {
            s += "underline ";
        }
        if (this.isStrikeThrough(attributedCharacterIterator)) {
            s += "line-through ";
        }
        final int length = s.length();
        if (length != 0) {
            svgGraphicContext.getContext().put("text-decoration", s.substring(0, length - 1));
        }
    }
    
    private boolean isBold(final AttributedCharacterIterator attributedCharacterIterator) {
        final Object attribute = attributedCharacterIterator.getAttribute(TextAttribute.WEIGHT);
        return attribute != null && !attribute.equals(TextAttribute.WEIGHT_REGULAR) && !attribute.equals(TextAttribute.WEIGHT_DEMILIGHT) && !attribute.equals(TextAttribute.WEIGHT_EXTRA_LIGHT) && !attribute.equals(TextAttribute.WEIGHT_LIGHT);
    }
    
    private boolean isItalic(final AttributedCharacterIterator attributedCharacterIterator) {
        return TextAttribute.POSTURE_OBLIQUE.equals(attributedCharacterIterator.getAttribute(TextAttribute.POSTURE));
    }
    
    private boolean isUnderline(final AttributedCharacterIterator attributedCharacterIterator) {
        return TextAttribute.UNDERLINE_ON.equals(attributedCharacterIterator.getAttribute(TextAttribute.UNDERLINE));
    }
    
    private boolean isStrikeThrough(final AttributedCharacterIterator attributedCharacterIterator) {
        return TextAttribute.STRIKETHROUGH_ON.equals(attributedCharacterIterator.getAttribute(TextAttribute.STRIKETHROUGH));
    }
    
    public GraphicsConfiguration getDeviceConfiguration() {
        return null;
    }
    
    public void setUnsupportedAttributes(final Set c) {
        if (c == null) {
            this.unsupportedAttributes = null;
        }
        else {
            this.unsupportedAttributes = new HashSet(c);
        }
    }
    
    public boolean usesUnsupportedAttributes(final AttributedCharacterIterator attributedCharacterIterator) {
        if (this.unsupportedAttributes == null) {
            return false;
        }
        final Iterator<AttributedCharacterIterator.Attribute> iterator = attributedCharacterIterator.getAllAttributeKeys().iterator();
        while (iterator.hasNext()) {
            if (this.unsupportedAttributes.contains(iterator.next())) {
                return true;
            }
        }
        return false;
    }
}
