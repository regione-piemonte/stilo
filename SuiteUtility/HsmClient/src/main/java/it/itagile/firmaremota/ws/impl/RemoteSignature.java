
package it.itagile.firmaremota.ws.impl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import it.itagile.firmaremota.ws.CertificateStatus;
import it.itagile.firmaremota.ws.ObjectFactory;
import it.itagile.firmaremota.ws.RemoteSignatureCredentials;
import it.itagile.firmaremota.ws.RemoteSignatureXadesParams;
import it.itagile.firmaremota.ws.SignatureDocumentInfo;
import it.itagile.firmaremota.ws.SignatureFlags;
import it.itagile.firmaremota.ws.SignatureImage;
import it.itagile.firmaremota.ws.SignatureStatus;
import it.itagile.firmaremota.ws.UserInfo;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "RemoteSignature", targetNamespace = "http://ws.firmaremota.itagile.it")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface RemoteSignature {


    /**
     * 
     * @param cred
     * @param userid
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteUser", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DeleteUser")
    @ResponseWrapper(localName = "deleteUserResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DeleteUserResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/deleteUserRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/deleteUserResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/deleteUser/Fault/RemoteSignatureException_Exception")
    })
    public void deleteUser(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "userid", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userid)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param sessionToken
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(name = "closeSignatureSessionReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "closeSignatureSession", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.CloseSignatureSession")
    @ResponseWrapper(localName = "closeSignatureSessionResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.CloseSignatureSessionResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/closeSignatureSessionRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/closeSignatureSessionResponse")
    public String closeSignatureSession(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "sessionToken", targetNamespace = "http://ws.firmaremota.itagile.it")
        String sessionToken);

    /**
     * 
     * @param cred
     * @return
     *     returns java.lang.String
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "openSignatureSessionReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "openSignatureSession", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.OpenSignatureSession")
    @ResponseWrapper(localName = "openSignatureSessionResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.OpenSignatureSessionResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/openSignatureSessionRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/openSignatureSessionResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/openSignatureSession/Fault/RemoteSignatureException_Exception")
    })
    public String openSignatureSession(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param reason
     * @param fieldName
     * @param dateFormat
     * @param digestType
     * @param flags
     * @param userName
     * @param content
     * @param contentInAttachments
     * @param x
     * @param width
     * @param y
     * @param location
     * @param fontSize
     * @param page
     * @param text
     * @param x509Certificate
     * @param height
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signPDFReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signPDF", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPDF")
    @ResponseWrapper(localName = "signPDFResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPDFResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signPDFRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signPDFResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signPDF/Fault/RemoteSignatureException_Exception")
    })
    public byte[] signPDF(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "content", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] content,
        @WebParam(name = "contentInAttachments", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean contentInAttachments,
        @WebParam(name = "digestType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestType,
        @WebParam(name = "X509certificate", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] x509Certificate,
        @WebParam(name = "flags", targetNamespace = "http://ws.firmaremota.itagile.it")
        SignatureFlags flags,
        @WebParam(name = "fieldName", targetNamespace = "http://ws.firmaremota.itagile.it")
        String fieldName,
        @WebParam(name = "page", targetNamespace = "http://ws.firmaremota.itagile.it")
        int page,
        @WebParam(name = "x", targetNamespace = "http://ws.firmaremota.itagile.it")
        int x,
        @WebParam(name = "y", targetNamespace = "http://ws.firmaremota.itagile.it")
        int y,
        @WebParam(name = "width", targetNamespace = "http://ws.firmaremota.itagile.it")
        int width,
        @WebParam(name = "height", targetNamespace = "http://ws.firmaremota.itagile.it")
        int height,
        @WebParam(name = "userName", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userName,
        @WebParam(name = "reason", targetNamespace = "http://ws.firmaremota.itagile.it")
        String reason,
        @WebParam(name = "location", targetNamespace = "http://ws.firmaremota.itagile.it")
        String location,
        @WebParam(name = "dateFormat", targetNamespace = "http://ws.firmaremota.itagile.it")
        String dateFormat,
        @WebParam(name = "text", targetNamespace = "http://ws.firmaremota.itagile.it")
        String text,
        @WebParam(name = "fontSize", targetNamespace = "http://ws.firmaremota.itagile.it")
        int fontSize)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param signatureCred
     * @param digestType
     * @param flags
     * @param x509Certificate
     * @param content
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signCAdESReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signCAdES", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignCAdES")
    @ResponseWrapper(localName = "signCAdESResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignCAdESResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signCAdESRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signCAdESResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signCAdES/Fault/RemoteSignatureException_Exception")
    })
    public byte[] signCAdES(
        @WebParam(name = "signatureCred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials signatureCred,
        @WebParam(name = "content", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] content,
        @WebParam(name = "digestType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestType,
        @WebParam(name = "X509certificate", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] x509Certificate,
        @WebParam(name = "flags", targetNamespace = "http://ws.firmaremota.itagile.it")
        SignatureFlags flags)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param extractX509
     * @param verifySignatures
     * @param extractContent
     * @param extractOriginal
     * @param signedDocument
     * @return
     *     returns it.itagile.firmaremota.ws.SignatureDocumentInfo
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod(operationName = "documentP7mInfo")
    @WebResult(name = "documentP7mInfoReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "documentP7mInfo", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DocumentP7MInfo")
    @ResponseWrapper(localName = "documentP7mInfoResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DocumentP7MInfoResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/documentP7mInfoRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/documentP7mInfoResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/documentP7mInfo/Fault/RemoteSignatureException_Exception")
    })
    public SignatureDocumentInfo documentP7MInfo(
        @WebParam(name = "signedDocument", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] signedDocument,
        @WebParam(name = "verifySignatures", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean verifySignatures,
        @WebParam(name = "extractContent", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractContent,
        @WebParam(name = "extractOriginal", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractOriginal,
        @WebParam(name = "extractX509", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractX509)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param docsInAttachment
     * @param mimeType
     * @param signedDocument
     * @return
     *     returns java.util.List<it.itagile.firmaremota.ws.SignatureStatus>
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "verifySignaturesReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "verifySignatures", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.VerifySignatures")
    @ResponseWrapper(localName = "verifySignaturesResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.VerifySignaturesResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/verifySignaturesRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/verifySignaturesResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/verifySignatures/Fault/RemoteSignatureException_Exception")
    })
    public List<SignatureStatus> verifySignatures(
        @WebParam(name = "signedDocument", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] signedDocument,
        @WebParam(name = "docsInAttachment", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean docsInAttachment,
        @WebParam(name = "mimeType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String mimeType)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param extractX509
     * @param verifySignatures
     * @param extractFields
     * @param signedDocument
     * @return
     *     returns it.itagile.firmaremota.ws.SignatureDocumentInfo
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "documentPdfInfoReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "documentPdfInfo", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DocumentPdfInfo")
    @ResponseWrapper(localName = "documentPdfInfoResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DocumentPdfInfoResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/documentPdfInfoRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/documentPdfInfoResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/documentPdfInfo/Fault/RemoteSignatureException_Exception")
    })
    public SignatureDocumentInfo documentPdfInfo(
        @WebParam(name = "signedDocument", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] signedDocument,
        @WebParam(name = "verifySignatures", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean verifySignatures,
        @WebParam(name = "extractFields", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractFields,
        @WebParam(name = "extractX509", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractX509)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param extractX509
     * @param verifySignatures
     * @param extractContent
     * @param signedDocument
     * @return
     *     returns it.itagile.firmaremota.ws.SignatureDocumentInfo
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "documentXadesInfoReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "documentXadesInfo", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DocumentXadesInfo")
    @ResponseWrapper(localName = "documentXadesInfoResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DocumentXadesInfoResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/documentXadesInfoRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/documentXadesInfoResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/documentXadesInfo/Fault/RemoteSignatureException_Exception")
    })
    public SignatureDocumentInfo documentXadesInfo(
        @WebParam(name = "signedDocument", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] signedDocument,
        @WebParam(name = "verifySignatures", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean verifySignatures,
        @WebParam(name = "extractContent", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractContent,
        @WebParam(name = "extractX509", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean extractX509)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param x509Cert
     * @return
     *     returns java.util.List<it.itagile.firmaremota.ws.CertificateStatus>
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "verifyCertificateReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "verifyCertificate", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.VerifyCertificate")
    @ResponseWrapper(localName = "verifyCertificateResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.VerifyCertificateResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/verifyCertificateRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/verifyCertificateResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/verifyCertificate/Fault/RemoteSignatureException_Exception")
    })
    public List<CertificateStatus> verifyCertificate(
        @WebParam(name = "X509Cert", targetNamespace = "http://ws.firmaremota.itagile.it")
        List<byte[]> x509Cert)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param certBuf
     * @param checkTime
     * @return
     *     returns it.itagile.firmaremota.ws.CertificateStatus
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "verifyCertificateAtTimeReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "verifyCertificateAtTime", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.VerifyCertificateAtTime")
    @ResponseWrapper(localName = "verifyCertificateAtTimeResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.VerifyCertificateAtTimeResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/verifyCertificateAtTimeRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/verifyCertificateAtTimeResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/verifyCertificateAtTime/Fault/RemoteSignatureException_Exception")
    })
    public CertificateStatus verifyCertificateAtTime(
        @WebParam(name = "certBuf", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] certBuf,
        @WebParam(name = "checkTime", targetNamespace = "http://ws.firmaremota.itagile.it")
        XMLGregorianCalendar checkTime)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param digestType
     * @param digest
     * @param x509Certificate
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signPKCS1Return", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signPKCS1", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPKCS1")
    @ResponseWrapper(localName = "signPKCS1Response", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPKCS1Response")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signPKCS1Request", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signPKCS1Response", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signPKCS1/Fault/RemoteSignatureException_Exception")
    })
    public byte[] signPKCS1(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "digest", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] digest,
        @WebParam(name = "digestType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestType,
        @WebParam(name = "X509certificate", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] x509Certificate)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param digestType
     * @param digest
     * @param x509Certificate
     * @return
     *     returns java.util.List<byte[]>
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signPKCS1ArrayReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signPKCS1Array", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPKCS1Array")
    @ResponseWrapper(localName = "signPKCS1ArrayResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPKCS1ArrayResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signPKCS1ArrayRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signPKCS1ArrayResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signPKCS1Array/Fault/RemoteSignatureException_Exception")
    })
    public List<byte[]> signPKCS1Array(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "digest", targetNamespace = "http://ws.firmaremota.itagile.it")
        List<byte[]> digest,
        @WebParam(name = "digestType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestType,
        @WebParam(name = "X509certificate", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] x509Certificate)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param digestAlg
     * @param contentInAttachment
     * @param content
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "timestampAttachedReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "timestampAttached", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampAttached")
    @ResponseWrapper(localName = "timestampAttachedResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampAttachedResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampAttachedRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampAttachedResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampAttached/Fault/RemoteSignatureException_Exception")
    })
    public byte[] timestampAttached(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "content", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] content,
        @WebParam(name = "contentInAttachment", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean contentInAttachment,
        @WebParam(name = "digestAlg", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestAlg)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param digestAlg
     * @param digest
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "timestampDetachedReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "timestampDetached", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampDetached")
    @ResponseWrapper(localName = "timestampDetachedResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampDetachedResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampDetachedRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampDetachedResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampDetached/Fault/RemoteSignatureException_Exception")
    })
    public byte[] timestampDetached(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "digest", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] digest,
        @WebParam(name = "digestAlg", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestAlg)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param digestAlg
     * @param digest
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "timestampTokenReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "timestampToken", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampToken")
    @ResponseWrapper(localName = "timestampTokenResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampTokenResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampTokenRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampTokenResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampToken/Fault/RemoteSignatureException_Exception")
    })
    public byte[] timestampToken(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "digest", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] digest,
        @WebParam(name = "digestAlg", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestAlg)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param timeStampRequest
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "timestampResponseReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "timestampResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampResponse")
    @ResponseWrapper(localName = "timestampResponseResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.TimestampResponseResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampResponseRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampResponseResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/timestampResponse/Fault/RemoteSignatureException_Exception")
    })
    public byte[] timestampResponse(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "timeStampRequest", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] timeStampRequest)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param moduleName
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "isModuleActiveReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "isModuleActive", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.IsModuleActive")
    @ResponseWrapper(localName = "isModuleActiveResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.IsModuleActiveResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/isModuleActiveRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/isModuleActiveResponse")
    public boolean isModuleActive(
        @WebParam(name = "moduleName", targetNamespace = "http://ws.firmaremota.itagile.it")
        String moduleName);

    /**
     * 
     * @param contentInAttachments
     * @param signatureCred
     * @param digestType
     * @param p7M
     * @param flags
     * @param x509Certificate
     * @param content
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signP7MReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signP7M", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignP7M")
    @ResponseWrapper(localName = "signP7MResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignP7MResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signP7MRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signP7MResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signP7M/Fault/RemoteSignatureException_Exception")
    })
    public byte[] signP7M(
        @WebParam(name = "signatureCred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials signatureCred,
        @WebParam(name = "content", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] content,
        @WebParam(name = "contentInAttachments", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean contentInAttachments,
        @WebParam(name = "p7m", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean p7M,
        @WebParam(name = "digestType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestType,
        @WebParam(name = "X509certificate", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] x509Certificate,
        @WebParam(name = "flags", targetNamespace = "http://ws.firmaremota.itagile.it")
        SignatureFlags flags)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param reason
     * @param fieldName
     * @param dateFormat
     * @param userName
     * @param userid
     * @param dirDest
     * @param password
     * @param domain
     * @param x
     * @param width
     * @param pinToSign
     * @param y
     * @param dirSource
     * @param location
     * @param fontSize
     * @param page
     * @param text
     * @param graphic
     * @param height
     * @return
     *     returns int
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signPDFPathReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signPDFPath", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPDFPath")
    @ResponseWrapper(localName = "signPDFPathResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignPDFPathResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signPDFPathRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signPDFPathResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signPDFPath/Fault/RemoteSignatureException_Exception")
    })
    public int signPDFPath(
        @WebParam(name = "userid", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userid,
        @WebParam(name = "password", targetNamespace = "http://ws.firmaremota.itagile.it")
        String password,
        @WebParam(name = "pinToSign", targetNamespace = "http://ws.firmaremota.itagile.it")
        String pinToSign,
        @WebParam(name = "domain", targetNamespace = "http://ws.firmaremota.itagile.it")
        String domain,
        @WebParam(name = "dirSource", targetNamespace = "http://ws.firmaremota.itagile.it")
        String dirSource,
        @WebParam(name = "dirDest", targetNamespace = "http://ws.firmaremota.itagile.it")
        String dirDest,
        @WebParam(name = "fieldName", targetNamespace = "http://ws.firmaremota.itagile.it")
        String fieldName,
        @WebParam(name = "page", targetNamespace = "http://ws.firmaremota.itagile.it")
        int page,
        @WebParam(name = "x", targetNamespace = "http://ws.firmaremota.itagile.it")
        int x,
        @WebParam(name = "y", targetNamespace = "http://ws.firmaremota.itagile.it")
        int y,
        @WebParam(name = "width", targetNamespace = "http://ws.firmaremota.itagile.it")
        int width,
        @WebParam(name = "height", targetNamespace = "http://ws.firmaremota.itagile.it")
        int height,
        @WebParam(name = "userName", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userName,
        @WebParam(name = "reason", targetNamespace = "http://ws.firmaremota.itagile.it")
        String reason,
        @WebParam(name = "location", targetNamespace = "http://ws.firmaremota.itagile.it")
        String location,
        @WebParam(name = "dateFormat", targetNamespace = "http://ws.firmaremota.itagile.it")
        String dateFormat,
        @WebParam(name = "graphic", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean graphic,
        @WebParam(name = "text", targetNamespace = "http://ws.firmaremota.itagile.it")
        String text,
        @WebParam(name = "fontSize", targetNamespace = "http://ws.firmaremota.itagile.it")
        int fontSize)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param digestType
     * @param certificate
     * @param params
     * @param content
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "signXAdESReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "signXAdES", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignXAdES")
    @ResponseWrapper(localName = "signXAdESResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SignXAdESResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/signXAdESRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/signXAdESResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/signXAdES/Fault/RemoteSignatureException_Exception")
    })
    public byte[] signXAdES(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "content", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] content,
        @WebParam(name = "digestType", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestType,
        @WebParam(name = "certificate", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] certificate,
        @WebParam(name = "params", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureXadesParams params)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @return
     *     returns java.util.List<it.itagile.firmaremota.ws.SignatureImage>
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "getUserImagesReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "getUserImages", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.GetUserImages")
    @ResponseWrapper(localName = "getUserImagesResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.GetUserImagesResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/getUserImagesRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/getUserImagesResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/getUserImages/Fault/RemoteSignatureException_Exception")
    })
    public List<SignatureImage> getUserImages(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param userImage
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @RequestWrapper(localName = "setUserImage", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SetUserImage")
    @ResponseWrapper(localName = "setUserImageResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.SetUserImageResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/setUserImageRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/setUserImageResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/setUserImage/Fault/RemoteSignatureException_Exception")
    })
    public void setUserImage(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "userImage", targetNamespace = "http://ws.firmaremota.itagile.it")
        SignatureImage userImage)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(name = "getUsersDirectoryTypeReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "getUsersDirectoryType", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.GetUsersDirectoryType")
    @ResponseWrapper(localName = "getUsersDirectoryTypeResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.GetUsersDirectoryTypeResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/getUsersDirectoryTypeRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/getUsersDirectoryTypeResponse")
    public String getUsersDirectoryType();

    /**
     * 
     * @param cred
     * @param commonName
     * @param password
     * @param userManager
     * @param userid
     * @param email
     * @param hsmManager
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @RequestWrapper(localName = "addUser", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.AddUser")
    @ResponseWrapper(localName = "addUserResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.AddUserResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/addUserRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/addUserResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/addUser/Fault/RemoteSignatureException_Exception")
    })
    public void addUser(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "userid", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userid,
        @WebParam(name = "password", targetNamespace = "http://ws.firmaremota.itagile.it")
        String password,
        @WebParam(name = "commonName", targetNamespace = "http://ws.firmaremota.itagile.it")
        String commonName,
        @WebParam(name = "email", targetNamespace = "http://ws.firmaremota.itagile.it")
        String email,
        @WebParam(name = "hsmManager", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean hsmManager,
        @WebParam(name = "userManager", targetNamespace = "http://ws.firmaremota.itagile.it")
        boolean userManager)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param newPassword
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @RequestWrapper(localName = "changePassword", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.ChangePassword")
    @ResponseWrapper(localName = "changePasswordResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.ChangePasswordResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/changePasswordRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/changePasswordResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/changePassword/Fault/RemoteSignatureException_Exception")
    })
    public void changePassword(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "newPassword", targetNamespace = "http://ws.firmaremota.itagile.it")
        String newPassword)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param newPassword
     * @param userid
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @RequestWrapper(localName = "changeUserPassword", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.ChangeUserPassword")
    @ResponseWrapper(localName = "changeUserPasswordResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.ChangeUserPasswordResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/changeUserPasswordRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/changeUserPasswordResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/changeUserPassword/Fault/RemoteSignatureException_Exception")
    })
    public void changeUserPassword(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "userid", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userid,
        @WebParam(name = "newPassword", targetNamespace = "http://ws.firmaremota.itagile.it")
        String newPassword)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param digestAlg
     * @param content
     * @return
     *     returns byte[]
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "digestReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "digest", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.Digest")
    @ResponseWrapper(localName = "digestResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.DigestResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/digestRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/digestResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/digest/Fault/RemoteSignatureException_Exception")
    })
    public byte[] digest(
        @WebParam(name = "content", targetNamespace = "http://ws.firmaremota.itagile.it")
        byte[] content,
        @WebParam(name = "digestAlg", targetNamespace = "http://ws.firmaremota.itagile.it")
        String digestAlg)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @param userid
     * @return
     *     returns it.itagile.firmaremota.ws.UserInfo
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "findUserReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "findUser", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.FindUser")
    @ResponseWrapper(localName = "findUserResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.FindUserResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/findUserRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/findUserResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/findUser/Fault/RemoteSignatureException_Exception")
    })
    public UserInfo findUser(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred,
        @WebParam(name = "userid", targetNamespace = "http://ws.firmaremota.itagile.it")
        String userid)
        throws RemoteSignatureExceptionException
    ;

    /**
     * 
     * @param cred
     * @return
     *     returns java.util.List<byte[]>
     * @throws RemoteSignatureExceptionException
     */
    @WebMethod
    @WebResult(name = "getCertificatesReturn", targetNamespace = "http://ws.firmaremota.itagile.it")
    @RequestWrapper(localName = "getCertificates", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.GetCertificates")
    @ResponseWrapper(localName = "getCertificatesResponse", targetNamespace = "http://ws.firmaremota.itagile.it", className = "it.itagile.firmaremota.ws.GetCertificatesResponse")
    @Action(input = "http://ws.firmaremota.itagile.it/RemoteSignature/getCertificatesRequest", output = "http://ws.firmaremota.itagile.it/RemoteSignature/getCertificatesResponse", fault = {
        @FaultAction(className = RemoteSignatureExceptionException.class, value = "http://ws.firmaremota.itagile.it/RemoteSignature/getCertificates/Fault/RemoteSignatureException_Exception")
    })
    public List<byte[]> getCertificates(
        @WebParam(name = "cred", targetNamespace = "http://ws.firmaremota.itagile.it")
        RemoteSignatureCredentials cred)
        throws RemoteSignatureExceptionException
    ;

}
