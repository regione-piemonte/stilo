
package com.opentext.livelink.service.authentication;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Authentication", targetNamespace = "urn:Core.service.livelink.opentext.com")
public class Authentication_Service
    extends Service
{

    private final static QName AUTHENTICATION_QNAME = new QName("urn:Core.service.livelink.opentext.com", "Authentication");

    public Authentication_Service(URL wsdlLocation) {
        super(wsdlLocation, AUTHENTICATION_QNAME);
    }

    public Authentication_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, AUTHENTICATION_QNAME, features);
    }

    public Authentication_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Authentication_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns Authentication
     */
    @WebEndpoint(name = "BasicHttpBinding_Authentication")
    public Authentication getBasicHttpBindingAuthentication(String endpoint) {
       	Authentication port = super.getPort(new QName("urn:Core.service.livelink.opentext.com", "BasicHttpBinding_Authentication"), Authentication.class);
    	Map<String, Object> requestContext = ((BindingProvider) port).getRequestContext();
    	requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpoint);
    	return port;
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Authentication
     */
    @WebEndpoint(name = "BasicHttpBinding_Authentication")
    public Authentication getBasicHttpBindingAuthentication(String endpoint,WebServiceFeature... features) {
       	Authentication port = super.getPort(new QName("urn:Core.service.livelink.opentext.com", "BasicHttpBinding_Authentication"), Authentication.class, features);
    	Map<String, Object> requestContext = ((BindingProvider) port).getRequestContext();
    	requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpoint);
    	return port;
    }

}
